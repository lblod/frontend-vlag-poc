{"version":3,"file":"index.js","sources":["../../../node_modules/.pnpm/@babel+runtime@7.22.5/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js","../../../node_modules/.pnpm/@babel+runtime@7.22.5/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js","../src/-private/future.ts","../src/-private/context.ts","../src/-private/debug.ts","../src/-private/utils.ts","../src/-private/manager.ts"],"sourcesContent":["export default function _classPrivateFieldBase(receiver, privateKey) {\n  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n    throw new TypeError(\"attempted to use private field on non-instance\");\n  }\n  return receiver;\n}","var id = 0;\nexport default function _classPrivateFieldKey(name) {\n  return \"__private_\" + id++ + \"_\" + name;\n}","import { StructuredDocument } from '@ember-data/types/cache/document';\n\nimport type { ContextOwner } from './context';\nimport type { Deferred, DeferredFuture, Future } from './types';\n\nconst IS_FUTURE = Symbol('IS_FUTURE');\n\nexport function isFuture<T>(maybe: T | Future<T> | Promise<T>): maybe is Future<T> {\n  return maybe[IS_FUTURE] === true;\n}\n\nexport function createDeferred<T>(): Deferred<T> {\n  let resolve!: (v: T) => void;\n  let reject!: (v: unknown) => void;\n  let promise = new Promise<T>((res, rej) => {\n    resolve = res;\n    reject = rej;\n  });\n  return { resolve, reject, promise };\n}\n\nexport function upgradePromise<T>(promise: Promise<StructuredDocument<T>>, future: Future<T>): Future<T> {\n  (promise as Future<T>)[IS_FUTURE] = true;\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  (promise as Future<T>).getStream = future.getStream;\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  (promise as Future<T>).abort = future.abort;\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  (promise as Future<T>).onFinalize = future.onFinalize;\n\n  return promise as Future<T>;\n}\n\nexport function createFuture<T>(owner: ContextOwner): DeferredFuture<T> {\n  const deferred = createDeferred<T>() as unknown as DeferredFuture<T>;\n  let { promise } = deferred;\n  let cbs: Array<() => void> | undefined;\n  promise = promise.finally(() => {\n    owner.resolveStream();\n    if (cbs) {\n      cbs.forEach((cb) => cb());\n    }\n  }) as Future<T>;\n  promise.onFinalize = (fn: () => void) => {\n    cbs = cbs || [];\n    cbs.push(fn);\n  };\n  promise[IS_FUTURE] = true;\n  promise.getStream = () => {\n    return owner.getStream();\n  };\n  promise.abort = (reason?: string) => {\n    owner.abort(enhanceReason(reason));\n  };\n  deferred.promise = promise;\n  return deferred;\n}\n\nfunction enhanceReason(reason?: string) {\n  return new DOMException(reason || 'The user aborted a request.', 'AbortError');\n}\n","import { DEBUG } from '@ember-data/env';\n\nimport { deepFreeze } from './debug';\nimport { createDeferred } from './future';\nimport type { Deferred, GodContext, ImmutableHeaders, ImmutableRequestInfo, RequestInfo, ResponseInfo } from './types';\n\nexport class ContextOwner {\n  hasSetStream = false;\n  hasSetResponse = false;\n  hasSubscribers = false;\n  stream: Deferred<ReadableStream | null> = createDeferred<ReadableStream | null>();\n  response: ResponseInfo | null = null;\n  declare request: ImmutableRequestInfo;\n  declare enhancedRequest: ImmutableRequestInfo;\n  nextCalled: number = 0;\n  declare god: GodContext;\n  declare controller: AbortController;\n  declare requestId: number;\n\n  constructor(request: RequestInfo, god: GodContext) {\n    this.requestId = god.id;\n    this.controller = request.controller || god.controller;\n    if (request.controller) {\n      if (request.controller !== god.controller) {\n        god.controller.signal.addEventListener('abort', () => {\n          this.controller.abort(god.controller.signal.reason);\n        });\n      }\n      delete request.controller;\n    }\n    let enhancedRequest: ImmutableRequestInfo = Object.assign(\n      { signal: this.controller.signal },\n      request\n    ) as ImmutableRequestInfo;\n    if (DEBUG) {\n      if (!request?.cacheOptions?.[Symbol.for('ember-data:skip-cache')]) {\n        request = deepFreeze(request) as ImmutableRequestInfo;\n        enhancedRequest = deepFreeze(enhancedRequest);\n      }\n    } else {\n      if (request.headers) {\n        (request.headers as ImmutableHeaders).clone = () => {\n          return new Headers([...request.headers!.entries()]);\n        };\n        (request.headers as ImmutableHeaders).toJSON = () => {\n          return [...request.headers!.entries()];\n        };\n      }\n    }\n    this.enhancedRequest = enhancedRequest;\n    this.request = request as ImmutableRequestInfo;\n    this.god = god;\n    this.stream.promise = this.stream.promise.then((stream: ReadableStream | null) => {\n      if (this.god.stream === stream && this.hasSubscribers) {\n        this.god.stream = null;\n      }\n      return stream;\n    });\n  }\n\n  getResponse(): ResponseInfo | null {\n    if (this.hasSetResponse) {\n      return this.response;\n    }\n    if (this.nextCalled === 1) {\n      return this.god.response;\n    }\n    return null;\n  }\n  getStream(): Promise<ReadableStream | null> {\n    this.hasSubscribers = true;\n    return this.stream.promise;\n  }\n  abort(reason: DOMException) {\n    this.controller.abort(reason);\n  }\n\n  setStream(stream: ReadableStream | Promise<ReadableStream | null> | null) {\n    if (!this.hasSetStream) {\n      this.hasSetStream = true;\n\n      if (!(stream instanceof Promise)) {\n        this.god.stream = stream;\n      }\n      // @ts-expect-error\n      this.stream.resolve(stream);\n    }\n  }\n\n  resolveStream() {\n    this.setStream(this.nextCalled === 1 ? this.god.stream : null);\n  }\n\n  setResponse(response: ResponseInfo | Response | null) {\n    if (this.hasSetResponse) {\n      if (DEBUG) {\n        throw new Error(`Cannot setResponse when a response has already been set`);\n      }\n      return;\n    }\n    this.hasSetResponse = true;\n    if (response instanceof Response) {\n      const { headers, ok, redirected, status, statusText, type, url } = response;\n      (headers as ImmutableHeaders).clone = () => {\n        return new Headers([...headers.entries()]);\n      };\n      (headers as ImmutableHeaders).toJSON = () => {\n        return [...headers.entries()];\n      };\n      let responseData: ResponseInfo = {\n        headers: headers as ImmutableHeaders,\n        ok,\n        redirected,\n        status,\n        statusText,\n        type,\n        url,\n      };\n      if (DEBUG) {\n        responseData = deepFreeze(responseData);\n      }\n      this.response = responseData;\n      this.god.response = responseData;\n    } else {\n      this.response = response;\n      this.god.response = response;\n    }\n  }\n}\n\nexport class Context {\n  #owner: ContextOwner;\n  declare request: ImmutableRequestInfo;\n  declare id: number;\n\n  constructor(owner: ContextOwner) {\n    this.id = owner.requestId;\n    this.#owner = owner;\n    this.request = owner.enhancedRequest;\n  }\n  setStream(stream: ReadableStream | Promise<ReadableStream | null>) {\n    this.#owner.setStream(stream);\n  }\n  setResponse(response: ResponseInfo | Response | null) {\n    this.#owner.setResponse(response);\n  }\n}\nexport type HandlerRequestContext = Context;\n","import { DEBUG } from '@ember-data/env';\n\nimport { Context } from './context';\nimport type { ImmutableHeaders, RequestInfo } from './types';\n\nconst BODY_TYPES = {\n  type: 'string',\n  klass: ['Blob', 'ArrayBuffer', 'TypedArray', 'DataView', 'FormData', 'URLSearchParams', 'ReadableStream'],\n};\nconst ValidKeys = new Map<string, string | string[] | typeof BODY_TYPES>([\n  ['records', 'array'],\n  ['data', 'json'],\n  ['body', BODY_TYPES],\n  ['disableTestWaiter', 'boolean'],\n  ['options', 'object'],\n  ['cacheOptions', 'object'],\n  ['op', 'string'],\n  ['store', 'object'],\n  ['url', 'string'],\n  ['cache', ['default', 'force-cache', 'no-cache', 'no-store', 'only-if-cached', 'reload']],\n  ['credentials', ['include', 'omit', 'same-origin']],\n  [\n    'destination',\n    [\n      '',\n      'object',\n      'audio',\n      'audioworklet',\n      'document',\n      'embed',\n      'font',\n      'frame',\n      'iframe',\n      'image',\n      'manifest',\n      'paintworklet',\n      'report',\n      'script',\n      'sharedworker',\n      'style',\n      'track',\n      'video',\n      'worker',\n      'xslt',\n    ],\n  ],\n  ['headers', 'headers'],\n  ['integrity', 'string'],\n  ['keepalive', 'boolean'],\n  ['method', ['GET', 'PUT', 'PATCH', 'DELETE', 'POST', 'OPTIONS']],\n  ['mode', ['same-origin', 'cors', 'navigate', 'no-cors']],\n  ['redirect', ['error', 'follow', 'manual']],\n  ['referrer', 'string'],\n  ['signal', 'AbortSignal'],\n  ['controller', 'AbortController'],\n  [\n    'referrerPolicy',\n    [\n      '',\n      'same-origin',\n      'no-referrer',\n      'no-referrer-when-downgrade',\n      'origin',\n      'origin-when-cross-origin',\n      'strict-origin',\n      'strict-origin-when-cross-origin',\n      'unsafe-url',\n    ],\n  ],\n]);\n\nconst IS_FROZEN = Symbol('FROZEN');\n\nfunction freezeHeaders(headers: Headers | ImmutableHeaders): ImmutableHeaders {\n  headers.delete =\n    headers.set =\n    headers.append =\n      () => {\n        throw new Error(`Cannot Mutate Immutatable Headers, use headers.clone to get a copy`);\n      };\n  (headers as ImmutableHeaders).clone = () => {\n    return new Headers([...headers.entries()]);\n  };\n  return headers as ImmutableHeaders;\n}\n\nexport function deepFreeze<T = unknown>(value: T): T {\n  if (value && value[IS_FROZEN]) {\n    return value;\n  }\n  const _type = typeof value;\n  switch (_type) {\n    case 'boolean':\n    case 'string':\n    case 'number':\n    case 'symbol':\n    case 'undefined':\n    case 'bigint':\n      return value;\n    case 'function':\n      throw new Error(`Cannot deep-freeze a function`);\n    case 'object': {\n      const _niceType = niceTypeOf(value);\n      switch (_niceType) {\n        case 'array': {\n          if (value[Symbol.for('Collection')]) {\n            return value;\n          }\n          const arr = (value as unknown[]).map(deepFreeze);\n          arr[IS_FROZEN] = true;\n          return Object.freeze(arr) as T;\n        }\n        case 'null':\n          return value;\n        case 'object':\n          Object.keys(value as {}).forEach((key) => {\n            try {\n              (value as {})[key] = deepFreeze((value as {})[key]) as {};\n            } catch {\n              // continue\n            }\n          });\n          value[IS_FROZEN] = true;\n          return Object.freeze(value);\n        case 'headers':\n          return freezeHeaders(value as Headers) as T;\n        case 'Collection':\n        case 'Store':\n        case 'AbortSignal':\n          return value;\n        case 'date':\n        case 'map':\n        case 'set':\n        case 'error':\n        case 'stream':\n        default:\n          // eslint-disable-next-line no-console\n          // console.log(`Cannot deep-freeze ${_niceType}`);\n          return value;\n      }\n    }\n  }\n}\n\nfunction isMaybeContext(request: unknown) {\n  if (request && typeof request === 'object') {\n    const keys = Object.keys(request);\n    if (keys.length === 1 && keys[0] === 'request') {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction niceTypeOf(v: unknown) {\n  if (v === null) {\n    return 'null';\n  }\n  if (typeof v === 'string') {\n    return v ? 'non-empty-string' : 'empty-string';\n  }\n  if (!v) {\n    return typeof v;\n  }\n  if (Array.isArray(v)) {\n    return 'array';\n  }\n  if (v instanceof Date) {\n    return 'date';\n  }\n  if (v instanceof Map) {\n    return 'map';\n  }\n  if (v instanceof Set) {\n    return 'set';\n  }\n  if (v instanceof Error) {\n    return 'error';\n  }\n  if (v instanceof ReadableStream || v instanceof WritableStream || v instanceof TransformStream) {\n    return 'stream';\n  }\n  if (v instanceof Headers) {\n    return 'headers';\n  }\n  if (typeof v === 'object' && v.constructor && v.constructor.name !== 'Object') {\n    return v.constructor.name;\n  }\n  return typeof v;\n}\n\nfunction validateKey(key: string, value: unknown, errors: string[]) {\n  const schema = ValidKeys.get(key);\n  if (!schema && !IgnoredKeys.has(key)) {\n    errors.push(`InvalidKey: '${key}'`);\n    return;\n  }\n  if (schema) {\n    if (schema === BODY_TYPES) {\n      if (typeof value === 'string' || value instanceof ReadableStream) {\n        return;\n      }\n      let type = niceTypeOf(value);\n      if (schema.klass.includes(type)) {\n        return;\n      }\n      errors.push(\n        `InvalidValue: key 'body' should be a string or one of '${schema.klass.join(\"', '\")}', received ${\n          '<a value of type ' + niceTypeOf(value) + '>'\n        }`\n      );\n      return;\n    }\n    if (Array.isArray(schema)) {\n      if (!schema.includes(value as string)) {\n        errors.push(\n          `InvalidValue: key ${key} should be a one of '${schema.join(\"', '\")}', received ${\n            typeof value === 'string' ? value : '<a value of type ' + niceTypeOf(value) + '>'\n          }`\n        );\n      }\n      return;\n    } else if (schema === 'json') {\n      try {\n        JSON.stringify(value);\n      } catch (e) {\n        errors.push(\n          `InvalidValue: key ${key} should be a JSON serializable value, but failed to serialize with Error - ${\n            (e as Error).message\n          }`\n        );\n      }\n      return;\n    } else if (schema === 'headers') {\n      if (!(value instanceof Headers)) {\n        errors.push(`InvalidValue: key ${key} should be an instance of Headers, received ${niceTypeOf(value)}`);\n      }\n      return;\n    } else if (schema === 'record') {\n      const _type = typeof value;\n      // record must extend plain object or Object.create(null)\n      if (!value || _type !== 'object' || (value.constructor && value.constructor !== Object)) {\n        errors.push(\n          `InvalidValue: key ${key} should be a dictionary of string keys to string values, received ${niceTypeOf(\n            value\n          )}`\n        );\n        return;\n      }\n      const keys = Object.keys(value);\n      keys.forEach((k) => {\n        let v: unknown = value[k];\n        if (typeof k !== 'string') {\n          errors.push(`\\tThe key ${String(k)} on ${key} should be a string key`);\n        } else if (typeof v !== 'string') {\n          errors.push(`\\tThe value of ${key}.${k} should be a string not ${niceTypeOf(v)}`);\n        }\n      });\n      return;\n    } else if (schema === 'string') {\n      if (typeof value !== 'string' || value.length === 0) {\n        errors.push(\n          `InvalidValue: key ${key} should be a non-empty string, received ${\n            typeof value === 'string' ? \"''\" : typeof value\n          }`\n        );\n      }\n      return;\n    } else if (schema === 'object') {\n      if (!value || Array.isArray(value) || typeof value !== 'object') {\n        errors.push(`InvalidValue: key ${key} should be an object`);\n      }\n      return;\n    } else if (schema === 'boolean') {\n      if (typeof value !== 'boolean') {\n        errors.push(`InvalidValue: key ${key} should be a boolean, received ${typeof value}`);\n      }\n      return;\n    } else if (schema === 'array') {\n      if (!Array.isArray(value)) {\n        errors.push(`InvalidValue: key ${key} should be an array, received ${typeof value}`);\n      }\n      return;\n    }\n  }\n}\n\nconst IgnoredKeys = new Set<string>([]);\n\nexport function assertValidRequest(\n  request: RequestInfo | Context,\n  isTopLevel: boolean\n): asserts request is RequestInfo {\n  if (DEBUG) {\n    // handle basic shape\n    if (!request) {\n      throw new Error(\n        `Expected ${\n          isTopLevel ? 'RequestManager.request' : 'next'\n        }(<request>) to be called with a request, but none was provided.`\n      );\n    }\n    if (Array.isArray(request) || typeof request !== 'object') {\n      throw new Error(\n        `The \\`request\\` passed to \\`${\n          isTopLevel ? 'RequestManager.request' : 'next'\n        }(<request>)\\` should be an object, received \\`${niceTypeOf(request)}\\``\n      );\n    }\n    if (Object.keys(request).length === 0) {\n      throw new Error(\n        `The \\`request\\` passed to \\`${\n          isTopLevel ? 'RequestManager.request' : 'next'\n        }(<request>)\\` was empty (\\`{}\\`). Requests need at least one valid key.`\n      );\n    }\n\n    // handle accidentally passing context entirely\n    if (request instanceof Context) {\n      throw new Error(\n        `Expected a request passed to \\`${\n          isTopLevel ? 'RequestManager.request' : 'next'\n        }(<request>)\\` but received the previous handler's context instead`\n      );\n    }\n    // handle Object.assign({}, context);\n    if (isMaybeContext(request)) {\n      throw new Error(\n        `Expected a request passed to \\`${\n          isTopLevel ? 'RequestManager.request' : 'next'\n        }(<request>)\\` but received an object with a request key instead.`\n      );\n    }\n\n    // handle schema\n    const keys = Object.keys(request);\n    const validationErrors = [];\n    const isLegacyRequest: boolean = Boolean('op' in request && !request.url);\n    keys.forEach((key) => {\n      if (isLegacyRequest && key === 'data') {\n        return;\n      }\n      validateKey(key, request[key], validationErrors);\n    });\n    if (validationErrors.length) {\n      const error: Error & { errors: string[] } = new Error(\n        `Invalid Request passed to \\`${\n          isTopLevel ? 'RequestManager.request' : 'next'\n        }(<request>)\\`.\\n\\nThe following issues were found:\\n\\n\\t${validationErrors.join('\\n\\t')}`\n      ) as Error & { errors: string[] };\n      error.errors = validationErrors;\n      throw error;\n    }\n  }\n}\n","import { DEBUG } from '@ember-data/env';\n\nimport { Context, ContextOwner } from './context';\nimport { assertValidRequest } from './debug';\nimport { createFuture, isFuture } from './future';\nimport type {\n  DeferredFuture,\n  Future,\n  GodContext,\n  Handler,\n  RequestInfo,\n  StructuredDataDocument,\n  StructuredErrorDocument,\n} from './types';\n\nexport const STRUCTURED = Symbol('DOC');\n\nexport function curryFuture<T>(owner: ContextOwner, inbound: Future<T>, outbound: DeferredFuture<T>): Future<T> {\n  owner.setStream(inbound.getStream());\n\n  inbound.then(\n    (doc: StructuredDataDocument<T>) => {\n      const document = {\n        [STRUCTURED]: true,\n        request: owner.request,\n        response: doc.response,\n        content: doc.content,\n      };\n      outbound.resolve(document);\n    },\n    (error: Error & StructuredErrorDocument) => {\n      if (isDoc(error)) {\n        owner.setStream(owner.god.stream);\n      }\n      if (!error || !(error instanceof Error)) {\n        try {\n          throw new Error(error ? error : `Request Rejected with an Unknown Error`);\n        } catch (e: unknown) {\n          if (error && typeof error === 'object') {\n            Object.assign(e as Error, error);\n            (e as Error & StructuredErrorDocument).message =\n              (error as Error).message || `Request Rejected with an Unknown Error`;\n          }\n          error = e as Error & StructuredErrorDocument;\n        }\n      }\n\n      error[STRUCTURED] = true;\n      error.request = owner.request;\n      error.response = owner.getResponse();\n      error.error = error.error || error.message;\n\n      outbound.reject(error);\n    }\n  );\n  return outbound.promise;\n}\n\nfunction isDoc<T>(doc: T | StructuredDataDocument<T>): doc is StructuredDataDocument<T> {\n  return doc && doc[STRUCTURED] === true;\n}\n\nexport function handleOutcome<T>(owner: ContextOwner, inbound: Promise<T>, outbound: DeferredFuture<T>): Future<T> {\n  inbound.then(\n    (content: T) => {\n      if (owner.controller.signal.aborted) {\n        // the next function did not respect the signal, we handle it here\n        outbound.reject(\n          new DOMException((owner.controller.signal.reason as string) || 'The user aborted a request.', 'AbortError')\n        );\n        return;\n      }\n      if (isDoc(content)) {\n        owner.setStream(owner.god.stream);\n        content = content.content;\n      }\n      const document = {\n        [STRUCTURED]: true,\n        request: owner.request,\n        response: owner.getResponse(),\n        content,\n      };\n      outbound.resolve(document);\n    },\n    (error: Error & StructuredErrorDocument) => {\n      if (isDoc(error)) {\n        owner.setStream(owner.god.stream);\n      }\n      if (!error) {\n        try {\n          throw new Error(`Request Rejected with an Unknown Error`);\n        } catch (e: unknown) {\n          error = e as Error & StructuredErrorDocument;\n        }\n      }\n\n      error[STRUCTURED] = true;\n      error.request = owner.request;\n      error.response = owner.getResponse();\n      error.error = error.error || error.message;\n      outbound.reject(error);\n    }\n  );\n  return outbound.promise;\n}\n\nexport function executeNextHandler<T>(\n  wares: Readonly<Handler[]>,\n  request: RequestInfo,\n  i: number,\n  god: GodContext\n): Future<T> {\n  if (DEBUG) {\n    if (i === wares.length) {\n      throw new Error(`No handler was able to handle this request.`);\n    }\n    assertValidRequest(request, false);\n  }\n  const owner = new ContextOwner(request, god);\n\n  function next(r: RequestInfo): Future<T> {\n    owner.nextCalled++;\n    return executeNextHandler(wares, r, i + 1, god);\n  }\n\n  const context = new Context(owner);\n  let outcome: Promise<T> | Future<T>;\n  try {\n    outcome = wares[i].request<T>(context, next);\n    if (DEBUG) {\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      if (!outcome || (!(outcome instanceof Promise) && !(typeof outcome === 'object' && 'then' in outcome))) {\n        // eslint-disable-next-line no-console\n        console.log({ request, handler: wares[i], outcome });\n        if (outcome === undefined) {\n          throw new Error(`Expected handler.request to return a promise, instead received undefined.`);\n        }\n        throw new Error(`Expected handler.request to return a promise, instead received a synchronous value.`);\n      }\n    }\n  } catch (e) {\n    outcome = Promise.reject<T>(e);\n  }\n  const future = createFuture<T>(owner);\n\n  if (isFuture<T>(outcome)) {\n    return curryFuture(owner, outcome, future);\n  }\n\n  return handleOutcome(owner, outcome, future);\n}\n","/* eslint-disable no-irregular-whitespace */\n/**\n *\n  <p align=\"center\">\n  <img\n    class=\"project-logo\"\n    src=\"https://raw.githubusercontent.com/emberjs/data/4612c9354e4c54d53327ec2cf21955075ce21294/ember-data-logo-light.svg#gh-light-mode-only\"\n    alt=\"EmberData RequestManager\"\n    width=\"240px\"\n    title=\"EmberData RequestManager\"\n    />\n</p>\n\n<p align=\"center\">⚡️ a simple abstraction over fetch to enable easy management of request/response flows</p>\n\nThis package provides [*Ember*‍**Data**](https://github.com/emberjs/data/)'s `RequestManager`, a framework agnostic library that can be integrated with any Javascript application to make [fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) happen.\n\n## Installation\n\nInstall using your javascript package manager of choice. For instance with [pnpm](https://pnpm.io/)\n\n```no-highlight\npnpm add @ember-data/request\n```\n\n## 🚀 Basic Usage\n\nA `RequestManager` provides a request/response flow in which configured handlers are successively given the opportunity to handle, modify, or pass-along a request.\n\nThe RequestManager on its own does not know how to fulfill requests. For this we must register at least one handler. A basic `Fetch` handler is provided that will take the request options provided and execute `fetch`.\n\n```ts\nimport RequestManager from '@ember-data/request';\nimport Fetch from '@ember-data/request/fetch';\nimport { apiUrl } from './config';\n\n// ... create manager and add our Fetch handler\nconst manager = new RequestManager();\nmanager.use([Fetch]);\n\n// ... execute a request\nconst response = await manager.request({\n  url: `${apiUrl}/users`\n});\n```\n\n\n## 🪜 Architecture\n\nA `RequestManager` receives a request and manages fulfillment via configured handlers. It may be used standalone from the rest of *Ember*‍**Data** and is not specific to any library or framework.\n\nEach handler may choose to fulfill the request using some source of data or to pass the request along to other handlers.\n\nThe same or a separate instance of a `RequestManager` may also be used to fulfill requests issued by [*Ember*‍**Data**{Store}](https://github.com/emberjs/data/tree/main/packages/store)\n\nWhen the same instance is used by both this allows for simple coordination throughout the application. Requests issued by the Store will use the in-memory cache\nand return hydrated responses, requests issued directly to the RequestManager\nwill skip the in-memory cache and return raw responses.\n\n## Usage\n\n```ts\nconst userList = await manager.request({\n  url: `/api/v1/users.list`\n});\n\nconst users = userList.content;\n```\n\n<details>\n  <summary><strong>Making Requests</strong></summary>\n\n`RequestManager` has a single asyncronous method as it's API: `request`\n\n```ts\nclass RequestManager {\n  request<T>(req: RequestInfo): Future<T>;\n}\n```\n\n`manager.request(<RequestInfo>)` accepts an object containing the information\nnecessary for the request to be handled successfully.\n\nThese options extend the [options](https://developer.mozilla.org/en-US/docs/Web/API/fetch#parameters) provided to `fetch`, and can accept a [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request/Request). All properties accepted by Request options and fetch options are valid.\n\n```ts\ninterface RequestInfo extends FetchOptions {\n  op?: string;\n  store?: Store;\n\n  url: string;\n   // data that a handler should convert into\n   // the query (GET) or body (POST)\n  data?: Record<string, unknown>;\n\n  // options specifically intended for handlers\n  // to utilize to process the request\n  options?: Record<string, unknown>;\n}\n```\n\n> **note:** providing a `signal` is unnecessary as an `AbortController` is automatically provided if none is present.\n\n</details>\n<details>\n  <summary><strong>Using the Response</strong></summary><br>\n\n`manager.request` returns a `Future`, which allows access to limited information about the request while it is still pending and fulfills with the final state when the request completes and the response has been read.\n\n```ts\nconst usersFuture = manager.request({\n  url: `/api/v1/users.list`\n});\n```\n\nA `Future` is cancellable via `abort`.\n\n```ts\nusersFuture.abort();\n```\n\nHandlers may *optionally* expose a ReadableStream to the `Future` for streaming data; however, when doing so the handler should not resolve until it has fully read the response stream itself.\n\n```ts\ninterface Future<T> extends Promise<StructuredDocument<T>> {\n  abort(): void;\n\n  async getStream(): ReadableStream | null;\n}\n```\n\nA Future resolves or rejects with a `StructuredDocument`.\n\n```ts\ninterface StructuredDocument<T> {\n  request: RequestInfo;\n  response: ResponseInfo | null;\n  content?: T;\n  error?: Error;\n}\n```\n\nThe `RequestInfo` specified by `document.request` is the same as originally provided to `manager.request`. If any handler fulfilled this request using different request info it is not represented here. This contract helps to ensure that `retry` and `caching` are possible since the original arguments are correctly preserved. This also allows handlers to \"fork\" the request or fulfill from multiple sources without the details of fulfillment muddying the original request.\n\nThe `ResponseInfo` is a serializable fulfilled subset of a [Response](https://developer.mozilla.org/en-US/docs/Web/API/Response) if set via `setResponse`. If no response was ever set this will be `null`.\n\n```ts\ninterface ResponseInfo {\n  headers?: Record<string, string>;\n  ok?: boolean;\n  redirected?: boolean;\n  status?: HTTPStatusCode;\n  statusText?: string;\n  type?: 'basic' | 'cors';\n  url?: string;\n}\n```\n\n</details>\n\n<h3>Handling Requests</h3>\n<details>\n  <summary><code>{ request<T>(context, next): Promise<T> | Future<T>; }</code></summary><br>\n\nRequests are fulfilled by handlers. A handler receives the request context\nas well as a `next` function with which to pass along a request to the next\nhandler if it so chooses.\n\nA handler may be any object with a `request` method. This allows both stateful and non-stateful\nhandlers to be utilized.\n\nIf a handler calls `next`, it receives a `Future` which resolves to a `StructuredDocument`\nthat it can then compose how it sees fit with its own response.\n\n```ts\n\ntype NextFn<P> = (req: RequestInfo) => Future<P>;\n\ninterface Handler {\n  async request<T>(context: RequestContext, next: NextFn<P>): T;\n}\n```\n\n`RequestContext` contains a readonly version of the RequestInfo as well as a few methods for building up the `StructuredDocument` and `Future` that will be part of the response.\n\n```ts\ninterface RequestContext<T> {\n  readonly request: RequestInfo;\n\n  setStream(stream: ReadableStream | Promise<ReadableStream>): void;\n  setResponse(response: Response | ResponseInfo): void;\n}\n```\n\nA basic `fetch` handler with support for streaming content updates while\nthe download is still underway might look like the following, where we use\n[`response.clone()`](https://developer.mozilla.org/en-US/docs/Web/API/Response/clone) to `tee` the `ReadableStream` into two streams.\n\nA more efficient handler might read from the response stream, building up the\nresponse content before passing along the chunk downstream.\n\n```ts\nconst FetchHandler = {\n  async request(context) {\n    const response = await fetch(context.request);\n    context.setResponse(reponse);\n    context.setStream(response.clone().body);\n\n    return response.json();\n  }\n}\n```\n\nRequest handlers are registered by configuring the manager via `use`\n\n```ts\nmanager.use([Handler1, Handler2])\n```\n\nHandlers will be invoked in the order they are registered (\"fifo\", first-in first-out), and may only be registered up until the first request is made. It is recommended but not required to register all handlers at one time in order to ensure explicitly visible handler ordering.\n\n</details>\n\n\n<details>\n  <summary><strong>Error Handling</strong></summary><br>\n\n  Each handler in the chain can catch errors from upstream and choose to\n  either handle the error, re-throw the error, or throw a new error.\n\n  ```ts\n  const MAX_RETRIES = 5;\n\n  const Handler = {\n    async request(context, next) {\n      let attempts = 0;\n\n      while (attempts < MAX_RETRIES) {\n        attempts++;\n        try {\n          const response = await next(context.request);\n          return response;\n        } catch (e) {\n          if (isTimeoutError(e) && attempts < MAX_RETRIES) {\n            // retry request\n            continue;\n          }\n          // rethrow if it is not a timeout error\n          throw e;\n        }\n      }\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary><strong>Handling Abort</strong></summary><br>\n\n  Aborting a request will reject the current handler in the chain. However,\n  every handler can potentially catch this error. If your handler needs to\n  separate AbortError from other Error types, it is recommended to check\n  `context.request.signal.aborted` (or if a custom controller was supplied `controller.signal.aborted`).\n\n  In this manner it is possible for a request to recover from an abort and\n  still proceed; however, as a best practice this should be used for necessary\n  cleanup only and the original AbortError rethrown if the abort signal comes\n  from the root controller.\n\n  **AbortControllers are Always Present and Always Entangled**\n\n  If the initial request does not supply an [AbortController](https://developer.mozilla.org/en-US/docs/Web/API/AbortController), one will be generated.\n\n  The [signal](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal) for this controller is automatically added to the request passed into the first handler.\n\n  Each handler has the option to supply a new controller to the request when calling `next`. If a new controller is provided it will be automatically\n  entangled with the root controller. If the root controller aborts, so will\n  any entangled controllers.\n\n  If an entangled controller aborts, the root controller will not abort. This\n  allows for advanced request-flow scenarios to abort subsections of the request tree without aborting the entire request.\n\n</details>\n\n\n<details>\n  <summary><strong>Stream Currying</strong></summary><br>\n\n`RequestManager.request` and `next` differ from `fetch` in one **crucial detail** in that the outer Promise resolves only once the response stream has been processed.\n\nFor context, it helps to understand a few of the use-cases that RequestManager\nis intended to allow.\n\n- to manage and return streaming content (such as video files)\n- to fulfill a request from multiple sources or by splitting one request into multiple requests\n  - for instance one API call for a user and another for the user's friends\n  - or e.g. fulfilling part of the request from one source (one API, in-memory, localStorage, IndexedDB\n   etc.) and the rest from another source (a different API, a WebWorker, etc.)\n- to coalesce multiple requests\n- to decorate a request with additional info\n  - e.g. an Auth handler that ensures the correct tokens or headers or cookies are attached.\n\n\n`await fetch(<req>)` resolves at the moment headers are received. This allows for the body of the request to be processed as a stream by application\ncode *while chunks are still being received by the browser*.\n\nWhen an app chooses to `await response.json()` what occurs is the browser reads the stream to completion and then returns the result. Additionally, this stream may only be read **once**.\n\nThe `RequestManager` preserves this ability to subscribe to and utilize the stream by either the application or the handler – thereby delivering the full power and flexibility of native APIs – without restricting developers in ways that lead to complicated workarounds.\n\nEach handler may call `setStream` only once, but may do so *at any time* until the promise that the handler returns has resolved. The associated promise returned by calling `future.getStream` will resolve with the stream set by `setStream` if that method is called, or `null` if that method\nhas not been called by the time that the handler's request method has resolved.\n\nHandlers that do not create a stream of their own, but which call `next`, should defensively pipe the stream forward. While this is not required (see automatic currying below) it is better to do so in most cases as otherwise the stream may not become available to downstream handlers or the application until the upstream handler has fully read it.\n\n```ts\ncontext.setStream(future.getStream());\n```\n\nHandlers that either call `next` multiple times or otherwise have reason to create multiple  fetch requests should either choose to return no stream, meaningfully combine the streams, or select a single prioritized stream.\n\nOf course, any handler may choose to read and handle the stream, and return either no stream or a different stream in the process.\n\n</details>\n\n<details>\n  <summary><strong>Automatic Currying of Stream and Response</strong></summary><br>\n\nIn order to simplify the common case for handlers which decorate a request, if `next` is called only a single time and `setResponse` was never called by the handler, the response set by the next handler in the chain will be applied to that handler's outcome. For instance, this makes the following pattern possible `return (await next(<req>)).content;`.\n\nSimilarly, if `next` is called only a single time and neither `setStream` nor `getStream` was called, we automatically curry the stream from the future returned by `next` onto the future returned by the handler.\n\nFinally, if the return value of a handler is a `Future`, we curry `content` and `errors` as well, thus enabling the simplest form `return next(<req>)`.\n\nIn the case of the `Future` being returned, `Stream` proxying is automatic and immediate and does not wait for the `Future` to resolve.\n\n</details>\n\n### Using as a Service\n\nMost applications will desire to have a single `RequestManager` instance, which can be achieved using module-state patterns for singletons, or for [Ember](https://emberjs.com) applications by exporting the manager as a [service](https://guides.emberjs.com/release/services/).\n\n*services/request.ts*\n```ts\nimport RequestManager from '@ember-data/request';\nimport Fetch from '@ember-data/request/fetch';\nimport Auth from 'ember-simple-auth/ember-data-handler';\n\nexport default class extends RequestManager {\n  constructor(createArgs) {\n    super(createArgs);\n    this.use([Auth, Fetch]);\n  }\n}\n```\n\n### Using with `@ember-data/store`\n\nTo have a request service unique to a Store:\n\n```ts\nimport Store, { CacheHandler } from '@ember-data/store';\nimport RequestManager from '@ember-data/request';\nimport Fetch from '@ember-data/request/fetch';\n\nclass extends Store {\n  requestManager = new RequestManager();\n\n  constructor(args) {\n    super(args);\n    this.requestManager.use([Fetch]);\n    this.requestManager.useCache(CacheHandler);\n  }\n}\n```\n\n### Using with `ember-data`\n\nIf using the package [ember-data](https://github.com/emberjs/data/tree/main/packages/-ember-data), the following configuration will automatically be done in order to preserve the legacy [Adapter](https://github.com/emberjs/data/tree/main/packages/adapter) and [Serializer](https://github.com/emberjs/data/tree/main/packages/serializer) behavior. Additional handlers or a service injection like the above would need to be done by the consuming application in order to make broader use of `RequestManager`.\n\n```ts\nimport Store, { CacheHandler } from '@ember-data/store';\nimport RequestManager from '@ember-data/request';\nimport { LegacyNetworkHandler } from '@ember-data/legacy-compat';\n\nexport default class extends Store {\n  requestManager = new RequestManager();\n\n  constructor(args) {\n    super(args);\n    this.requestManager.use([LegacyNetworkHandler]);\n    this.requestManager.useCache(CacheHandler);\n  }\n}\n```\n\nBecause the application's store service (if present) will override the store supplied by `ember-data`, all that is required to define your own ordering and handlers is to supply a store service extending from `@ember-data/store` and configure as shown above.\n\nFor usage of the store's `requestManager` via `store.request(<req>)` see the [Store](https://api.emberjs.com/ember-data/release/modules/@ember-data%2Fstore) documentation.\n\n *\n * @module @ember-data/request\n * @main @ember-data/request\n */\nimport { importSync } from '@embroider/macros';\n\nimport { DEBUG, TESTING } from '@ember-data/env';\n\nimport { assertValidRequest } from './debug';\nimport { upgradePromise } from './future';\nimport { Future, GenericCreateArgs, Handler, RequestInfo } from './types';\nimport { executeNextHandler } from './utils';\n\nlet REQ_ID = 0;\n/**\n * ```js\n * import RequestManager from '@ember-data/request';\n * ```\n *\n * A RequestManager provides a request/response flow in which configured\n * handlers are successively given the opportunity to handle, modify, or\n * pass-along a request.\n *\n * ```ts\n * interface RequestManager {\n *   request<T>(req: RequestInfo): Future<T>;\n * }\n * ```\n *\n * For example:\n *\n * ```ts\n * import RequestManager from '@ember-data/request';\n * import Fetch from '@ember-data/request/fetch';\n * import Auth from 'ember-simple-auth/ember-data-handler';\n * import Config from './config';\n *\n * const { apiUrl } = Config;\n *\n * // ... create manager\n * const manager = new RequestManager();\n * manager.use([Auth, Fetch]);\n *\n * // ... execute a request\n * const response = await manager.request({\n *   url: `${apiUrl}/users`\n * });\n * ```\n *\n * ### Futures\n *\n * The return value of `manager.request` is a `Future`, which allows\n * access to limited information about the request while it is still\n * pending and fulfills with the final state when the request completes.\n *\n * A `Future` is cancellable via `abort`.\n *\n * Handlers may optionally expose a `ReadableStream` to the `Future` for\n * streaming data; however, when doing so the future should not resolve\n * until the response stream is fully read.\n *\n * ```ts\n * interface Future<T> extends Promise<StructuredDocument<T>> {\n *   abort(): void;\n *\n *   async getStream(): ReadableStream | null;\n * }\n * ```\n *\n * ### StructuredDocuments\n *\n * A Future resolves with a `StructuredDataDocument` or rejects with a `StructuredErrorDocument`.\n *\n * ```ts\n * interface StructuredDataDocument<T> {\n *   request: ImmutableRequestInfo;\n *   response: ImmutableResponseInfo;\n *   content: T;\n * }\n * interface StructuredErrorDocument extends Error {\n *   request: ImmutableRequestInfo;\n *   response: ImmutableResponseInfo;\n *   error: string | object;\n * }\n * type StructuredDocument<T> = StructuredDataDocument<T> | StructuredErrorDocument;\n * ```\n *\n * @class RequestManager\n * @public\n */\nexport class RequestManager {\n  #handlers: Handler[] = [];\n  declare _hasCacheHandler: boolean;\n  declare _pending: Map<number, Promise<unknown>>;\n\n  constructor(options?: GenericCreateArgs) {\n    Object.assign(this, options);\n    this._pending = new Map();\n  }\n\n  /**\n   * Register a handler to use for primary cache intercept.\n   *\n   * Only one such handler may exist. If using the same\n   * RequestManager as the Store instance the Store\n   * registers itself as a Cache handler.\n   *\n   * @method useCache\n   * @public\n   * @param {Handler[]} cacheHandler\n   * @returns {void}\n   */\n  useCache(cacheHandler: Handler): void {\n    if (DEBUG) {\n      if (this._hasCacheHandler) {\n        throw new Error(`\\`RequestManager.useCache(<handler>)\\` May only be invoked once.`);\n      }\n      if (Object.isFrozen(this.#handlers)) {\n        throw new Error(\n          `\\`RequestManager.useCache(<handler>)\\` May only be invoked prior to any request having been made.`\n        );\n      }\n      this._hasCacheHandler = true;\n    }\n    this.#handlers.unshift(cacheHandler);\n  }\n\n  /**\n   * Register handler(s) to use when a request is issued.\n   *\n   * Handlers will be invoked in the order they are registered.\n   * Each Handler is given the opportunity to handle the request,\n   * curry the request, or pass along a modified request.\n   *\n   * @method use\n   * @public\n   * @param {Handler[]} newHandlers\n   * @returns {void}\n   */\n  use(newHandlers: Handler[]): void {\n    const handlers = this.#handlers;\n    if (DEBUG) {\n      if (Object.isFrozen(handlers)) {\n        throw new Error(`Cannot add a Handler to a RequestManager after a request has been made`);\n      }\n      if (!Array.isArray(newHandlers)) {\n        throw new Error(\n          `\\`RequestManager.use(<Handler[]>)\\` expects an array of handlers, but was called with \\`${typeof newHandlers}\\``\n        );\n      }\n      newHandlers.forEach((handler, index) => {\n        if (!handler || typeof handler !== 'object' || typeof handler.request !== 'function') {\n          throw new Error(\n            `\\`RequestManager.use(<Handler[]>)\\` expected to receive an array of handler objects with request methods, by the handler at index ${index} does not conform.`\n          );\n        }\n      });\n    }\n    handlers.push(...newHandlers);\n  }\n\n  /**\n   * Issue a Request.\n   *\n   * Returns a Future that fulfills with a StructuredDocument\n   *\n   * @method request\n   * @public\n   * @param {RequestInfo} request\n   * @returns {Future}\n   */\n  request<T = unknown>(request: RequestInfo): Future<T> {\n    const handlers = this.#handlers;\n    if (DEBUG) {\n      if (!Object.isFrozen(handlers)) {\n        Object.freeze(handlers);\n      }\n      assertValidRequest(request, true);\n    }\n\n    const controller = request.controller || new AbortController();\n    if (request.controller) {\n      delete request.controller;\n    }\n    let promise = executeNextHandler<T>(handlers, request, 0, {\n      controller,\n      response: null,\n      stream: null,\n      id: REQ_ID++,\n    });\n    if (TESTING) {\n      if (!request.disableTestWaiter) {\n        const { waitForPromise } = importSync('@ember/test-waiters') as {\n          waitForPromise: <T>(promise: Promise<T>) => Promise<T>;\n        };\n        const newPromise = waitForPromise(promise);\n        return upgradePromise(newPromise, promise);\n      }\n    }\n    return promise;\n  }\n\n  static create(options?: GenericCreateArgs) {\n    return new this(options);\n  }\n}\n"],"names":["IS_FUTURE","Symbol","isFuture","maybe","createDeferred","resolve","reject","promise","Promise","res","rej","upgradePromise","future","getStream","abort","onFinalize","createFuture","owner","deferred","cbs","finally","resolveStream","forEach","cb","fn","push","reason","enhanceReason","DOMException","ContextOwner","constructor","request","god","hasSetStream","hasSetResponse","hasSubscribers","stream","response","nextCalled","requestId","id","controller","signal","addEventListener","enhancedRequest","Object","assign","macroCondition","getOwnConfig","env","DEBUG","cacheOptions","for","deepFreeze","headers","clone","Headers","entries","toJSON","then","getResponse","setStream","setResponse","Error","Response","ok","redirected","status","statusText","type","url","responseData","_owner","_classPrivateFieldLooseKey","Context","defineProperty","writable","value","_classPrivateFieldLooseBase","BODY_TYPES","klass","ValidKeys","Map","IS_FROZEN","freezeHeaders","delete","set","append","_type","_niceType","niceTypeOf","arr","map","freeze","keys","key","isMaybeContext","length","v","Array","isArray","Date","Set","ReadableStream","WritableStream","TransformStream","name","validateKey","errors","schema","get","IgnoredKeys","has","includes","join","JSON","stringify","e","message","k","String","assertValidRequest","isTopLevel","validationErrors","isLegacyRequest","Boolean","error","STRUCTURED","curryFuture","inbound","outbound","doc","document","content","isDoc","handleOutcome","aborted","executeNextHandler","wares","i","next","r","context","outcome","console","log","handler","undefined","REQ_ID","_handlers","RequestManager","options","_pending","useCache","cacheHandler","_hasCacheHandler","isFrozen","unshift","use","newHandlers","handlers","index","AbortController","TESTING","disableTestWaiter","waitForPromise","importSync","newPromise","create"],"mappings":"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","x_google_ignoreList":[0,1]}
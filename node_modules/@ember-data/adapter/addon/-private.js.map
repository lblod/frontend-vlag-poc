{"version":3,"file":"-private.js","sources":["../src/-private/utils/parse-response-headers.ts","../src/-private/utils/continue-on-reject.ts","../src/-private/utils/determine-body-promise.ts","../src/-private/utils/serialize-query-params.ts","../src/-private/utils/fetch.ts","../src/-private/utils/serialize-into-hash.ts"],"sourcesContent":["const newline = /\\r?\\n/;\n\nexport default function parseResponseHeaders(headersString: string): Record<string, string> {\n  const headers = Object.create(null) as Record<string, string>;\n\n  if (!headersString) {\n    return headers;\n  }\n\n  const headerPairs: string[] = headersString.split(newline);\n\n  for (let i = 0; i < headerPairs.length; i++) {\n    let header = headerPairs[i];\n    let j = 0;\n    let foundSep = false;\n\n    for (; j < header.length; j++) {\n      if (header.charCodeAt(j) === 58 /* ':' */) {\n        foundSep = true;\n        break;\n      }\n    }\n\n    if (foundSep === false) {\n      continue;\n    }\n\n    let field = header.substring(0, j).trim();\n    let value = header.substring(j + 1, header.length).trim();\n\n    if (value) {\n      let lowerCasedField = field.toLowerCase();\n\n      headers[lowerCasedField] = value;\n      headers[field] = value;\n    }\n  }\n\n  return headers;\n}\n","export default function continueOnReject<T>(promise: Promise<T>): Promise<T> {\n  return Promise.resolve(promise).catch((e) => e);\n}\n","import { warn } from '@ember/debug';\n\nimport { DEBUG } from '@ember-data/env';\n\nimport type { RequestData } from '../../rest';\nimport continueOnReject from './continue-on-reject';\n\ntype Payload = Error | Record<string, unknown> | unknown[] | string | undefined;\n\ninterface CustomSyntaxError extends SyntaxError {\n  payload: Payload;\n}\n\n/*\n * Function that always attempts to parse the response as json, and if an error is thrown,\n * returns `undefined` if the response is successful and has a status code of 204 (No Content),\n * or 205 (Reset Content) or if the request method was 'HEAD', and the plain payload otherwise.\n */\nfunction _determineContent(response: Response, requestData: JQueryAjaxSettings, payload: Payload): Payload {\n  let ret: Payload = payload;\n  let error: Error | null = null;\n\n  if (!response.ok) {\n    return payload;\n  }\n\n  let status = response.status;\n  let payloadIsEmpty = payload === '' || payload === null;\n  let statusIndicatesEmptyResponse = status === 204 || status === 205 || requestData.method === 'HEAD';\n\n  if (DEBUG) {\n    if (payloadIsEmpty && !statusIndicatesEmptyResponse) {\n      let message = `The server returned an empty string for ${requestData.method} ${requestData.url}, which cannot be parsed into a valid JSON. Return either null or {}.`;\n      if (payload === '') {\n        warn(message, {\n          id: 'ds.adapter.returned-empty-string-as-JSON',\n        });\n      }\n    }\n  }\n\n  if (response.ok && (statusIndicatesEmptyResponse || payloadIsEmpty)) {\n    return;\n  }\n\n  try {\n    ret = JSON.parse(payload as string);\n  } catch (e) {\n    if (!(e instanceof SyntaxError)) {\n      return e as Error;\n    }\n    (e as CustomSyntaxError).payload = payload;\n    error = e;\n  }\n\n  if (error) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.warn('This response was unable to be parsed as json.', payload);\n    }\n    return error;\n  }\n\n  return ret;\n}\n\nexport function determineBodyPromise(response: Response, requestData: RequestData): Promise<Payload> {\n  // response.text() may resolve or reject\n  // it is a native promise, may not have finally\n  return continueOnReject(response.text()).then((payload) => _determineContent(response, requestData, payload));\n}\n","const RBRACKET = /\\[\\]$/;\n\nfunction isPlainObject(obj: any): boolean {\n  return Object.prototype.toString.call(obj) === '[object Object]';\n}\n\n/*\n * Helper function that turns the data/body of a request into a query param string.\n * This is directly copied from jQuery.param.\n */\nexport function serializeQueryParams(queryParamsObject: object | string): string {\n  let s: any[] = [];\n  function buildParams(prefix: string, obj: any) {\n    let i, len, key;\n\n    if (prefix) {\n      if (Array.isArray(obj)) {\n        for (i = 0, len = obj.length; i < len; i++) {\n          if (RBRACKET.test(prefix)) {\n            add(s, prefix, obj[i]);\n          } else {\n            buildParams(prefix + '[' + (typeof obj[i] === 'object' && obj[i] !== null ? i : '') + ']', obj[i]);\n          }\n        }\n      } else if (isPlainObject(obj)) {\n        for (key in obj) {\n          buildParams(prefix + '[' + key + ']', obj[key]);\n        }\n      } else {\n        add(s, prefix, obj);\n      }\n    } else if (Array.isArray(obj)) {\n      for (i = 0, len = obj.length; i < len; i++) {\n        add(s, obj[i].name, obj[i].value);\n      }\n    } else {\n      for (key in obj) {\n        buildParams(key, obj[key]);\n      }\n    }\n    return s;\n  }\n\n  return buildParams('', queryParamsObject).join('&');\n}\n\n/*\n * Part of the `serializeQueryParams` helper function.\n */\nfunction add(s: Array<any>, k: string, v?: string | (() => string)) {\n  // Strip out keys with undefined value and replace null values with\n  // empty strings (mimics jQuery.ajax)\n  if (v === undefined) {\n    return;\n  } else if (v === null) {\n    v = '';\n  }\n\n  v = typeof v === 'function' ? v() : v;\n  s[s.length] = `${encodeURIComponent(k)}=${encodeURIComponent(v)}`;\n}\n","import { assert } from '@ember/debug';\n\ntype FetchFunction = (input: RequestInfo, init?: RequestInit | undefined) => Promise<Response>;\n\nlet _fetch: (() => FetchFunction) | null = null;\ntype MockRequest = { protocol?: string; get(key: string): string | undefined };\nlet REQUEST: MockRequest = null as unknown as MockRequest;\n\nexport default function getFetchFunction(): FetchFunction {\n  // return cached fetch function\n  if (_fetch !== null) {\n    return _fetch();\n  }\n\n  // grab browser native fetch if available, or global fetch if otherwise configured\n  if (typeof fetch === 'function') {\n    // fallback to using global fetch\n    _fetch = () => fetch;\n\n    /* global FastBoot */\n    // grab fetch from node-fetch\n  } else if (typeof FastBoot !== 'undefined') {\n    try {\n      const nodeFetch = FastBoot.require('node-fetch') as typeof fetch;\n\n      const httpRegex = /^https?:\\/\\//;\n      const protocolRelativeRegex = /^\\/\\//;\n\n      // eslint-disable-next-line no-inner-declarations\n      function parseRequest(request: MockRequest) {\n        if (request === null) {\n          throw new Error(\n            \"Trying to fetch with relative url but the application hasn't finished loading FastBootInfo, see details at https://github.com/ember-cli/ember-fetch#relative-url\"\n          );\n        }\n        // Old Prember version is not sending protocol\n        const protocol = request.protocol === 'undefined:' ? 'http:' : request.protocol;\n        return [request.get('host'), protocol];\n      }\n\n      // eslint-disable-next-line no-inner-declarations\n      function buildAbsoluteUrl(url: string) {\n        if (protocolRelativeRegex.test(url)) {\n          let [host] = parseRequest(REQUEST);\n          url = host + url;\n        } else if (!httpRegex.test(url)) {\n          let [host, protocol] = parseRequest(REQUEST);\n          url = protocol + '//' + host + url;\n        }\n        return url;\n      }\n\n      // eslint-disable-next-line no-inner-declarations\n      function patchedFetch(input, options) {\n        if (input && input.href) {\n          input.url = buildAbsoluteUrl(input.href);\n        } else if (typeof input === 'string') {\n          input = buildAbsoluteUrl(input);\n        }\n        return nodeFetch(input, options);\n      }\n\n      _fetch = () => patchedFetch;\n    } catch (e) {\n      throw new Error(`Unable to create a compatible 'fetch' for FastBoot with node-fetch`);\n    }\n  }\n\n  assert(`Cannot find a 'fetch' global and did not detect FastBoot.`, _fetch);\n\n  return _fetch();\n}\n\nexport function setupFastboot(fastBootRequest: MockRequest) {\n  REQUEST = fastBootRequest;\n}\n","import { assert } from '@ember/debug';\n\nimport type { Snapshot } from 'ember-data/-private';\n\nimport type Store from '@ember-data/store';\nimport type ShimModelClass from '@ember-data/store/-private/legacy-model-support/shim-model-class';\nimport type { DSModelSchema } from '@ember-data/types/q/ds-model';\nimport type { MinimumSerializerInterface } from '@ember-data/types/q/minimum-serializer-interface';\n\ntype SerializerWithSerializeIntoHash = MinimumSerializerInterface & {\n  serializeIntoHash?(hash: {}, modelClass: ShimModelClass, snapshot: Snapshot, options?: { includeId?: boolean }): void;\n};\n\nexport default function serializeIntoHash(\n  store: Store,\n  modelClass: ShimModelClass | DSModelSchema,\n  snapshot: Snapshot,\n  options: { includeId?: boolean } = { includeId: true }\n) {\n  const serializer: SerializerWithSerializeIntoHash | null = store.serializerFor(modelClass.modelName);\n\n  assert(`Cannot serialize record, no serializer defined`, serializer);\n\n  if (typeof serializer.serializeIntoHash === 'function') {\n    const data = {};\n    serializer.serializeIntoHash(data, modelClass, snapshot, options);\n    return data;\n  }\n\n  return serializer.serialize(snapshot, options);\n}\n"],"names":["newline","parseResponseHeaders","headersString","headers","Object","create","headerPairs","split","i","length","header","j","foundSep","charCodeAt","field","substring","trim","value","lowerCasedField","toLowerCase","continueOnReject","promise","Promise","resolve","catch","e","_determineContent","response","requestData","payload","ret","error","ok","status","payloadIsEmpty","statusIndicatesEmptyResponse","method","macroCondition","getOwnConfig","env","DEBUG","message","url","warn","id","JSON","parse","SyntaxError","console","determineBodyPromise","text","then","RBRACKET","isPlainObject","obj","prototype","toString","call","serializeQueryParams","queryParamsObject","s","buildParams","prefix","len","key","Array","isArray","test","add","name","join","k","v","undefined","encodeURIComponent","_fetch","REQUEST","getFetchFunction","fetch","FastBoot","nodeFetch","require","httpRegex","protocolRelativeRegex","parseRequest","request","Error","protocol","get","buildAbsoluteUrl","host","patchedFetch","input","options","href","assert","setupFastboot","fastBootRequest","serializeIntoHash","store","modelClass","snapshot","includeId","serializer","serializerFor","modelName","data","serialize"],"mappings":"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"}
{"version":3,"file":"-private.js","sources":["../../../node_modules/.pnpm/@babel+runtime@7.22.5/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js","../../../node_modules/.pnpm/@babel+runtime@7.22.5/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js","../../../node_modules/.pnpm/@babel+runtime@7.22.5/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js","../../../node_modules/.pnpm/@babel+runtime@7.22.5/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js","../src/-private/document.ts","../src/-private/cache-handler.ts","../src/-private/caches/cache-utils.ts","../src/-private/utils/coerce-id.ts","../src/-private/utils/identifier-debug-consts.ts","../src/-private/utils/is-non-empty-string.ts","../src/-private/utils/normalize-model-name.ts","../src/-private/utils/uuid-polyfill.ts","../src/-private/caches/identifier-cache.ts","../src/-private/legacy-model-support/record-reference.ts","../src/-private/managers/cache-store-wrapper.ts","../src/-private/caches/instance-cache.ts","../src/-private/legacy-model-support/schema-definition-service.ts","../src/-private/legacy-model-support/shim-model-class.ts","../src/-private/managers/cache-manager.ts","../src/-private/managers/notification-manager.ts","../src/-private/record-arrays/identifier-array.ts","../src/-private/managers/record-array-manager.ts","../src/-private/network/request-cache.ts","../src/-private/utils/construct-resource.ts","../src/-private/store-service.ts"],"sourcesContent":["export default function _initializerDefineProperty(target, property, descriptor, context) {\n  if (!descriptor) return;\n  Object.defineProperty(target, property, {\n    enumerable: descriptor.enumerable,\n    configurable: descriptor.configurable,\n    writable: descriptor.writable,\n    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0\n  });\n}","export default function _classPrivateFieldBase(receiver, privateKey) {\n  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n    throw new TypeError(\"attempted to use private field on non-instance\");\n  }\n  return receiver;\n}","var id = 0;\nexport default function _classPrivateFieldKey(name) {\n  return \"__private_\" + id++ + \"_\" + name;\n}","export default function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object.keys(descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n  if (desc.initializer === void 0) {\n    Object.defineProperty(target, property, desc);\n    desc = null;\n  }\n  return desc;\n}","import { assert } from '@ember/debug';\nimport { tracked } from '@glimmer/tracking';\n\nimport { RequestInfo } from '@ember-data/request/-private/types';\nimport { StableDocumentIdentifier } from '@ember-data/types/cache/identifier';\nimport { Link, PaginationLinks } from '@ember-data/types/q/ember-data-json-api';\n\nimport type Store from './store-service';\n\nfunction urlFromLink(link: Link): string {\n  if (typeof link === 'string') return link;\n  return link.href;\n}\n\nexport class Document<T> {\n  @tracked links?: PaginationLinks;\n  @tracked data?: T;\n  @tracked errors?: object;\n  @tracked meta?: object;\n\n  declare identifier: StableDocumentIdentifier | null;\n\n  #store: Store;\n  constructor(store: Store, identifier: StableDocumentIdentifier | null) {\n    this.#store = store;\n    this.identifier = identifier;\n  }\n\n  async #request(link: keyof PaginationLinks, options: object = {}): Promise<Document<T> | null> {\n    const href = this.links?.[link];\n    if (!href) {\n      return null;\n    }\n\n    const response = await this.#store.request<Document<T>>(Object.assign(options, { url: urlFromLink(href) }));\n\n    return response.content;\n  }\n\n  fetch(options: Partial<RequestInfo> = {}): Promise<Document<T>> {\n    assert(`No self link`, this.links?.self);\n    options.cacheOptions = options.cacheOptions || {};\n    options.cacheOptions.key = this.identifier?.lid;\n    return this.#request('self', options) as Promise<Document<T>>;\n  }\n\n  next(options?: object): Promise<Document<T> | null> {\n    return this.#request('next', options);\n  }\n\n  prev(options?: object): Promise<Document<T> | null> {\n    return this.#request('prev', options);\n  }\n\n  first(options?: object): Promise<Document<T> | null> {\n    return this.#request('first', options);\n  }\n\n  last(options?: object): Promise<Document<T> | null> {\n    return this.#request('last', options);\n  }\n\n  toJSON(): object {\n    const data: Partial<Document<T>> = {};\n    data.identifier = this.identifier;\n    if (this.data !== undefined) {\n      data.data = this.data;\n    }\n    if (this.links !== undefined) {\n      data.links = this.links;\n    }\n    if (this.errors !== undefined) {\n      data.errors = this.errors;\n    }\n    if (this.meta !== undefined) {\n      data.meta = this.meta;\n    }\n    return data;\n  }\n}\n","import type {\n  Future,\n  Handler,\n  ImmutableRequestInfo,\n  NextFn,\n  RequestContext,\n  StructuredErrorDocument,\n} from '@ember-data/request/-private/types';\nimport type Store from '@ember-data/store';\nimport {\n  CollectionResourceDataDocument,\n  ResourceDataDocument,\n  ResourceErrorDocument,\n} from '@ember-data/types/cache/document';\nimport { StableDocumentIdentifier } from '@ember-data/types/cache/identifier';\nimport { RecordInstance } from '@ember-data/types/q/record-instance';\n\nimport { Document } from './document';\n\nexport type HTTPMethod = 'GET' | 'OPTIONS' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';\n\nexport interface LifetimesService {\n  isHardExpired(identifier: StableDocumentIdentifier): boolean;\n  isSoftExpired(identifier: StableDocumentIdentifier): boolean;\n}\n\nexport type StoreRequestInfo = ImmutableRequestInfo;\n\nexport interface StoreRequestContext extends RequestContext {\n  request: StoreRequestInfo & { store: Store };\n}\n\nfunction isErrorDocument(document: ResourceDataDocument | ResourceErrorDocument): document is ResourceErrorDocument {\n  return 'errors' in document;\n}\n\nfunction maybeUpdateUiObjects<T>(\n  store: Store,\n  request: StoreRequestInfo,\n  options: {\n    shouldHydrate?: boolean;\n    shouldFetch?: boolean;\n    shouldBackgroundFetch?: boolean;\n    identifier: StableDocumentIdentifier | null;\n  },\n  document: ResourceDataDocument | ResourceErrorDocument,\n  isFromCache: boolean\n): T {\n  const { identifier } = options;\n\n  if (isErrorDocument(document)) {\n    if (!identifier && !options.shouldHydrate) {\n      return document as T;\n    }\n    let doc: Document<undefined> | undefined;\n    if (identifier) {\n      doc = store._documentCache.get(identifier) as Document<undefined> | undefined;\n    }\n\n    if (!doc) {\n      doc = new Document<undefined>(store, identifier);\n      copyDocumentProperties(doc, document);\n\n      if (identifier) {\n        store._documentCache.set(identifier, doc);\n      }\n    } else if (!isFromCache) {\n      doc.data = undefined;\n      copyDocumentProperties(doc, document);\n    }\n\n    return options.shouldHydrate ? (doc as T) : (document as T);\n  }\n\n  if (Array.isArray(document.data)) {\n    const { recordArrayManager } = store;\n    if (!identifier) {\n      if (!options.shouldHydrate) {\n        return document as T;\n      }\n      const data = recordArrayManager.createArray({\n        identifiers: document.data,\n        doc: document as CollectionResourceDataDocument,\n        query: request,\n      }) as T;\n\n      const doc = new Document(store, null);\n      doc.data = data;\n      doc.meta = document.meta;\n      doc.links = document.links;\n\n      return doc as T;\n    }\n    let managed = recordArrayManager._keyedArrays.get(identifier.lid);\n\n    if (!managed) {\n      managed = recordArrayManager.createArray({\n        identifiers: document.data,\n        doc: document as CollectionResourceDataDocument,\n      });\n      recordArrayManager._keyedArrays.set(identifier.lid, managed);\n      const doc = new Document<RecordInstance[]>(store, identifier);\n      doc.data = managed;\n      doc.meta = document.meta;\n      doc.links = document.links;\n      store._documentCache.set(identifier, doc);\n\n      return options.shouldHydrate ? (doc as T) : (document as T);\n    } else {\n      const doc = store._documentCache.get(identifier)!;\n      if (!isFromCache) {\n        recordArrayManager.populateManagedArray(managed, document.data, document as CollectionResourceDataDocument);\n        doc.data = managed;\n        doc.meta = document.meta;\n        doc.links = document.links;\n      }\n\n      return options.shouldHydrate ? (doc as T) : (document as T);\n    }\n  } else {\n    if (!identifier && !options.shouldHydrate) {\n      return document as T;\n    }\n    const data = document.data ? store.peekRecord(document.data) : null;\n    let doc: Document<RecordInstance | null> | undefined;\n    if (identifier) {\n      doc = store._documentCache.get(identifier) as Document<RecordInstance | null> | undefined;\n    }\n\n    if (!doc) {\n      doc = new Document<RecordInstance | null>(store, identifier);\n      doc.data = data;\n      copyDocumentProperties(doc, document);\n\n      if (identifier) {\n        store._documentCache.set(identifier, doc);\n      }\n    } else if (!isFromCache) {\n      doc.data = data;\n      copyDocumentProperties(doc, document);\n    }\n\n    return options.shouldHydrate ? (doc as T) : (document as T);\n  }\n}\n\nfunction calcShouldFetch(\n  store: Store,\n  request: StoreRequestInfo,\n  hasCachedValue: boolean,\n  identifier: StableDocumentIdentifier | null\n): boolean {\n  const { cacheOptions } = request;\n  return (\n    cacheOptions?.reload ||\n    !hasCachedValue ||\n    (store.lifetimes && identifier ? store.lifetimes.isHardExpired(identifier) : false)\n  );\n}\n\nfunction calcShouldBackgroundFetch(\n  store: Store,\n  request: StoreRequestInfo,\n  willFetch: boolean,\n  identifier: StableDocumentIdentifier | null\n): boolean {\n  const { cacheOptions } = request;\n  return (\n    !willFetch &&\n    (cacheOptions?.backgroundReload ||\n      (store.lifetimes && identifier ? store.lifetimes.isSoftExpired(identifier) : false))\n  );\n}\n\nfunction fetchContentAndHydrate<T>(\n  next: NextFn<T>,\n  context: StoreRequestContext,\n  identifier: StableDocumentIdentifier | null,\n  shouldFetch: boolean,\n  shouldBackgroundFetch: boolean\n): Promise<T> {\n  const { store } = context.request;\n  const shouldHydrate: boolean =\n    (context.request[Symbol.for('ember-data:enable-hydration')] as boolean | undefined) || false;\n  return next(context.request).then(\n    (document) => {\n      store.requestManager._pending.delete(context.id);\n      store._enableAsyncFlush = true;\n      let response: ResourceDataDocument;\n      store._join(() => {\n        response = store.cache.put(document) as ResourceDataDocument;\n        response = maybeUpdateUiObjects(\n          store,\n          context.request,\n          { shouldHydrate, shouldFetch, shouldBackgroundFetch, identifier },\n          response,\n          false\n        );\n      });\n      store._enableAsyncFlush = null;\n\n      if (shouldFetch) {\n        return response!;\n      } else if (shouldBackgroundFetch) {\n        store.notifications._flush();\n      }\n    },\n    (error: StructuredErrorDocument) => {\n      store.requestManager._pending.delete(context.id);\n      if (context.request.signal?.aborted) {\n        throw error;\n      }\n      store.requestManager._pending.delete(context.id);\n      store._enableAsyncFlush = true;\n      let response: ResourceErrorDocument;\n      store._join(() => {\n        response = store.cache.put(error) as ResourceErrorDocument;\n        response = maybeUpdateUiObjects(\n          store,\n          context.request,\n          { shouldHydrate, shouldFetch, shouldBackgroundFetch, identifier },\n          response,\n          false\n        );\n      });\n      store._enableAsyncFlush = null;\n\n      if (!shouldBackgroundFetch) {\n        const newError = cloneError(error);\n        newError.content = response!;\n        throw newError;\n      } else {\n        store.notifications._flush();\n      }\n    }\n  ) as Promise<T>;\n}\n\nfunction cloneError(error: Error & { error: string | object }) {\n  const cloned: Error & { error: string | object; content: object } = new Error(error.message) as Error & {\n    error: string | object;\n    content: object;\n  };\n  cloned.stack = error.stack;\n  cloned.error = error.error;\n  return cloned;\n}\n\nexport const SkipCache = Symbol.for('ember-data:skip-cache');\nexport const EnableHydration = Symbol.for('ember-data:enable-hydration');\n\nexport const CacheHandler: Handler = {\n  request<T>(context: StoreRequestContext, next: NextFn<T>): Promise<T> | Future<T> {\n    // if we have no cache or no cache-key skip cache handling\n    if (!context.request.store || context.request.cacheOptions?.[SkipCache]) {\n      return next(context.request);\n    }\n\n    const { store } = context.request;\n    const identifier = store.identifierCache.getOrCreateDocumentIdentifier(context.request);\n\n    const peeked = identifier ? store.cache.peekRequest(identifier) : null;\n\n    // determine if we should skip cache\n    if (calcShouldFetch(store, context.request, !!peeked, identifier)) {\n      return fetchContentAndHydrate(next, context, identifier, true, false);\n    }\n\n    // if we have not skipped cache, determine if we should update behind the scenes\n    if (calcShouldBackgroundFetch(store, context.request, false, identifier)) {\n      let promise = fetchContentAndHydrate(next, context, identifier, false, true);\n      store.requestManager._pending.set(context.id, promise);\n    }\n\n    const shouldHydrate: boolean = (context.request[EnableHydration] as boolean | undefined) || false;\n\n    if ('error' in peeked!) {\n      const content = shouldHydrate\n        ? maybeUpdateUiObjects<T>(\n            store,\n            context.request,\n            { shouldHydrate, identifier },\n            peeked.content as ResourceErrorDocument,\n            true\n          )\n        : peeked.content;\n      const newError = cloneError(peeked);\n      newError.content = content as object;\n      throw newError;\n    }\n\n    return Promise.resolve(\n      shouldHydrate\n        ? maybeUpdateUiObjects<T>(\n            store,\n            context.request,\n            { shouldHydrate, identifier },\n            peeked!.content as ResourceDataDocument,\n            true\n          )\n        : (peeked!.content as T)\n    );\n  },\n};\n\nfunction copyDocumentProperties(target: { links?: unknown; meta?: unknown; errors?: unknown }, source: object) {\n  if ('links' in source) {\n    target.links = source.links;\n  }\n  if ('meta' in source) {\n    target.meta = source.meta;\n  }\n  if ('errors' in source) {\n    target.errors = source.errors;\n  }\n}\n","import { assert } from '@ember/debug';\n\nimport type { Cache } from '@ember-data/types/q/cache';\nimport type { StableRecordIdentifier } from '@ember-data/types/q/identifier';\nimport type { RecordInstance } from '@ember-data/types/q/record-instance';\n\n/*\n * Returns the Cache instance associated with a given\n * Model or Identifier\n */\n\nexport const CacheForIdentifierCache = new Map<StableRecordIdentifier | RecordInstance, Cache>();\n\nexport function setCacheFor(identifier: StableRecordIdentifier | RecordInstance, cache: Cache): void {\n  assert(\n    `Illegal set of identifier`,\n    !CacheForIdentifierCache.has(identifier) || CacheForIdentifierCache.get(identifier) === cache\n  );\n  CacheForIdentifierCache.set(identifier, cache);\n}\n\nexport function removeRecordDataFor(identifier: StableRecordIdentifier | RecordInstance): void {\n  CacheForIdentifierCache.delete(identifier);\n}\n\nexport default function peekCache(instance: StableRecordIdentifier): Cache | null;\nexport default function peekCache(instance: RecordInstance): Cache;\nexport default function peekCache(instance: StableRecordIdentifier | RecordInstance): Cache | null {\n  if (CacheForIdentifierCache.has(instance as StableRecordIdentifier)) {\n    return CacheForIdentifierCache.get(instance as StableRecordIdentifier) as Cache;\n  }\n\n  return null;\n}\n","/**\n  @module @ember-data/store\n*/\n\n// Used by the store to normalize IDs entering the store.  Despite the fact\n// that developers may provide IDs as numbers (e.g., `store.findRecord('person', 1)`),\n// it is important that internally we use strings, since IDs may be serialized\n// and lose type information.  For example, Ember's router may put a record's\n// ID into the URL, and if we later try to deserialize that URL and find the\n// corresponding record, we will not know if it is a string or a number.\ntype Coercable = string | number | boolean | null | undefined | symbol;\n\nfunction coerceId(id: Coercable): string | null {\n  if (id === null || id === undefined || id === '') {\n    return null;\n  }\n  if (typeof id === 'string') {\n    return id;\n  }\n  if (typeof id === 'symbol') {\n    return id.toString();\n  }\n  return '' + id;\n}\n\nexport function ensureStringId(id: Coercable): string {\n  let normalized: string | null = null;\n  if (typeof id === 'string') {\n    normalized = id.length > 0 ? id : null;\n  } else if (typeof id === 'number' && !isNaN(id)) {\n    normalized = '' + id;\n  }\n\n  if (normalized === null) {\n    throw new Error(`Expected id to be a string or number, received ${String(id)}`);\n  }\n\n  return normalized;\n}\n\nexport default coerceId;\n","// provided for additional debuggability\nexport const DEBUG_CLIENT_ORIGINATED: unique symbol = Symbol('record-originated-on-client');\nexport const DEBUG_IDENTIFIER_BUCKET: unique symbol = Symbol('identifier-bucket');\n","export default function isNonEmptyString(str: any): str is string {\n  return str && typeof str === 'string';\n}\n","import { dasherize } from '@ember/string';\n\nexport default function normalizeModelName(modelName: string): string {\n  return dasherize(modelName);\n}\n","/**\n  @module @ember-data/store\n*/\ninterface FastbootCrypto {\n  randomFillSync(v: Uint8Array): Uint8Array;\n}\n\ntype UUIDv4 = `${string}-${string}-${string}-${string}-${string}`;\n\nexport default function installPolyfill() {\n  const isFastBoot = typeof FastBoot !== 'undefined';\n  const CRYPTO: Crypto = isFastBoot ? (FastBoot.require('crypto') as Crypto) : window.crypto;\n\n  if (!CRYPTO.randomUUID) {\n    // we might be able to optimize this by requesting more bytes than we need at a time\n    const rng = function (): Uint8Array {\n      // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n      let rnds8 = new Uint8Array(16);\n\n      if (!CRYPTO.getRandomValues && !isFastBoot) {\n        throw new Error(`Unable to generate bytes for UUID`);\n      }\n\n      return CRYPTO.getRandomValues\n        ? CRYPTO.getRandomValues(rnds8)\n        : (CRYPTO as unknown as FastbootCrypto).randomFillSync(rnds8);\n    };\n\n    /*\n     * Convert array of 16 byte values to UUID string format of the form:\n     * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n     */\n    const byteToHex: string[] = [];\n    for (let i = 0; i < 256; ++i) {\n      byteToHex[i] = (i + 0x100).toString(16).substr(1);\n    }\n\n    const bytesToUuid = function (buf: Uint8Array): UUIDv4 {\n      let bth = byteToHex;\n      // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n      return [\n        bth[buf[0]],\n        bth[buf[1]],\n        bth[buf[2]],\n        bth[buf[3]],\n        '-',\n        bth[buf[4]],\n        bth[buf[5]],\n        '-',\n        bth[buf[6]],\n        bth[buf[7]],\n        '-',\n        bth[buf[8]],\n        bth[buf[9]],\n        '-',\n        bth[buf[10]],\n        bth[buf[11]],\n        bth[buf[12]],\n        bth[buf[13]],\n        bth[buf[14]],\n        bth[buf[15]],\n      ].join('') as UUIDv4;\n    };\n\n    CRYPTO.randomUUID = function uuidv4(): UUIDv4 {\n      let rnds = rng();\n\n      // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n      rnds[6] = (rnds[6] & 0x0f) | 0x40;\n      rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n      return bytesToUuid(rnds);\n    };\n  }\n}\n","/**\n  @module @ember-data/store\n*/\nimport { assert, warn } from '@ember/debug';\n\nimport { getOwnConfig, macroCondition } from '@embroider/macros';\n\nimport { LOG_IDENTIFIERS } from '@ember-data/debugging';\nimport { DEBUG } from '@ember-data/env';\nimport { ImmutableRequestInfo } from '@ember-data/request/-private/types';\nimport { StableDocumentIdentifier } from '@ember-data/types/cache/identifier';\nimport type { ExistingResourceObject, ResourceIdentifierObject } from '@ember-data/types/q/ember-data-json-api';\nimport type {\n  ForgetMethod,\n  GenerationMethod,\n  Identifier,\n  IdentifierBucket,\n  RecordIdentifier,\n  ResetMethod,\n  ResourceData,\n  StableExistingRecordIdentifier,\n  StableRecordIdentifier,\n  UpdateMethod,\n} from '@ember-data/types/q/identifier';\n\nimport coerceId from '../utils/coerce-id';\nimport { DEBUG_CLIENT_ORIGINATED, DEBUG_IDENTIFIER_BUCKET } from '../utils/identifier-debug-consts';\nimport isNonEmptyString from '../utils/is-non-empty-string';\nimport normalizeModelName from '../utils/normalize-model-name';\nimport installPolyfill from '../utils/uuid-polyfill';\n\nconst IDENTIFIERS = new Set();\nconst DOCUMENTS = new Set();\n\nexport function isStableIdentifier(identifier: unknown): identifier is StableRecordIdentifier {\n  return IDENTIFIERS.has(identifier);\n}\n\nexport function isDocumentIdentifier(identifier: unknown): identifier is StableDocumentIdentifier {\n  return DOCUMENTS.has(identifier);\n}\n\nconst isFastBoot = typeof FastBoot !== 'undefined';\nconst _crypto: Crypto = isFastBoot ? (FastBoot.require('crypto') as Crypto) : window.crypto;\n\nif (macroCondition(getOwnConfig<{ polyfillUUID: boolean }>().polyfillUUID)) {\n  installPolyfill();\n}\n\nfunction uuidv4(): string {\n  assert(\n    'crypto.randomUUID needs to be avaliable. Some browsers incorrectly disallow it in insecure contexts. You maybe want to enable the polyfill: https://github.com/emberjs/data#randomuuid-polyfill',\n    _crypto.randomUUID\n  );\n  return _crypto.randomUUID();\n}\n\nfunction freeze<T>(obj: T): T {\n  if (typeof Object.freeze === 'function') {\n    return Object.freeze(obj);\n  }\n  return obj;\n}\n\ninterface KeyOptions {\n  lid: IdentifierMap;\n  id: IdentifierMap;\n}\ntype TypeMap = { [key: string]: KeyOptions };\ntype IdentifierMap = Map<string, StableRecordIdentifier>;\nexport type MergeMethod = (\n  targetIdentifier: StableRecordIdentifier,\n  matchedIdentifier: StableRecordIdentifier,\n  resourceData: ResourceIdentifierObject | ExistingResourceObject\n) => StableRecordIdentifier;\n\nlet configuredForgetMethod: ForgetMethod | null;\nlet configuredGenerationMethod: GenerationMethod | null;\nlet configuredResetMethod: ResetMethod | null;\nlet configuredUpdateMethod: UpdateMethod | null;\n\nexport function setIdentifierGenerationMethod(method: GenerationMethod | null): void {\n  configuredGenerationMethod = method;\n}\n\nexport function setIdentifierUpdateMethod(method: UpdateMethod | null): void {\n  configuredUpdateMethod = method;\n}\n\nexport function setIdentifierForgetMethod(method: ForgetMethod | null): void {\n  configuredForgetMethod = method;\n}\n\nexport function setIdentifierResetMethod(method: ResetMethod | null): void {\n  configuredResetMethod = method;\n}\n\ntype WithLid = { lid: string };\ntype WithId = { id: string | null; type: string };\n\nfunction assertIsRequest(request: unknown): asserts request is ImmutableRequestInfo {\n  return;\n}\n\nfunction defaultGenerationMethod(data: ImmutableRequestInfo, bucket: 'document'): string | null;\nfunction defaultGenerationMethod(data: ResourceData | { type: string }, bucket: 'record'): string;\nfunction defaultGenerationMethod(\n  data: ImmutableRequestInfo | ResourceData | { type: string },\n  bucket: IdentifierBucket\n): string | null {\n  if (bucket === 'record') {\n    if (isNonEmptyString((data as WithLid).lid)) {\n      return (data as WithLid).lid;\n    }\n    if ((data as WithId).id !== undefined) {\n      let { type, id } = data as WithId;\n      // TODO: add test for id not a string\n      if (isNonEmptyString(coerceId(id))) {\n        return `@lid:${normalizeModelName(type)}-${id}`;\n      }\n    }\n    return uuidv4();\n  } else if (bucket === 'document') {\n    assertIsRequest(data);\n    if (!data.url) {\n      return null;\n    }\n    if (!data.method || data.method.toUpperCase() === 'GET') {\n      return data.url;\n    }\n    return null;\n  }\n  assert(`Unknown bucket ${bucket}`, false);\n}\n\nfunction defaultEmptyCallback(...args: any[]): any {}\n\nlet DEBUG_MAP;\nif (DEBUG) {\n  DEBUG_MAP = new WeakMap<StableRecordIdentifier, StableRecordIdentifier>();\n}\n\n/**\n * Each instance of {Store} receives a unique instance of a IdentifierCache.\n *\n * This cache is responsible for assigning or retrieving the unique identify\n * for arbitrary resource data encountered by the store. Data representing\n * a unique resource or record should always be represented by the same\n * identifier.\n *\n * It can be configured by consuming applications.\n *\n * @class IdentifierCache\n   @public\n */\nexport class IdentifierCache {\n  _cache = {\n    lids: new Map<string, StableRecordIdentifier>(),\n    types: Object.create(null) as TypeMap,\n    documents: new Map<string, StableDocumentIdentifier>(),\n  };\n  declare _generate: GenerationMethod;\n  declare _update: UpdateMethod;\n  declare _forget: ForgetMethod;\n  declare _reset: ResetMethod;\n  declare _merge: MergeMethod;\n  declare _isDefaultConfig: boolean;\n\n  constructor() {\n    // we cache the user configuredGenerationMethod at init because it must\n    // be configured prior and is not allowed to be changed\n    this._generate = configuredGenerationMethod || (defaultGenerationMethod as GenerationMethod);\n    this._update = configuredUpdateMethod || defaultEmptyCallback;\n    this._forget = configuredForgetMethod || defaultEmptyCallback;\n    this._reset = configuredResetMethod || defaultEmptyCallback;\n    this._merge = defaultEmptyCallback;\n    this._isDefaultConfig = !configuredGenerationMethod;\n  }\n\n  /**\n   * Internal hook to allow management of merge conflicts with identifiers.\n   *\n   * we allow late binding of this private internal merge so that\n   * the cache can insert itself here to handle elimination of duplicates\n   *\n   * @method __configureMerge\n   * @private\n   */\n  __configureMerge(method: MergeMethod | null) {\n    this._merge = method || defaultEmptyCallback;\n  }\n\n  /**\n   * @method _getRecordIdentifier\n   * @private\n   */\n  _getRecordIdentifier(resource: ResourceIdentifierObject, shouldGenerate: true): StableRecordIdentifier;\n  _getRecordIdentifier(resource: ResourceIdentifierObject, shouldGenerate: false): StableRecordIdentifier | undefined;\n  _getRecordIdentifier(\n    resource: ResourceIdentifierObject,\n    shouldGenerate: boolean = false\n  ): StableRecordIdentifier | undefined {\n    // short circuit if we're already the stable version\n    if (isStableIdentifier(resource)) {\n      if (DEBUG) {\n        // TODO should we instead just treat this case as a new generation skipping the short circuit?\n        if (!this._cache.lids.has(resource.lid) || this._cache.lids.get(resource.lid) !== resource) {\n          throw new Error(`The supplied identifier ${resource} does not belong to this store instance`);\n        }\n      }\n      if (LOG_IDENTIFIERS) {\n        // eslint-disable-next-line no-console\n        console.log(`Identifiers: Peeked Identifier was already Stable ${String(resource)}`);\n      }\n      return resource;\n    }\n\n    let lid = coerceId(resource.lid);\n    let identifier: StableRecordIdentifier | undefined = lid !== null ? this._cache.lids.get(lid) : undefined;\n\n    if (identifier !== undefined) {\n      if (LOG_IDENTIFIERS) {\n        // eslint-disable-next-line no-console\n        console.log(`Identifiers: cache HIT ${identifier}`, resource);\n      }\n      return identifier;\n    }\n\n    if (LOG_IDENTIFIERS) {\n      // eslint-disable-next-line no-console\n      console.groupCollapsed(`Identifiers: ${shouldGenerate ? 'Generating' : 'Peeking'} Identifier`, resource);\n    }\n\n    if (shouldGenerate === false) {\n      if (!(resource as ExistingResourceObject).type || !(resource as ExistingResourceObject).id) {\n        return;\n      }\n    }\n\n    // `type` must always be present\n    assert('resource.type needs to be a string', 'type' in resource && isNonEmptyString(resource.type));\n\n    let type = resource.type && normalizeModelName(resource.type);\n    let id = coerceId(resource.id);\n\n    let keyOptions = getTypeIndex(this._cache.types, type);\n\n    // go straight for the stable RecordIdentifier key'd to `lid`\n    if (lid !== null) {\n      identifier = keyOptions.lid.get(lid);\n    }\n\n    // we may have not seen this resource before\n    // but just in case we check our own secondary lookup (`id`)\n    if (identifier === undefined && id !== null) {\n      identifier = keyOptions.id.get(id);\n    }\n\n    if (identifier === undefined) {\n      // we have definitely not seen this resource before\n      // so we allow the user configured `GenerationMethod` to tell us\n      let newLid = this._generate(resource, 'record');\n      if (LOG_IDENTIFIERS) {\n        // eslint-disable-next-line no-console\n        console.log(`Identifiers: lid ${newLid} determined for resource`, resource);\n      }\n\n      // we do this _even_ when `lid` is present because secondary lookups\n      // may need to be populated, but we enforce not giving us something\n      // different than expected\n      if (lid !== null && newLid !== lid) {\n        throw new Error(`You should not change the <lid> of a RecordIdentifier`);\n      } else if (lid === null && !this._isDefaultConfig) {\n        // allow configuration to tell us that we have\n        // seen this `lid` before. E.g. a secondary lookup\n        // connects this resource to a previously seen\n        // resource.\n        identifier = keyOptions.lid.get(newLid);\n      }\n\n      if (shouldGenerate === true) {\n        if (identifier === undefined) {\n          // if we still don't have an identifier, time to generate one\n          identifier = makeStableRecordIdentifier(id, type, newLid, 'record', false);\n\n          // populate our unique table\n          if (DEBUG) {\n            // realistically if you hit this it means you changed `type` :/\n            // TODO consider how to handle type change assertions more gracefully\n            if (this._cache.lids.has(identifier.lid)) {\n              throw new Error(`You should not change the <type> of a RecordIdentifier`);\n            }\n          }\n          this._cache.lids.set(identifier.lid, identifier);\n\n          // populate our primary lookup table\n          // TODO consider having the `lid` cache be\n          // one level up\n          keyOptions.lid.set(identifier.lid, identifier);\n\n          if (LOG_IDENTIFIERS) {\n            if (shouldGenerate) {\n              // eslint-disable-next-line no-console\n              console.log(`Identifiers: generated ${String(identifier)} for`, resource);\n              if (resource[DEBUG_IDENTIFIER_BUCKET]) {\n                // eslint-disable-next-line no-console\n                console.trace(\n                  `[WARNING] Identifiers: generated a new identifier from a previously used identifier. This is likely a bug.`\n                );\n              }\n            }\n          }\n        }\n\n        // populate our own secondary lookup table\n        // even for the \"successful\" secondary lookup\n        // by `_generate()`, since we missed the cache\n        // previously\n        // we use identifier.id instead of id here\n        // because they may not match and we prefer\n        // what we've set via resource data\n        if (identifier.id !== null) {\n          keyOptions.id.set(identifier.id, identifier);\n\n          // TODO allow filling out of `id` here\n          // for the `username` non-client created\n          // case.\n        }\n      }\n    }\n\n    if (LOG_IDENTIFIERS) {\n      if (!identifier && !shouldGenerate) {\n        // eslint-disable-next-line no-console\n        console.log(`Identifiers: cache MISS`, resource);\n      }\n      // eslint-disable-next-line no-console\n      console.groupEnd();\n    }\n\n    return identifier;\n  }\n\n  /**\n   * allows us to peek without generating when needed\n   * useful for the \"create\" case when we need to see if\n   * we are accidentally overwritting something\n   *\n   * @method peekRecordIdentifier\n   * @param resource\n   * @returns {StableRecordIdentifier | undefined}\n   * @private\n   */\n  peekRecordIdentifier(resource: ResourceIdentifierObject | Identifier): StableRecordIdentifier | undefined {\n    return this._getRecordIdentifier(resource, false);\n  }\n\n  /**\n    Returns the DocumentIdentifier for the given Request, creates one if it does not yet exist.\n    Returns `null` if the request does not have a `cacheKey` or `url`.\n\n    @method getOrCreateDocumentIdentifier\n    @param request\n    @returns {StableDocumentIdentifier | null}\n    @public\n  */\n  getOrCreateDocumentIdentifier(request: ImmutableRequestInfo): StableDocumentIdentifier | null {\n    let cacheKey: string | null | undefined = request.cacheOptions?.key;\n\n    if (!cacheKey) {\n      cacheKey = this._generate(request, 'document');\n    }\n\n    if (!cacheKey) {\n      return null;\n    }\n\n    let identifier = this._cache.documents.get(cacheKey);\n\n    if (identifier === undefined) {\n      identifier = { lid: cacheKey };\n      if (DEBUG) {\n        Object.freeze(identifier);\n      }\n      DOCUMENTS.add(identifier);\n      this._cache.documents.set(cacheKey, identifier);\n    }\n\n    return identifier;\n  }\n\n  /**\n    Returns the Identifier for the given Resource, creates one if it does not yet exist.\n\n    Specifically this means that we:\n\n    - validate the `id` `type` and `lid` combo against known identifiers\n    - return an object with an `lid` that is stable (repeated calls with the same\n      `id` + `type` or `lid` will return the same `lid` value)\n    - this referential stability of the object itself is guaranteed\n\n    @method getOrCreateRecordIdentifier\n    @param resource\n    @returns {StableRecordIdentifier}\n    @public\n  */\n  getOrCreateRecordIdentifier(resource: ExistingResourceObject): StableExistingRecordIdentifier;\n  getOrCreateRecordIdentifier(\n    resource: ResourceIdentifierObject | Identifier | StableRecordIdentifier\n  ): StableRecordIdentifier;\n  getOrCreateRecordIdentifier(resource: ResourceData | Identifier): StableRecordIdentifier {\n    return this._getRecordIdentifier(resource, true);\n  }\n\n  /**\n   Returns a new Identifier for the supplied data. Call this method to generate\n   an identifier when a new resource is being created local to the client and\n   potentially does not have an `id`.\n\n   Delegates generation to the user supplied `GenerateMethod` if one has been provided\n   with the signature `generateMethod({ type }, 'record')`.\n\n   @method createIdentifierForNewRecord\n   @param data\n   @returns {StableRecordIdentifier}\n   @public\n  */\n  createIdentifierForNewRecord(data: { type: string; id?: string | null }): StableRecordIdentifier {\n    let newLid = this._generate(data, 'record');\n    let identifier = makeStableRecordIdentifier(data.id || null, data.type, newLid, 'record', true);\n    let keyOptions = getTypeIndex(this._cache.types, data.type);\n\n    // populate our unique table\n    if (DEBUG) {\n      if (this._cache.lids.has(identifier.lid)) {\n        throw new Error(`The lid generated for the new record is not unique as it matches an existing identifier`);\n      }\n    }\n    this._cache.lids.set(identifier.lid, identifier);\n\n    // populate the type+lid cache\n    keyOptions.lid.set(newLid, identifier);\n    if (data.id) {\n      keyOptions.id.set(data.id, identifier);\n    }\n\n    if (LOG_IDENTIFIERS) {\n      // eslint-disable-next-line no-console\n      console.log(`Identifiers: created identifier ${String(identifier)} for newly generated resource`, data);\n    }\n\n    return identifier;\n  }\n\n  /**\n   Provides the opportunity to update secondary lookup tables for existing identifiers\n   Called after an identifier created with `createIdentifierForNewRecord` has been\n   committed.\n\n   Assigned `id` to an `Identifier` if `id` has not previously existed; however,\n   attempting to change the `id` or calling update without providing an `id` when\n   one is missing will throw an error.\n\n    - sets `id` (if `id` was previously `null`)\n    - `lid` and `type` MUST NOT be altered post creation\n\n    If a merge occurs, it is possible the returned identifier does not match the originally\n    provided identifier. In this case the abandoned identifier will go through the usual\n    `forgetRecordIdentifier` codepaths.\n\n    @method updateRecordIdentifier\n    @param identifierObject\n    @param data\n    @returns {StableRecordIdentifier}\n    @public\n  */\n  updateRecordIdentifier(identifierObject: RecordIdentifier, data: ResourceData): StableRecordIdentifier {\n    let identifier = this.getOrCreateRecordIdentifier(identifierObject);\n\n    let newId =\n      (data as ExistingResourceObject).id !== undefined ? coerceId((data as ExistingResourceObject).id) : null;\n    let existingIdentifier = detectMerge(this._cache.types, identifier, data, newId, this._cache.lids);\n\n    if (!existingIdentifier) {\n      // If the incoming type does not match the identifier type, we need to create an identifier for the incoming\n      // data so we can merge the incoming data with the existing identifier, see #7325 and #7363\n      if (\n        (data as ExistingResourceObject).type &&\n        identifier.type !== normalizeModelName((data as ExistingResourceObject).type)\n      ) {\n        let incomingDataResource = { ...data };\n        // Need to strip the lid from the incomingData in order force a new identifier creation\n        delete incomingDataResource.lid;\n        existingIdentifier = this.getOrCreateRecordIdentifier(incomingDataResource);\n      }\n    }\n\n    if (existingIdentifier) {\n      let keyOptions = getTypeIndex(this._cache.types, identifier.type);\n      let generatedIdentifier = identifier;\n      identifier = this._mergeRecordIdentifiers(\n        keyOptions,\n        generatedIdentifier,\n        existingIdentifier,\n        data,\n        newId as string\n      );\n      if (LOG_IDENTIFIERS) {\n        // eslint-disable-next-line no-console\n        console.log(\n          `Identifiers: merged identifiers ${generatedIdentifier.lid} and ${existingIdentifier.lid} for resource into ${identifier.lid}`,\n          data\n        );\n      }\n    }\n\n    let id = identifier.id;\n    performRecordIdentifierUpdate(identifier, data, this._update);\n    newId = identifier.id;\n\n    // add to our own secondary lookup table\n    if (id !== newId && newId !== null) {\n      if (LOG_IDENTIFIERS) {\n        // eslint-disable-next-line no-console\n        console.log(\n          `Identifiers: updated id for identifier ${identifier.lid} from '${id}' to '${newId}' for resource`,\n          data\n        );\n      }\n      let keyOptions = getTypeIndex(this._cache.types, identifier.type);\n      keyOptions.id.set(newId, identifier);\n\n      if (id !== null) {\n        keyOptions.id.delete(id);\n      }\n    } else if (LOG_IDENTIFIERS) {\n      // eslint-disable-next-line no-console\n      console.log(`Identifiers: updated identifier ${identifier.lid} resource`, data);\n    }\n\n    return identifier;\n  }\n\n  /**\n   * @method _mergeRecordIdentifiers\n   * @private\n   */\n  _mergeRecordIdentifiers(\n    keyOptions: KeyOptions,\n    identifier: StableRecordIdentifier,\n    existingIdentifier: StableRecordIdentifier,\n    data: ResourceIdentifierObject | ExistingResourceObject,\n    newId: string\n  ): StableRecordIdentifier {\n    // delegate determining which identifier to keep to the configured MergeMethod\n    let kept = this._merge(identifier, existingIdentifier, data);\n    let abandoned = kept === identifier ? existingIdentifier : identifier;\n\n    // cleanup the identifier we no longer need\n    this.forgetRecordIdentifier(abandoned);\n\n    // ensure a secondary cache entry for this id for the identifier we do keep\n    keyOptions.id.set(newId, kept);\n    // ensure a secondary cache entry for this id for the abandoned identifier's type we do keep\n    let baseKeyOptions = getTypeIndex(this._cache.types, existingIdentifier.type);\n    baseKeyOptions.id.set(newId, kept);\n\n    // make sure that the `lid` on the data we are processing matches the lid we kept\n    data.lid = kept.lid;\n\n    return kept;\n  }\n\n  /**\n   Provides the opportunity to eliminate an identifier from secondary lookup tables\n   as well as eliminates it from ember-data's own lookup tables and book keeping.\n\n   Useful when a record has been deleted and the deletion has been persisted and\n   we do not care about the record anymore. Especially useful when an `id` of a\n   deleted record might be reused later for a new record.\n\n   @method forgetRecordIdentifier\n   @param identifierObject\n   @public\n  */\n  forgetRecordIdentifier(identifierObject: RecordIdentifier): void {\n    let identifier = this.getOrCreateRecordIdentifier(identifierObject);\n    let keyOptions = getTypeIndex(this._cache.types, identifier.type);\n    if (identifier.id !== null) {\n      keyOptions.id.delete(identifier.id);\n    }\n    this._cache.lids.delete(identifier.lid);\n    keyOptions.lid.delete(identifier.lid);\n\n    IDENTIFIERS.delete(identifierObject);\n    this._forget(identifier, 'record');\n    if (LOG_IDENTIFIERS) {\n      // eslint-disable-next-line no-console\n      console.log(`Identifiers: released identifier ${identifierObject.lid}`);\n    }\n  }\n\n  destroy() {\n    this._cache.documents.forEach((identifier) => {\n      DOCUMENTS.delete(identifier);\n    });\n    this._reset();\n  }\n}\n\nfunction getTypeIndex(typeMap: TypeMap, type: string): KeyOptions {\n  let typeIndex: KeyOptions = typeMap[type];\n\n  if (typeIndex === undefined) {\n    typeIndex = {\n      lid: new Map(),\n      id: new Map(),\n    };\n    typeMap[type] = typeIndex;\n  }\n\n  return typeIndex;\n}\n\nfunction makeStableRecordIdentifier(\n  id: string | null,\n  type: string,\n  lid: string,\n  bucket: IdentifierBucket,\n  clientOriginated: boolean = false\n): Readonly<StableRecordIdentifier> {\n  let recordIdentifier = {\n    lid,\n    id,\n    type,\n  };\n  IDENTIFIERS.add(recordIdentifier);\n\n  if (DEBUG) {\n    // we enforce immutability in dev\n    //  but preserve our ability to do controlled updates to the reference\n    let wrapper = {\n      get lid() {\n        return recordIdentifier.lid;\n      },\n      get id() {\n        return recordIdentifier.id;\n      },\n      get type() {\n        return recordIdentifier.type;\n      },\n      toString() {\n        let { type, id, lid } = recordIdentifier;\n        return `${clientOriginated ? '[CLIENT_ORIGINATED] ' : ''}${type}:${id} (${lid})`;\n      },\n      toJSON() {\n        let { type, id, lid } = recordIdentifier;\n        return { type, id, lid };\n      },\n    };\n    wrapper[DEBUG_CLIENT_ORIGINATED] = clientOriginated;\n    wrapper[DEBUG_IDENTIFIER_BUCKET] = bucket;\n    IDENTIFIERS.add(wrapper);\n    DEBUG_MAP.set(wrapper, recordIdentifier);\n    wrapper = freeze(wrapper);\n    return wrapper;\n  }\n\n  return recordIdentifier;\n}\n\nfunction performRecordIdentifierUpdate(identifier: StableRecordIdentifier, data: ResourceData, updateFn: UpdateMethod) {\n  if (DEBUG) {\n    let { lid } = data;\n    let id = 'id' in data ? data.id : undefined;\n    let type = 'type' in data && data.type && normalizeModelName(data.type);\n\n    // get the mutable instance behind our proxy wrapper\n    let wrapper = identifier;\n    identifier = DEBUG_MAP.get(wrapper);\n\n    if (lid !== undefined) {\n      let newLid = coerceId(lid);\n      if (newLid !== identifier.lid) {\n        throw new Error(\n          `The 'lid' for a RecordIdentifier cannot be updated once it has been created. Attempted to set lid for '${wrapper}' to '${lid}'.`\n        );\n      }\n    }\n\n    if (id !== undefined) {\n      let newId = coerceId(id);\n\n      if (identifier.id !== null && identifier.id !== newId) {\n        // here we warn and ignore, as this may be a mistake, but we allow the user\n        // to have multiple cache-keys pointing at a single lid so we cannot error\n        warn(\n          `The 'id' for a RecordIdentifier should not be updated once it has been set. Attempted to set id for '${wrapper}' to '${newId}'.`,\n          false,\n          { id: 'ember-data:multiple-ids-for-identifier' }\n        );\n      }\n    }\n\n    // TODO consider just ignoring here to allow flexible polymorphic support\n    if (type && type !== identifier.type) {\n      throw new Error(\n        `The 'type' for a RecordIdentifier cannot be updated once it has been set. Attempted to set type for '${wrapper}' to '${type}'.`\n      );\n    }\n\n    updateFn(wrapper, data, 'record');\n  } else {\n    updateFn(identifier, data, 'record');\n  }\n\n  // upgrade the ID, this is a \"one time only\" ability\n  // for the multiple-cache-key scenario we \"could\"\n  // use a heuristic to guess the best id for display\n  // (usually when `data.id` is available and `data.attributes` is not)\n  if ((data as ExistingResourceObject).id !== undefined) {\n    identifier.id = coerceId((data as ExistingResourceObject).id);\n  }\n}\n\nfunction detectMerge(\n  typesCache: { [key: string]: KeyOptions },\n  identifier: StableRecordIdentifier,\n  data: ResourceIdentifierObject | ExistingResourceObject,\n  newId: string | null,\n  lids: IdentifierMap\n): StableRecordIdentifier | false {\n  const { id, type, lid } = identifier;\n  if (id !== null && id !== newId && newId !== null) {\n    let keyOptions = getTypeIndex(typesCache, identifier.type);\n    let existingIdentifier = keyOptions.id.get(newId);\n\n    return existingIdentifier !== undefined ? existingIdentifier : false;\n  } else {\n    let newType = (data as ExistingResourceObject).type && normalizeModelName((data as ExistingResourceObject).type);\n\n    // If the ids and type are the same but lid is not the same, we should trigger a merge of the identifiers\n    if (id !== null && id === newId && newType === type && data.lid && data.lid !== lid) {\n      let existingIdentifier = lids.get(data.lid);\n      return existingIdentifier !== undefined ? existingIdentifier : false;\n      // If the lids are the same, and ids are the same, but types are different we should trigger a merge of the identifiers\n    } else if (id !== null && id === newId && newType && newType !== type && data.lid && data.lid === lid) {\n      let keyOptions = getTypeIndex(typesCache, newType);\n      let existingIdentifier = keyOptions.id.get(id);\n      return existingIdentifier !== undefined ? existingIdentifier : false;\n    }\n  }\n\n  return false;\n}\n","import { assert } from '@ember/debug';\nimport { tracked } from '@glimmer/tracking';\n\n/**\n  @module @ember-data/store\n*/\nimport type { SingleResourceDocument } from '@ember-data/types/q/ember-data-json-api';\nimport type { StableRecordIdentifier } from '@ember-data/types/q/identifier';\nimport type { RecordInstance } from '@ember-data/types/q/record-instance';\n\nimport type { NotificationType } from '../managers/notification-manager';\nimport type Store from '../store-service';\n\n/**\n  @module @ember-data/store\n*/\n\n/**\n   A `RecordReference` is a low-level API that allows users and\n   addon authors to perform meta-operations on a record.\n\n   @class RecordReference\n   @public\n   @extends Reference\n*/\nexport default class RecordReference {\n  declare store: Store;\n  // unsubscribe token given to us by the notification manager\n  ___token!: Object;\n  ___identifier: StableRecordIdentifier;\n\n  @tracked _ref = 0;\n\n  constructor(store: Store, identifier: StableRecordIdentifier) {\n    this.store = store;\n    this.___identifier = identifier;\n    this.___token = store.notifications.subscribe(\n      identifier,\n      (_: StableRecordIdentifier, bucket: NotificationType, notifiedKey?: string) => {\n        if (bucket === 'identity' || (bucket === 'attributes' && notifiedKey === 'id')) {\n          this._ref++;\n        }\n      }\n    );\n  }\n\n  destroy() {\n    this.store.notifications.unsubscribe(this.___token);\n  }\n\n  get type(): string {\n    return this.identifier().type;\n  }\n\n  /**\n     The `id` of the record that this reference refers to.\n\n     Together, the `type` and `id` properties form a composite key for\n     the identity map.\n\n     Example\n\n     ```javascript\n     let userRef = store.getReference('user', 1);\n\n     userRef.id(); // '1'\n     ```\n\n     @method id\n    @public\n     @return {String} The id of the record.\n  */\n  id() {\n    this._ref; // consume the tracked prop\n    return this.___identifier.id;\n  }\n\n  /**\n     The `identifier` of the record that this reference refers to.\n\n     Together, the `type` and `id` properties form a composite key for\n     the identity map.\n\n     Example\n\n     ```javascript\n     let userRef = store.getReference('user', 1);\n\n     userRef.identifier(); // '1'\n     ```\n\n     @method identifier\n    @public\n     @return {String} The identifier of the record.\n  */\n  identifier(): StableRecordIdentifier {\n    return this.___identifier;\n  }\n\n  /**\n     How the reference will be looked up when it is loaded. Currently\n     this always returns `identity` to signify that a record will be\n     loaded by its `type` and `id`.\n\n     Example\n\n     ```javascript\n     const userRef = store.getReference('user', 1);\n\n     userRef.remoteType(); // 'identity'\n     ```\n\n     @method remoteType\n     @public\n     @return {String} 'identity'\n  */\n  remoteType(): 'identity' {\n    return 'identity';\n  }\n\n  /**\n    This API allows you to provide a reference with new data. The\n    simplest usage of this API is similar to `store.push`: you provide a\n    normalized hash of data and the object represented by the reference\n    will update.\n\n    If you pass a promise to `push`, Ember Data will not ask the adapter\n    for the data if another attempt to fetch it is made in the\n    interim. When the promise resolves, the underlying object is updated\n    with the new data, and the promise returned by *this function* is resolved\n    with that object.\n\n    For example, `recordReference.push(promise)` will be resolved with a\n    record.\n\n     Example\n\n     ```javascript\n     let userRef = store.getReference('user', 1);\n\n     // provide data for reference\n     userRef.push({\n       data: {\n         id: \"1\",\n         type: \"user\",\n         attributes: {\n           username: \"@user\"\n         }\n       }\n     }).then(function(user) {\n       userRef.value() === user;\n     });\n     ```\n\n    @method push\n    @public\n    @param objectOrPromise a JSON:API ResourceDocument or a promise resolving to one\n    @return a promise for the value (record or relationship)\n  */\n  push(objectOrPromise: SingleResourceDocument | Promise<SingleResourceDocument>): Promise<RecordInstance> {\n    // TODO @deprecate pushing unresolved payloads\n    return Promise.resolve(objectOrPromise).then((data) => {\n      return this.store.push(data);\n    });\n  }\n\n  /**\n    If the entity referred to by the reference is already loaded, it is\n    present as `reference.value`. Otherwise the value returned by this function\n    is `null`.\n\n     Example\n\n     ```javascript\n     let userRef = store.getReference('user', 1);\n\n     userRef.value(); // user\n     ```\n\n     @method value\n    @public\n     @return {Model} the record for this RecordReference\n  */\n  value(): RecordInstance | null {\n    return this.store.peekRecord(this.___identifier);\n  }\n\n  /**\n     Triggers a fetch for the backing entity based on its `remoteType`\n     (see `remoteType` definitions per reference type).\n\n     Example\n\n     ```javascript\n     let userRef = store.getReference('user', 1);\n\n     // load user (via store.find)\n     userRef.load().then(...)\n     ```\n\n     @method load\n    @public\n     @return {Promise<record>} the record for this RecordReference\n  */\n  load() {\n    const id = this.id();\n    if (id !== null) {\n      return this.store.findRecord(this.type, id);\n    }\n    assert(`Unable to fetch record of type ${this.type} without an id`);\n  }\n\n  /**\n     Reloads the record if it is already loaded. If the record is not\n     loaded it will load the record via `store.findRecord`\n\n     Example\n\n     ```javascript\n     let userRef = store.getReference('user', 1);\n\n     // or trigger a reload\n     userRef.reload().then(...)\n     ```\n\n     @method reload\n    @public\n     @return {Promise<record>} the record for this RecordReference\n  */\n  reload() {\n    const id = this.id();\n    if (id !== null) {\n      return this.store.findRecord(this.type, id, { reload: true });\n    }\n    assert(`Unable to fetch record of type ${this.type} without an id`);\n  }\n}\n","import { assert } from '@ember/debug';\n\nimport { StableDocumentIdentifier } from '@ember-data/types/cache/identifier';\nimport type { CacheStoreWrapper as StoreWrapper } from '@ember-data/types/q/cache-store-wrapper';\nimport type { StableRecordIdentifier } from '@ember-data/types/q/identifier';\nimport { SchemaService } from '@ember-data/types/q/schema-service';\n\nimport { IdentifierCache, isDocumentIdentifier, isStableIdentifier } from '../caches/identifier-cache';\nimport type Store from '../store-service';\nimport { NotificationType } from './notification-manager';\n\n/**\n  @module @ember-data/store\n*/\n\nexport class CacheStoreWrapper implements StoreWrapper {\n  declare _willNotify: boolean;\n  declare _pendingNotifies: Map<StableRecordIdentifier, Set<string>>;\n  declare _store: Store;\n\n  constructor(_store: Store) {\n    this._store = _store;\n    this._willNotify = false;\n    this._pendingNotifies = new Map();\n  }\n\n  get identifierCache(): IdentifierCache {\n    return this._store.identifierCache;\n  }\n\n  _scheduleNotification(identifier: StableRecordIdentifier, key: string) {\n    let pending = this._pendingNotifies.get(identifier);\n\n    if (!pending) {\n      pending = new Set();\n      this._pendingNotifies.set(identifier, pending);\n    }\n    pending.add(key);\n\n    if (this._willNotify === true) {\n      return;\n    }\n\n    this._willNotify = true;\n    // it's possible a cache adhoc notifies us,\n    // in which case we sync flush\n    if (this._store._cbs) {\n      this._store._schedule('notify', () => this._flushNotifications());\n    } else {\n      this._flushNotifications();\n    }\n  }\n\n  _flushNotifications(): void {\n    if (this._willNotify === false) {\n      return;\n    }\n\n    let pending = this._pendingNotifies;\n    this._pendingNotifies = new Map();\n    this._willNotify = false;\n\n    pending.forEach((set, identifier) => {\n      set.forEach((key) => {\n        this._store.notifications.notify(identifier, 'relationships', key);\n      });\n    });\n  }\n\n  notifyChange(identifier: StableRecordIdentifier, namespace: 'added' | 'removed'): void;\n  notifyChange(identifier: StableDocumentIdentifier, namespace: 'added' | 'updated' | 'removed'): void;\n  notifyChange(identifier: StableRecordIdentifier, namespace: NotificationType, key?: string): void;\n  notifyChange(\n    identifier: StableRecordIdentifier | StableDocumentIdentifier,\n    namespace: NotificationType | 'added' | 'removed' | 'updated',\n    key?: string\n  ): void {\n    assert(`Expected a stable identifier`, isStableIdentifier(identifier) || isDocumentIdentifier(identifier));\n\n    // TODO do we still get value from this?\n    if (namespace === 'relationships' && key) {\n      this._scheduleNotification(identifier as StableRecordIdentifier, key);\n      return;\n    }\n\n    // @ts-expect-error\n    this._store.notifications.notify(identifier, namespace, key);\n  }\n\n  getSchemaDefinitionService(): SchemaService {\n    return this._store.getSchemaDefinitionService();\n  }\n\n  setRecordId(identifier: StableRecordIdentifier, id: string) {\n    assert(`Expected a stable identifier`, isStableIdentifier(identifier));\n    this._store._instanceCache.setRecordId(identifier, id);\n  }\n\n  hasRecord(identifier: StableRecordIdentifier): boolean {\n    return Boolean(this._store._instanceCache.peek(identifier));\n  }\n\n  disconnectRecord(identifier: StableRecordIdentifier): void {\n    assert(`Expected a stable identifier`, isStableIdentifier(identifier));\n    this._store._instanceCache.disconnect(identifier);\n    this._pendingNotifies.delete(identifier);\n  }\n}\n","import { assert, warn } from '@ember/debug';\n\nimport { importSync } from '@embroider/macros';\n\nimport { LOG_INSTANCE_CACHE } from '@ember-data/debugging';\nimport { DEBUG } from '@ember-data/env';\nimport type { Graph } from '@ember-data/graph/-private/graph/graph';\nimport type { peekGraph } from '@ember-data/graph/-private/graph/index';\nimport { HAS_GRAPH_PACKAGE } from '@ember-data/packages';\nimport type { Cache } from '@ember-data/types/q/cache';\nimport type { CacheStoreWrapper as StoreWrapper } from '@ember-data/types/q/cache-store-wrapper';\nimport type {\n  ExistingResourceIdentifierObject,\n  NewResourceIdentifierObject,\n} from '@ember-data/types/q/ember-data-json-api';\nimport type { RecordIdentifier, StableRecordIdentifier } from '@ember-data/types/q/identifier';\nimport type { JsonApiRelationship, JsonApiResource } from '@ember-data/types/q/record-data-json-api';\nimport type { RelationshipSchema } from '@ember-data/types/q/record-data-schemas';\nimport type { RecordInstance } from '@ember-data/types/q/record-instance';\n\nimport RecordReference from '../legacy-model-support/record-reference';\nimport { CacheManager } from '../managers/cache-manager';\nimport { CacheStoreWrapper } from '../managers/cache-store-wrapper';\nimport type { CreateRecordProperties } from '../store-service';\nimport type Store from '../store-service';\nimport { CacheForIdentifierCache, removeRecordDataFor, setCacheFor } from './cache-utils';\n\nlet _peekGraph: peekGraph;\nif (HAS_GRAPH_PACKAGE) {\n  let __peekGraph: peekGraph;\n  _peekGraph = (wrapper: Store | StoreWrapper): Graph | undefined => {\n    let a = (importSync('@ember-data/graph/-private') as { peekGraph: peekGraph }).peekGraph;\n    __peekGraph = __peekGraph || a;\n    return __peekGraph(wrapper);\n  };\n}\n\n/**\n  @module @ember-data/store\n*/\n\nconst RecordCache = new Map<RecordInstance, StableRecordIdentifier>();\n\nexport function peekRecordIdentifier(record: RecordInstance): StableRecordIdentifier | undefined {\n  return RecordCache.get(record);\n}\n\n/**\n  Retrieves the unique referentially-stable [RecordIdentifier](/ember-data/release/classes/StableRecordIdentifier)\n  assigned to the given record instance.\n  ```js\n  import { recordIdentifierFor } from \"@ember-data/store\";\n  // ... gain access to a record, for instance with peekRecord or findRecord\n  const record = store.peekRecord(\"user\", \"1\");\n  // get the identifier for the record (see docs for StableRecordIdentifier)\n  const identifier = recordIdentifierFor(record);\n  // access the identifier's properties.\n  const { id, type, lid } = identifier;\n  ```\n  @method recordIdentifierFor\n  @public\n  @static\n  @for @ember-data/store\n  @param {Object} record a record instance previously obstained from the store.\n  @returns {StableRecordIdentifier}\n */\nexport function recordIdentifierFor(record: RecordInstance): StableRecordIdentifier {\n  assert(`${String(record)} is not a record instantiated by @ember-data/store`, RecordCache.has(record));\n  return RecordCache.get(record)!;\n}\n\nexport function setRecordIdentifier(record: RecordInstance, identifier: StableRecordIdentifier): void {\n  if (DEBUG) {\n    if (RecordCache.has(record) && RecordCache.get(record) !== identifier) {\n      throw new Error(`${String(record)} was already assigned an identifier`);\n    }\n  }\n\n  /*\n  It would be nice to do a reverse check here that an identifier has not\n  previously been assigned a record; however, unload + rematerialization\n  prevents us from having a great way of doing so when CustomRecordClasses\n  don't necessarily give us access to a `isDestroyed` for dematerialized\n  instance.\n  */\n\n  RecordCache.set(record, identifier);\n}\n\nexport const StoreMap = new Map<RecordInstance, Store>();\n\nexport function storeFor(record: RecordInstance): Store | undefined {\n  const store = StoreMap.get(record);\n\n  assert(\n    `A record in a disconnected state cannot utilize the store. This typically means the record has been destroyed, most commonly by unloading it.`,\n    store\n  );\n  return store;\n}\n\ntype Caches = {\n  record: Map<StableRecordIdentifier, RecordInstance>;\n  reference: WeakMap<StableRecordIdentifier, RecordReference>;\n};\n\nexport class InstanceCache {\n  declare store: Store;\n  declare cache: Cache;\n  declare _storeWrapper: CacheStoreWrapper;\n  declare __cacheFor: (resource: RecordIdentifier) => Cache;\n\n  declare __cacheManager: CacheManager;\n  __instances: Caches = {\n    record: new Map<StableRecordIdentifier, RecordInstance>(),\n    reference: new WeakMap<StableRecordIdentifier, RecordReference>(),\n  };\n\n  constructor(store: Store) {\n    this.store = store;\n\n    this._storeWrapper = new CacheStoreWrapper(this.store);\n\n    store.identifierCache.__configureMerge(\n      (identifier: StableRecordIdentifier, matchedIdentifier: StableRecordIdentifier, resourceData) => {\n        let keptIdentifier = identifier;\n        if (identifier.id !== matchedIdentifier.id) {\n          keptIdentifier = 'id' in resourceData && identifier.id === resourceData.id ? identifier : matchedIdentifier;\n        } else if (identifier.type !== matchedIdentifier.type) {\n          keptIdentifier =\n            'type' in resourceData && identifier.type === resourceData.type ? identifier : matchedIdentifier;\n        }\n        let staleIdentifier = identifier === keptIdentifier ? matchedIdentifier : identifier;\n\n        // check for duplicate entities\n        let keptHasRecord = this.__instances.record.has(keptIdentifier);\n        let staleHasRecord = this.__instances.record.has(staleIdentifier);\n\n        // we cannot merge entities when both have records\n        // (this may not be strictly true, we could probably swap the cache data the record points at)\n        if (keptHasRecord && staleHasRecord) {\n          // TODO we probably don't need to throw these errors anymore\n          // we can probably just \"swap\" what data source the abandoned\n          // record points at so long as\n          // it itself is not retained by the store in any way.\n          if ('id' in resourceData) {\n            throw new Error(\n              `Failed to update the 'id' for the RecordIdentifier '${identifier.type}:${String(identifier.id)} (${\n                identifier.lid\n              })' to '${String(resourceData.id)}', because that id is already in use by '${\n                matchedIdentifier.type\n              }:${String(matchedIdentifier.id)} (${matchedIdentifier.lid})'`\n            );\n          }\n\n          assert(\n            `Failed to update the RecordIdentifier '${identifier.type}:${String(identifier.id)} (${\n              identifier.lid\n            })' to merge with the detected duplicate identifier '${matchedIdentifier.type}:${String(\n              matchedIdentifier.id\n            )} (${String(matchedIdentifier.lid)})'`\n          );\n        }\n\n        this.store.cache.patch({\n          op: 'mergeIdentifiers',\n          record: staleIdentifier,\n          value: keptIdentifier,\n        });\n\n        /*\n      TODO @runspired consider adding this to make polymorphism even nicer\n      if (HAS_GRAPH_PACKAGE) {\n        if (identifier.type !== matchedIdentifier.type) {\n          const graphFor = importSync('@ember-data/graph/-private').graphFor;\n          graphFor(this).registerPolymorphicType(identifier.type, matchedIdentifier.type);\n        }\n      }\n      */\n\n        this.unloadRecord(staleIdentifier);\n        return keptIdentifier;\n      }\n    );\n  }\n  peek(identifier: StableRecordIdentifier): Cache | RecordInstance | undefined {\n    return this.__instances.record.get(identifier);\n  }\n\n  getRecord(identifier: StableRecordIdentifier, properties?: CreateRecordProperties): RecordInstance {\n    let record = this.__instances.record.get(identifier);\n\n    if (!record) {\n      assert(\n        `Cannot create a new record instance while the store is being destroyed`,\n        !this.store.isDestroying && !this.store.isDestroyed\n      );\n      const cache = this.store.cache;\n      setCacheFor(identifier, cache);\n\n      record = this.store.instantiateRecord(identifier, properties || {});\n\n      setRecordIdentifier(record, identifier);\n      setCacheFor(record, cache);\n      StoreMap.set(record, this.store);\n      this.__instances.record.set(identifier, record);\n\n      if (LOG_INSTANCE_CACHE) {\n        // eslint-disable-next-line no-console\n        console.log(`InstanceCache: created Record for ${String(identifier)}`, properties);\n      }\n    }\n\n    return record;\n  }\n\n  getReference(identifier: StableRecordIdentifier) {\n    let cache = this.__instances.reference;\n    let reference = cache.get(identifier);\n\n    if (!reference) {\n      reference = new RecordReference(this.store, identifier);\n      cache.set(identifier, reference);\n    }\n    return reference;\n  }\n\n  recordIsLoaded(identifier: StableRecordIdentifier, filterDeleted: boolean = false) {\n    const cache = this.cache;\n    if (!cache) {\n      return false;\n    }\n    const isNew = cache.isNew(identifier);\n    const isEmpty = cache.isEmpty(identifier);\n\n    // if we are new we must consider ourselves loaded\n    if (isNew) {\n      return !cache.isDeleted(identifier);\n    }\n    // even if we have a past request, if we are now empty we are not loaded\n    // typically this is true after an unloadRecord call\n\n    // if we are not empty, not new && we have a fulfilled request then we are loaded\n    // we should consider allowing for something to be loaded that is simply \"not empty\".\n    // which is how RecordState currently handles this case; however, RecordState is buggy\n    // in that it does not account for unloading.\n    return filterDeleted && cache.isDeletionCommitted(identifier) ? false : !isEmpty;\n  }\n\n  disconnect(identifier: StableRecordIdentifier) {\n    const record = this.__instances.record.get(identifier);\n    assert(\n      'Cannot destroy record while it is still materialized',\n      !record || record.isDestroyed || record.isDestroying\n    );\n\n    if (HAS_GRAPH_PACKAGE) {\n      let graph = _peekGraph(this.store);\n      if (graph) {\n        graph.remove(identifier);\n      }\n    }\n\n    this.store.identifierCache.forgetRecordIdentifier(identifier);\n    removeRecordDataFor(identifier);\n    this.store._requestCache._clearEntries(identifier);\n    if (LOG_INSTANCE_CACHE) {\n      // eslint-disable-next-line no-console\n      console.log(`InstanceCache: disconnected ${String(identifier)}`);\n    }\n  }\n\n  unloadRecord(identifier: StableRecordIdentifier) {\n    if (DEBUG) {\n      const requests = this.store.getRequestStateService().getPendingRequestsForRecord(identifier);\n      if (\n        requests.some((req) => {\n          return req.type === 'mutation';\n        })\n      ) {\n        assert(`You can only unload a record which is not inFlight. '${String(identifier)}'`);\n      }\n    }\n    if (LOG_INSTANCE_CACHE) {\n      // eslint-disable-next-line no-console\n      console.groupCollapsed(`InstanceCache: unloading record for ${String(identifier)}`);\n    }\n\n    // TODO is this join still necessary?\n    this.store._join(() => {\n      const record = this.__instances.record.get(identifier);\n      const cache = this.cache;\n\n      if (record) {\n        this.store.teardownRecord(record);\n        this.__instances.record.delete(identifier);\n        StoreMap.delete(record);\n        RecordCache.delete(record);\n        removeRecordDataFor(record);\n\n        if (LOG_INSTANCE_CACHE) {\n          // eslint-disable-next-line no-console\n          console.log(`InstanceCache: destroyed record for ${String(identifier)}`);\n        }\n      }\n\n      if (cache) {\n        cache.unloadRecord(identifier);\n        removeRecordDataFor(identifier);\n        if (LOG_INSTANCE_CACHE) {\n          // eslint-disable-next-line no-console\n          console.log(`InstanceCache: destroyed cache for ${String(identifier)}`);\n        }\n      } else {\n        this.disconnect(identifier);\n      }\n\n      this.store._requestCache._clearEntries(identifier);\n      if (LOG_INSTANCE_CACHE) {\n        // eslint-disable-next-line no-console\n        console.log(`InstanceCache: unloaded RecordData for ${String(identifier)}`);\n        // eslint-disable-next-line no-console\n        console.groupEnd();\n      }\n    });\n  }\n\n  clear(type?: string) {\n    const cache = this.store.identifierCache._cache;\n    if (type === undefined) {\n      // it would be cool if we could just de-ref cache here\n      // but probably would require WeakRef models to do so.\n      cache.lids.forEach((identifier) => {\n        this.unloadRecord(identifier);\n      });\n    } else {\n      const typeCache = cache.types;\n      let identifiers = typeCache[type]?.lid;\n      if (identifiers) {\n        identifiers.forEach((identifier) => {\n          // if (rds.has(identifier)) {\n          this.unloadRecord(identifier);\n          // }\n          // TODO we don't remove the identifier, should we?\n        });\n      }\n    }\n  }\n\n  // TODO this should move into something coordinating operations\n  setRecordId(identifier: StableRecordIdentifier, id: string) {\n    const { type, lid } = identifier;\n    let oldId = identifier.id;\n\n    // ID absolutely can't be missing if the oldID is empty (missing Id in response for a new record)\n    assert(\n      `'${type}' was saved to the server, but the response does not have an id and your record does not either.`,\n      !(id === null && oldId === null)\n    );\n\n    // ID absolutely can't be different than oldID if oldID is not null\n    // TODO this assertion and restriction may not strictly be needed in the identifiers world\n    assert(\n      `Cannot update the id for '${type}:${lid}' from '${String(oldId)}' to '${id}'.`,\n      !(oldId !== null && id !== oldId)\n    );\n\n    // ID can be null if oldID is not null (altered ID in response for a record)\n    // however, this is more than likely a developer error.\n    if (oldId !== null && id === null) {\n      warn(\n        `Your ${type} record was saved to the server, but the response does not have an id.`,\n        !(oldId !== null && id === null)\n      );\n      return;\n    }\n\n    if (LOG_INSTANCE_CACHE) {\n      // eslint-disable-next-line no-console\n      console.log(`InstanceCache: updating id to '${id}' for record ${String(identifier)}`);\n    }\n\n    let existingIdentifier = this.store.identifierCache.peekRecordIdentifier({ type, id });\n    assert(\n      `'${type}' was saved to the server, but the response returned the new id '${id}', which has already been used with another record.'`,\n      !existingIdentifier || existingIdentifier === identifier\n    );\n\n    if (identifier.id === null) {\n      // TODO potentially this needs to handle merged result\n      this.store.identifierCache.updateRecordIdentifier(identifier, { type, id });\n    }\n\n    // TODO update resource cache if needed ?\n    // TODO handle consequences of identifier merge for notifications\n    this.store.notifications.notify(identifier, 'identity');\n  }\n}\n\nfunction _resourceIsFullDeleted(identifier: StableRecordIdentifier, cache: Cache): boolean {\n  return cache.isDeletionCommitted(identifier) || (cache.isNew(identifier) && cache.isDeleted(identifier));\n}\n\nexport function resourceIsFullyDeleted(instanceCache: InstanceCache, identifier: StableRecordIdentifier): boolean {\n  const cache = instanceCache.cache;\n  return !cache || _resourceIsFullDeleted(identifier, cache);\n}\n\n/*\n    When a find request is triggered on the store, the user can optionally pass in\n    attributes and relationships to be preloaded. These are meant to behave as if they\n    came back from the server, except the user obtained them out of band and is informing\n    the store of their existence. The most common use case is for supporting client side\n    nested URLs, such as `/posts/1/comments/2` so the user can do\n    `store.findRecord('comment', 2, { preload: { post: 1 } })` without having to fetch the post.\n\n    Preloaded data can be attributes and relationships passed in either as IDs or as actual\n    models.\n  */\ntype PreloadRelationshipValue = RecordInstance | string;\nexport function preloadData(store: Store, identifier: StableRecordIdentifier, preload: Record<string, unknown>) {\n  let jsonPayload: JsonApiResource = {};\n  //TODO(Igor) consider the polymorphic case\n  const schemas = store.getSchemaDefinitionService();\n  const relationships = schemas.relationshipsDefinitionFor(identifier);\n  Object.keys(preload).forEach((key) => {\n    let preloadValue = preload[key];\n\n    let relationshipMeta = relationships[key];\n    if (relationshipMeta) {\n      if (!jsonPayload.relationships) {\n        jsonPayload.relationships = {};\n      }\n      jsonPayload.relationships[key] = preloadRelationship(\n        relationshipMeta,\n        preloadValue as PreloadRelationshipValue | null | Array<PreloadRelationshipValue>\n      );\n    } else {\n      if (!jsonPayload.attributes) {\n        jsonPayload.attributes = {};\n      }\n      jsonPayload.attributes[key] = preloadValue;\n    }\n  });\n  const cache = store.cache;\n  const hasRecord = Boolean(store._instanceCache.peek(identifier));\n  cache.upsert(identifier, jsonPayload, hasRecord);\n}\n\nfunction preloadRelationship(\n  schema: RelationshipSchema,\n  preloadValue: PreloadRelationshipValue | null | Array<PreloadRelationshipValue>\n): JsonApiRelationship {\n  const relatedType = schema.type;\n\n  if (schema.kind === 'hasMany') {\n    assert('You need to pass in an array to set a hasMany property on a record', Array.isArray(preloadValue));\n    return { data: preloadValue.map((value) => _convertPreloadRelationshipToJSON(value, relatedType)) };\n  }\n\n  assert('You should not pass in an array to set a belongsTo property on a record', !Array.isArray(preloadValue));\n  return { data: preloadValue ? _convertPreloadRelationshipToJSON(preloadValue, relatedType) : null };\n}\n\n/*\n  findRecord('user', '1', { preload: { friends: ['1'] }});\n  findRecord('user', '1', { preload: { friends: [record] }});\n*/\nfunction _convertPreloadRelationshipToJSON(\n  value: RecordInstance | string,\n  type: string\n): ExistingResourceIdentifierObject | NewResourceIdentifierObject {\n  if (typeof value === 'string' || typeof value === 'number') {\n    return { type, id: value };\n  }\n  // TODO if not a record instance assert it's an identifier\n  // and allow identifiers to be used\n  return recordIdentifierFor(value);\n}\n\nexport function _clearCaches() {\n  RecordCache.clear();\n  StoreMap.clear();\n  CacheForIdentifierCache.clear();\n}\n","import { getOwner } from '@ember/application';\n\nimport { importSync } from '@embroider/macros';\n\nimport type Model from '@ember-data/model';\nimport { HAS_MODEL_PACKAGE } from '@ember-data/packages';\nimport type { RecordIdentifier } from '@ember-data/types/q/identifier';\nimport type { AttributesSchema, RelationshipsSchema } from '@ember-data/types/q/record-data-schemas';\n\nimport type Store from '../store-service';\nimport normalizeModelName from '../utils/normalize-model-name';\n\ntype ModelForMixin = (store: Store, normalizedModelName: string) => Model | null;\n\nlet _modelForMixin: ModelForMixin;\nif (HAS_MODEL_PACKAGE) {\n  let _found;\n  _modelForMixin = function () {\n    if (!_found) {\n      _found = (importSync('@ember-data/model/-private') as typeof import('@ember-data/model/-private'))._modelForMixin;\n    }\n    return _found(...arguments);\n  };\n}\n\nexport class DSModelSchemaDefinitionService {\n  declare store: Store;\n  declare _relationshipsDefCache;\n  declare _attributesDefCache;\n\n  constructor(store: Store) {\n    this.store = store;\n    this._relationshipsDefCache = Object.create(null);\n    this._attributesDefCache = Object.create(null);\n  }\n\n  // Following the existing RD implementation\n  attributesDefinitionFor(identifier: RecordIdentifier | { type: string }): AttributesSchema {\n    let modelName, attributes;\n    modelName = identifier.type;\n\n    attributes = this._attributesDefCache[modelName];\n\n    if (attributes === undefined) {\n      let modelClass = this.store.modelFor(modelName);\n      let attributeMap = modelClass.attributes;\n\n      attributes = Object.create(null);\n      attributeMap.forEach((meta, name) => (attributes[name] = meta));\n      this._attributesDefCache[modelName] = attributes;\n    }\n\n    return attributes;\n  }\n\n  // Following the existing RD implementation\n  relationshipsDefinitionFor(identifier: RecordIdentifier | { type: string }): RelationshipsSchema {\n    let modelName, relationships;\n    modelName = identifier.type;\n\n    relationships = this._relationshipsDefCache[modelName];\n\n    if (relationships === undefined) {\n      let modelClass = this.store.modelFor(modelName);\n      relationships = modelClass.relationshipsObject || null;\n      this._relationshipsDefCache[modelName] = relationships;\n    }\n\n    return relationships;\n  }\n\n  doesTypeExist(modelName: string): boolean {\n    let normalizedModelName = normalizeModelName(modelName);\n    let factory = getModelFactory(this.store, this.store._modelFactoryCache, normalizedModelName);\n\n    return factory !== null;\n  }\n}\n\nexport function getModelFactory(store: Store, cache, normalizedModelName: string): Model | null {\n  let factory = cache[normalizedModelName];\n\n  if (!factory) {\n    let owner: any = getOwner(store);\n    factory = owner.factoryFor(`model:${normalizedModelName}`);\n\n    if (HAS_MODEL_PACKAGE) {\n      if (!factory) {\n        //Support looking up mixins as base types for polymorphic relationships\n        factory = _modelForMixin(store, normalizedModelName);\n      }\n    }\n\n    if (!factory) {\n      // we don't cache misses in case someone wants to register a missing model\n      return null;\n    }\n\n    let klass = factory.class;\n\n    if (klass.isModel) {\n      let hasOwnModelNameSet = klass.modelName && Object.prototype.hasOwnProperty.call(klass, 'modelName');\n      if (!hasOwnModelNameSet) {\n        Object.defineProperty(klass, 'modelName', { value: normalizedModelName });\n      }\n    }\n\n    cache[normalizedModelName] = factory;\n  }\n\n  return factory;\n}\n","import type { ModelSchema } from '@ember-data/types/q/ds-model';\nimport type { AttributeSchema, RelationshipSchema } from '@ember-data/types/q/record-data-schemas';\n\nimport type Store from '../store-service';\n\n// if modelFor turns out to be a bottleneck we should replace with a Map\n// and clear it during store teardown.\nconst AvailableShims = new WeakMap<Store, Record<string, ShimModelClass>>();\n\nexport function getShimClass(store: Store, modelName: string): ShimModelClass {\n  let shims = AvailableShims.get(store);\n\n  if (!shims) {\n    shims = Object.create(null) as Record<string, ShimModelClass>;\n    AvailableShims.set(store, shims);\n  }\n\n  let shim = shims[modelName];\n  if (shim === undefined) {\n    shim = shims[modelName] = new ShimModelClass(store, modelName);\n  }\n\n  return shim;\n}\n\nfunction mapFromHash<T>(hash: Record<string, T>): Map<string, T> {\n  let map = new Map();\n  for (let i in hash) {\n    if (Object.prototype.hasOwnProperty.call(hash, i)) {\n      map.set(i, hash[i]);\n    }\n  }\n  return map;\n}\n\n// Mimics the static apis of DSModel\nexport default class ShimModelClass implements ModelSchema {\n  declare __store: Store;\n  declare modelName: string;\n  constructor(store: Store, modelName: string) {\n    this.__store = store;\n    this.modelName = modelName;\n  }\n\n  get fields(): Map<string, 'attribute' | 'belongsTo' | 'hasMany'> {\n    let attrs = this.__store.getSchemaDefinitionService().attributesDefinitionFor({ type: this.modelName });\n    let relationships = this.__store.getSchemaDefinitionService().relationshipsDefinitionFor({ type: this.modelName });\n    let fields = new Map<string, 'attribute' | 'belongsTo' | 'hasMany'>();\n    Object.keys(attrs).forEach((key) => fields.set(key, 'attribute'));\n    Object.keys(relationships).forEach((key) => fields.set(key, relationships[key]!.kind));\n    return fields;\n  }\n\n  get attributes(): Map<string, AttributeSchema> {\n    let attrs = this.__store.getSchemaDefinitionService().attributesDefinitionFor({ type: this.modelName });\n    return mapFromHash(attrs);\n  }\n\n  get relationshipsByName(): Map<string, RelationshipSchema> {\n    let relationships = this.__store.getSchemaDefinitionService().relationshipsDefinitionFor({ type: this.modelName });\n    return mapFromHash(relationships);\n  }\n\n  eachAttribute<T>(callback: (this: T | undefined, key: string, attribute: AttributeSchema) => void, binding?: T) {\n    let attrDefs = this.__store.getSchemaDefinitionService().attributesDefinitionFor({ type: this.modelName });\n    Object.keys(attrDefs).forEach((key) => {\n      callback.call(binding, key, attrDefs[key] as AttributeSchema);\n    });\n  }\n\n  eachRelationship<T>(\n    callback: (this: T | undefined, key: string, relationship: RelationshipSchema) => void,\n    binding?: T\n  ) {\n    let relationshipDefs = this.__store\n      .getSchemaDefinitionService()\n      .relationshipsDefinitionFor({ type: this.modelName });\n    Object.keys(relationshipDefs).forEach((key) => {\n      callback.call(binding, key, relationshipDefs[key] as RelationshipSchema);\n    });\n  }\n\n  eachTransformedAttribute<T>(callback: (this: T | undefined, key: string, type?: string) => void, binding?: T) {\n    const attrDefs = this.__store.getSchemaDefinitionService().attributesDefinitionFor({ type: this.modelName });\n    Object.keys(attrDefs).forEach((key) => {\n      if (attrDefs[key]!.type) {\n        callback.call(binding, key, attrDefs[key]!.type);\n      }\n    });\n  }\n}\n","import type { LocalRelationshipOperation } from '@ember-data/graph/-private/graph/-operations';\nimport type { StructuredDataDocument } from '@ember-data/request/-private/types';\nimport type { Change } from '@ember-data/types/cache/change';\nimport type {\n  ResourceDocument,\n  SingleResourceDataDocument,\n  StructuredDocument,\n} from '@ember-data/types/cache/document';\nimport type { StableDocumentIdentifier } from '@ember-data/types/cache/identifier';\nimport type { Cache, ChangedAttributesHash, MergeOperation } from '@ember-data/types/q/cache';\nimport type {\n  CollectionResourceRelationship,\n  SingleResourceRelationship,\n} from '@ember-data/types/q/ember-data-json-api';\nimport type { StableRecordIdentifier } from '@ember-data/types/q/identifier';\nimport type { JsonApiError, JsonApiResource } from '@ember-data/types/q/record-data-json-api';\n\nimport type { StoreRequestContext } from '../cache-handler';\n\n/**\n * The CacheManager wraps a Cache enforcing that only\n * the public API surface area is exposed.\n *\n * Hence, it is the value of `Store.cache`, wrapping\n * the cache instance returned by `Store.createCache`.\n *\n * It handles translating between cache versions when\n * necessary, for instance when a Store is configured\n * to use both a v1 and a v2 cache depending on some\n * heuristic.\n *\n * Starting with the v2 spec, the cache is designed such\n * that it must be implemented as a singleton.\n *\n * @class CacheManager\n * @public\n */\nexport class CacheManager implements Cache {\n  version: '2' = '2';\n\n  #cache: Cache;\n\n  constructor(cache: Cache) {\n    this.#cache = cache;\n  }\n\n  // Cache Management\n  // ================\n\n  /**\n   * Cache the response to a request\n   *\n   * Unlike `store.push` which has UPSERT\n   * semantics, `put` has `replace` semantics similar to\n   * the `http` method `PUT`\n   *\n   * the individually cacheabl\n   * e resource data it may contain\n   * should upsert, but the document data surrounding it should\n   * fully replace any existing information\n   *\n   * Note that in order to support inserting arbitrary data\n   * to the cache that did not originate from a request `put`\n   * should expect to sometimes encounter a document with only\n   * a `content` member and therefor must not assume the existence\n   * of `request` and `response` on the document.\n   *\n   * @method put\n   * @param {StructuredDocument} doc\n   * @returns {ResourceDocument}\n   * @public\n   */\n  put<T>(doc: StructuredDocument<T> | { content: T }): ResourceDocument {\n    return this.#cache.put(doc);\n  }\n\n  /**\n   * Perform an operation on the cache to update the remote state.\n   *\n   * Note: currently the only valid operation is a MergeOperation\n   * which occurs when a collision of identifiers is detected.\n   *\n   * @method patch\n   * @public\n   * @param op the operation to perform\n   * @returns {void}\n   */\n  patch(op: MergeOperation): void {\n    this.#cache.patch(op);\n  }\n\n  /**\n   * Update resource data with a local mutation. Currently supports operations\n   * on relationships only.\n   *\n   * @method mutate\n   * @public\n   * @param mutation\n   */\n  mutate(mutation: LocalRelationshipOperation): void {\n    this.#cache.mutate(mutation);\n  }\n\n  /**\n   * Peek resource data from the Cache.\n   *\n   * In development, if the return value\n   * is JSON the return value\n   * will be deep-cloned and deep-frozen\n   * to prevent mutation thereby enforcing cache\n   * Immutability.\n   *\n   * This form of peek is useful for implementations\n   * that want to feed raw-data from cache to the UI\n   * or which want to interact with a blob of data\n   * directly from the presentation cache.\n   *\n   * An implementation might want to do this because\n   * de-referencing records which read from their own\n   * blob is generally safer because the record does\n   * not require retainining connections to the Store\n   * and Cache to present data on a per-field basis.\n   *\n   * This generally takes the place of `getAttr` as\n   * an API and may even take the place of `getRelationship`\n   * depending on implementation specifics, though this\n   * latter usage is less recommended due to the advantages\n   * of the Graph handling necessary entanglements and\n   * notifications for relational data.\n   *\n   * @method peek\n   * @public\n   * @param {StableRecordIdentifier | StableDocumentIdentifier} identifier\n   * @returns {ResourceDocument | ResourceBlob | null} the known resource data\n   */\n  peek(identifier: StableRecordIdentifier): unknown;\n  peek(identifier: StableDocumentIdentifier): ResourceDocument | null;\n  peek(identifier: StableRecordIdentifier | StableDocumentIdentifier): unknown {\n    return this.#cache.peek(identifier);\n  }\n\n  /**\n   * Peek the Cache for the existing request data associated with\n   * a cacheable request\n   *\n   * @method peekRequest\n   * @param {StableDocumentIdentifier}\n   * @returns {StableDocumentIdentifier | null}\n   * @public\n   */\n  peekRequest(identifier: StableDocumentIdentifier): StructuredDocument<ResourceDocument> | null {\n    return this.#cache.peekRequest(identifier);\n  }\n\n  /**\n   * Push resource data from a remote source into the cache for this identifier\n   *\n   * @method upsert\n   * @public\n   * @param identifier\n   * @param data\n   * @param hasRecord\n   * @returns {void | string[]} if `hasRecord` is true then calculated key changes should be returned\n   */\n  upsert(identifier: StableRecordIdentifier, data: JsonApiResource, hasRecord: boolean): void | string[] {\n    return this.#cache.upsert(identifier, data, hasRecord);\n  }\n\n  // Cache Forking Support\n  // =====================\n\n  /**\n   * Create a fork of the cache from the current state.\n   *\n   * Applications should typically not call this method themselves,\n   * preferring instead to fork at the Store level, which will\n   * utilize this method to fork the cache.\n   *\n   * @method fork\n   * @public\n   * @returns Promise<Cache>\n   */\n  fork(): Promise<Cache> {\n    return this.#cache.fork();\n  }\n\n  /**\n   * Merge a fork back into a parent Cache.\n   *\n   * Applications should typically not call this method themselves,\n   * preferring instead to merge at the Store level, which will\n   * utilize this method to merge the caches.\n   *\n   * @method merge\n   * @param {Cache} cache\n   * @public\n   * @returns Promise<void>\n   */\n  merge(cache: Cache): Promise<void> {\n    return this.#cache.merge(cache);\n  }\n\n  /**\n   * Generate the list of changes applied to all\n   * record in the store.\n   *\n   * Each individual resource or document that has\n   * been mutated should be described as an individual\n   * `Change` entry in the returned array.\n   *\n   * A `Change` is described by an object containing up to\n   * three properties: (1) the `identifier` of the entity that\n   * changed; (2) the `op` code of that change being one of\n   * `upsert` or `remove`, and if the op is `upsert` a `patch`\n   * containing the data to merge into the cache for the given\n   * entity.\n   *\n   * This `patch` is opaque to the Store but should be understood\n   * by the Cache and may expect to be utilized by an Adapter\n   * when generating data during a `save` operation.\n   *\n   * It is generally recommended that the `patch` contain only\n   * the updated state, ignoring fields that are unchanged\n   *\n   * ```ts\n   * interface Change {\n   *  identifier: StableRecordIdentifier | StableDocumentIdentifier;\n   *  op: 'upsert' | 'remove';\n   *  patch?: unknown;\n   * }\n   * ```\n   *\n   * @method diff\n   * @public\n   */\n  diff(): Promise<Change[]> {\n    return this.#cache.diff();\n  }\n\n  // SSR Support\n  // ===========\n\n  /**\n   * Serialize the entire contents of the Cache into a Stream\n   * which may be fed back into a new instance of the same Cache\n   * via `cache.hydrate`.\n   *\n   * @method dump\n   * @returns {Promise<ReadableStream>}\n   * @public\n   */\n  dump(): Promise<ReadableStream<unknown>> {\n    return this.#cache.dump();\n  }\n\n  /**\n   * hydrate a Cache from a Stream with content previously serialized\n   * from another instance of the same Cache, resolving when hydration\n   * is complete.\n   *\n   * This method should expect to be called both in the context of restoring\n   * the Cache during application rehydration after SSR **AND** at unknown\n   * times during the lifetime of an already booted application when it is\n   * desired to bulk-load additional information into the cache. This latter\n   * behavior supports optimizing pre/fetching of data for route transitions\n   * via data-only SSR modes.\n   *\n   * @method hydrate\n   * @param {ReadableStream} stream\n   * @returns {Promise<void>}\n   * @public\n   */\n  hydrate(stream: ReadableStream<unknown>): Promise<void> {\n    return this.#cache.hydrate(stream);\n  }\n\n  // Cache\n  // =====\n\n  // Resource Support\n  // ================\n\n  /**\n   * [LIFECYLCE] Signal to the cache that a new record has been instantiated on the client\n   *\n   * It returns properties from options that should be set on the record during the create\n   * process. This return value behavior is deprecated.\n   *\n   * @method clientDidCreate\n   * @public\n   * @param identifier\n   * @param options\n   */\n  clientDidCreate(identifier: StableRecordIdentifier, options?: Record<string, unknown>): Record<string, unknown> {\n    return this.#cache.clientDidCreate(identifier, options);\n  }\n\n  /**\n   * [LIFECYCLE] Signals to the cache that a resource\n   * will be part of a save transaction.\n   *\n   * @method willCommit\n   * @public\n   * @param identifier\n   */\n  willCommit(identifier: StableRecordIdentifier, context: StoreRequestContext): void {\n    this.#cache.willCommit(identifier, context);\n  }\n\n  /**\n   * [LIFECYCLE] Signals to the cache that a resource\n   * was successfully updated as part of a save transaction.\n   *\n   * @method didCommit\n   * @public\n   * @param identifier\n   * @param data\n   */\n  didCommit(identifier: StableRecordIdentifier, result: StructuredDataDocument<unknown>): SingleResourceDataDocument {\n    return this.#cache.didCommit(identifier, result);\n  }\n\n  /**\n   * [LIFECYCLE] Signals to the cache that a resource\n   * was update via a save transaction failed.\n   *\n   * @method commitWasRejected\n   * @public\n   * @param identifier\n   * @param errors\n   */\n  commitWasRejected(identifier: StableRecordIdentifier, errors?: JsonApiError[]): void {\n    this.#cache.commitWasRejected(identifier, errors);\n  }\n\n  /**\n   * [LIFECYCLE] Signals to the cache that all data for a resource\n   * should be cleared.\n   *\n   * @method unloadRecord\n   * @public\n   * @param identifier\n   */\n  unloadRecord(identifier: StableRecordIdentifier): void {\n    this.#cache.unloadRecord(identifier);\n  }\n\n  // Granular Resource Data APIs\n  // ===========================\n\n  /**\n   * Retrieve the data for an attribute from the cache\n   *\n   * @method getAttr\n   * @public\n   * @param identifier\n   * @param propertyName\n   * @returns {unknown}\n   */\n  getAttr(identifier: StableRecordIdentifier, propertyName: string): unknown {\n    return this.#cache.getAttr(identifier, propertyName);\n  }\n\n  /**\n   * Mutate the data for an attribute in the cache\n   *\n   * @method setAttr\n   * @public\n   * @param identifier\n   * @param propertyName\n   * @param value\n   */\n  setAttr(identifier: StableRecordIdentifier, propertyName: string, value: unknown): void {\n    this.#cache.setAttr(identifier, propertyName, value);\n  }\n\n  /**\n   * Query the cache for the changed attributes of a resource.\n   *\n   * @method changedAttrs\n   * @public\n   * @param identifier\n   * @returns\n   */\n  changedAttrs(identifier: StableRecordIdentifier): ChangedAttributesHash {\n    return this.#cache.changedAttrs(identifier);\n  }\n\n  /**\n   * Query the cache for whether any mutated attributes exist\n   *\n   * @method hasChangedAttrs\n   * @public\n   * @param identifier\n   * @returns {boolean}\n   */\n  hasChangedAttrs(identifier: StableRecordIdentifier): boolean {\n    return this.#cache.hasChangedAttrs(identifier);\n  }\n\n  /**\n   * Tell the cache to discard any uncommitted mutations to attributes\n   *\n   * @method rollbackAttrs\n   * @public\n   * @param identifier\n   * @returns the names of attributes that were restored\n   */\n  rollbackAttrs(identifier: StableRecordIdentifier): string[] {\n    return this.#cache.rollbackAttrs(identifier);\n  }\n\n  // Relationships\n  // =============\n\n  /**\n   * Query the cache for the current state of a relationship property\n   *\n   * @method getRelationship\n   * @public\n   * @param identifier\n   * @param propertyName\n   * @returns resource relationship object\n   */\n  getRelationship(\n    identifier: StableRecordIdentifier,\n    propertyName: string\n  ): SingleResourceRelationship | CollectionResourceRelationship {\n    return this.#cache.getRelationship(identifier, propertyName);\n  }\n\n  // Resource State\n  // ===============\n\n  /**\n   * Update the cache state for the given resource to be marked as locally deleted,\n   * or remove such a mark.\n   *\n   * @method setIsDeleted\n   * @public\n   * @param identifier\n   * @param isDeleted\n   */\n  setIsDeleted(identifier: StableRecordIdentifier, isDeleted: boolean): void {\n    this.#cache.setIsDeleted(identifier, isDeleted);\n  }\n\n  /**\n   * Query the cache for any validation errors applicable to the given resource.\n   *\n   * @method getErrors\n   * @public\n   * @param identifier\n   * @returns\n   */\n  getErrors(identifier: StableRecordIdentifier): JsonApiError[] {\n    return this.#cache.getErrors(identifier);\n  }\n\n  /**\n   * Query the cache for whether a given resource has any available data\n   *\n   * @method isEmpty\n   * @public\n   * @param identifier\n   * @returns {boolean}\n   */\n  isEmpty(identifier: StableRecordIdentifier): boolean {\n    return this.#cache.isEmpty(identifier);\n  }\n\n  /**\n   * Query the cache for whether a given resource was created locally and not\n   * yet persisted.\n   *\n   * @method isNew\n   * @public\n   * @param identifier\n   * @returns {boolean}\n   */\n  isNew(identifier: StableRecordIdentifier): boolean {\n    return this.#cache.isNew(identifier);\n  }\n\n  /**\n   * Query the cache for whether a given resource is marked as deleted (but not\n   * necessarily persisted yet).\n   *\n   * @method isDeleted\n   * @public\n   * @param identifier\n   * @returns {boolean}\n   */\n  isDeleted(identifier: StableRecordIdentifier): boolean {\n    return this.#cache.isDeleted(identifier);\n  }\n\n  /**\n   * Query the cache for whether a given resource has been deleted and that deletion\n   * has also been persisted.\n   *\n   * @method isDeletionCommitted\n   * @public\n   * @param identifier\n   * @returns {boolean}\n   */\n  isDel;\n  isDeletionCommitted(identifier: StableRecordIdentifier): boolean {\n    return this.#cache.isDeletionCommitted(identifier);\n  }\n}\n","/**\n * @module @ember-data/store\n */\nimport { assert } from '@ember/debug';\nimport { _backburner } from '@ember/runloop';\n\nimport { LOG_NOTIFICATIONS } from '@ember-data/debugging';\nimport { DEBUG } from '@ember-data/env';\nimport { StableDocumentIdentifier } from '@ember-data/types/cache/identifier';\nimport type { StableRecordIdentifier } from '@ember-data/types/q/identifier';\n\nimport { isDocumentIdentifier, isStableIdentifier } from '../caches/identifier-cache';\nimport type Store from '../store-service';\n\nexport type UnsubscribeToken = object;\nlet tokenId = 0;\n\nconst CacheOperations = new Set(['added', 'removed', 'state', 'updated']);\nexport type CacheOperation = 'added' | 'removed' | 'updated' | 'state';\n\nfunction isCacheOperationValue(value: NotificationType | CacheOperation): value is CacheOperation {\n  return CacheOperations.has(value);\n}\n\nfunction runLoopIsFlushing(): boolean {\n  //@ts-expect-error\n  return !!_backburner.currentInstance && _backburner._autorun !== true;\n}\n\nexport type NotificationType = 'attributes' | 'relationships' | 'identity' | 'errors' | 'meta' | 'state';\n\nexport interface NotificationCallback {\n  (identifier: StableRecordIdentifier, notificationType: 'attributes' | 'relationships', key?: string): void;\n  (identifier: StableRecordIdentifier, notificationType: 'errors' | 'meta' | 'identity' | 'state'): void;\n  (identifier: StableRecordIdentifier, notificationType: NotificationType, key?: string): void;\n}\n\nexport interface ResourceOperationCallback {\n  // resource updates\n  (identifier: StableRecordIdentifier, notificationType: CacheOperation): void;\n}\n\nexport interface DocumentOperationCallback {\n  // document updates\n  (identifier: StableDocumentIdentifier, notificationType: CacheOperation): void;\n}\n\nfunction _unsubscribe(\n  tokens: Map<UnsubscribeToken, StableDocumentIdentifier | StableRecordIdentifier | 'resource' | 'document'>,\n  token: UnsubscribeToken,\n  cache: Map<\n    'resource' | 'document' | StableDocumentIdentifier | StableRecordIdentifier,\n    Map<UnsubscribeToken, NotificationCallback | ResourceOperationCallback | DocumentOperationCallback>\n  >\n) {\n  let identifier = tokens.get(token);\n  if (LOG_NOTIFICATIONS) {\n    if (!identifier) {\n      // eslint-disable-next-line no-console\n      console.log('Passed unknown unsubscribe token to unsubscribe', identifier);\n    }\n  }\n  if (identifier) {\n    tokens.delete(token);\n    const map = cache.get(identifier);\n    map?.delete(token);\n  }\n}\n\n/**\n * The NotificationManager provides the ability to subscribe to\n * changes to Cache state.\n *\n * This Feature is what allows EmberData to create subscriptions that\n * work with any framework or change-notification system.\n *\n * @class NotificationManager\n * @public\n */\nexport default class NotificationManager {\n  declare store: Store;\n  declare isDestroyed: boolean;\n  declare _buffered: Map<StableDocumentIdentifier | StableRecordIdentifier, [string, string | undefined][]>;\n  declare _cache: Map<\n    StableDocumentIdentifier | StableRecordIdentifier | 'resource' | 'document',\n    Map<UnsubscribeToken, NotificationCallback | ResourceOperationCallback | DocumentOperationCallback>\n  >;\n  declare _tokens: Map<UnsubscribeToken, StableDocumentIdentifier | StableRecordIdentifier | 'resource' | 'document'>;\n  declare _hasFlush: boolean;\n  declare _onFlushCB?: () => void;\n\n  constructor(store: Store) {\n    this.store = store;\n    this.isDestroyed = false;\n    this._buffered = new Map();\n    this._hasFlush = false;\n    this._cache = new Map();\n    this._tokens = new Map();\n  }\n\n  /**\n   * Subscribe to changes for a given resource identifier, resource addition/removal, or document addition/removal.\n   *\n   * ```ts\n   * export type CacheOperation = 'added' | 'removed' | 'updated' | 'state';\n   *\n   * export interface NotificationCallback {\n   *   (identifier: StableRecordIdentifier, notificationType: 'attributes' | 'relationships', key?: string): void;\n   *   (identifier: StableRecordIdentifier, notificationType: 'errors' | 'meta' | 'identity' | 'state'): void;\n   *   (identifier: StableRecordIdentifier, notificationType: NotificationType, key?: string): void;\n   * }\n   * export interface ResourceOperationCallback {\n   *   // resource updates\n   *   (identifier: StableRecordIdentifier, notificationType: CacheOperation): void;\n   * }\n   * export interface DocumentOperationCallback {\n   *   // document updates\n   *   (identifier: StableDocumentIdentifier, notificationType: CacheOperation): void;\n   * }\n   * ```\n   *\n   * @method subscribe\n   * @public\n   * @param {StableDocumentIdentifier | StableRecordIdentifier | 'resource' | 'document'} identifier\n   * @param {NotificationCallback | ResourceOperationCallback | DocumentOperationCallback} callback\n   * @returns {UnsubscribeToken} an opaque token to be used with unsubscribe\n   */\n  subscribe(identifier: StableRecordIdentifier, callback: NotificationCallback): UnsubscribeToken;\n  subscribe(identifier: 'resource', callback: ResourceOperationCallback): UnsubscribeToken;\n  subscribe(identifier: StableDocumentIdentifier, callback: DocumentOperationCallback): UnsubscribeToken;\n  subscribe(identifier: 'document', callback: DocumentOperationCallback): UnsubscribeToken;\n  subscribe(\n    identifier: StableDocumentIdentifier | StableRecordIdentifier | 'resource' | 'document',\n    callback: NotificationCallback | ResourceOperationCallback | DocumentOperationCallback\n  ): UnsubscribeToken {\n    assert(\n      `Expected to receive a stable Identifier to subscribe to`,\n      identifier === 'resource' ||\n        identifier === 'document' ||\n        isStableIdentifier(identifier) ||\n        isDocumentIdentifier(identifier)\n    );\n    let map = this._cache.get(identifier);\n\n    if (!map) {\n      map = new Map();\n      this._cache.set(identifier, map);\n    }\n\n    let unsubToken = DEBUG ? { _tokenRef: tokenId++ } : {};\n    map.set(unsubToken, callback);\n    this._tokens.set(unsubToken, identifier);\n    return unsubToken;\n  }\n\n  /**\n   * remove a previous subscription\n   *\n   * @method unsubscribe\n   * @public\n   * @param {UnsubscribeToken} token\n   */\n  unsubscribe(token: UnsubscribeToken) {\n    if (!this.isDestroyed) {\n      _unsubscribe(this._tokens, token, this._cache);\n    }\n  }\n\n  /**\n   * Custom Caches and Application Code should not call this method directly.\n   *\n   * @method notify\n   * @param identifier\n   * @param value\n   * @param key\n   * @return {Boolean} whether a notification was delivered to any subscribers\n   * @private\n   */\n  notify(identifier: StableRecordIdentifier, value: 'attributes' | 'relationships', key?: string): boolean;\n  notify(identifier: StableRecordIdentifier, value: 'errors' | 'meta' | 'identity' | 'state'): boolean;\n  notify(identifier: StableRecordIdentifier | StableDocumentIdentifier, value: CacheOperation): boolean;\n  notify(\n    identifier: StableRecordIdentifier | StableDocumentIdentifier,\n    value: NotificationType | CacheOperation,\n    key?: string\n  ): boolean {\n    assert(\n      `Notify does not accept a key argument for the namespace '${value}'. Received key '${key || ''}'.`,\n      !key || value === 'attributes' || value === 'relationships'\n    );\n    if (!isStableIdentifier(identifier) && !isDocumentIdentifier(identifier)) {\n      if (LOG_NOTIFICATIONS) {\n        // eslint-disable-next-line no-console\n        console.log(\n          `Notifying: Expected to receive a stable Identifier to notify '${value}' '${key || ''}' with, but ${String(\n            identifier\n          )} is not in the cache`,\n          identifier\n        );\n      }\n      return false;\n    }\n\n    if (LOG_NOTIFICATIONS) {\n      // eslint-disable-next-line no-console\n      console.log(`Buffering Notify: ${String(identifier.lid)}\\t${value}\\t${key || ''}`);\n    }\n\n    const hasSubscribers = Boolean(this._cache.get(identifier)?.size);\n\n    if (isCacheOperationValue(value) || hasSubscribers) {\n      let buffer = this._buffered.get(identifier);\n      if (!buffer) {\n        buffer = [];\n        this._buffered.set(identifier, buffer);\n      }\n      buffer.push([value, key]);\n\n      void this._scheduleNotify();\n    }\n\n    return hasSubscribers;\n  }\n\n  _onNextFlush(cb: () => void) {\n    this._onFlushCB = cb;\n  }\n\n  _scheduleNotify() {\n    const asyncFlush = this.store._enableAsyncFlush;\n\n    if (this._hasFlush) {\n      if (asyncFlush !== false && !runLoopIsFlushing()) {\n        return;\n      }\n    }\n\n    if (asyncFlush && !runLoopIsFlushing()) {\n      this._hasFlush = true;\n      return;\n    }\n\n    this._flush();\n  }\n\n  _flush() {\n    if (this._buffered.size) {\n      this._buffered.forEach((states, identifier) => {\n        states.forEach((args) => {\n          // @ts-expect-error\n          this._flushNotification(identifier, args[0], args[1]);\n        });\n      });\n      this._buffered = new Map();\n    }\n\n    this._hasFlush = false;\n    this._onFlushCB?.();\n    this._onFlushCB = undefined;\n  }\n\n  _flushNotification(identifier: StableRecordIdentifier, value: 'attributes' | 'relationships', key?: string): boolean;\n  _flushNotification(identifier: StableRecordIdentifier, value: 'errors' | 'meta' | 'identity' | 'state'): boolean;\n  _flushNotification(identifier: StableRecordIdentifier | StableDocumentIdentifier, value: CacheOperation): boolean;\n  _flushNotification(\n    identifier: StableRecordIdentifier | StableDocumentIdentifier,\n    value: NotificationType | CacheOperation,\n    key?: string\n  ): boolean {\n    if (LOG_NOTIFICATIONS) {\n      // eslint-disable-next-line no-console\n      console.log(`Notifying: ${String(identifier)}\\t${value}\\t${key || ''}`);\n    }\n\n    // TODO for documents this will need to switch based on Identifier kind\n    if (isCacheOperationValue(value)) {\n      let callbackMap = this._cache.get(isDocumentIdentifier(identifier) ? 'document' : 'resource') as Map<\n        UnsubscribeToken,\n        ResourceOperationCallback | DocumentOperationCallback\n      >;\n\n      if (callbackMap) {\n        callbackMap.forEach((cb: ResourceOperationCallback | DocumentOperationCallback) => {\n          cb(identifier as StableRecordIdentifier, value);\n        });\n      }\n    }\n\n    let callbackMap = this._cache.get(identifier);\n    if (!callbackMap || !callbackMap.size) {\n      return false;\n    }\n    callbackMap.forEach((cb) => {\n      // @ts-expect-error overload doesn't narrow within body\n      cb(identifier, value, key);\n    });\n    return true;\n  }\n\n  destroy() {\n    this.isDestroyed = true;\n    this._tokens.clear();\n    this._cache.clear();\n  }\n}\n","/**\n  @module @ember-data/store\n*/\n// @ts-expect-error\nimport { tagForProperty } from '@ember/-internals/metal';\nimport { assert } from '@ember/debug';\nimport { dependentKeyCompat } from '@ember/object/compat';\nimport { tracked } from '@glimmer/tracking';\n// @ts-expect-error\nimport { dirtyTag } from '@glimmer/validator';\nimport Ember from 'ember';\n\nimport { DEPRECATE_COMPUTED_CHAINS } from '@ember-data/deprecations';\nimport { DEBUG } from '@ember-data/env';\nimport { ImmutableRequestInfo } from '@ember-data/request/-private/types';\nimport { addToTransaction, subscribe } from '@ember-data/tracking/-private';\nimport { Links, PaginationLinks } from '@ember-data/types/q/ember-data-json-api';\nimport type { StableRecordIdentifier } from '@ember-data/types/q/identifier';\nimport type { RecordInstance } from '@ember-data/types/q/record-instance';\n\nimport { recordIdentifierFor } from '../caches/instance-cache';\nimport type RecordArrayManager from '../managers/record-array-manager';\nimport type Store from '../store-service';\n\ntype KeyType = string | symbol | number;\nconst ARRAY_GETTER_METHODS = new Set<KeyType>([\n  Symbol.iterator,\n  'concat',\n  'entries',\n  'every',\n  'fill',\n  'filter',\n  'find',\n  'findIndex',\n  'flat',\n  'flatMap',\n  'forEach',\n  'includes',\n  'indexOf',\n  'join',\n  'keys',\n  'lastIndexOf',\n  'map',\n  'reduce',\n  'reduceRight',\n  'slice',\n  'some',\n  'values',\n]);\nconst ARRAY_SETTER_METHODS = new Set<KeyType>(['push', 'pop', 'unshift', 'shift', 'splice', 'sort']);\nconst SYNC_PROPS = new Set<KeyType>(['[]', 'length', 'links', 'meta']);\nfunction isArrayGetter(prop: KeyType): boolean {\n  return ARRAY_GETTER_METHODS.has(prop);\n}\nfunction isArraySetter(prop: KeyType): boolean {\n  return ARRAY_SETTER_METHODS.has(prop);\n}\n\nexport const IDENTIFIER_ARRAY_TAG = Symbol('#tag');\nexport const SOURCE = Symbol('#source');\nexport const MUTATE = Symbol('#update');\nexport const NOTIFY = Symbol('#notify');\nconst IS_COLLECTION = Symbol.for('Collection');\n\nexport function notifyArray(arr: IdentifierArray) {\n  arr[IDENTIFIER_ARRAY_TAG].ref = null;\n\n  if (DEPRECATE_COMPUTED_CHAINS) {\n    // eslint-disable-next-line\n    dirtyTag(tagForProperty(arr, 'length'));\n    // eslint-disable-next-line\n    dirtyTag(tagForProperty(arr, '[]'));\n  }\n}\n\nfunction convertToInt(prop: KeyType): number | null {\n  if (typeof prop === 'symbol') return null;\n\n  const num = Number(prop);\n\n  if (isNaN(num)) return null;\n\n  return num % 1 === 0 ? num : null;\n}\n\nclass Tag {\n  @tracked ref = null;\n  declare shouldReset: boolean;\n  /*\n   * whether this was part of a transaction when last mutated\n   */\n  declare t: boolean;\n\n  constructor() {\n    this.shouldReset = false;\n    this.t = false;\n  }\n}\n\ntype ProxiedMethod = (...args: unknown[]) => unknown;\ndeclare global {\n  interface ProxyConstructor {\n    new <TSource extends object, TTarget extends object>(target: TSource, handler: ProxyHandler<TSource>): TTarget;\n  }\n}\n\nexport type IdentifierArrayCreateOptions = {\n  identifiers: StableRecordIdentifier[];\n  type?: string;\n  store: Store;\n  allowMutation: boolean;\n  manager: RecordArrayManager;\n  links?: Links | PaginationLinks | null;\n  meta?: Record<string, unknown> | null;\n};\n\ninterface PrivateState {\n  links: Links | PaginationLinks | null;\n  meta: Record<string, unknown> | null;\n}\ntype ForEachCB = (record: RecordInstance, index: number, context: IdentifierArray) => void;\nfunction safeForEach(\n  instance: IdentifierArray,\n  arr: StableRecordIdentifier[],\n  store: Store,\n  callback: ForEachCB,\n  target: unknown\n) {\n  if (target === undefined) {\n    target = null;\n  }\n  // clone to prevent mutation\n  arr = arr.slice();\n  assert('`forEach` expects a function as first argument.', typeof callback === 'function');\n\n  // because we retrieveLatest above we need not worry if array is mutated during iteration\n  // by unloadRecord/rollbackAttributes\n  // push/add/removeObject may still be problematic\n  // but this is a more traditionally expected forEach bug.\n  const length = arr.length; // we need to access length to ensure we are consumed\n\n  for (let index = 0; index < length; index++) {\n    callback.call(target, store._instanceCache.getRecord(arr[index]), index, instance);\n  }\n\n  return instance;\n}\n\n/**\n  A record array is an array that contains records of a certain type (or modelName).\n  The record array materializes records as needed when they are retrieved for the first\n  time. You should not create record arrays yourself. Instead, an instance of\n  `RecordArray` or its subclasses will be returned by your application's store\n  in response to queries.\n\n  This class should not be imported and instantiated by consuming applications.\n\n  @class RecordArray\n  @public\n*/\ninterface IdentifierArray extends Omit<Array<RecordInstance>, '[]'> {\n  [MUTATE]?(prop: string, args: unknown[], result?: unknown): void;\n}\nclass IdentifierArray {\n  declare DEPRECATED_CLASS_NAME: string;\n  /**\n    The flag to signal a `RecordArray` is currently loading data.\n    Example\n    ```javascript\n    let people = store.peekAll('person');\n    people.isUpdating; // false\n    people.update();\n    people.isUpdating; // true\n    ```\n    @property isUpdating\n    @public\n    @type Boolean\n  */\n  @tracked isUpdating: boolean = false;\n  isLoaded: boolean = true;\n  isDestroying: boolean = false;\n  isDestroyed: boolean = false;\n  _updatingPromise: Promise<IdentifierArray> | null = null;\n\n  [IS_COLLECTION] = true;\n  [IDENTIFIER_ARRAY_TAG] = new Tag();\n  [SOURCE]: StableRecordIdentifier[];\n  [NOTIFY]() {\n    notifyArray(this);\n  }\n\n  declare links: Links | PaginationLinks | null;\n  declare meta: Record<string, unknown> | null;\n  declare modelName?: string;\n  /**\n    The store that created this record array.\n\n    @property store\n    @private\n    @type Store\n    */\n  declare store: Store;\n  declare _manager: RecordArrayManager;\n\n  destroy(clear: boolean) {\n    this.isDestroying = !clear;\n    // changing the reference breaks the Proxy\n    // this[SOURCE] = [];\n    this[SOURCE].length = 0;\n    this[NOTIFY]();\n    this.isDestroyed = !clear;\n  }\n\n  // length must be on self for proxied methods to work properly\n  @dependentKeyCompat\n  get length() {\n    return this[SOURCE].length;\n  }\n  set length(value) {\n    this[SOURCE].length = value;\n  }\n\n  // here to support computed chains\n  // and {{#each}}\n  get '[]'() {\n    if (DEPRECATE_COMPUTED_CHAINS) {\n      return this;\n    }\n  }\n\n  constructor(options: IdentifierArrayCreateOptions) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let self = this;\n    this.modelName = options.type;\n    this.store = options.store;\n    this._manager = options.manager;\n    this[SOURCE] = options.identifiers;\n    const store = options.store;\n    const boundFns = new Map<KeyType, ProxiedMethod>();\n    const _TAG = this[IDENTIFIER_ARRAY_TAG];\n    const PrivateState: PrivateState = {\n      links: options.links || null,\n      meta: options.meta || null,\n    };\n    let transaction: boolean = false;\n\n    // when a mutation occurs\n    // we track all mutations within the call\n    // and forward them as one\n\n    const proxy = new Proxy<StableRecordIdentifier[], RecordInstance[]>(this[SOURCE], {\n      get(target: StableRecordIdentifier[], prop: KeyType, receiver: IdentifierArray): unknown {\n        let index = convertToInt(prop);\n        if (_TAG.shouldReset && (index !== null || SYNC_PROPS.has(prop) || isArrayGetter(prop))) {\n          options.manager._syncArray(receiver as unknown as IdentifierArray);\n          _TAG.t = false;\n          _TAG.shouldReset = false;\n        }\n\n        if (index !== null) {\n          const identifier = target[index];\n          if (!transaction) {\n            subscribe(_TAG);\n          }\n          return identifier && store._instanceCache.getRecord(identifier);\n        }\n\n        if (prop === 'meta') return subscribe(_TAG), PrivateState.meta;\n        if (prop === 'links') return subscribe(_TAG), PrivateState.links;\n        if (prop === '[]') return subscribe(_TAG), receiver;\n\n        if (isArrayGetter(prop)) {\n          let fn = boundFns.get(prop);\n\n          if (fn === undefined) {\n            if (prop === 'forEach') {\n              fn = function () {\n                subscribe(_TAG);\n                transaction = true;\n                let result = safeForEach(receiver, target, store, arguments[0] as ForEachCB, arguments[1]);\n                transaction = false;\n                return result;\n              };\n            } else {\n              fn = function () {\n                subscribe(_TAG);\n                // array functions must run through Reflect to work properly\n                // binding via other means will not work.\n                transaction = true;\n                let result = Reflect.apply(target[prop] as ProxiedMethod, receiver, arguments) as unknown;\n                transaction = false;\n                return result;\n              };\n            }\n\n            boundFns.set(prop, fn);\n          }\n\n          return fn;\n        }\n\n        if (isArraySetter(prop)) {\n          let fn = boundFns.get(prop);\n\n          if (fn === undefined) {\n            fn = function () {\n              // array functions must run through Reflect to work properly\n              // binding via other means will not work.\n              if (!options.allowMutation) {\n                assert(`Mutating this array of records via ${String(prop)} is not allowed.`, options.allowMutation);\n                return;\n              }\n              const args: unknown[] = Array.prototype.slice.call(arguments);\n              assert(`Cannot start a new array transaction while a previous transaction is underway`, !transaction);\n              transaction = true;\n              let result: unknown = Reflect.apply(target[prop] as ProxiedMethod, receiver, args);\n              self[MUTATE]!(prop as string, args, result);\n              addToTransaction(_TAG);\n              // TODO handle cache updates\n              transaction = false;\n              return result;\n            };\n\n            boundFns.set(prop, fn);\n          }\n\n          return fn;\n        }\n\n        if (prop in self) {\n          if (prop === NOTIFY || prop === IDENTIFIER_ARRAY_TAG || prop === SOURCE) {\n            return self[prop];\n          }\n\n          let fn = boundFns.get(prop);\n          if (fn) return fn;\n\n          let outcome: unknown = self[prop];\n\n          if (typeof outcome === 'function') {\n            fn = function () {\n              subscribe(_TAG);\n              // array functions must run through Reflect to work properly\n              // binding via other means will not work.\n              return Reflect.apply(outcome as ProxiedMethod, receiver, arguments) as unknown;\n            };\n\n            boundFns.set(prop, fn);\n            return fn;\n          }\n\n          return subscribe(_TAG), outcome;\n        }\n\n        return target[prop];\n      },\n\n      set(target: StableRecordIdentifier[], prop: KeyType, value: unknown /*, receiver */): boolean {\n        if (prop === 'length') {\n          if (!transaction && value === 0) {\n            transaction = true;\n            addToTransaction(_TAG);\n            Reflect.set(target, prop, value);\n            self[MUTATE]!('length 0', []);\n            transaction = false;\n            return true;\n          } else if (transaction) {\n            return Reflect.set(target, prop, value);\n          } else {\n            assert(`unexpected length set`);\n          }\n        }\n        if (prop === 'links') {\n          PrivateState.links = (value || null) as PaginationLinks | Links | null;\n          return true;\n        }\n        if (prop === 'meta') {\n          PrivateState.meta = (value || null) as Record<string, unknown> | null;\n          return true;\n        }\n        let index = convertToInt(prop);\n\n        if (index === null || index > target.length) {\n          if (prop in self) {\n            self[prop] = value;\n            return true;\n          }\n          return false;\n        }\n\n        if (!options.allowMutation) {\n          assert(`Mutating ${String(prop)} on this RecordArray is not allowed.`, options.allowMutation);\n          return false;\n        }\n\n        let original: StableRecordIdentifier | undefined = target[index];\n        let newIdentifier = extractIdentifierFromRecord(value as RecordInstance);\n        (target as unknown as Record<KeyType, unknown>)[index] = newIdentifier;\n        if (!transaction) {\n          self[MUTATE]!('replace cell', [index, original, newIdentifier]);\n          addToTransaction(_TAG);\n        }\n\n        return true;\n      },\n\n      deleteProperty(target: StableRecordIdentifier[], prop: string | symbol): boolean {\n        assert(`Deleting keys on managed arrays is disallowed`, transaction);\n        if (!transaction) {\n          return false;\n        }\n        return Reflect.deleteProperty(target, prop);\n      },\n\n      getPrototypeOf() {\n        return IdentifierArray.prototype;\n      },\n    }) as IdentifierArray;\n\n    if (DEBUG) {\n      const meta = Ember.meta(this);\n      meta.hasMixin = (mixin: Object) => {\n        assert(`Do not call A() on EmberData RecordArrays`);\n      };\n    }\n\n    this[NOTIFY] = this[NOTIFY].bind(proxy);\n\n    return proxy;\n  }\n\n  /**\n    Used to get the latest version of all of the records in this array\n    from the adapter.\n\n    Example\n\n    ```javascript\n    let people = store.peekAll('person');\n    people.isUpdating; // false\n\n    people.update().then(function() {\n      people.isUpdating; // false\n    });\n\n    people.isUpdating; // true\n    ```\n\n    @method update\n    @public\n  */\n  update(): Promise<IdentifierArray> {\n    if (this.isUpdating) {\n      return this._updatingPromise!;\n    }\n\n    this.isUpdating = true;\n\n    let updatingPromise = this._update();\n    updatingPromise.finally(() => {\n      this._updatingPromise = null;\n      if (this.isDestroying || this.isDestroyed) {\n        return;\n      }\n      this.isUpdating = false;\n    });\n\n    this._updatingPromise = updatingPromise;\n\n    return updatingPromise;\n  }\n\n  /*\n    Update this RecordArray and return a promise which resolves once the update\n    is finished.\n   */\n  _update(): Promise<IdentifierArray> {\n    assert(`_update cannot be used with this array`, this.modelName);\n    return this.store.findAll(this.modelName, { reload: true });\n  }\n\n  // TODO deprecate\n  /**\n    Saves all of the records in the `RecordArray`.\n\n    Example\n\n    ```javascript\n    let messages = store.peekAll('message');\n    messages.forEach(function(message) {\n      message.hasBeenSeen = true;\n    });\n    messages.save();\n    ```\n\n    @method save\n    @public\n    @return {Promise<IdentifierArray>} promise\n  */\n  save(): Promise<IdentifierArray> {\n    let promise = Promise.all(this.map((record) => this.store.saveRecord(record))).then(() => this);\n\n    return promise;\n  }\n}\n\nexport default IdentifierArray;\n\nexport type CollectionCreateOptions = IdentifierArrayCreateOptions & {\n  query: ImmutableRequestInfo | Record<string, unknown> | null;\n  isLoaded: boolean;\n};\n\nexport class Collection extends IdentifierArray {\n  query: ImmutableRequestInfo | Record<string, unknown> | null = null;\n\n  constructor(options: CollectionCreateOptions) {\n    super(options as IdentifierArrayCreateOptions);\n    this.query = options.query || null;\n    this.isLoaded = options.isLoaded || false;\n  }\n\n  _update(): Promise<Collection> {\n    const { store, query } = this;\n\n    // TODO save options from initial request?\n    assert(`update cannot be used with this array`, this.modelName);\n    assert(`update cannot be used with no query`, query);\n    const promise = store.query(this.modelName, query as Record<string, unknown>, { _recordArray: this });\n\n    return promise;\n  }\n\n  destroy(clear: boolean) {\n    super.destroy(clear);\n    this._manager._managed.delete(this);\n    this._manager._pending.delete(this);\n  }\n}\n// trick the proxy \"in\" check\nCollection.prototype.query = null;\n\n// Ensure instanceof works correctly\n//Object.setPrototypeOf(IdentifierArray.prototype, Array.prototype);\n\ntype PromiseProxyRecord = { then(): void; content: RecordInstance | null | undefined };\n\nfunction assertRecordPassedToHasMany(record: RecordInstance | PromiseProxyRecord) {\n  assert(\n    `All elements of a hasMany relationship must be instances of Model, you passed $${typeof record}`,\n    (function () {\n      try {\n        recordIdentifierFor(record);\n        return true;\n      } catch {\n        return false;\n      }\n    })()\n  );\n}\n\nfunction extractIdentifierFromRecord(record: PromiseProxyRecord | RecordInstance | null) {\n  if (!record) {\n    return null;\n  }\n\n  assertRecordPassedToHasMany(record);\n  return recordIdentifierFor(record);\n}\n","/**\n  @module @ember-data/store\n*/\nimport { ImmutableRequestInfo } from '@ember-data/request/-private/types';\nimport { addTransactionCB } from '@ember-data/tracking/-private';\nimport type { CollectionResourceDocument } from '@ember-data/types/q/ember-data-json-api';\nimport type { StableRecordIdentifier } from '@ember-data/types/q/identifier';\n\nimport IdentifierArray, {\n  Collection,\n  CollectionCreateOptions,\n  IDENTIFIER_ARRAY_TAG,\n  NOTIFY,\n  notifyArray,\n  SOURCE,\n} from '../record-arrays/identifier-array';\nimport type Store from '../store-service';\nimport { CacheOperation, UnsubscribeToken } from './notification-manager';\n\nconst FAKE_ARR = {};\nconst SLICE_BATCH_SIZE = 1200;\n/**\n * This is a clever optimization.\n *\n * clever optimizations rarely stand the test of time, so if you're\n * ever curious or think something better is possible please benchmark\n * and discuss. The benchmark for this at the time of writing is in\n * `scripts/benchmark-push.js`\n *\n * This approach turns out to be 150x faster in Chrome and node than\n * simply using push or concat. It's highly susceptible to the specifics\n * of the batch size, and may require tuning.\n *\n * Clever optimizations should always come with a `why`. This optimization\n * exists for two reasons.\n *\n * 1) array.push(...objects) and Array.prototype.push.apply(arr, objects)\n *   are susceptible to stack overflows. The size of objects at which this\n *   occurs varies by environment, browser, and current stack depth and memory\n *   pressure; however, it occurs in all browsers in fairly pristine conditions\n *   somewhere around 125k to 200k elements. Since EmberData regularly encounters\n *   arrays larger than this in size, we cannot use push.\n *\n * 2) `array.concat` or simply setting the array to a new reference is often an\n *   easier approach; however, native Proxy to an array cannot swap it's target array\n *   and attempts at juggling multiple array sources have proven to be victim to a number\n *   of browser implementation bugs. Should these bugs be addressed then we could\n *   simplify to using `concat`, however, do note this is currently 150x faster\n *   than concat, and due to the overloaded signature of concat will likely always\n *   be faster.\n *\n * Sincerely,\n *   - runspired (Chris Thoburn) 08/21/2022\n *\n * @function fastPush\n * @internal\n * @param target the array to push into\n * @param source the items to push into target\n */\nexport function fastPush<T>(target: T[], source: T[]) {\n  let startLength = 0;\n  let newLength = source.length;\n  while (newLength - startLength > SLICE_BATCH_SIZE) {\n    // eslint-disable-next-line prefer-spread\n    target.push.apply(target, source.slice(startLength, startLength + SLICE_BATCH_SIZE));\n    startLength += SLICE_BATCH_SIZE;\n  }\n  // eslint-disable-next-line prefer-spread\n  target.push.apply(target, source.slice(startLength));\n}\n\ntype ChangeSet = Map<StableRecordIdentifier, 'add' | 'del'>;\n\n/**\n  @class RecordArrayManager\n  @internal\n*/\nclass RecordArrayManager {\n  declare store: Store;\n  declare isDestroying: boolean;\n  declare isDestroyed: boolean;\n  declare _set: Map<IdentifierArray, Set<StableRecordIdentifier>>;\n  declare _live: Map<string, IdentifierArray>;\n  declare _managed: Set<IdentifierArray>;\n  declare _pending: Map<IdentifierArray, ChangeSet>;\n  declare _identifiers: Map<StableRecordIdentifier, Set<Collection>>;\n  declare _staged: Map<string, ChangeSet>;\n  declare _subscription: UnsubscribeToken;\n  declare _keyedArrays: Map<string, Collection>;\n  declare _visibilitySet: Map<StableRecordIdentifier, boolean>;\n\n  constructor(options: { store: Store }) {\n    this.store = options.store;\n    this.isDestroying = false;\n    this.isDestroyed = false;\n    this._live = new Map();\n    this._managed = new Set();\n    this._pending = new Map();\n    this._staged = new Map();\n    this._keyedArrays = new Map();\n    this._identifiers = new Map();\n    this._set = new Map();\n    this._visibilitySet = new Map();\n\n    this._subscription = this.store.notifications.subscribe(\n      'resource',\n      (identifier: StableRecordIdentifier, type: CacheOperation) => {\n        if (type === 'added') {\n          this._visibilitySet.set(identifier, true);\n          this.identifierAdded(identifier);\n        } else if (type === 'removed') {\n          this._visibilitySet.set(identifier, false);\n          this.identifierRemoved(identifier);\n        } else if (type === 'state') {\n          this.identifierChanged(identifier);\n        }\n      }\n    );\n  }\n\n  _syncArray(array: IdentifierArray) {\n    const pending = this._pending.get(array);\n\n    if (!pending || this.isDestroying || this.isDestroyed) {\n      return;\n    }\n\n    sync(array, pending, this._set.get(array)!);\n    this._pending.delete(array);\n  }\n\n  /**\n    Get the `RecordArray` for a modelName, which contains all loaded records of\n    given modelName.\n\n    @method liveArrayFor\n    @internal\n    @param {String} modelName\n    @return {RecordArray}\n  */\n  liveArrayFor(type: string): IdentifierArray {\n    let array = this._live.get(type);\n    let identifiers: StableRecordIdentifier[] = [];\n    let staged = this._staged.get(type);\n    if (staged) {\n      staged.forEach((value, key) => {\n        if (value === 'add') {\n          identifiers.push(key);\n        }\n      });\n      this._staged.delete(type);\n    }\n\n    if (!array) {\n      array = new IdentifierArray({\n        type,\n        identifiers,\n        store: this.store,\n        allowMutation: false,\n        manager: this,\n      });\n      this._live.set(type, array);\n      this._set.set(array, new Set(identifiers));\n    }\n\n    return array;\n  }\n\n  createArray(config: {\n    type?: string;\n    query?: ImmutableRequestInfo | Record<string, unknown>;\n    identifiers?: StableRecordIdentifier[];\n    doc?: CollectionResourceDocument;\n  }): Collection {\n    let options: CollectionCreateOptions = {\n      type: config.type,\n      links: config.doc?.links || null,\n      meta: config.doc?.meta || null,\n      query: config.query || null,\n      identifiers: config.identifiers || [],\n      isLoaded: !!config.identifiers?.length,\n      allowMutation: false,\n      store: this.store,\n      manager: this,\n    };\n    let array = new Collection(options);\n    this._managed.add(array);\n    this._set.set(array, new Set(options.identifiers || []));\n    if (config.identifiers) {\n      associate(this._identifiers, array, config.identifiers);\n    }\n\n    return array;\n  }\n\n  dirtyArray(array: IdentifierArray, delta: number): void {\n    if (array === FAKE_ARR) {\n      return;\n    }\n    let tag = array[IDENTIFIER_ARRAY_TAG];\n    if (!tag.shouldReset) {\n      tag.shouldReset = true;\n      addTransactionCB(array[NOTIFY]);\n    } else if (delta > 0 && !tag.t) {\n      addTransactionCB(array[NOTIFY]);\n    }\n  }\n\n  _getPendingFor(\n    identifier: StableRecordIdentifier,\n    includeManaged: boolean,\n    isRemove?: boolean\n  ): Map<IdentifierArray, ChangeSet> | void {\n    if (this.isDestroying || this.isDestroyed) {\n      return;\n    }\n\n    let liveArray = this._live.get(identifier.type);\n    const allPending = this._pending;\n    let pending: Map<IdentifierArray, ChangeSet> = new Map();\n\n    if (includeManaged) {\n      let managed = this._identifiers.get(identifier);\n      if (managed) {\n        managed.forEach((arr) => {\n          let changes = allPending.get(arr);\n          if (!changes) {\n            changes = new Map();\n            allPending.set(arr, changes);\n          }\n          pending.set(arr, changes);\n        });\n      }\n    }\n\n    // during unloadAll we can ignore removes since we've already\n    // cleared the array.\n    if (liveArray && liveArray[SOURCE].length === 0 && isRemove) {\n      const pendingLive = allPending.get(liveArray);\n      if (!pendingLive || pendingLive.size === 0) {\n        return pending;\n      }\n    }\n\n    if (!liveArray) {\n      // start building a changeset for when we eventually\n      // do have a live array\n      let changes = this._staged.get(identifier.type);\n      if (!changes) {\n        changes = new Map();\n        this._staged.set(identifier.type, changes);\n      }\n      pending.set(FAKE_ARR as IdentifierArray, changes);\n    } else {\n      let changes = allPending.get(liveArray);\n      if (!changes) {\n        changes = new Map();\n        allPending.set(liveArray, changes);\n      }\n      pending.set(liveArray, changes);\n    }\n\n    return pending;\n  }\n\n  populateManagedArray(array: Collection, identifiers: StableRecordIdentifier[], payload: CollectionResourceDocument) {\n    this._pending.delete(array);\n    const source = array[SOURCE];\n    const old = source.slice();\n    source.length = 0;\n    fastPush(source, identifiers);\n    this._set.set(array, new Set(identifiers));\n\n    notifyArray(array);\n    array.meta = payload.meta || null;\n    array.links = payload.links || null;\n    array.isLoaded = true;\n\n    disassociate(this._identifiers, array, old);\n    associate(this._identifiers, array, identifiers);\n  }\n\n  identifierAdded(identifier: StableRecordIdentifier): void {\n    let changeSets = this._getPendingFor(identifier, false);\n    if (changeSets) {\n      changeSets.forEach((changes, array) => {\n        let existing = changes.get(identifier);\n        if (existing === 'del') {\n          changes.delete(identifier);\n        } else {\n          changes.set(identifier, 'add');\n\n          this.dirtyArray(array, changes.size);\n        }\n      });\n    }\n  }\n\n  identifierRemoved(identifier: StableRecordIdentifier): void {\n    let changeSets = this._getPendingFor(identifier, true, true);\n    if (changeSets) {\n      changeSets.forEach((changes, array) => {\n        let existing = changes.get(identifier);\n        if (existing === 'add') {\n          changes.delete(identifier);\n        } else {\n          changes.set(identifier, 'del');\n\n          this.dirtyArray(array, changes.size);\n        }\n      });\n    }\n  }\n\n  identifierChanged(identifier: StableRecordIdentifier): void {\n    let newState = this.store._instanceCache.recordIsLoaded(identifier, true);\n\n    // if the change matches the most recent direct added/removed\n    // state, then we can ignore it\n    if (this._visibilitySet.get(identifier) === newState) {\n      return;\n    }\n\n    if (newState) {\n      this.identifierAdded(identifier);\n    } else {\n      this.identifierRemoved(identifier);\n    }\n  }\n\n  clear(isClear = true) {\n    this._live.forEach((array) => array.destroy(isClear));\n    this._managed.forEach((array) => array.destroy(isClear));\n    this._managed.clear();\n    this._identifiers.clear();\n    this._pending.clear();\n    this._set.forEach((set) => set.clear());\n    this._visibilitySet.clear();\n  }\n\n  destroy() {\n    this.isDestroying = true;\n    this.clear(false);\n    this._live.clear();\n    this.isDestroyed = true;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    this.store.notifications.unsubscribe(this._subscription);\n  }\n}\n\nfunction associate(\n  ArraysCache: Map<StableRecordIdentifier, Set<Collection>>,\n  array: Collection,\n  identifiers: StableRecordIdentifier[]\n) {\n  for (let i = 0; i < identifiers.length; i++) {\n    let identifier = identifiers[i];\n    let cache = ArraysCache.get(identifier);\n    if (!cache) {\n      cache = new Set();\n      ArraysCache.set(identifier, cache);\n    }\n    cache.add(array);\n  }\n}\n\nfunction disassociate(\n  ArraysCache: Map<StableRecordIdentifier, Set<Collection>>,\n  array: Collection,\n  identifiers: StableRecordIdentifier[]\n) {\n  for (let i = 0; i < identifiers.length; i++) {\n    disassociateIdentifier(ArraysCache, array, identifiers[i]);\n  }\n}\n\nexport function disassociateIdentifier(\n  ArraysCache: Map<StableRecordIdentifier, Set<Collection>>,\n  array: Collection,\n  identifier: StableRecordIdentifier\n) {\n  let cache = ArraysCache.get(identifier);\n  if (cache) {\n    cache.delete(array);\n  }\n}\n\nfunction sync(\n  array: IdentifierArray,\n  changes: Map<StableRecordIdentifier, 'add' | 'del'>,\n  arraySet: Set<StableRecordIdentifier>\n) {\n  let state = array[SOURCE];\n  const adds: StableRecordIdentifier[] = [];\n  const removes: StableRecordIdentifier[] = [];\n  changes.forEach((value, key) => {\n    if (value === 'add') {\n      // likely we want to keep a Set along-side\n      if (arraySet.has(key)) {\n        return;\n      }\n      adds.push(key);\n      arraySet.add(key);\n    } else {\n      if (arraySet.has(key)) {\n        removes.push(key);\n      }\n    }\n  });\n  if (removes.length) {\n    if (removes.length === state.length) {\n      state.length = 0;\n      arraySet.clear();\n      // changing the reference breaks the Proxy\n      // state = array[SOURCE] = [];\n    } else {\n      removes.forEach((i) => {\n        const index = state.indexOf(i);\n        if (index !== -1) {\n          state.splice(index, 1);\n          arraySet.delete(i);\n        }\n      });\n    }\n  }\n\n  if (adds.length) {\n    fastPush(state, adds);\n    // changing the reference breaks the Proxy\n    // else we could do this\n    /*\n    if (state.length === 0) {\n      array[SOURCE] = adds;\n    } else {\n      array[SOURCE] = state.concat(adds);\n    }\n    */\n  }\n}\n\nexport default RecordArrayManager;\n","/**\n * @module @ember-data/store\n */\nimport { assert } from '@ember/debug';\n\nimport type {\n  FindRecordQuery,\n  Operation,\n  Request,\n  RequestState,\n  SaveRecordMutation,\n} from '@ember-data/types/q/fetch-manager';\nimport type { RecordIdentifier, StableRecordIdentifier } from '@ember-data/types/q/identifier';\n\nimport Store from '../store-service';\n\nconst Touching: unique symbol = Symbol('touching');\nexport const RequestPromise: unique symbol = Symbol('promise');\n\ninterface InternalRequest extends RequestState {\n  [Touching]: RecordIdentifier[];\n  [RequestPromise]?: Promise<any>;\n}\n\ntype RecordOperation = FindRecordQuery | SaveRecordMutation;\n\nfunction hasRecordIdentifier(op: Operation): op is RecordOperation {\n  return 'recordIdentifier' in op;\n}\n\n/**\n * The RequestStateService is used to track the state of requests\n * for fetching or updating known resource identifies that are inflight.\n *\n * @class RequestStateService\n * @public\n */\nexport default class RequestStateService {\n  _pending: { [lid: string]: InternalRequest[] } = Object.create(null);\n  _done: Map<StableRecordIdentifier, InternalRequest[]> = new Map();\n  _subscriptions: { [lid: string]: Function[] } = Object.create(null);\n  _toFlush: InternalRequest[] = [];\n  _store: Store;\n\n  constructor(store) {\n    this._store = store;\n  }\n\n  _clearEntries(identifier: StableRecordIdentifier) {\n    this._done.delete(identifier);\n  }\n\n  _enqueue<T>(promise: Promise<T>, queryRequest: Request): Promise<T> {\n    let query = queryRequest.data[0];\n    if (hasRecordIdentifier(query)) {\n      let lid = query.recordIdentifier.lid;\n      let type = query.op === 'saveRecord' ? ('mutation' as const) : ('query' as const);\n      if (!this._pending[lid]) {\n        this._pending[lid] = [];\n      }\n      let request: InternalRequest = {\n        state: 'pending',\n        request: queryRequest,\n        type,\n      } as InternalRequest;\n      request[Touching] = [query.recordIdentifier];\n      request[RequestPromise] = promise;\n      this._pending[lid].push(request);\n      this._triggerSubscriptions(request);\n      return promise.then(\n        (result) => {\n          this._dequeue(lid, request);\n          let finalizedRequest = {\n            state: 'fulfilled',\n            request: queryRequest,\n            type,\n            response: { data: result },\n          } as InternalRequest;\n          finalizedRequest[Touching] = request[Touching];\n          this._addDone(finalizedRequest);\n          this._triggerSubscriptions(finalizedRequest);\n          return result;\n        },\n        (error) => {\n          this._dequeue(lid, request);\n          let finalizedRequest = {\n            state: 'rejected',\n            request: queryRequest,\n            type,\n            response: { data: error },\n          } as InternalRequest;\n          finalizedRequest[Touching] = request[Touching];\n          this._addDone(finalizedRequest);\n          this._triggerSubscriptions(finalizedRequest);\n          throw error;\n        }\n      );\n    }\n    assert(`Expected a well formed  query`);\n  }\n\n  _triggerSubscriptions(req: InternalRequest): void {\n    if (req.state === 'pending') {\n      this._flushRequest(req);\n      return;\n    }\n    this._toFlush.push(req);\n\n    if (this._toFlush.length === 1) {\n      this._store.notifications._onNextFlush(() => {\n        this._flush();\n      });\n    }\n  }\n\n  _flush(): void {\n    this._toFlush.forEach((req) => {\n      this._flushRequest(req);\n    });\n    this._toFlush = [];\n  }\n\n  _flushRequest(req: InternalRequest): void {\n    req[Touching].forEach((identifier: StableRecordIdentifier) => {\n      if (this._subscriptions[identifier.lid]) {\n        this._subscriptions[identifier.lid].forEach((callback) => callback(req));\n      }\n    });\n  }\n\n  _dequeue(lid: string, request: InternalRequest) {\n    this._pending[lid] = this._pending[lid].filter((req) => req !== request);\n  }\n\n  _addDone(request: InternalRequest) {\n    request[Touching].forEach((identifier) => {\n      // TODO add support for multiple\n      let requestDataOp = request.request.data[0].op;\n      let requests = this._done.get(identifier);\n\n      if (requests) {\n        requests = requests.filter((req) => {\n          // TODO add support for multiple\n          let data;\n          if (req.request.data instanceof Array) {\n            data = req.request.data[0];\n          } else {\n            data = req.request.data;\n          }\n          return data.op !== requestDataOp;\n        });\n      }\n      requests = requests || [];\n      requests.push(request);\n      this._done.set(identifier, requests);\n    });\n  }\n\n  /**\n   * Subscribe to requests for a given resource identity.\n   *\n   * The callback will receive the current state of the request.\n   *\n   * ```ts\n   * interface RequestState {\n   *   state: 'pending' | 'fulfilled' | 'rejected';\n   *   type: 'query' | 'mutation';\n   *   request: Request;\n   *   response?: { data: unknown };\n   * }\n   * ```\n   *\n   * Note: It should be considered dangerous to use this API for more than simple\n   * state derivation or debugging. The `request` and `response` properties are poorly\n   * spec'd and may change unexpectedly when shifting what Handlers are in use or how\n   * requests are issued from the Store.\n   *\n   * We expect to revisit this API in the near future as we continue to refine the\n   * RequestManager ergonomics, as a simpler but more powerful direct integration\n   * with the RequestManager for these purposes is likely to be a better long-term\n   * design.\n   *\n   * @method subscribeForRecord\n   * @public\n   * @param {StableRecordIdentifier} identifier\n   * @param {(state: RequestState) => void} callback\n   */\n  subscribeForRecord(identifier: RecordIdentifier, callback: (requestState: RequestState) => void) {\n    if (!this._subscriptions[identifier.lid]) {\n      this._subscriptions[identifier.lid] = [];\n    }\n    this._subscriptions[identifier.lid].push(callback);\n  }\n\n  /**\n   * Retrieve all active requests for a given resource identity.\n   *\n   * @method getPendingRequestsForRecord\n   * @public\n   * @param {StableRecordIdentifier} identifier\n   * @returns {RequestState[]} an array of request states for any pending requests for the given identifier\n   */\n  getPendingRequestsForRecord(identifier: RecordIdentifier): RequestState[] {\n    if (this._pending[identifier.lid]) {\n      return this._pending[identifier.lid];\n    }\n    return [];\n  }\n\n  /**\n   * Retrieve the last completed request for a given resource identity.\n   *\n   * @method getLastRequestForRecord\n   * @public\n   * @param {StableRecordIdentifier} identifier\n   * @returns {RequestState | null} the state of the most recent request for the given identifier\n   */\n  getLastRequestForRecord(identifier: RecordIdentifier): RequestState | null {\n    let requests = this._done.get(identifier);\n    if (requests) {\n      return requests[requests.length - 1];\n    }\n    return null;\n  }\n}\n","import { assert } from '@ember/debug';\n\nimport type {\n  ExistingResourceIdentifierObject,\n  ResourceIdentifierObject,\n} from '@ember-data/types/q/ember-data-json-api';\n\nimport { isStableIdentifier } from '../caches/identifier-cache';\nimport coerceId from './coerce-id';\nimport isNonEmptyString from './is-non-empty-string';\n\nfunction constructResource(type: ResourceIdentifierObject): ResourceIdentifierObject;\nfunction constructResource(type: string, id: string, lid: string): ExistingResourceIdentifierObject;\nfunction constructResource(\n  type: string | undefined,\n  id: null | undefined,\n  lid: string\n): ExistingResourceIdentifierObject;\nfunction constructResource(type: string, id: string, lid?: string | null): ExistingResourceIdentifierObject;\nfunction constructResource(type: string, id?: string | number | null, lid?: string | null): ResourceIdentifierObject;\nfunction constructResource(\n  type: string | ResourceIdentifierObject | undefined,\n  id?: string | number | null,\n  lid?: string | null\n): ResourceIdentifierObject | ExistingResourceIdentifierObject {\n  if (typeof type === 'object' && type !== null) {\n    let resource = type;\n    if (isStableIdentifier(resource)) {\n      return resource;\n    }\n    if ('id' in resource) {\n      resource.id = coerceId(resource.id);\n    }\n\n    assert(\n      'Expected either id or lid to be a valid string',\n      ('id' in resource && isNonEmptyString(resource.id)) || isNonEmptyString(resource.lid)\n    );\n    assert('if id is present, the type must be a string', !('id' in resource) || typeof resource.type === 'string');\n\n    return resource;\n  } else {\n    const trueId = coerceId(id);\n    if (!isNonEmptyString(trueId)) {\n      if (isNonEmptyString(lid)) {\n        return { lid };\n      }\n      throw new Error('Expected either id or lid to be a valid string');\n    }\n\n    assert('type must be a string', typeof type === 'string');\n\n    if (isNonEmptyString(lid)) {\n      return { type, id: trueId, lid };\n    }\n\n    return { type, id: trueId };\n  }\n}\n\nexport default constructResource;\n","/**\n  @module @ember-data/store\n */\nimport { getOwner, setOwner } from '@ember/application';\nimport { assert } from '@ember/debug';\nimport EmberObject from '@ember/object';\nimport { _backburner as emberBackburner } from '@ember/runloop';\n\nimport { importSync } from '@embroider/macros';\n\nimport { LOG_PAYLOADS, LOG_REQUESTS } from '@ember-data/debugging';\nimport { DEBUG, TESTING } from '@ember-data/env';\nimport type CacheClass from '@ember-data/json-api';\nimport type FetchManager from '@ember-data/legacy-compat/legacy-network-handler/fetch-manager';\nimport type DSModelClass from '@ember-data/model';\nimport { HAS_COMPAT_PACKAGE, HAS_GRAPH_PACKAGE, HAS_JSON_API_PACKAGE, HAS_MODEL_PACKAGE } from '@ember-data/packages';\nimport type RequestManager from '@ember-data/request';\nimport type { Future } from '@ember-data/request/-private/types';\nimport { StableDocumentIdentifier } from '@ember-data/types/cache/identifier';\nimport type { Cache, CacheV1 } from '@ember-data/types/q/cache';\nimport type { CacheStoreWrapper } from '@ember-data/types/q/cache-store-wrapper';\nimport type { DSModel } from '@ember-data/types/q/ds-model';\nimport type {\n  CollectionResourceDocument,\n  EmptyResourceDocument,\n  JsonApiDocument,\n  ResourceIdentifierObject,\n  SingleResourceDocument,\n} from '@ember-data/types/q/ember-data-json-api';\nimport type { StableExistingRecordIdentifier, StableRecordIdentifier } from '@ember-data/types/q/identifier';\nimport type { MinimumAdapterInterface } from '@ember-data/types/q/minimum-adapter-interface';\nimport type { MinimumSerializerInterface } from '@ember-data/types/q/minimum-serializer-interface';\nimport type { RecordInstance } from '@ember-data/types/q/record-instance';\nimport type { SchemaService } from '@ember-data/types/q/schema-service';\nimport type { FindOptions } from '@ember-data/types/q/store';\n\nimport {\n  EnableHydration,\n  type LifetimesService,\n  SkipCache,\n  StoreRequestContext,\n  type StoreRequestInfo,\n} from './cache-handler';\nimport { setCacheFor } from './caches/cache-utils';\nimport { IdentifierCache } from './caches/identifier-cache';\nimport {\n  InstanceCache,\n  peekRecordIdentifier,\n  preloadData,\n  recordIdentifierFor,\n  resourceIsFullyDeleted,\n  setRecordIdentifier,\n  storeFor,\n  StoreMap,\n} from './caches/instance-cache';\nimport { Document } from './document';\nimport RecordReference from './legacy-model-support/record-reference';\nimport { DSModelSchemaDefinitionService, getModelFactory } from './legacy-model-support/schema-definition-service';\nimport type ShimModelClass from './legacy-model-support/shim-model-class';\nimport { getShimClass } from './legacy-model-support/shim-model-class';\nimport { CacheManager } from './managers/cache-manager';\nimport NotificationManager from './managers/notification-manager';\nimport RecordArrayManager from './managers/record-array-manager';\nimport RequestStateService, { RequestPromise } from './network/request-cache';\nimport IdentifierArray, { Collection } from './record-arrays/identifier-array';\nimport coerceId, { ensureStringId } from './utils/coerce-id';\nimport constructResource from './utils/construct-resource';\nimport normalizeModelName from './utils/normalize-model-name';\n\nexport { storeFor };\n\n// hello world\ntype CacheConstruct = typeof CacheClass;\nlet _Cache: CacheConstruct | undefined;\n\nexport type HTTPMethod = 'GET' | 'OPTIONS' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';\n\nexport interface CreateRecordProperties {\n  id?: string | null;\n  [key: string]: unknown;\n}\n\n/**\n * A Store coordinates interaction between your application, a [Cache](https://api.emberjs.com/ember-data/release/classes/%3CInterface%3E%20Cache),\n * and sources of data (such as your API or a local persistence layer)\n * accessed via a [RequestManager](https://github.com/emberjs/data/tree/main/packages/request).\n *\n * ```app/services/store.js\n * import Store from '@ember-data/store';\n *\n * export default class extends Store {}\n * ```\n *\n * Most Ember applications will only have a single `Store` configured as a Service\n * in this manner. However, setting up multiple stores is possible, including using\n * each as a unique service.\n *\n\n  @class Store\n  @public\n*/\n\n// @ts-expect-error\ninterface Store {\n  createRecordDataFor?(identifier: StableRecordIdentifier, wrapper: CacheStoreWrapper): Cache | CacheV1;\n}\n\nclass Store extends EmberObject {\n  declare recordArrayManager: RecordArrayManager;\n\n  /**\n   * Provides access to the NotificationManager associated\n   * with this Store instance.\n   *\n   * The NotificationManager can be used to subscribe to\n   * changes to the cache.\n   *\n   * @property {NotificationManager} notifications\n   * @public\n   */\n  declare notifications: NotificationManager;\n\n  /**\n   * Provides access to the SchemaService instance\n   * for this Store instance.\n   *\n   * The SchemaService can be used to query for\n   * information about the schema of a resource.\n   *\n   * @property {SchemaService} schema\n   * @public\n   */\n  get schema(): SchemaService {\n    return this.getSchemaDefinitionService();\n  }\n  declare _schema: SchemaService;\n\n  /**\n   * Provides access to the IdentifierCache instance\n   * for this store.\n   *\n   * The IdentifierCache can be used to generate or\n   * retrieve a stable unique identifier for any resource.\n   *\n   * @property {IdentifierCache} identifierCache\n   * @public\n   */\n  declare identifierCache: IdentifierCache;\n  /**\n   * Provides access to the requestManager instance associated\n   * with this Store instance.\n   *\n   * When using `ember-data` this property is automatically\n   * set to an instance of `RequestManager`. When not using `ember-data`\n   * you must configure this property yourself, either by declaring\n   * it as a service or by initializing it.\n   *\n   * ```ts\n   * import Store, { CacheHandler } from '@ember-data/store';\n   * import RequestManager from '@ember-data/request';\n   * import Fetch from '@ember/data/request/fetch';\n   *\n   * class extends Store {\n   *   constructor() {\n   *     super(...arguments);\n   *     this.requestManager = new RequestManager();\n   *     this.requestManager.use([Fetch]);\n   *     this.requestManager.useCache(CacheHandler);\n   *   }\n   * }\n   * ```\n   *\n   * @public\n   * @property {RequestManager} requestManager\n   */\n  declare requestManager: RequestManager;\n\n  /**\n   * A Property which an App may set to provide a Lifetimes Service\n   * to control when a cached request becomes stale.\n   *\n   * Note, when defined, these methods will only be invoked if a\n   * cache key exists for the request, either because the request\n   * contains `cacheOptions.key` or because the [IdentifierCache](/ember-data/release/classes/IdentifierCache)\n   * was able to generate a key for the request using the configured\n   * [generation method](/ember-data/release/functions/@ember-data%2Fstore/setIdentifierGenerationMethod).\n   *\n   * `isSoftExpired` will only be invoked if `isHardExpired` returns `false`.\n   *\n   * ```ts\n   * store.lifetimes = {\n   *   // make the request and ignore the current cache state\n   *   isHardExpired(identifier: StableDocumentIdentifier): boolean {\n   *     return false;\n   *   }\n   *\n   *   // make the request in the background if true, return cache state\n   *   isSoftExpired(identifier: StableDocumentIdentifier): boolean {\n   *     return false;\n   *   }\n   * }\n   * ```\n   *\n   * @public\n   * @property {LivetimesService|undefined} lifetimes\n   */\n  declare lifetimes?: LifetimesService;\n\n  // Private\n  declare _adapterCache: Record<string, MinimumAdapterInterface & { store: Store }>;\n  declare _serializerCache: Record<string, MinimumSerializerInterface & { store: Store }>;\n  declare _modelFactoryCache: Record<string, unknown>;\n  declare _fetchManager: FetchManager;\n  declare _requestCache: RequestStateService;\n  declare _instanceCache: InstanceCache;\n  declare _documentCache: Map<StableDocumentIdentifier, Document<RecordInstance | RecordInstance[] | null | undefined>>;\n\n  declare _cbs: { coalesce?: () => void; sync?: () => void; notify?: () => void } | null;\n  declare _forceShim: boolean;\n  declare _enableAsyncFlush: boolean | null;\n\n  // DEBUG-only properties\n  declare DISABLE_WAITER?: boolean;\n\n  declare _isDestroying: boolean;\n  declare _isDestroyed: boolean;\n\n  // @ts-expect-error\n  get isDestroying(): boolean {\n    return this._isDestroying;\n  }\n  set isDestroying(value: boolean) {\n    this._isDestroying = value;\n  }\n  // @ts-expect-error\n  get isDestroyed(): boolean {\n    return this._isDestroyed;\n  }\n  set isDestroyed(value: boolean) {\n    this._isDestroyed = value;\n  }\n\n  /**\n    @method init\n    @private\n  */\n  constructor(createArgs?: Record<string, unknown>) {\n    super(createArgs);\n    Object.assign(this, createArgs);\n\n    this.identifierCache = new IdentifierCache();\n\n    this.notifications = new NotificationManager(this);\n\n    // private but maybe useful to be here, somewhat intimate\n    this.recordArrayManager = new RecordArrayManager({ store: this });\n\n    // private\n    this._requestCache = new RequestStateService(this);\n    this._instanceCache = new InstanceCache(this);\n    this._adapterCache = Object.create(null);\n    this._serializerCache = Object.create(null);\n    this._modelFactoryCache = Object.create(null);\n    this._documentCache = new Map();\n\n    this.isDestroying = false;\n    this.isDestroyed = false;\n  }\n\n  _run(cb: () => void) {\n    assert(`EmberData should never encounter a nested run`, !this._cbs);\n    const _cbs: { coalesce?: () => void; sync?: () => void; notify?: () => void } = (this._cbs = {});\n    if (DEBUG) {\n      try {\n        cb();\n        if (_cbs.coalesce) {\n          _cbs.coalesce();\n        }\n        if (_cbs.sync) {\n          _cbs.sync();\n        }\n        if (_cbs.notify) {\n          _cbs.notify();\n        }\n      } finally {\n        this._cbs = null;\n      }\n    } else {\n      cb();\n      if (_cbs.coalesce) {\n        _cbs.coalesce();\n      }\n      if (_cbs.sync) {\n        _cbs.sync();\n      }\n      if (_cbs.notify) {\n        _cbs.notify();\n      }\n      this._cbs = null;\n    }\n  }\n  _join(cb: () => void): void {\n    if (this._cbs) {\n      cb();\n    } else {\n      this._run(cb);\n    }\n  }\n\n  _schedule(name: 'coalesce' | 'sync' | 'notify', cb: () => void): void {\n    assert(`EmberData expects to schedule only when there is an active run`, !!this._cbs);\n    assert(`EmberData expects only one flush per queue name, cannot schedule ${name}`, !this._cbs[name]);\n\n    this._cbs[name] = cb;\n  }\n\n  /**\n   * Retrieve the RequestStateService instance\n   * associated with this Store.\n   *\n   * This can be used to query the status of requests\n   * that have been initiated for a given identifier.\n   *\n   * @method getRequestStateService\n   * @returns {RequestStateService}\n   * @public\n   */\n  getRequestStateService(): RequestStateService {\n    return this._requestCache;\n  }\n\n  _getAllPending(): (Promise<unknown[]> & { length: number }) | void {\n    if (TESTING) {\n      const all: Promise<any>[] = [];\n      const pending = this._requestCache._pending;\n      const lids = Object.keys(pending);\n      lids.forEach((lid) => {\n        all.push(...pending[lid].map((v) => v[RequestPromise]!));\n      });\n      this.requestManager._pending.forEach((v) => all.push(v));\n      const promise: Promise<unknown[]> & { length: number } = Promise.allSettled(all) as Promise<unknown[]> & {\n        length: number;\n      };\n      promise.length = all.length;\n      return promise;\n    }\n  }\n\n  /**\n   * Issue a request via the configured RequestManager,\n   * inserting the response into the cache and handing\n   * back a Future which resolves to a ResponseDocument\n   *\n   * Resource data is always updated in the cache.\n   *\n   * Only GET requests have the request result and document\n   * cached by default when a cache key is present.\n   *\n   * The cache key used is `requestConfig.cacheOptions.key`\n   * if present, falling back to `requestconfig.url`.\n   *\n   * Params are not serialized as part of the cache-key, so\n   * either ensure they are already in the url or utilize\n   * `requestConfig.cacheOptions.key`. For queries issued\n   * via the `POST` method `requestConfig.cacheOptions.key`\n   * MUST be supplied for the document to be cached.\n   *\n   * @method request\n   * @param {StoreRequestInfo} requestConfig\n   * @returns {Future}\n   * @public\n   */\n  request<T>(requestConfig: StoreRequestInfo): Future<T> {\n    // we lazily set the cache handler when we issue the first request\n    // because constructor doesn't allow for this to run after\n    // the user has had the chance to set the prop.\n    let opts: { store: Store; disableTestWaiter?: boolean; [EnableHydration]: true } = {\n      store: this,\n      [EnableHydration]: true,\n    };\n\n    if (TESTING) {\n      if (this.DISABLE_WAITER) {\n        opts.disableTestWaiter =\n          typeof requestConfig.disableTestWaiter === 'boolean' ? requestConfig.disableTestWaiter : true;\n      }\n    }\n\n    if (LOG_REQUESTS) {\n      let options: unknown;\n      try {\n        options = JSON.parse(JSON.stringify(requestConfig));\n      } catch {\n        options = requestConfig;\n      }\n      // eslint-disable-next-line no-console\n      console.log(\n        `request: [[START]] ${requestConfig.op && !requestConfig.url ? '(LEGACY) ' : ''}${\n          requestConfig.op || '<unknown operation>'\n        } ${requestConfig.url || '<empty url>'}  ${requestConfig.method || '<empty method>'}`,\n        options\n      );\n    }\n\n    const future = this.requestManager.request<T>(Object.assign(requestConfig, opts));\n\n    future.onFinalize(() => {\n      if (LOG_REQUESTS) {\n        // eslint-disable-next-line no-console\n        console.log(\n          `request: [[FINALIZE]] ${requestConfig.op && !requestConfig.url ? '(LEGACY) ' : ''}${\n            requestConfig.op || '<unknown operation>'\n          } ${requestConfig.url || '<empty url>'}  ${requestConfig.method || '<empty method>'}`\n        );\n      }\n      // skip flush for legacy belongsTo\n      if (requestConfig.op === 'findBelongsTo' && !requestConfig.url) {\n        return;\n      }\n      this.notifications._flush();\n    });\n\n    return future;\n  }\n\n  /**\n   * A hook which an app or addon may implement. Called when\n   * the Store is attempting to create a Record Instance for\n   * a resource.\n   *\n   * This hook can be used to select or instantiate any desired\n   * mechanism of presentating cache data to the ui for access\n   * mutation, and interaction.\n   *\n   * @method instantiateRecord (hook)\n   * @param identifier\n   * @param createRecordArgs\n   * @param recordDataFor deprecated use this.cache\n   * @param notificationManager deprecated use this.notifications\n   * @returns A record instance\n   * @public\n   */\n  instantiateRecord(\n    identifier: StableRecordIdentifier,\n    createRecordArgs: { [key: string]: unknown }\n  ): DSModel | RecordInstance {\n    if (HAS_MODEL_PACKAGE) {\n      let modelName = identifier.type;\n\n      const cache = this.cache;\n      // TODO deprecate allowing unknown args setting\n      let createOptions: any = {\n        _createProps: createRecordArgs,\n        // TODO @deprecate consider deprecating accessing record properties during init which the below is necessary for\n        _secretInit: {\n          identifier,\n          cache,\n          store: this,\n          cb: secretInit,\n        },\n      };\n\n      // ensure that `getOwner(this)` works inside a model instance\n      setOwner(createOptions, getOwner(this)!);\n      return getModelFactory(this, this._modelFactoryCache, modelName).class.create(createOptions);\n    }\n    assert(`You must implement the store's instantiateRecord hook for your custom model class.`);\n  }\n\n  /**\n   * A hook which an app or addon may implement. Called when\n   * the Store is destroying a Record Instance. This hook should\n   * be used to teardown any custom record instances instantiated\n   * with `instantiateRecord`.\n   *\n   * @method teardownRecord (hook)\n   * @public\n   * @param record\n   */\n  teardownRecord(record: DSModel | RecordInstance): void {\n    if (HAS_MODEL_PACKAGE) {\n      assert(\n        `expected to receive an instance of DSModel. If using a custom model make sure you implement teardownRecord`,\n        'destroy' in record\n      );\n      (record as DSModel).destroy();\n    } else {\n      assert(`You must implement the store's teardownRecord hook for your custom models`);\n    }\n  }\n\n  /**\n   * Provides access to the SchemaDefinitionService instance\n   * for this Store instance.\n   *\n   * The SchemaDefinitionService can be used to query for\n   * information about the schema of a resource.\n   *\n   * @method getSchemaDefinitionService\n   * @public\n   */\n  getSchemaDefinitionService(): SchemaService {\n    if (HAS_MODEL_PACKAGE) {\n      if (!this._schema) {\n        // it is potentially a mistake for the RFC to have not enabled chaining these services, though highlander rule is nice.\n        // what ember-m3 did via private API to allow both worlds to interop would be much much harder using this.\n        this._schema = new DSModelSchemaDefinitionService(this);\n      }\n    }\n    assert(`You must registerSchemaDefinitionService with the store to use custom model classes`, this._schema);\n    return this._schema;\n  }\n\n  /**\n   * DEPRECATED - Use `registerSchema` instead.\n   *\n   * Allows an app to register a custom SchemaService\n   * for use when information about a resource's schema needs\n   * to be queried.\n   *\n   * This method can only be called more than once, but only one schema\n   * definition service may exist. Therefore if you wish to chain services\n   * you must lookup the existing service and close over it with the new\n   * service by accessing `store.schema` prior to registration.\n   *\n   * For Example:\n   *\n   * ```ts\n   * import Store from '@ember-data/store';\n   *\n   * class SchemaDelegator {\n   *   constructor(schema) {\n   *     this._schema = schema;\n   *   }\n   *\n   *   doesTypeExist(type: string): boolean {\n   *     if (AbstractSchemas.has(type)) {\n   *       return true;\n   *     }\n   *     return this._schema.doesTypeExist(type);\n   *   }\n   *\n   *   attributesDefinitionFor(identifier: RecordIdentifier | { type: string }): AttributesSchema {\n   *     return this._schema.attributesDefinitionFor(identifier);\n   *   }\n   *\n   *   relationshipsDefinitionFor(identifier: RecordIdentifier | { type: string }): RelationshipsSchema {\n   *     const schema = AbstractSchemas.get(identifier.type);\n   *     return schema || this._schema.relationshipsDefinitionFor(identifier);\n   *   }\n   * }\n   *\n   * export default class extends Store {\n   *   constructor(...args) {\n   *     super(...args);\n   *\n   *     const schema = this.schema;\n   *     this.registerSchemaDefinitionService(new SchemaDelegator(schema));\n   *   }\n   * }\n   * ```\n   *\n   * @method registerSchemaDefinitionService\n   * @param {SchemaService} schema\n   * @deprecated\n   * @public\n   */\n  registerSchemaDefinitionService(schema: SchemaService) {\n    this._schema = schema;\n  }\n  /**\n   * Allows an app to register a custom SchemaService\n   * for use when information about a resource's schema needs\n   * to be queried.\n   *\n   * This method can only be called more than once, but only one schema\n   * definition service may exist. Therefore if you wish to chain services\n   * you must lookup the existing service and close over it with the new\n   * service by accessing `store.schema` prior to registration.\n   *\n   * For Example:\n   *\n   * ```ts\n   * import Store from '@ember-data/store';\n   *\n   * class SchemaDelegator {\n   *   constructor(schema) {\n   *     this._schema = schema;\n   *   }\n   *\n   *   doesTypeExist(type: string): boolean {\n   *     if (AbstractSchemas.has(type)) {\n   *       return true;\n   *     }\n   *     return this._schema.doesTypeExist(type);\n   *   }\n   *\n   *   attributesDefinitionFor(identifier: RecordIdentifier | { type: string }): AttributesSchema {\n   *     return this._schema.attributesDefinitionFor(identifier);\n   *   }\n   *\n   *   relationshipsDefinitionFor(identifier: RecordIdentifier | { type: string }): RelationshipsSchema {\n   *     const schema = AbstractSchemas.get(identifier.type);\n   *     return schema || this._schema.relationshipsDefinitionFor(identifier);\n   *   }\n   * }\n   *\n   * export default class extends Store {\n   *   constructor(...args) {\n   *     super(...args);\n   *\n   *     const schema = this.schema;\n   *     this.registerSchema(new SchemaDelegator(schema));\n   *   }\n   * }\n   * ```\n   *\n   * @method registerSchema\n   * @param {SchemaService} schema\n   * @public\n   */\n  registerSchema(schema: SchemaService) {\n    this._schema = schema;\n  }\n\n  /**\n    Returns the schema for a particular `modelName`.\n\n    When used with Model from @ember-data/model the return is the model class,\n    but this is not guaranteed.\n\n    If looking to query attribute or relationship information it is\n    recommended to use `getSchemaDefinitionService` instead. This method\n    should be considered legacy and exists primarily to continue to support\n    Adapter/Serializer APIs which expect it's return value in their method\n    signatures.\n\n    The class of a model might be useful if you want to get a list of all the\n    relationship names of the model, see\n    [`relationshipNames`](/ember-data/release/classes/Model?anchor=relationshipNames)\n    for example.\n\n    @method modelFor\n    @public\n    @param {String} modelName\n    @return {subclass of Model | ShimModelClass}\n    */\n  // TODO @deprecate in favor of schema APIs, requires adapter/serializer overhaul or replacement\n\n  modelFor(modelName: string): ShimModelClass | DSModelClass {\n    if (DEBUG) {\n      assertDestroyedStoreOnly(this, 'modelFor');\n    }\n    assert(`You need to pass a model name to the store's modelFor method`, modelName);\n    assert(\n      `Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`,\n      typeof modelName === 'string'\n    );\n    if (HAS_MODEL_PACKAGE) {\n      let normalizedModelName = normalizeModelName(modelName);\n      let maybeFactory = getModelFactory(this, this._modelFactoryCache, normalizedModelName);\n\n      // for factorFor factory/class split\n      let klass = maybeFactory && maybeFactory.class ? maybeFactory.class : maybeFactory;\n      if (!klass || !klass.isModel || this._forceShim) {\n        assert(\n          `No model was found for '${modelName}' and no schema handles the type`,\n          this.getSchemaDefinitionService().doesTypeExist(modelName)\n        );\n\n        return getShimClass(this, modelName);\n      } else {\n        // TODO @deprecate ever returning the klass, always return the shim\n        return klass;\n      }\n    }\n\n    assert(\n      `No model was found for '${modelName}' and no schema handles the type`,\n      this.getSchemaDefinitionService().doesTypeExist(modelName)\n    );\n    return getShimClass(this, modelName);\n  }\n\n  /**\n    Create a new record in the current store. The properties passed\n    to this method are set on the newly created record.\n\n    To create a new instance of a `Post`:\n\n    ```js\n    store.createRecord('post', {\n      title: 'Ember is awesome!'\n    });\n    ```\n\n    To create a new instance of a `Post` that has a relationship with a `User` record:\n\n    ```js\n    let user = this.store.peekRecord('user', 1);\n    store.createRecord('post', {\n      title: 'Ember is awesome!',\n      user: user\n    });\n    ```\n\n    @method createRecord\n    @public\n    @param {String} modelName\n    @param {Object} inputProperties a hash of properties to set on the\n      newly created record.\n    @return {Model} record\n  */\n  createRecord(modelName: string, inputProperties: CreateRecordProperties): RecordInstance {\n    if (DEBUG) {\n      assertDestroyingStore(this, 'createRecord');\n    }\n    assert(`You need to pass a model name to the store's createRecord method`, modelName);\n    assert(\n      `Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`,\n      typeof modelName === 'string'\n    );\n\n    // This is wrapped in a `run.join` so that in test environments users do not need to manually wrap\n    //   calls to `createRecord`. The run loop usage here is because we batch the joining and updating\n    //   of record-arrays via ember's run loop, not our own.\n    //\n    //   to remove this, we would need to move to a new `async` API.\n    let record!: RecordInstance;\n    emberBackburner.join(() => {\n      this._join(() => {\n        let normalizedModelName = normalizeModelName(modelName);\n        let properties = { ...inputProperties };\n\n        // If the passed properties do not include a primary key,\n        // give the adapter an opportunity to generate one. Typically,\n        // client-side ID generators will use something like uuid.js\n        // to avoid conflicts.\n\n        if (properties.id === null || properties.id === undefined) {\n          let adapter = this.adapterFor(modelName);\n\n          if (adapter && adapter.generateIdForRecord) {\n            properties.id = adapter.generateIdForRecord(this, modelName, properties);\n          } else {\n            properties.id = null;\n          }\n        }\n\n        // Coerce ID to a string\n        properties.id = coerceId(properties.id);\n        const resource = { type: normalizedModelName, id: properties.id };\n\n        if (resource.id) {\n          const identifier = this.identifierCache.peekRecordIdentifier(resource as ResourceIdentifierObject);\n\n          assert(\n            `The id ${properties.id} has already been used with another '${normalizedModelName}' record.`,\n            !identifier\n          );\n        }\n\n        const identifier = this.identifierCache.createIdentifierForNewRecord(resource);\n        const cache = this.cache;\n\n        const createOptions = normalizeProperties(this, identifier, properties);\n        const resultProps = cache.clientDidCreate(identifier, createOptions);\n\n        record = this._instanceCache.getRecord(identifier, resultProps);\n      });\n    });\n    return record;\n  }\n\n  /**\n    For symmetry, a record can be deleted via the store.\n\n    Example\n\n    ```javascript\n    let post = store.createRecord('post', {\n      title: 'Ember is awesome!'\n    });\n\n    store.deleteRecord(post);\n    ```\n\n    @method deleteRecord\n    @public\n    @param {Model} record\n  */\n  deleteRecord(record: RecordInstance): void {\n    if (DEBUG) {\n      assertDestroyingStore(this, 'deleteRecord');\n    }\n\n    const identifier = peekRecordIdentifier(record);\n    const cache = this.cache;\n    assert(`expected the record to be connected to a cache`, identifier);\n    this._join(() => {\n      cache.setIsDeleted(identifier, true);\n\n      if (cache.isNew(identifier)) {\n        emberBackburner.join(() => {\n          this._instanceCache.unloadRecord(identifier);\n        });\n      }\n    });\n  }\n\n  /**\n    For symmetry, a record can be unloaded via the store.\n    This will cause the record to be destroyed and freed up for garbage collection.\n\n    Example\n\n    ```javascript\n    store.findRecord('post', 1).then(function(post) {\n      store.unloadRecord(post);\n    });\n    ```\n\n    @method unloadRecord\n    @public\n    @param {Model} record\n  */\n  unloadRecord(record: RecordInstance): void {\n    if (DEBUG) {\n      assertDestroyingStore(this, 'unloadRecord');\n    }\n    const identifier = peekRecordIdentifier(record);\n    if (identifier) {\n      this._instanceCache.unloadRecord(identifier);\n    }\n  }\n\n  /**\n    This method returns a record for a given identifier or type and id combination.\n\n    The `findRecord` method will always resolve its promise with the same\n    object for a given identifier or type and `id`.\n\n    The `findRecord` method will always return a **promise** that will be\n    resolved with the record.\n\n    **Example 1**\n\n    ```app/routes/post.js\n    import Route from '@ember/routing/route';\n\n    export default class PostRoute extends Route {\n      model({ post_id }) {\n        return this.store.findRecord('post', post_id);\n      }\n    }\n    ```\n\n    **Example 2**\n\n    `findRecord` can be called with a single identifier argument instead of the combination\n    of `type` (modelName) and `id` as separate arguments. You may recognize this combo as\n    the typical pairing from [JSON:API](https://jsonapi.org/format/#document-resource-object-identification)\n\n    ```app/routes/post.js\n    import Route from '@ember/routing/route';\n\n    export default class PostRoute extends Route {\n      model({ post_id: id }) {\n        return this.store.findRecord({ type: 'post', id });\n      }\n    }\n    ```\n\n    **Example 3**\n\n    If you have previously received an lid via an Identifier for this record, and the record\n    has already been assigned an id, you can find the record again using just the lid.\n\n    ```app/routes/post.js\n    store.findRecord({ lid });\n    ```\n\n    If the record is not yet available, the store will ask the adapter's `findRecord`\n    method to retrieve and supply the necessary data. If the record is already present\n    in the store, it depends on the reload behavior _when_ the returned promise\n    resolves.\n\n    ### Preloading\n\n    You can optionally `preload` specific attributes and relationships that you know of\n    by passing them via the passed `options`.\n\n    For example, if your Ember route looks like `/posts/1/comments/2` and your API route\n    for the comment also looks like `/posts/1/comments/2` if you want to fetch the comment\n    without also fetching the post you can pass in the post to the `findRecord` call:\n\n    ```app/routes/post-comments.js\n    import Route from '@ember/routing/route';\n\n    export default class PostRoute extends Route {\n      model({ post_id, comment_id: id }) {\n        return this.store.findRecord({ type: 'comment', id, { preload: { post: post_id }} });\n      }\n    }\n    ```\n\n    In your adapter you can then access this id without triggering a network request via the\n    snapshot:\n\n    ```app/adapters/application.js\n    import EmberObject from '@ember/object';\n\n    export default class Adapter extends EmberObject {\n\n      findRecord(store, schema, id, snapshot) {\n        let type = schema.modelName;\n\n        if (type === 'comment')\n          let postId = snapshot.belongsTo('post', { id: true });\n\n          return fetch(`./posts/${postId}/comments/${id}`)\n            .then(response => response.json())\n        }\n      }\n    }\n    ```\n\n    This could also be achieved by supplying the post id to the adapter via the adapterOptions\n    property on the options hash.\n\n    ```app/routes/post-comments.js\n    import Route from '@ember/routing/route';\n\n    export default class PostRoute extends Route {\n      model({ post_id, comment_id: id }) {\n        return this.store.findRecord({ type: 'comment', id, { adapterOptions: { post: post_id }} });\n      }\n    }\n    ```\n\n    ```app/adapters/application.js\n    import EmberObject from '@ember/object';\n\n    export default class Adapter extends EmberObject {\n\n      findRecord(store, schema, id, snapshot) {\n        let type = schema.modelName;\n\n        if (type === 'comment')\n          let postId = snapshot.adapterOptions.post;\n\n          return fetch(`./posts/${postId}/comments/${id}`)\n            .then(response => response.json())\n        }\n      }\n    }\n    ```\n\n    If you have access to the post model you can also pass the model itself to preload:\n\n    ```javascript\n    let post = await store.findRecord('post', 1);\n    let comment = await store.findRecord('comment', 2, { post: myPostModel });\n    ```\n\n    ### Reloading\n\n    The reload behavior is configured either via the passed `options` hash or\n    the result of the adapter's `shouldReloadRecord`.\n\n    If `{ reload: true }` is passed or `adapter.shouldReloadRecord` evaluates\n    to `true`, then the returned promise resolves once the adapter returns\n    data, regardless if the requested record is already in the store:\n\n    ```js\n    store.push({\n      data: {\n        id: 1,\n        type: 'post',\n        revision: 1\n      }\n    });\n\n    // adapter#findRecord resolves with\n    // [\n    //   {\n    //     id: 1,\n    //     type: 'post',\n    //     revision: 2\n    //   }\n    // ]\n    store.findRecord('post', 1, { reload: true }).then(function(post) {\n      post.revision; // 2\n    });\n    ```\n\n    If no reload is indicated via the above mentioned ways, then the promise\n    immediately resolves with the cached version in the store.\n\n    ### Background Reloading\n\n    Optionally, if `adapter.shouldBackgroundReloadRecord` evaluates to `true`,\n    then a background reload is started, which updates the records' data, once\n    it is available:\n\n    ```js\n    // app/adapters/post.js\n    import ApplicationAdapter from \"./application\";\n\n    export default class PostAdapter extends ApplicationAdapter {\n      shouldReloadRecord(store, snapshot) {\n        return false;\n      },\n\n      shouldBackgroundReloadRecord(store, snapshot) {\n        return true;\n      }\n    });\n\n    // ...\n\n    store.push({\n      data: {\n        id: 1,\n        type: 'post',\n        revision: 1\n      }\n    });\n\n    let blogPost = store.findRecord('post', 1).then(function(post) {\n      post.revision; // 1\n    });\n\n    // later, once adapter#findRecord resolved with\n    // [\n    //   {\n    //     id: 1,\n    //     type: 'post',\n    //     revision: 2\n    //   }\n    // ]\n\n    blogPost.revision; // 2\n    ```\n\n    If you would like to force or prevent background reloading, you can set a\n    boolean value for `backgroundReload` in the options object for\n    `findRecord`.\n\n    ```app/routes/post/edit.js\n    import Route from '@ember/routing/route';\n\n    export default class PostEditRoute extends Route {\n      model(params) {\n        return this.store.findRecord('post', params.post_id, { backgroundReload: false });\n      }\n    }\n    ```\n\n    If you pass an object on the `adapterOptions` property of the options\n    argument it will be passed to your adapter via the snapshot\n\n    ```app/routes/post/edit.js\n    import Route from '@ember/routing/route';\n\n    export default class PostEditRoute extends Route {\n      model(params) {\n        return this.store.findRecord('post', params.post_id, {\n          adapterOptions: { subscribe: false }\n        });\n      }\n    }\n    ```\n\n    ```app/adapters/post.js\n    import MyCustomAdapter from './custom-adapter';\n\n    export default class PostAdapter extends MyCustomAdapter {\n      findRecord(store, type, id, snapshot) {\n        if (snapshot.adapterOptions.subscribe) {\n          // ...\n        }\n        // ...\n      }\n    }\n    ```\n\n    See [peekRecord](../methods/peekRecord?anchor=peekRecord) to get the cached version of a record.\n\n    ### Retrieving Related Model Records\n\n    If you use an adapter such as Ember's default\n    [`JSONAPIAdapter`](/ember-data/release/classes/JSONAPIAdapter)\n    that supports the [JSON API specification](http://jsonapi.org/) and if your server\n    endpoint supports the use of an\n    ['include' query parameter](http://jsonapi.org/format/#fetching-includes),\n    you can use `findRecord()` or `findAll()` to automatically retrieve additional records related to\n    the one you request by supplying an `include` parameter in the `options` object.\n\n    For example, given a `post` model that has a `hasMany` relationship with a `comment`\n    model, when we retrieve a specific post we can have the server also return that post's\n    comments in the same request:\n\n    ```app/routes/post.js\n    import Route from '@ember/routing/route';\n\n    export default class PostRoute extends Route {\n      model(params) {\n        return this.store.findRecord('post', params.post_id, { include: 'comments' });\n      }\n    }\n    ```\n\n    ```app/adapters/application.js\n    import EmberObject from '@ember/object';\n\n    export default class Adapter extends EmberObject {\n\n      findRecord(store, schema, id, snapshot) {\n        let type = schema.modelName;\n\n        if (type === 'post')\n          let includes = snapshot.adapterOptions.include;\n\n          return fetch(`./posts/${postId}?include=${includes}`)\n            .then(response => response.json())\n        }\n      }\n    }\n    ```\n\n    In this case, the post's comments would then be available in your template as\n    `model.comments`.\n\n    Multiple relationships can be requested using an `include` parameter consisting of a\n    comma-separated list (without white-space) while nested relationships can be specified\n    using a dot-separated sequence of relationship names. So to request both the post's\n    comments and the authors of those comments the request would look like this:\n\n    ```app/routes/post.js\n    import Route from '@ember/routing/route';\n\n    export default class PostRoute extends Route {\n      model(params) {\n        return this.store.findRecord('post', params.post_id, { include: 'comments,comments.author' });\n      }\n    }\n    ```\n\n    ### Retrieving Specific Fields by Type\n\n    If your server endpoint supports the use of a ['fields' query parameter](https://jsonapi.org/format/#fetching-sparse-fieldsets),\n    you can use pass those fields through to your server.  At this point in time, this requires a few manual steps on your part.\n\n    1. Implement `buildQuery` in your adapter.\n\n    ```app/adapters/application.js\n    buildQuery(snapshot) {\n      let query = super.buildQuery(...arguments);\n\n      let { fields } = snapshot.adapterOptions;\n\n      if (fields) {\n        query.fields = fields;\n      }\n\n      return query;\n    }\n    ```\n\n    2. Then pass through the applicable fields to your `findRecord` request.\n\n    Given a `post` model with attributes body, title, publishDate and meta, you can retrieve a filtered list of attributes.\n\n    ```app/routes/post.js\n    import Route from '@ember/routing/route';\n    export default Route.extend({\n      model(params) {\n        return this.store.findRecord('post', params.post_id, { adapterOptions: { fields: { post: 'body,title' } });\n      }\n    });\n    ```\n\n    Moreover, you can filter attributes on related models as well. If a `post` has a `belongsTo` relationship to a user,\n    just include the relationship key and attributes.\n\n    ```app/routes/post.js\n    import Route from '@ember/routing/route';\n    export default Route.extend({\n      model(params) {\n        return this.store.findRecord('post', params.post_id, { adapterOptions: { fields: { post: 'body,title', user: 'name,email' } });\n      }\n    });\n    ```\n\n    @since 1.13.0\n    @method findRecord\n    @public\n    @param {String|object} modelName - either a string representing the modelName or a ResourceIdentifier object containing both the type (a string) and the id (a string) for the record or an lid (a string) of an existing record\n    @param {(String|Integer|Object)} id - optional object with options for the request only if the first param is a ResourceIdentifier, else the string id of the record to be retrieved\n    @param {Object} [options] - if the first param is a string this will be the optional options for the request. See examples for available options.\n    @return {Promise} promise\n  */\n  findRecord(resource: string, id: string | number, options?: FindOptions): Promise<RecordInstance>;\n  findRecord(resource: ResourceIdentifierObject, id?: FindOptions): Promise<RecordInstance>;\n  findRecord(\n    resource: string | ResourceIdentifierObject,\n    id?: string | number | FindOptions,\n    options?: FindOptions\n  ): Promise<RecordInstance> {\n    if (DEBUG) {\n      assertDestroyingStore(this, 'findRecord');\n    }\n\n    assert(\n      `You need to pass a modelName or resource identifier as the first argument to the store's findRecord method`,\n      resource\n    );\n    if (isMaybeIdentifier(resource)) {\n      options = id as FindOptions | undefined;\n    } else {\n      assert(\n        `Passing classes to store methods has been removed. Please pass a dasherized string instead of ${resource}`,\n        typeof resource === 'string'\n      );\n      const type = normalizeModelName(resource);\n      const normalizedId = ensureStringId(id as string | number);\n      resource = constructResource(type, normalizedId);\n    }\n\n    const identifier = this.identifierCache.getOrCreateRecordIdentifier(resource);\n    options = options || {};\n\n    if (options.preload) {\n      // force reload if we preload to ensure we don't resolve the promise\n      // until we are complete, else we will end up background-reloading\n      // even for initial load.\n      if (!this._instanceCache.recordIsLoaded(identifier)) {\n        options.reload = true;\n      }\n      this._join(() => {\n        preloadData(this, identifier, options!.preload!);\n      });\n    }\n\n    const promise = this.request<RecordInstance>({\n      op: 'findRecord',\n      data: {\n        record: identifier,\n        options,\n      },\n      cacheOptions: { [SkipCache as symbol]: true },\n    });\n\n    return promise.then((document) => {\n      return document.content;\n    });\n  }\n\n  /**\n    Get the reference for the specified record.\n\n    Example\n\n    ```javascript\n    let userRef = store.getReference('user', 1);\n\n    // check if the user is loaded\n    let isLoaded = userRef.value() !== null;\n\n    // get the record of the reference (null if not yet available)\n    let user = userRef.value();\n\n    // get the identifier of the reference\n    if (userRef.remoteType() === 'id') {\n    let id = userRef.id();\n    }\n\n    // load user (via store.find)\n    userRef.load().then(...)\n\n    // or trigger a reload\n    userRef.reload().then(...)\n\n    // provide data for reference\n    userRef.push({ id: 1, username: '@user' }).then(function(user) {\n      userRef.value() === user;\n    });\n    ```\n\n    @method getReference\n    @public\n    @param {String|object} resource - modelName (string) or Identifier (object)\n    @param {String|Integer} id\n    @since 2.5.0\n    @return {RecordReference}\n  */\n  // TODO @deprecate getReference (and references generally)\n  getReference(resource: string | ResourceIdentifierObject, id: string | number): RecordReference {\n    if (DEBUG) {\n      assertDestroyingStore(this, 'getReference');\n    }\n\n    let resourceIdentifier;\n    if (arguments.length === 1 && isMaybeIdentifier(resource)) {\n      resourceIdentifier = resource;\n    } else {\n      const type = normalizeModelName(resource as string);\n      const normalizedId = ensureStringId(id);\n      resourceIdentifier = constructResource(type, normalizedId);\n    }\n\n    assert(\n      'getReference expected to receive either a resource identifier or type and id as arguments',\n      isMaybeIdentifier(resourceIdentifier)\n    );\n\n    let identifier: StableRecordIdentifier = this.identifierCache.getOrCreateRecordIdentifier(resourceIdentifier);\n\n    return this._instanceCache.getReference(identifier);\n  }\n\n  /**\n    Get a record by a given type and ID without triggering a fetch.\n\n    This method will synchronously return the record if it is available in the store,\n    otherwise it will return `null`. A record is available if it has been fetched earlier, or\n    pushed manually into the store.\n\n    See [findRecord](../methods/findRecord?anchor=findRecord) if you would like to request this record from the backend.\n\n    _Note: This is a synchronous method and does not return a promise._\n\n    **Example 1**\n\n    ```js\n    let post = store.peekRecord('post', 1);\n\n    post.id; // 1\n    ```\n\n    `peekRecord` can be called with a single identifier argument instead of the combination\n    of `type` (modelName) and `id` as separate arguments. You may recognize this combo as\n    the typical pairing from [JSON:API](https://jsonapi.org/format/#document-resource-object-identification)\n\n    **Example 2**\n\n    ```js\n    let post = store.peekRecord({ type: 'post', id });\n    post.id; // 1\n    ```\n\n    If you have previously received an lid from an Identifier for this record, you can lookup the record again using\n    just the lid.\n\n    **Example 3**\n\n    ```js\n    let post = store.peekRecord({ lid });\n    post.id; // 1\n    ```\n\n\n    @since 1.13.0\n    @method peekRecord\n    @public\n    @param {String|object} modelName - either a string representing the modelName or a ResourceIdentifier object containing both the type (a string) and the id (a string) for the record or an lid (a string) of an existing record\n    @param {String|Integer} id - optional only if the first param is a ResourceIdentifier, else the string id of the record to be retrieved.\n    @return {Model|null} record\n  */\n  peekRecord(identifier: string, id: string | number): RecordInstance | null;\n  peekRecord(identifier: ResourceIdentifierObject): RecordInstance | null;\n  peekRecord(identifier: ResourceIdentifierObject | string, id?: string | number): RecordInstance | null {\n    if (arguments.length === 1 && isMaybeIdentifier(identifier)) {\n      const stableIdentifier = this.identifierCache.peekRecordIdentifier(identifier);\n      const isLoaded = stableIdentifier && this._instanceCache.recordIsLoaded(stableIdentifier);\n      // TODO come up with a better mechanism for determining if we have data and could peek.\n      // this is basically an \"are we not empty\" query.\n      return isLoaded ? this._instanceCache.getRecord(stableIdentifier) : null;\n    }\n\n    if (DEBUG) {\n      assertDestroyingStore(this, 'peekRecord');\n    }\n\n    assert(`You need to pass a model name to the store's peekRecord method`, identifier);\n    assert(\n      `Passing classes to store methods has been removed. Please pass a dasherized string instead of ${identifier}`,\n      typeof identifier === 'string'\n    );\n\n    const type = normalizeModelName(identifier);\n    const normalizedId = ensureStringId(id);\n    const resource = { type, id: normalizedId };\n    const stableIdentifier = this.identifierCache.peekRecordIdentifier(resource);\n    const isLoaded = stableIdentifier && this._instanceCache.recordIsLoaded(stableIdentifier);\n\n    return isLoaded ? this._instanceCache.getRecord(stableIdentifier) : null;\n  }\n\n  /**\n    This method delegates a query to the adapter. This is the one place where\n    adapter-level semantics are exposed to the application.\n\n    Each time this method is called a new request is made through the adapter.\n\n    Exposing queries this way seems preferable to creating an abstract query\n    language for all server-side queries, and then require all adapters to\n    implement them.\n\n    ---\n\n    If you do something like this:\n\n    ```javascript\n    store.query('person', { page: 1 });\n    ```\n\n    The request made to the server will look something like this:\n\n    ```\n    GET \"/api/v1/person?page=1\"\n    ```\n\n    ---\n\n    If you do something like this:\n\n    ```javascript\n    store.query('person', { ids: [1, 2, 3] });\n    ```\n\n    The request made to the server will look something like this:\n\n    ```\n    GET \"/api/v1/person?ids%5B%5D=1&ids%5B%5D=2&ids%5B%5D=3\"\n    decoded: \"/api/v1/person?ids[]=1&ids[]=2&ids[]=3\"\n    ```\n\n    This method returns a promise, which is resolved with a\n    [`Collection`](/ember-data/release/classes/Collection)\n    once the server returns.\n\n    @since 1.13.0\n    @method query\n    @public\n    @param {String} modelName\n    @param {any} query an opaque query to be used by the adapter\n    @param {Object} options optional, may include `adapterOptions` hash which will be passed to adapter.query\n    @return {Promise} promise\n  */\n  query(\n    modelName: string,\n    query: Record<string, unknown>,\n    options: { [key: string]: unknown; adapterOptions?: Record<string, unknown> }\n  ): Promise<Collection> {\n    if (DEBUG) {\n      assertDestroyingStore(this, 'query');\n    }\n    assert(`You need to pass a model name to the store's query method`, modelName);\n    assert(`You need to pass a query hash to the store's query method`, query);\n    assert(\n      `Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`,\n      typeof modelName === 'string'\n    );\n\n    const promise = this.request<Collection>({\n      op: 'query',\n      data: {\n        type: normalizeModelName(modelName),\n        query,\n        options: options || {},\n      },\n      cacheOptions: { [SkipCache as symbol]: true },\n    });\n\n    return promise.then((document) => document.content);\n  }\n\n  /**\n    This method makes a request for one record, where the `id` is not known\n    beforehand (if the `id` is known, use [`findRecord`](../methods/findRecord?anchor=findRecord)\n    instead).\n\n    This method can be used when it is certain that the server will return a\n    single object for the primary data.\n\n    Each time this method is called a new request is made through the adapter.\n\n    Let's assume our API provides an endpoint for the currently logged in user\n    via:\n\n    ```\n    // GET /api/current_user\n    {\n      user: {\n        id: 1234,\n        username: 'admin'\n      }\n    }\n    ```\n\n    Since the specific `id` of the `user` is not known beforehand, we can use\n    `queryRecord` to get the user:\n\n    ```javascript\n    store.queryRecord('user', {}).then(function(user) {\n      let username = user.username;\n      // do thing\n    });\n    ```\n\n    The request is made through the adapters' `queryRecord`:\n\n    ```app/adapters/user.js\n    import Adapter from '@ember-data/adapter';\n    import $ from 'jquery';\n\n    export default class UserAdapter extends Adapter {\n      queryRecord(modelName, query) {\n        return $.getJSON('/api/current_user');\n      }\n    }\n    ```\n\n    Note: the primary use case for `store.queryRecord` is when a single record\n    is queried and the `id` is not known beforehand. In all other cases\n    `store.query` and using the first item of the array is likely the preferred\n    way:\n\n    ```\n    // GET /users?username=unique\n    {\n      data: [{\n        id: 1234,\n        type: 'user',\n        attributes: {\n          username: \"unique\"\n        }\n      }]\n    }\n    ```\n\n    ```javascript\n    store.query('user', { username: 'unique' }).then(function(users) {\n      return users.firstObject;\n    }).then(function(user) {\n      let id = user.id;\n    });\n    ```\n\n    This method returns a promise, which resolves with the found record.\n\n    If the adapter returns no data for the primary data of the payload, then\n    `queryRecord` resolves with `null`:\n\n    ```\n    // GET /users?username=unique\n    {\n      data: null\n    }\n    ```\n\n    ```javascript\n    store.queryRecord('user', { username: 'unique' }).then(function(user) {\n       // user is null\n    });\n    ```\n\n    @since 1.13.0\n    @method queryRecord\n    @public\n    @param {String} modelName\n    @param {any} query an opaque query to be used by the adapter\n    @param {Object} options optional, may include `adapterOptions` hash which will be passed to adapter.queryRecord\n    @return {Promise} promise which resolves with the found record or `null`\n  */\n  queryRecord(modelName: string, query: Record<string, unknown>, options?): Promise<RecordInstance | null> {\n    if (DEBUG) {\n      assertDestroyingStore(this, 'queryRecord');\n    }\n    assert(`You need to pass a model name to the store's queryRecord method`, modelName);\n    assert(`You need to pass a query hash to the store's queryRecord method`, query);\n    assert(\n      `Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`,\n      typeof modelName === 'string'\n    );\n\n    const promise = this.request<RecordInstance | null>({\n      op: 'queryRecord',\n      data: {\n        type: normalizeModelName(modelName),\n        query,\n        options: options || {},\n      },\n      cacheOptions: { [SkipCache as symbol]: true },\n    });\n\n    return promise.then((document) => document.content);\n  }\n\n  /**\n    `findAll` asks the adapter's `findAll` method to find the records for the\n    given type, and returns a promise which will resolve with all records of\n    this type present in the store, even if the adapter only returns a subset\n    of them.\n\n    ```app/routes/authors.js\n    import Route from '@ember/routing/route';\n\n    export default class AuthorsRoute extends Route {\n      model(params) {\n        return this.store.findAll('author');\n      }\n    }\n    ```\n\n    _When_ the returned promise resolves depends on the reload behavior,\n    configured via the passed `options` hash and the result of the adapter's\n    `shouldReloadAll` method.\n\n    ### Reloading\n\n    If `{ reload: true }` is passed or `adapter.shouldReloadAll` evaluates to\n    `true`, then the returned promise resolves once the adapter returns data,\n    regardless if there are already records in the store:\n\n    ```js\n    store.push({\n      data: {\n        id: 'first',\n        type: 'author'\n      }\n    });\n\n    // adapter#findAll resolves with\n    // [\n    //   {\n    //     id: 'second',\n    //     type: 'author'\n    //   }\n    // ]\n    store.findAll('author', { reload: true }).then(function(authors) {\n      authors.getEach('id'); // ['first', 'second']\n    });\n    ```\n\n    If no reload is indicated via the above mentioned ways, then the promise\n    immediately resolves with all the records currently loaded in the store.\n\n    ### Background Reloading\n\n    Optionally, if `adapter.shouldBackgroundReloadAll` evaluates to `true`,\n    then a background reload is started. Once this resolves, the array with\n    which the promise resolves, is updated automatically so it contains all the\n    records in the store:\n\n    ```app/adapters/application.js\n    import Adapter from '@ember-data/adapter';\n\n    export default class ApplicationAdapter extends Adapter {\n      shouldReloadAll(store, snapshotsArray) {\n        return false;\n      },\n\n      shouldBackgroundReloadAll(store, snapshotsArray) {\n        return true;\n      }\n    });\n\n    // ...\n\n    store.push({\n      data: {\n        id: 'first',\n        type: 'author'\n      }\n    });\n\n    let allAuthors;\n    store.findAll('author').then(function(authors) {\n      authors.getEach('id'); // ['first']\n\n      allAuthors = authors;\n    });\n\n    // later, once adapter#findAll resolved with\n    // [\n    //   {\n    //     id: 'second',\n    //     type: 'author'\n    //   }\n    // ]\n\n    allAuthors.getEach('id'); // ['first', 'second']\n    ```\n\n    If you would like to force or prevent background reloading, you can set a\n    boolean value for `backgroundReload` in the options object for\n    `findAll`.\n\n    ```app/routes/post/edit.js\n    import Route from '@ember/routing/route';\n\n    export default class PostEditRoute extends Route {\n      model() {\n        return this.store.findAll('post', { backgroundReload: false });\n      }\n    }\n    ```\n\n    If you pass an object on the `adapterOptions` property of the options\n    argument it will be passed to you adapter via the `snapshotRecordArray`\n\n    ```app/routes/posts.js\n    import Route from '@ember/routing/route';\n\n    export default class PostsRoute extends Route {\n      model(params) {\n        return this.store.findAll('post', {\n          adapterOptions: { subscribe: false }\n        });\n      }\n    }\n    ```\n\n    ```app/adapters/post.js\n    import MyCustomAdapter from './custom-adapter';\n\n    export default class UserAdapter extends MyCustomAdapter {\n      findAll(store, type, sinceToken, snapshotRecordArray) {\n        if (snapshotRecordArray.adapterOptions.subscribe) {\n          // ...\n        }\n        // ...\n      }\n    }\n    ```\n\n    See [peekAll](../methods/peekAll?anchor=peekAll) to get an array of current records in the\n    store, without waiting until a reload is finished.\n\n    ### Retrieving Related Model Records\n\n    If you use an adapter such as Ember's default\n    [`JSONAPIAdapter`](/ember-data/release/classes/JSONAPIAdapter)\n    that supports the [JSON API specification](http://jsonapi.org/) and if your server\n    endpoint supports the use of an\n    ['include' query parameter](http://jsonapi.org/format/#fetching-includes),\n    you can use `findAll()` to automatically retrieve additional records related to\n    those requested by supplying an `include` parameter in the `options` object.\n\n    For example, given a `post` model that has a `hasMany` relationship with a `comment`\n    model, when we retrieve all of the post records we can have the server also return\n    all of the posts' comments in the same request:\n\n    ```app/routes/posts.js\n    import Route from '@ember/routing/route';\n\n    export default class PostsRoute extends Route {\n      model() {\n        return this.store.findAll('post', { include: 'comments' });\n      }\n    }\n    ```\n    Multiple relationships can be requested using an `include` parameter consisting of a\n    comma-separated list (without white-space) while nested relationships can be specified\n    using a dot-separated sequence of relationship names. So to request both the posts'\n    comments and the authors of those comments the request would look like this:\n\n    ```app/routes/posts.js\n    import Route from '@ember/routing/route';\n\n    export default class PostsRoute extends Route {\n      model() {\n        return this.store.findAll('post', { include: 'comments,comments.author' });\n      }\n    }\n    ```\n\n    See [query](../methods/query?anchor=query) to only get a subset of records from the server.\n\n    @since 1.13.0\n    @method findAll\n    @public\n    @param {String} modelName\n    @param {Object} options\n    @return {Promise} promise\n  */\n  findAll(modelName: string, options: { reload?: boolean; backgroundReload?: boolean } = {}): Promise<IdentifierArray> {\n    if (DEBUG) {\n      assertDestroyingStore(this, 'findAll');\n    }\n    assert(`You need to pass a model name to the store's findAll method`, modelName);\n    assert(\n      `Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`,\n      typeof modelName === 'string'\n    );\n\n    const promise = this.request<IdentifierArray>({\n      op: 'findAll',\n      data: {\n        type: normalizeModelName(modelName),\n        options: options || {},\n      },\n      cacheOptions: { [SkipCache as symbol]: true },\n    });\n\n    return promise.then((document) => document.content);\n  }\n\n  /**\n    This method returns a filtered array that contains all of the\n    known records for a given type in the store.\n\n    Note that because it's just a filter, the result will contain any\n    locally created records of the type, however, it will not make a\n    request to the backend to retrieve additional records. If you\n    would like to request all the records from the backend please use\n    [store.findAll](../methods/findAll?anchor=findAll).\n\n    Also note that multiple calls to `peekAll` for a given type will always\n    return the same `RecordArray`.\n\n    Example\n\n    ```javascript\n    let localPosts = store.peekAll('post');\n    ```\n\n    @since 1.13.0\n    @method peekAll\n    @public\n    @param {String} modelName\n    @return {RecordArray}\n  */\n  peekAll(modelName: string): IdentifierArray {\n    if (DEBUG) {\n      assertDestroyingStore(this, 'peekAll');\n    }\n    assert(`You need to pass a model name to the store's peekAll method`, modelName);\n    assert(\n      `Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`,\n      typeof modelName === 'string'\n    );\n\n    let type = normalizeModelName(modelName);\n    return this.recordArrayManager.liveArrayFor(type);\n  }\n\n  /**\n    This method unloads all records in the store.\n    It schedules unloading to happen during the next run loop.\n\n    Optionally you can pass a type which unload all records for a given type.\n\n    ```javascript\n    store.unloadAll();\n    store.unloadAll('post');\n    ```\n\n    @method unloadAll\n    @public\n    @param {String} modelName\n  */\n  unloadAll(modelName?: string) {\n    if (DEBUG) {\n      assertDestroyedStoreOnly(this, 'unloadAll');\n    }\n    assert(\n      `Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`,\n      !modelName || typeof modelName === 'string'\n    );\n\n    this._join(() => {\n      if (modelName === undefined) {\n        // destroy the graph before unloadAll\n        // since then we avoid churning relationships\n        // during unload\n        if (HAS_GRAPH_PACKAGE) {\n          const peekGraph = (importSync('@ember-data/graph/-private') as typeof import('@ember-data/graph/-private'))\n            .peekGraph;\n          const graph = peekGraph(this);\n          if (graph) {\n            graph.identifiers.clear();\n          }\n        }\n\n        this.recordArrayManager.clear();\n        this._instanceCache.clear();\n      } else {\n        let normalizedModelName = normalizeModelName(modelName);\n        this._instanceCache.clear(normalizedModelName);\n      }\n    });\n  }\n\n  /**\n    Push some data for a given type into the store.\n\n    This method expects normalized [JSON API](http://jsonapi.org/) document. This means you have to follow [JSON API specification](http://jsonapi.org/format/) with few minor adjustments:\n    - record's `type` should always be in singular, dasherized form\n    - members (properties) should be camelCased\n\n    [Your primary data should be wrapped inside `data` property](http://jsonapi.org/format/#document-top-level):\n\n    ```js\n    store.push({\n      data: {\n        // primary data for single record of type `Person`\n        id: '1',\n        type: 'person',\n        attributes: {\n          firstName: 'Daniel',\n          lastName: 'Kmak'\n        }\n      }\n    });\n    ```\n\n    [Demo.](http://ember-twiddle.com/fb99f18cd3b4d3e2a4c7)\n\n    `data` property can also hold an array (of records):\n\n    ```js\n    store.push({\n      data: [\n        // an array of records\n        {\n          id: '1',\n          type: 'person',\n          attributes: {\n            firstName: 'Daniel',\n            lastName: 'Kmak'\n          }\n        },\n        {\n          id: '2',\n          type: 'person',\n          attributes: {\n            firstName: 'Tom',\n            lastName: 'Dale'\n          }\n        }\n      ]\n    });\n    ```\n\n    [Demo.](http://ember-twiddle.com/69cdbeaa3702159dc355)\n\n    There are some typical properties for `JSONAPI` payload:\n    * `id` - mandatory, unique record's key\n    * `type` - mandatory string which matches `model`'s dasherized name in singular form\n    * `attributes` - object which holds data for record attributes - `attr`'s declared in model\n    * `relationships` - object which must contain any of the following properties under each relationships' respective key (example path is `relationships.achievements.data`):\n      - [`links`](http://jsonapi.org/format/#document-links)\n      - [`data`](http://jsonapi.org/format/#document-resource-object-linkage) - place for primary data\n      - [`meta`](http://jsonapi.org/format/#document-meta) - object which contains meta-information about relationship\n\n    For this model:\n\n    ```app/models/person.js\n    import Model, { attr, hasMany } from '@ember-data/model';\n\n    export default class PersonRoute extends Route {\n      @attr('string') firstName;\n      @attr('string') lastName;\n\n      @hasMany('person') children;\n    }\n    ```\n\n    To represent the children as IDs:\n\n    ```js\n    {\n      data: {\n        id: '1',\n        type: 'person',\n        attributes: {\n          firstName: 'Tom',\n          lastName: 'Dale'\n        },\n        relationships: {\n          children: {\n            data: [\n              {\n                id: '2',\n                type: 'person'\n              },\n              {\n                id: '3',\n                type: 'person'\n              },\n              {\n                id: '4',\n                type: 'person'\n              }\n            ]\n          }\n        }\n      }\n    }\n    ```\n\n    [Demo.](http://ember-twiddle.com/343e1735e034091f5bde)\n\n    To represent the children relationship as a URL:\n\n    ```js\n    {\n      data: {\n        id: '1',\n        type: 'person',\n        attributes: {\n          firstName: 'Tom',\n          lastName: 'Dale'\n        },\n        relationships: {\n          children: {\n            links: {\n              related: '/people/1/children'\n            }\n          }\n        }\n      }\n    }\n    ```\n\n    If you're streaming data or implementing an adapter, make sure\n    that you have converted the incoming data into this form. The\n    store's [normalize](../methods/normalize?anchor=normalize) method is a convenience\n    helper for converting a json payload into the form Ember Data\n    expects.\n\n    ```js\n    store.push(store.normalize('person', data));\n    ```\n\n    This method can be used both to push in brand new\n    records, as well as to update existing records.\n\n    @method push\n    @public\n    @param {Object} data\n    @return the record(s) that was created or\n      updated.\n  */\n  push(data: EmptyResourceDocument): null;\n  push(data: SingleResourceDocument): RecordInstance;\n  push(data: CollectionResourceDocument): RecordInstance[];\n  push(data: JsonApiDocument): RecordInstance | RecordInstance[] | null {\n    if (DEBUG) {\n      assertDestroyingStore(this, 'push');\n    }\n    let pushed = this._push(data, false);\n\n    if (Array.isArray(pushed)) {\n      let records = pushed.map((identifier) => this._instanceCache.getRecord(identifier));\n      return records;\n    }\n\n    if (pushed === null) {\n      return null;\n    }\n\n    return this._instanceCache.getRecord(pushed);\n  }\n\n  /**\n    Push some data in the form of a json-api document into the store,\n    without creating materialized records.\n\n    @method _push\n    @private\n    @param {Object} jsonApiDoc\n    @return {StableRecordIdentifier|Array<StableRecordIdentifier>} identifiers for the primary records that had data loaded\n  */\n  _push(\n    jsonApiDoc: JsonApiDocument,\n    asyncFlush?: boolean\n  ): StableExistingRecordIdentifier | StableExistingRecordIdentifier[] | null {\n    if (DEBUG) {\n      assertDestroyingStore(this, '_push');\n    }\n    if (LOG_PAYLOADS) {\n      try {\n        let data = JSON.parse(JSON.stringify(jsonApiDoc));\n        // eslint-disable-next-line no-console\n        console.log('EmberData | Payload - push', data);\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.log('EmberData | Payload - push', jsonApiDoc);\n      }\n    }\n    if (asyncFlush) {\n      this._enableAsyncFlush = true;\n    }\n    let ret;\n    this._join(() => {\n      ret = this.cache.put({ content: jsonApiDoc });\n    });\n\n    this._enableAsyncFlush = null;\n\n    return ret.data;\n  }\n\n  /**\n    Push some raw data into the store.\n\n    This method can be used both to push in brand new\n    records, as well as to update existing records. You\n    can push in more than one type of object at once.\n    All objects should be in the format expected by the\n    serializer.\n\n    ```app/serializers/application.js\n    import RESTSerializer from '@ember-data/serializer/rest';\n\n    export default class ApplicationSerializer extends RESTSerializer;\n    ```\n\n    ```js\n    let pushData = {\n      posts: [\n        { id: 1, postTitle: \"Great post\", commentIds: [2] }\n      ],\n      comments: [\n        { id: 2, commentBody: \"Insightful comment\" }\n      ]\n    }\n\n    store.pushPayload(pushData);\n    ```\n\n    By default, the data will be deserialized using a default\n    serializer (the application serializer if it exists).\n\n    Alternatively, `pushPayload` will accept a model type which\n    will determine which serializer will process the payload.\n\n    ```app/serializers/application.js\n    import RESTSerializer from '@ember-data/serializer/rest';\n\n     export default class ApplicationSerializer extends RESTSerializer;\n    ```\n\n    ```app/serializers/post.js\n    import JSONSerializer from '@ember-data/serializer/json';\n\n    export default JSONSerializer;\n    ```\n\n    ```js\n    store.pushPayload(pushData); // Will use the application serializer\n    store.pushPayload('post', pushData); // Will use the post serializer\n    ```\n\n    @method pushPayload\n    @public\n    @param {String} modelName Optionally, a model type used to determine which serializer will be used\n    @param {Object} inputPayload\n  */\n  // TODO @runspired @deprecate pushPayload in favor of looking up the serializer\n  pushPayload(modelName, inputPayload) {\n    if (DEBUG) {\n      assertDestroyingStore(this, 'pushPayload');\n    }\n    let serializer;\n    let payload;\n    if (!inputPayload) {\n      payload = modelName;\n      serializer = this.serializerFor('application');\n      assert(\n        `You cannot use 'store#pushPayload' without a modelName unless your default serializer defines 'pushPayload'`,\n        typeof serializer.pushPayload === 'function'\n      );\n    } else {\n      payload = inputPayload;\n      assert(\n        `Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`,\n        typeof modelName === 'string'\n      );\n      let normalizedModelName = normalizeModelName(modelName);\n      serializer = this.serializerFor(normalizedModelName);\n    }\n    assert(\n      `You must define a pushPayload method in your serializer in order to call store.pushPayload`,\n      serializer.pushPayload\n    );\n    serializer.pushPayload(this, payload);\n  }\n\n  // TODO @runspired @deprecate records should implement their own serialization if desired\n  serializeRecord(record: RecordInstance, options?: Record<string, unknown>): unknown {\n    // TODO we used to check if the record was destroyed here\n    if (HAS_COMPAT_PACKAGE) {\n      if (!this._fetchManager) {\n        const FetchManager = (\n          importSync('@ember-data/legacy-compat/-private') as typeof import('@ember-data/legacy-compat/-private')\n        ).FetchManager;\n        this._fetchManager = new FetchManager(this);\n      }\n\n      return this._fetchManager.createSnapshot(recordIdentifierFor(record)).serialize(options);\n    }\n\n    assert(`Store.serializeRecord is only available when utilizing @ember-data/legacy-compat for legacy compatibility`);\n  }\n\n  /**\n   * Trigger a save for a Record.\n   *\n   * @method saveRecord\n   * @public\n   * @param {RecordInstance} record\n   * @param options\n   * @returns {Promise<RecordInstance>}\n   */\n  saveRecord(record: RecordInstance, options: Record<string, unknown> = {}): Promise<RecordInstance> {\n    if (DEBUG) {\n      assertDestroyingStore(this, 'saveRecord');\n    }\n    assert(`Unable to initate save for a record in a disconnected state`, storeFor(record));\n    let identifier = recordIdentifierFor(record);\n    const cache = this.cache;\n\n    if (!identifier) {\n      // this commonly means we're disconnected\n      // but just in case we reject here to prevent bad things.\n      return Promise.reject(`Record Is Disconnected`);\n    }\n    // TODO we used to check if the record was destroyed here\n    assert(\n      `Cannot initiate a save request for an unloaded record: ${identifier}`,\n      this._instanceCache.recordIsLoaded(identifier)\n    );\n    if (resourceIsFullyDeleted(this._instanceCache, identifier)) {\n      return Promise.resolve(record);\n    }\n\n    if (isDSModel(record)) {\n      record.errors.clear();\n    }\n\n    if (!options) {\n      options = {};\n    }\n    let operation: 'createRecord' | 'deleteRecord' | 'updateRecord' = 'updateRecord';\n\n    if (cache.isNew(identifier)) {\n      operation = 'createRecord';\n    } else if (cache.isDeleted(identifier)) {\n      operation = 'deleteRecord';\n    }\n\n    const request = {\n      op: operation,\n      data: {\n        options,\n        record: identifier,\n      },\n      cacheOptions: { [SkipCache as symbol]: true },\n    };\n\n    // we lie here on the type because legacy doesn't have enough context\n    cache.willCommit(identifier, { request } as unknown as StoreRequestContext);\n\n    return this.request<RecordInstance>(request).then((document) => document.content);\n  }\n\n  /**\n   * Instantiation hook allowing applications or addons to configure the store\n   * to utilize a custom Cache implementation.\n   *\n   * This hook should not be called directly by consuming applications or libraries.\n   * Use `Store.cache` to access the Cache instance.\n   *\n   * @method createCache (hook)\n   * @public\n   * @param storeWrapper\n   * @returns {Cache}\n   */\n  createCache(storeWrapper: CacheStoreWrapper): Cache {\n    if (HAS_JSON_API_PACKAGE) {\n      if (_Cache === undefined) {\n        _Cache = (importSync('@ember-data/json-api') as typeof import('@ember-data/json-api')).default;\n      }\n\n      return new _Cache(storeWrapper);\n    }\n\n    assert(`Expected store.createCache to be implemented but it wasn't`);\n  }\n\n  /**\n   * Returns the cache instance associated to this Store, instantiates the Cache\n   * if necessary via `Store.createCache`\n   *\n   * @property {Cache} cache\n   * @public\n   */\n  get cache(): Cache {\n    let { cache } = this._instanceCache;\n    if (!cache) {\n      cache = this._instanceCache.cache = this.createCache(this._instanceCache._storeWrapper);\n      if (DEBUG) {\n        cache = new CacheManager(cache);\n      }\n    }\n    return cache;\n  }\n\n  /**\n    `normalize` converts a json payload into the normalized form that\n    [push](../methods/push?anchor=push) expects.\n\n    Example\n\n    ```js\n    socket.on('message', function(message) {\n      let modelName = message.model;\n      let data = message.data;\n      store.push(store.normalize(modelName, data));\n    });\n    ```\n\n    @method normalize\n    @public\n    @param {String} modelName The name of the model type for this payload\n    @param {Object} payload\n    @return {Object} The normalized payload\n  */\n  // TODO @runspired @deprecate users should call normalize on the associated serializer directly\n  normalize(modelName: string, payload) {\n    if (DEBUG) {\n      assertDestroyingStore(this, 'normalize');\n    }\n    assert(`You need to pass a model name to the store's normalize method`, modelName);\n    assert(\n      `Passing classes to store methods has been removed. Please pass a dasherized string instead of ${typeof modelName}`,\n      typeof modelName === 'string'\n    );\n    let normalizedModelName = normalizeModelName(modelName);\n    let serializer = this.serializerFor(normalizedModelName);\n    let model = this.modelFor(normalizedModelName);\n    assert(\n      `You must define a normalize method in your serializer in order to call store.normalize`,\n      serializer?.normalize\n    );\n    return serializer.normalize(model, payload);\n  }\n\n  /**\n    Returns an instance of the adapter for a given type. For\n    example, `adapterFor('person')` will return an instance of\n    the adapter located at `app/adapters/person.js`\n\n    If no `person` adapter is found, this method will look\n    for an `application` adapter (the default adapter for\n    your entire application).\n\n    @method adapterFor\n    @public\n    @param {String} modelName\n    @return Adapter\n  */\n  adapterFor(modelName: string) {\n    if (DEBUG) {\n      assertDestroyingStore(this, 'adapterFor');\n    }\n    assert(`You need to pass a model name to the store's adapterFor method`, modelName);\n    assert(\n      `Passing classes to store.adapterFor has been removed. Please pass a dasherized string instead of ${modelName}`,\n      typeof modelName === 'string'\n    );\n    let normalizedModelName = normalizeModelName(modelName);\n\n    let { _adapterCache } = this;\n    let adapter = _adapterCache[normalizedModelName];\n    if (adapter) {\n      return adapter;\n    }\n\n    let owner: any = getOwner(this);\n\n    // name specific adapter\n    adapter = owner.lookup(`adapter:${normalizedModelName}`);\n    if (adapter !== undefined) {\n      _adapterCache[normalizedModelName] = adapter;\n      return adapter;\n    }\n\n    // no adapter found for the specific name, fallback and check for application adapter\n    adapter = _adapterCache.application || owner.lookup('adapter:application');\n    if (adapter !== undefined) {\n      _adapterCache[normalizedModelName] = adapter;\n      _adapterCache.application = adapter;\n      return adapter;\n    }\n\n    assert(`No adapter was found for '${modelName}' and no 'application' adapter was found as a fallback.`);\n  }\n\n  /**\n    Returns an instance of the serializer for a given type. For\n    example, `serializerFor('person')` will return an instance of\n    `App.PersonSerializer`.\n\n    If no `App.PersonSerializer` is found, this method will look\n    for an `App.ApplicationSerializer` (the default serializer for\n    your entire application).\n\n    If a serializer cannot be found on the adapter, it will fall back\n    to an instance of `JSONSerializer`.\n\n    @method serializerFor\n    @public\n    @param {String} modelName the record to serialize\n    @return {Serializer}\n  */\n  serializerFor(modelName: string): MinimumSerializerInterface | null {\n    if (DEBUG) {\n      assertDestroyingStore(this, 'serializerFor');\n    }\n    assert(`You need to pass a model name to the store's serializerFor method`, modelName);\n    assert(\n      `Passing classes to store.serializerFor has been removed. Please pass a dasherized string instead of ${modelName}`,\n      typeof modelName === 'string'\n    );\n    let normalizedModelName = normalizeModelName(modelName);\n\n    let { _serializerCache } = this;\n    let serializer = _serializerCache[normalizedModelName];\n    if (serializer) {\n      return serializer;\n    }\n\n    let owner: any = getOwner(this);\n\n    // by name\n    serializer = owner.lookup(`serializer:${normalizedModelName}`);\n    if (serializer !== undefined) {\n      _serializerCache[normalizedModelName] = serializer;\n      return serializer;\n    }\n\n    // no serializer found for the specific model, fallback and check for application serializer\n    serializer = _serializerCache.application || owner.lookup('serializer:application');\n    if (serializer !== undefined) {\n      _serializerCache[normalizedModelName] = serializer;\n      _serializerCache.application = serializer;\n      return serializer;\n    }\n\n    return null;\n  }\n\n  // @ts-expect-error\n  destroy(): void {\n    if (this.isDestroyed) {\n      // @ember/test-helpers will call destroy multiple times\n      return;\n    }\n    this.isDestroying = true;\n    // enqueue destruction of any adapters/serializers we have created\n    for (let adapterName in this._adapterCache) {\n      let adapter = this._adapterCache[adapterName]!;\n      if (typeof adapter.destroy === 'function') {\n        adapter.destroy();\n      }\n    }\n\n    for (let serializerName in this._serializerCache) {\n      let serializer = this._serializerCache[serializerName]!;\n      if (typeof serializer.destroy === 'function') {\n        serializer.destroy();\n      }\n    }\n\n    if (HAS_GRAPH_PACKAGE) {\n      const peekGraph = (importSync('@ember-data/graph/-private') as typeof import('@ember-data/graph/-private'))\n        .peekGraph;\n      let graph = peekGraph(this);\n      if (graph) {\n        graph.destroy();\n      }\n    }\n\n    this.notifications.destroy();\n    this.recordArrayManager.destroy();\n    this.identifierCache.destroy();\n\n    this.unloadAll();\n    this.isDestroyed = true;\n  }\n\n  static create(args?: Record<string, unknown>) {\n    return new this(args);\n  }\n}\n\nexport default Store;\n\nlet assertDestroyingStore: Function;\nlet assertDestroyedStoreOnly: Function;\n\nif (DEBUG) {\n  assertDestroyingStore = function assertDestroyedStore(store, method) {\n    assert(\n      `Attempted to call store.${method}(), but the store instance has already been destroyed.`,\n      !(store.isDestroying || store.isDestroyed)\n    );\n  };\n  assertDestroyedStoreOnly = function assertDestroyedStoreOnly(store, method) {\n    assert(\n      `Attempted to call store.${method}(), but the store instance has already been destroyed.`,\n      !store.isDestroyed\n    );\n  };\n}\n\nfunction isMaybeIdentifier(\n  maybeIdentifier: string | ResourceIdentifierObject\n): maybeIdentifier is ResourceIdentifierObject {\n  return Boolean(\n    maybeIdentifier !== null &&\n      typeof maybeIdentifier === 'object' &&\n      (('id' in maybeIdentifier && 'type' in maybeIdentifier && maybeIdentifier.id && maybeIdentifier.type) ||\n        maybeIdentifier.lid)\n  );\n}\n\nfunction isDSModel(record: RecordInstance | null): record is DSModel {\n  if (!HAS_MODEL_PACKAGE) {\n    return false;\n  }\n  return !!record && 'constructor' in record && 'isModel' in record.constructor && record.constructor.isModel === true;\n}\n\nfunction normalizeProperties(\n  store: Store,\n  identifier: StableRecordIdentifier,\n  properties?: { [key: string]: unknown }\n): { [key: string]: unknown } | undefined {\n  // assert here\n  if (properties !== undefined) {\n    if ('id' in properties) {\n      assert(`expected id to be a string or null`, properties.id !== undefined);\n    }\n    assert(\n      `You passed '${typeof properties}' as properties for record creation instead of an object.`,\n      typeof properties === 'object' && properties !== null\n    );\n\n    const { type } = identifier;\n\n    // convert relationship Records to RecordDatas before passing to RecordData\n    let defs = store.getSchemaDefinitionService().relationshipsDefinitionFor({ type });\n\n    if (defs !== null) {\n      let keys = Object.keys(properties);\n      let relationshipValue;\n\n      for (let i = 0; i < keys.length; i++) {\n        let prop = keys[i];\n        let def = defs[prop];\n\n        if (def !== undefined) {\n          if (def.kind === 'hasMany') {\n            if (DEBUG) {\n              assertRecordsPassedToHasMany(properties[prop] as RecordInstance[]);\n            }\n            relationshipValue = extractIdentifiersFromRecords(properties[prop] as RecordInstance[]);\n          } else {\n            relationshipValue = extractIdentifierFromRecord(properties[prop] as RecordInstance);\n          }\n\n          properties[prop] = relationshipValue;\n        }\n      }\n    }\n  }\n  return properties;\n}\n\nfunction assertRecordsPassedToHasMany(records: RecordInstance[]) {\n  assert(`You must pass an array of records to set a hasMany relationship`, Array.isArray(records));\n  assert(\n    `All elements of a hasMany relationship must be instances of Model, you passed ${records\n      .map((r) => `${typeof r}`)\n      .join(', ')}`,\n    (function () {\n      return records.every((record) => {\n        try {\n          recordIdentifierFor(record);\n          return true;\n        } catch {\n          return false;\n        }\n      });\n    })()\n  );\n}\n\nfunction extractIdentifiersFromRecords(records: RecordInstance[]): StableRecordIdentifier[] {\n  return records.map((record) => extractIdentifierFromRecord(record)) as StableRecordIdentifier[];\n}\n\ntype PromiseProxyRecord = { then(): void; content: RecordInstance | null | undefined };\n\nfunction extractIdentifierFromRecord(recordOrPromiseRecord: PromiseProxyRecord | RecordInstance | null) {\n  if (!recordOrPromiseRecord) {\n    return null;\n  }\n  const extract = recordIdentifierFor;\n\n  return extract(recordOrPromiseRecord);\n}\n\nfunction secretInit(record: RecordInstance, cache: Cache, identifier: StableRecordIdentifier, store: Store): void {\n  setRecordIdentifier(record, identifier);\n  StoreMap.set(record, store);\n  setCacheFor(record, cache);\n}\n"],"names":["_initializerDefineProperty","target","property","descriptor","context","Object","defineProperty","enumerable","configurable","writable","value","initializer","call","_classPrivateFieldBase","receiver","privateKey","prototype","hasOwnProperty","TypeError","id","_classPrivateFieldKey","name","_applyDecoratedDescriptor","decorators","desc","keys","forEach","key","slice","reverse","reduce","decorator","undefined","urlFromLink","link","href","Document","_class","_store","_classPrivateFieldLooseKey","_request","_class2","constructor","store","identifier","_request2","_descriptor","_descriptor2","_descriptor3","_descriptor4","_classPrivateFieldLooseBase","fetch","options","assert","links","self","cacheOptions","lid","next","prev","first","last","toJSON","data","errors","meta","tracked","response","request","assign","url","content","isErrorDocument","document","maybeUpdateUiObjects","isFromCache","shouldHydrate","doc","_documentCache","get","copyDocumentProperties","set","Array","isArray","recordArrayManager","createArray","identifiers","query","managed","_keyedArrays","populateManagedArray","peekRecord","calcShouldFetch","hasCachedValue","reload","lifetimes","isHardExpired","calcShouldBackgroundFetch","willFetch","backgroundReload","isSoftExpired","fetchContentAndHydrate","shouldFetch","shouldBackgroundFetch","Symbol","for","then","requestManager","_pending","delete","_enableAsyncFlush","_join","cache","put","notifications","_flush","error","signal","aborted","newError","cloneError","cloned","Error","message","stack","SkipCache","EnableHydration","CacheHandler","identifierCache","getOrCreateDocumentIdentifier","peeked","peekRequest","promise","Promise","resolve","source","CacheForIdentifierCache","Map","setCacheFor","has","removeRecordDataFor","peekCache","instance","coerceId","toString","ensureStringId","normalized","length","isNaN","String","DEBUG_CLIENT_ORIGINATED","DEBUG_IDENTIFIER_BUCKET","isNonEmptyString","str","normalizeModelName","modelName","dasherize","installPolyfill","isFastBoot","FastBoot","CRYPTO","require","window","crypto","randomUUID","rng","rnds8","Uint8Array","getRandomValues","randomFillSync","byteToHex","i","substr","bytesToUuid","buf","bth","join","uuidv4","rnds","IDENTIFIERS","Set","DOCUMENTS","isStableIdentifier","isDocumentIdentifier","_crypto","macroCondition","getOwnConfig","polyfillUUID","freeze","obj","configuredForgetMethod","configuredGenerationMethod","configuredResetMethod","configuredUpdateMethod","setIdentifierGenerationMethod","method","setIdentifierUpdateMethod","setIdentifierForgetMethod","setIdentifierResetMethod","defaultGenerationMethod","bucket","type","toUpperCase","defaultEmptyCallback","args","DEBUG_MAP","env","DEBUG","WeakMap","IdentifierCache","_cache","lids","types","create","documents","_generate","_update","_forget","_reset","_merge","_isDefaultConfig","__configureMerge","_getRecordIdentifier","resource","shouldGenerate","debug","LOG_IDENTIFIERS","console","log","groupCollapsed","keyOptions","getTypeIndex","newLid","makeStableRecordIdentifier","trace","groupEnd","peekRecordIdentifier","cacheKey","add","getOrCreateRecordIdentifier","createIdentifierForNewRecord","updateRecordIdentifier","identifierObject","newId","existingIdentifier","detectMerge","incomingDataResource","generatedIdentifier","_mergeRecordIdentifiers","performRecordIdentifierUpdate","kept","abandoned","forgetRecordIdentifier","baseKeyOptions","destroy","typeMap","typeIndex","clientOriginated","recordIdentifier","wrapper","updateFn","warn","typesCache","newType","RecordReference","___token","___identifier","subscribe","_","notifiedKey","_ref","unsubscribe","remoteType","push","objectOrPromise","load","findRecord","CacheStoreWrapper","_willNotify","_pendingNotifies","_scheduleNotification","pending","_cbs","_schedule","_flushNotifications","notify","notifyChange","namespace","getSchemaDefinitionService","setRecordId","_instanceCache","hasRecord","Boolean","peek","disconnectRecord","disconnect","_peekGraph","packages","HAS_GRAPH_PACKAGE","__peekGraph","a","importSync","peekGraph","RecordCache","record","recordIdentifierFor","setRecordIdentifier","StoreMap","storeFor","InstanceCache","__instances","reference","_storeWrapper","matchedIdentifier","resourceData","keptIdentifier","staleIdentifier","keptHasRecord","staleHasRecord","patch","op","unloadRecord","getRecord","properties","isDestroying","isDestroyed","instantiateRecord","LOG_INSTANCE_CACHE","getReference","recordIsLoaded","filterDeleted","isNew","isEmpty","isDeleted","isDeletionCommitted","graph","remove","_requestCache","_clearEntries","requests","getRequestStateService","getPendingRequestsForRecord","some","req","teardownRecord","clear","typeCache","oldId","_resourceIsFullDeleted","resourceIsFullyDeleted","instanceCache","preloadData","preload","jsonPayload","schemas","relationships","relationshipsDefinitionFor","preloadValue","relationshipMeta","preloadRelationship","attributes","upsert","schema","relatedType","kind","map","_convertPreloadRelationshipToJSON","_clearCaches","_modelForMixin","HAS_MODEL_PACKAGE","_found","arguments","DSModelSchemaDefinitionService","_relationshipsDefCache","_attributesDefCache","attributesDefinitionFor","modelClass","modelFor","attributeMap","relationshipsObject","doesTypeExist","normalizedModelName","factory","getModelFactory","_modelFactoryCache","owner","getOwner","factoryFor","klass","class","isModel","hasOwnModelNameSet","AvailableShims","getShimClass","shims","shim","ShimModelClass","mapFromHash","hash","__store","fields","attrs","relationshipsByName","eachAttribute","callback","binding","attrDefs","eachRelationship","relationshipDefs","eachTransformedAttribute","CacheManager","version","isDel","mutate","mutation","fork","merge","diff","dump","hydrate","stream","clientDidCreate","willCommit","didCommit","result","commitWasRejected","getAttr","propertyName","setAttr","changedAttrs","hasChangedAttrs","rollbackAttrs","getRelationship","setIsDeleted","getErrors","tokenId","CacheOperations","isCacheOperationValue","runLoopIsFlushing","_backburner","currentInstance","_autorun","_unsubscribe","tokens","token","LOG_NOTIFICATIONS","NotificationManager","_buffered","_hasFlush","_tokens","unsubToken","_tokenRef","hasSubscribers","size","buffer","_scheduleNotify","_onNextFlush","cb","_onFlushCB","asyncFlush","states","_flushNotification","callbackMap","ARRAY_GETTER_METHODS","iterator","ARRAY_SETTER_METHODS","SYNC_PROPS","isArrayGetter","prop","isArraySetter","IDENTIFIER_ARRAY_TAG","SOURCE","MUTATE","NOTIFY","IS_COLLECTION","notifyArray","arr","ref","deprecations","DEPRECATE_COMPUTED_CHAINS","dirtyTag","tagForProperty","convertToInt","num","Number","Tag","shouldReset","t","safeForEach","index","IdentifierArray","_class3","[]","isLoaded","_updatingPromise","_manager","manager","boundFns","_TAG","PrivateState","transaction","proxy","Proxy","_syncArray","fn","Reflect","apply","allowMutation","addToTransaction","outcome","original","newIdentifier","extractIdentifierFromRecord","deleteProperty","getPrototypeOf","Ember","hasMixin","mixin","bind","update","isUpdating","updatingPromise","finally","findAll","save","all","saveRecord","dependentKeyCompat","getOwnPropertyDescriptor","Collection","_recordArray","_managed","assertRecordPassedToHasMany","FAKE_ARR","SLICE_BATCH_SIZE","fastPush","startLength","newLength","RecordArrayManager","_live","_staged","_identifiers","_set","_visibilitySet","_subscription","identifierAdded","identifierRemoved","identifierChanged","array","sync","liveArrayFor","staged","config","associate","dirtyArray","delta","tag","addTransactionCB","_getPendingFor","includeManaged","isRemove","liveArray","allPending","changes","pendingLive","payload","old","disassociate","changeSets","existing","newState","isClear","ArraysCache","disassociateIdentifier","arraySet","state","adds","removes","indexOf","splice","Touching","RequestPromise","hasRecordIdentifier","RequestStateService","_done","_subscriptions","_toFlush","_enqueue","queryRequest","_triggerSubscriptions","_dequeue","finalizedRequest","_addDone","_flushRequest","filter","requestDataOp","subscribeForRecord","getLastRequestForRecord","constructResource","trueId","_Cache","Store","EmberObject","_isDestroying","_isDestroyed","createArgs","_adapterCache","_serializerCache","_run","coalesce","_getAllPending","TESTING","v","allSettled","requestConfig","opts","DISABLE_WAITER","disableTestWaiter","LOG_REQUESTS","JSON","parse","stringify","future","onFinalize","createRecordArgs","createOptions","_createProps","_secretInit","secretInit","setOwner","_schema","registerSchemaDefinitionService","registerSchema","assertDestroyedStoreOnly","maybeFactory","_forceShim","createRecord","inputProperties","assertDestroyingStore","emberBackburner","adapter","adapterFor","generateIdForRecord","normalizeProperties","resultProps","deleteRecord","isMaybeIdentifier","normalizedId","resourceIdentifier","stableIdentifier","queryRecord","peekAll","unloadAll","pushed","_push","records","jsonApiDoc","LOG_PAYLOADS","e","ret","pushPayload","inputPayload","serializer","serializerFor","serializeRecord","HAS_COMPAT_PACKAGE","_fetchManager","FetchManager","createSnapshot","serialize","reject","isDSModel","operation","createCache","storeWrapper","HAS_JSON_API_PACKAGE","default","normalize","model","lookup","application","adapterName","serializerName","assertDestroyedStore","maybeIdentifier","defs","relationshipValue","def","assertRecordsPassedToHasMany","extractIdentifiersFromRecords","r","every","recordOrPromiseRecord","extract"],"mappings":"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CAAAC,YAAA,GAAA+G,QAAA,CAAAC,iBAAA,CAAuB,EAAA;AACrB,UAAA,MAAMI,SAAS,GAAID,UAAU,CAAC,4BAA4B,CAAC,CACxDC,SAAS,CAAA;AACZ,UAAA,MAAMiC,KAAK,GAAGjC,SAAS,CAAC,IAAI,CAAC,CAAA;AAC7B,UAAA,IAAIiC,KAAK,EAAE;AACTA,YAAAA,KAAK,CAACzP,WAAW,CAACmQ,KAAK,EAAE,CAAA;AAC3B,WAAA;AACF,SAAA;AAEA,QAAA,IAAI,CAACrQ,kBAAkB,CAACqQ,KAAK,EAAE,CAAA;AAC/B,QAAA,IAAI,CAACvD,cAAc,CAACuD,KAAK,EAAE,CAAA;AAC7B,OAAC,MAAM;AACL,QAAA,IAAIoC,mBAAmB,GAAGnO,kBAAkB,CAACC,SAAS,CAAC,CAAA;AACvD,QAAA,IAAI,CAACuI,cAAc,CAACuD,KAAK,CAACoC,mBAAmB,CAAC,CAAA;AAChD,OAAA;AACF,KAAC,CAAC,CAAA;AACJ,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;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","x_google_ignoreList":[0,1,2,3]}
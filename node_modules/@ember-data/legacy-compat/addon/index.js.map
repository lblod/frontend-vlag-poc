{"version":3,"file":"index.js","sources":["../src/legacy-network-handler/legacy-data-fetch.js","../src/legacy-network-handler/legacy-network-handler.ts"],"sourcesContent":["import { assert } from '@ember/debug';\n\nimport { DEBUG } from '@ember-data/env';\n\nimport { iterateData, payloadIsNotBlank } from './legacy-data-utils';\nimport { normalizeResponseHelper } from './serializer-response';\n\nexport function _findHasMany(adapter, store, identifier, link, relationship, options) {\n  let promise = Promise.resolve().then(() => {\n    const snapshot = store._fetchManager.createSnapshot(identifier, options);\n    let useLink = !link || typeof link === 'string';\n    let relatedLink = useLink ? link : link.href;\n    return adapter.findHasMany(store, snapshot, relatedLink, relationship);\n  });\n\n  promise = promise.then(\n    (adapterPayload) => {\n      assert(\n        `You made a 'findHasMany' request for a ${identifier.type}'s '${relationship.key}' relationship, using link '${link}' , but the adapter's response did not have any data`,\n        payloadIsNotBlank(adapterPayload)\n      );\n      const modelClass = store.modelFor(relationship.type);\n\n      let serializer = store.serializerFor(relationship.type);\n      let payload = normalizeResponseHelper(serializer, store, modelClass, adapterPayload, null, 'findHasMany');\n\n      assert(\n        `fetched the hasMany relationship '${relationship.name}' for ${identifier.type}:${identifier.id} with link '${link}', but no data member is present in the response. If no data exists, the response should set { data: [] }`,\n        'data' in payload && Array.isArray(payload.data)\n      );\n\n      payload = syncRelationshipDataFromLink(store, payload, identifier, relationship);\n      return store._push(payload, true);\n    },\n    null,\n    `DS: Extract payload of '${identifier.type}' : hasMany '${relationship.type}'`\n  );\n\n  return promise;\n}\n\nexport function _findBelongsTo(store, identifier, link, relationship, options) {\n  let promise = Promise.resolve().then(() => {\n    let adapter = store.adapterFor(identifier.type);\n    assert(`You tried to load a belongsTo relationship but you have no adapter (for ${identifier.type})`, adapter);\n    assert(\n      `You tried to load a belongsTo relationship from a specified 'link' in the original payload but your adapter does not implement 'findBelongsTo'`,\n      typeof adapter.findBelongsTo === 'function'\n    );\n    let snapshot = store._fetchManager.createSnapshot(identifier, options);\n    let useLink = !link || typeof link === 'string';\n    let relatedLink = useLink ? link : link.href;\n    return adapter.findBelongsTo(store, snapshot, relatedLink, relationship);\n  });\n\n  promise = promise.then(\n    (adapterPayload) => {\n      let modelClass = store.modelFor(relationship.type);\n      let serializer = store.serializerFor(relationship.type);\n      let payload = normalizeResponseHelper(serializer, store, modelClass, adapterPayload, null, 'findBelongsTo');\n\n      assert(\n        `fetched the belongsTo relationship '${relationship.name}' for ${identifier.type}:${identifier.id} with link '${link}', but no data member is present in the response. If no data exists, the response should set { data: null }`,\n        'data' in payload &&\n          (payload.data === null || (typeof payload.data === 'object' && !Array.isArray(payload.data)))\n      );\n\n      if (!payload.data && !payload.links && !payload.meta) {\n        return null;\n      }\n\n      payload = syncRelationshipDataFromLink(store, payload, identifier, relationship);\n\n      return store._push(payload, true);\n    },\n    null,\n    `DS: Extract payload of ${identifier.type} : ${relationship.type}`\n  );\n\n  return promise;\n}\n\n// sync\n// iterate over records in payload.data\n// for each record\n//   assert that record.relationships[inverse] is either undefined (so we can fix it)\n//     or provide a data: {id, type} that matches the record that requested it\n//   return the relationship data for the parent\nfunction syncRelationshipDataFromLink(store, payload, parentIdentifier, relationship) {\n  // ensure the right hand side (incoming payload) points to the parent record that\n  // requested this relationship\n  let relationshipData = payload.data\n    ? iterateData(payload.data, (data, index) => {\n        const { id, type } = data;\n        ensureRelationshipIsSetToParent(data, parentIdentifier, store, relationship, index);\n        return { id, type };\n      })\n    : null;\n\n  const relatedDataHash = {};\n\n  if ('meta' in payload) {\n    relatedDataHash.meta = payload.meta;\n  }\n  if ('links' in payload) {\n    relatedDataHash.links = payload.links;\n  }\n  if ('data' in payload) {\n    relatedDataHash.data = relationshipData;\n  }\n\n  // now, push the left hand side (the parent record) to ensure things are in sync, since\n  // the payload will be pushed with store._push\n  const parentPayload = {\n    id: parentIdentifier.id,\n    type: parentIdentifier.type,\n    relationships: {\n      [relationship.key]: relatedDataHash,\n    },\n  };\n\n  if (!Array.isArray(payload.included)) {\n    payload.included = [];\n  }\n  payload.included.push(parentPayload);\n\n  return payload;\n}\n\nfunction ensureRelationshipIsSetToParent(payload, parentIdentifier, store, parentRelationship, index) {\n  let { id, type } = payload;\n\n  if (!payload.relationships) {\n    payload.relationships = {};\n  }\n  let { relationships } = payload;\n\n  let inverse = getInverse(store, parentIdentifier, parentRelationship, type);\n  if (inverse) {\n    let { inverseKey, kind } = inverse;\n\n    let relationshipData = relationships[inverseKey] && relationships[inverseKey].data;\n\n    if (DEBUG) {\n      if (\n        typeof relationshipData !== 'undefined' &&\n        !relationshipDataPointsToParent(relationshipData, parentIdentifier)\n      ) {\n        let inspect = function inspect(thing) {\n          return `'${JSON.stringify(thing)}'`;\n        };\n        let quotedType = inspect(type);\n        let quotedInverse = inspect(inverseKey);\n        let expected = inspect({\n          id: parentIdentifier.id,\n          type: parentIdentifier.type,\n        });\n        let expectedModel = `${parentIdentifier.type}:${parentIdentifier.id}`;\n        let got = inspect(relationshipData);\n        let prefix = typeof index === 'number' ? `data[${index}]` : `data`;\n        let path = `${prefix}.relationships.${inverseKey}.data`;\n        let other = relationshipData ? `<${relationshipData.type}:${relationshipData.id}>` : null;\n        let relationshipFetched = `${expectedModel}.${parentRelationship.kind}(\"${parentRelationship.name}\")`;\n        let includedRecord = `<${type}:${id}>`;\n        let message = [\n          `Encountered mismatched relationship: Ember Data expected ${path} in the payload from ${relationshipFetched} to include ${expected} but got ${got} instead.\\n`,\n          `The ${includedRecord} record loaded at ${prefix} in the payload specified ${other} as its ${quotedInverse}, but should have specified ${expectedModel} (the record the relationship is being loaded from) as its ${quotedInverse} instead.`,\n          `This could mean that the response for ${relationshipFetched} may have accidentally returned ${quotedType} records that aren't related to ${expectedModel} and could be related to a different ${parentIdentifier.type} record instead.`,\n          `Ember Data has corrected the ${includedRecord} record's ${quotedInverse} relationship to ${expectedModel} so that ${relationshipFetched} will include ${includedRecord}.`,\n          `Please update the response from the server or change your serializer to either ensure that the response for only includes ${quotedType} records that specify ${expectedModel} as their ${quotedInverse}, or omit the ${quotedInverse} relationship from the response.`,\n        ].join('\\n');\n\n        assert(message);\n      }\n    }\n\n    if (kind !== 'hasMany' || typeof relationshipData !== 'undefined') {\n      relationships[inverseKey] = relationships[inverseKey] || {};\n      relationships[inverseKey].data = fixRelationshipData(relationshipData, kind, parentIdentifier);\n    }\n  }\n}\n\nfunction inverseForRelationship(store, identifier, key) {\n  const definition = store.getSchemaDefinitionService().relationshipsDefinitionFor(identifier)[key];\n  if (!definition) {\n    return null;\n  }\n\n  assert(\n    `Expected the relationship defintion to specify the inverse type or null.`,\n    definition.options?.inverse === null ||\n      (typeof definition.options?.inverse === 'string' && definition.options.inverse.length > 0)\n  );\n  return definition.options.inverse;\n}\n\nfunction getInverse(store, parentIdentifier, parentRelationship, type) {\n  let { name: lhs_relationshipName } = parentRelationship;\n  let { type: parentType } = parentIdentifier;\n  let inverseKey = inverseForRelationship(store, { type: parentType }, lhs_relationshipName);\n\n  if (inverseKey) {\n    const definition = store.getSchemaDefinitionService().relationshipsDefinitionFor({ type });\n    let { kind } = definition[inverseKey];\n    return {\n      inverseKey,\n      kind,\n    };\n  }\n}\n\nfunction relationshipDataPointsToParent(relationshipData, identifier) {\n  if (relationshipData === null) {\n    return false;\n  }\n\n  if (Array.isArray(relationshipData)) {\n    if (relationshipData.length === 0) {\n      return false;\n    }\n    for (let i = 0; i < relationshipData.length; i++) {\n      let entry = relationshipData[i];\n      if (validateRelationshipEntry(entry, identifier)) {\n        return true;\n      }\n    }\n  } else {\n    return validateRelationshipEntry(relationshipData, identifier);\n  }\n\n  return false;\n}\n\nfunction fixRelationshipData(relationshipData, relationshipKind, { id, type }) {\n  let parentRelationshipData = {\n    id,\n    type,\n  };\n\n  let payload;\n\n  if (relationshipKind === 'hasMany') {\n    payload = relationshipData || [];\n    if (relationshipData) {\n      // these arrays could be massive so this is better than filter\n      // Note: this is potentially problematic if type/id are not in the\n      // same state of normalization.\n      let found = relationshipData.find((v) => {\n        return v.type === parentRelationshipData.type && v.id === parentRelationshipData.id;\n      });\n      if (!found) {\n        payload.push(parentRelationshipData);\n      }\n    } else {\n      payload.push(parentRelationshipData);\n    }\n  } else {\n    payload = relationshipData || {};\n    Object.assign(payload, parentRelationshipData);\n  }\n\n  return payload;\n}\n\nfunction validateRelationshipEntry({ id }, { id: parentModelID }) {\n  return id && id.toString() === parentModelID;\n}\n","import { assert } from '@ember/debug';\n\nimport { importSync } from '@embroider/macros';\n\nimport { LOG_PAYLOADS } from '@ember-data/debugging';\nimport { DEBUG, TESTING } from '@ember-data/env';\nimport type { Handler, NextFn } from '@ember-data/request/-private/types';\nimport type Store from '@ember-data/store';\nimport type { StoreRequestContext, StoreRequestInfo } from '@ember-data/store/-private/cache-handler';\nimport type ShimModelClass from '@ember-data/store/-private/legacy-model-support/shim-model-class';\nimport type { Collection } from '@ember-data/store/-private/record-arrays/identifier-array';\nimport { SingleResourceDataDocument } from '@ember-data/types/cache/document';\nimport type {\n  CollectionResourceDocument,\n  JsonApiDocument,\n  Links,\n  PaginationLinks,\n  SingleResourceDocument,\n} from '@ember-data/types/q/ember-data-json-api';\nimport type { StableExistingRecordIdentifier, StableRecordIdentifier } from '@ember-data/types/q/identifier';\nimport type { MinimumAdapterInterface } from '@ember-data/types/q/minimum-adapter-interface';\nimport type { MinimumSerializerInterface } from '@ember-data/types/q/minimum-serializer-interface';\nimport type { JsonApiError } from '@ember-data/types/q/record-data-json-api';\nimport type { RelationshipSchema } from '@ember-data/types/q/record-data-schemas';\n\nimport FetchManager, { SaveOp } from './fetch-manager';\nimport { assertIdentifierHasId } from './identifier-has-id';\nimport { _findBelongsTo, _findHasMany } from './legacy-data-fetch';\nimport { payloadIsNotBlank } from './legacy-data-utils';\nimport { normalizeResponseHelper } from './serializer-response';\nimport type Snapshot from './snapshot';\nimport SnapshotRecordArray from './snapshot-record-array';\n\ntype AdapterErrors = Error & { errors?: unknown[]; isAdapterError?: true; code?: string };\ntype SerializerWithParseErrors = MinimumSerializerInterface & {\n  extractErrors?(store: Store, modelClass: ShimModelClass, error: AdapterErrors, recordId: string | null): unknown;\n};\n\nconst PotentialLegacyOperations = new Set([\n  'findRecord',\n  'findAll',\n  'query',\n  'queryRecord',\n  'findBelongsTo',\n  'findHasMany',\n  'updateRecord',\n  'createRecord',\n  'deleteRecord',\n]);\n\nexport const LegacyNetworkHandler: Handler = {\n  request<T>(context: StoreRequestContext, next: NextFn<T>): Promise<T> {\n    // if we are not a legacy request, move on\n    if (context.request.url || !context.request.op || !PotentialLegacyOperations.has(context.request.op)) {\n      return next(context.request) as unknown as Promise<T>;\n    }\n\n    const { store } = context.request;\n    if (!store._fetchManager) {\n      store._fetchManager = new FetchManager(store);\n    }\n\n    switch (context.request.op) {\n      case 'findRecord':\n        return findRecord(context);\n      case 'findAll':\n        return findAll(context);\n      case 'query':\n        return query(context);\n      case 'queryRecord':\n        return queryRecord(context);\n      case 'findBelongsTo':\n        return findBelongsTo(context);\n      case 'findHasMany':\n        return findHasMany(context);\n      case 'updateRecord':\n        return saveRecord(context);\n      case 'createRecord':\n        return saveRecord(context);\n      case 'deleteRecord':\n        return saveRecord(context);\n      default:\n        return next(context.request) as unknown as Promise<T>;\n    }\n  },\n};\n\nfunction findBelongsTo<T>(context: StoreRequestContext): Promise<T> {\n  const { store, data, records: identifiers } = context.request;\n  const { options, record, links, useLink, field } = data as {\n    record: StableRecordIdentifier;\n    options: Record<string, unknown>;\n    links?: Links;\n    useLink: boolean;\n    field: RelationshipSchema;\n  };\n  const identifier = identifiers?.[0];\n\n  // short circuit if we are already loading\n  let pendingRequest =\n    identifier && store._fetchManager.getPendingFetch(identifier as StableExistingRecordIdentifier, options);\n  if (pendingRequest) {\n    return pendingRequest as Promise<T>;\n  }\n\n  if (useLink) {\n    return _findBelongsTo(store, record, links!.related, field, options) as Promise<T>;\n  }\n\n  assert(`Expected an identifier`, Array.isArray(identifiers) && identifiers.length === 1);\n\n  const manager = store._fetchManager;\n  assertIdentifierHasId(identifier!);\n\n  return options.reload\n    ? (manager.scheduleFetch(identifier, options, context.request) as Promise<T>)\n    : (manager.fetchDataIfNeededForIdentifier(identifier, options, context.request) as Promise<T>);\n}\n\nfunction findHasMany<T>(context: StoreRequestContext): Promise<T> {\n  const { store, data, records: identifiers } = context.request;\n  const { options, record, links, useLink, field } = data as {\n    record: StableRecordIdentifier;\n    options: Record<string, unknown>;\n    links?: PaginationLinks | Links;\n    useLink: boolean;\n    field: RelationshipSchema;\n  };\n\n  // link case\n  if (useLink) {\n    const adapter = store.adapterFor(record.type);\n    /*\n    If a relationship was originally populated by the adapter as a link\n    (as opposed to a list of IDs), this method is called when the\n    relationship is fetched.\n\n    The link (which is usually a URL) is passed through unchanged, so the\n    adapter can make whatever request it wants.\n\n    The usual use-case is for the server to register a URL as a link, and\n    then use that URL in the future to make a request for the relationship.\n  */\n    assert(`You tried to load a hasMany relationship but you have no adapter (for ${record.type})`, adapter);\n    assert(\n      `You tried to load a hasMany relationship from a specified 'link' in the original payload but your adapter does not implement 'findHasMany'`,\n      typeof adapter.findHasMany === 'function'\n    );\n\n    return _findHasMany(adapter, store, record, links!.related, field, options) as Promise<T>;\n  }\n\n  // identifiers case\n\n  const fetches = new Array<globalThis.Promise<StableRecordIdentifier>>(identifiers!.length);\n  const manager = store._fetchManager;\n\n  for (let i = 0; i < identifiers!.length; i++) {\n    let identifier = identifiers![i];\n    // TODO we probably can be lenient here and return from cache for the isNew case\n    assertIdentifierHasId(identifier);\n    fetches[i] = options.reload\n      ? manager.scheduleFetch(identifier, options, context.request)\n      : manager.fetchDataIfNeededForIdentifier(identifier, options, context.request);\n  }\n\n  return Promise.all(fetches) as Promise<T>;\n}\n\nfunction saveRecord<T>(context: StoreRequestContext): Promise<T> {\n  const { store, data, op: operation } = context.request;\n  const { options, record: identifier } = data as { record: StableRecordIdentifier; options: Record<string, unknown> };\n\n  const saveOptions = Object.assign(\n    { [SaveOp]: operation as 'updateRecord' | 'deleteRecord' | 'createRecord' },\n    options\n  );\n  const fetchManagerPromise = store._fetchManager.scheduleSave(identifier, saveOptions);\n\n  return fetchManagerPromise\n    .then((payload) => {\n      if (LOG_PAYLOADS) {\n        try {\n          let data: unknown = payload ? JSON.parse(JSON.stringify(payload)) : payload;\n          // eslint-disable-next-line no-console\n          console.log(`EmberData | Payload - ${operation!}`, data);\n        } catch (e) {\n          // eslint-disable-next-line no-console\n          console.log(`EmberData | Payload - ${operation!}`, payload);\n        }\n      }\n      let result: SingleResourceDataDocument;\n      /*\n      // TODO @runspired re-evaluate the below claim now that\n      // the save request pipeline is more streamlined.\n\n      Note to future spelunkers hoping to optimize.\n      We rely on this `run` to create a run loop if needed\n      that `store._push` and `store.saveRecord` will both share.\n\n      We use `join` because it is often the case that we\n      have an outer run loop available still from the first\n      call to `store._push`;\n     */\n      store._join(() => {\n        result = store.cache.didCommit(identifier, { request: context.request, content: payload });\n      });\n      return store.peekRecord(result!.data!);\n    })\n    .catch((e: unknown) => {\n      let err = e;\n      if (!e) {\n        err = new Error(`Unknown Error Occurred During Request`);\n      } else if (typeof e === 'string') {\n        err = new Error(e);\n      }\n      adapterDidInvalidate(store, identifier, err as Error);\n      throw err;\n    }) as Promise<T>;\n}\n\nfunction adapterDidInvalidate(\n  store: Store,\n  identifier: StableRecordIdentifier,\n  error: Error & { errors?: JsonApiError[]; isAdapterError?: true; code?: string }\n) {\n  if (error && error.isAdapterError === true && error.code === 'InvalidError') {\n    let serializer = store.serializerFor(identifier.type) as SerializerWithParseErrors;\n\n    // TODO @deprecate extractErrors being called\n    // TODO remove extractErrors from the default serializers.\n    if (serializer && typeof serializer.extractErrors === 'function') {\n      let errorsHash = serializer.extractErrors(store, store.modelFor(identifier.type), error, identifier.id) as Record<\n        string,\n        string | string[]\n      >;\n      error.errors = errorsHashToArray(errorsHash);\n    }\n  }\n  const cache = store.cache;\n\n  if (error.errors) {\n    assert(\n      `Expected the cache in use by resource ${String(\n        identifier\n      )} to have a getErrors(identifier) method for retreiving errors.`,\n      typeof cache.getErrors === 'function'\n    );\n\n    let jsonApiErrors: JsonApiError[] = error.errors;\n    if (jsonApiErrors.length === 0) {\n      jsonApiErrors = [{ title: 'Invalid Error', detail: '', source: { pointer: '/data' } }];\n    }\n    cache.commitWasRejected(identifier, jsonApiErrors);\n  } else {\n    cache.commitWasRejected(identifier);\n  }\n}\n\nfunction makeArray<T>(value: T | T[]): T[] {\n  return Array.isArray(value) ? value : [value];\n}\n\nconst PRIMARY_ATTRIBUTE_KEY = 'base';\nfunction errorsHashToArray(errors: Record<string, string | string[]>): JsonApiError[] {\n  const out: JsonApiError[] = [];\n\n  if (errors) {\n    Object.keys(errors).forEach((key) => {\n      let messages = makeArray(errors[key]);\n      for (let i = 0; i < messages.length; i++) {\n        let title = 'Invalid Attribute';\n        let pointer = `/data/attributes/${key}`;\n        if (key === PRIMARY_ATTRIBUTE_KEY) {\n          title = 'Invalid Document';\n          pointer = `/data`;\n        }\n        out.push({\n          title: title,\n          detail: messages[i],\n          source: {\n            pointer: pointer,\n          },\n        });\n      }\n    });\n  }\n\n  return out;\n}\n\nfunction findRecord<T>(context: StoreRequestContext): Promise<T> {\n  const { store, data } = context.request;\n  const { record: identifier, options } = data as {\n    record: StableExistingRecordIdentifier;\n    options: { reload?: boolean; backgroundReload?: boolean };\n  };\n  let promise: Promise<StableRecordIdentifier>;\n\n  // if not loaded start loading\n  if (!store._instanceCache.recordIsLoaded(identifier)) {\n    promise = store._fetchManager.fetchDataIfNeededForIdentifier(identifier, options, context.request);\n\n    // Refetch if the reload option is passed\n  } else if (options.reload) {\n    assertIdentifierHasId(identifier);\n\n    promise = store._fetchManager.scheduleFetch(identifier, options, context.request);\n  } else {\n    let snapshot: Snapshot | null = null;\n    let adapter = store.adapterFor(identifier.type);\n\n    // Refetch the record if the adapter thinks the record is stale\n    if (\n      typeof options.reload === 'undefined' &&\n      adapter.shouldReloadRecord &&\n      adapter.shouldReloadRecord(store, (snapshot = store._fetchManager.createSnapshot(identifier, options)))\n    ) {\n      assertIdentifierHasId(identifier);\n      if (DEBUG) {\n        promise = store._fetchManager.scheduleFetch(\n          identifier,\n          Object.assign({}, options, { reload: true }),\n          context.request\n        );\n      } else {\n        options.reload = true;\n        promise = store._fetchManager.scheduleFetch(identifier, options, context.request);\n      }\n    } else {\n      // Trigger the background refetch if backgroundReload option is passed\n      if (\n        options.backgroundReload !== false &&\n        (options.backgroundReload ||\n          !adapter.shouldBackgroundReloadRecord ||\n          adapter.shouldBackgroundReloadRecord(\n            store,\n            (snapshot = snapshot || store._fetchManager.createSnapshot(identifier, options))\n          ))\n      ) {\n        assertIdentifierHasId(identifier);\n\n        if (DEBUG) {\n          void store._fetchManager.scheduleFetch(\n            identifier,\n            Object.assign({}, options, { backgroundReload: true }),\n            context.request\n          );\n        } else {\n          options.backgroundReload = true;\n          void store._fetchManager.scheduleFetch(identifier, options, context.request);\n        }\n      }\n\n      // Return the cached record\n      promise = Promise.resolve(identifier) as Promise<StableRecordIdentifier>;\n    }\n  }\n\n  return promise.then((identifier: StableRecordIdentifier) => store.peekRecord(identifier)) as Promise<T>;\n}\n\nfunction findAll<T>(context: StoreRequestContext): Promise<T> {\n  const { store, data } = context.request;\n  const { type, options } = data as {\n    type: string;\n    options: { reload?: boolean; backgroundReload?: boolean };\n  };\n  const adapter = store.adapterFor(type);\n\n  assert(`You tried to load all records but you have no adapter (for ${type})`, adapter);\n  assert(\n    `You tried to load all records but your adapter does not implement 'findAll'`,\n    typeof adapter.findAll === 'function'\n  );\n\n  // avoid initializing the liveArray just to set `isUpdating`\n  const maybeRecordArray = store.recordArrayManager._live.get(type);\n  const snapshotArray = new SnapshotRecordArray(store, type, options);\n\n  const shouldReload =\n    options.reload ||\n    (options.reload !== false &&\n      ((adapter.shouldReloadAll && adapter.shouldReloadAll(store, snapshotArray)) ||\n        (!adapter.shouldReloadAll && snapshotArray.length === 0)));\n\n  let fetch: Promise<T> | undefined;\n  if (shouldReload) {\n    maybeRecordArray && (maybeRecordArray.isUpdating = true);\n    fetch = _findAll(adapter, store, type, snapshotArray, context.request, true);\n  } else {\n    fetch = Promise.resolve(store.peekAll(type)) as Promise<T>;\n\n    if (\n      options.backgroundReload ||\n      (options.backgroundReload !== false &&\n        (!adapter.shouldBackgroundReloadAll || adapter.shouldBackgroundReloadAll(store, snapshotArray)))\n    ) {\n      maybeRecordArray && (maybeRecordArray.isUpdating = true);\n      void _findAll(adapter, store, type, snapshotArray, context.request, false);\n    }\n  }\n\n  return fetch;\n}\n\nfunction _findAll<T>(\n  adapter: MinimumAdapterInterface,\n  store: Store,\n  type: string,\n  snapshotArray: SnapshotRecordArray,\n  request: StoreRequestInfo,\n  isAsyncFlush: boolean\n): Promise<T> {\n  const schema = store.modelFor(type);\n  let promise: Promise<T> = Promise.resolve().then(() =>\n    adapter.findAll(store, schema, null, snapshotArray)\n  ) as Promise<T>;\n\n  promise = promise.then((adapterPayload: T) => {\n    assert(\n      `You made a 'findAll' request for '${type}' records, but the adapter's response did not have any data`,\n      payloadIsNotBlank(adapterPayload)\n    );\n    const serializer = store.serializerFor(type);\n    const payload = normalizeResponseHelper(serializer, store, schema, adapterPayload, null, 'findAll');\n\n    store._push(payload, isAsyncFlush);\n    snapshotArray._recordArray.isUpdating = false;\n\n    if (LOG_PAYLOADS) {\n      // eslint-disable-next-line no-console\n      console.log(`request: findAll<${type}> background reload complete`);\n    }\n    return snapshotArray._recordArray;\n  }) as Promise<T>;\n\n  if (TESTING) {\n    if (!request.disableTestWaiter) {\n      const { waitForPromise } = importSync('@ember/test-waiters') as {\n        waitForPromise: <T>(promise: Promise<T>) => Promise<T>;\n      };\n      promise = waitForPromise(promise);\n    }\n  }\n\n  return promise;\n}\n\nfunction query<T>(context: StoreRequestContext): Promise<T> {\n  const { store, data } = context.request;\n  let { options } = data as {\n    options: { _recordArray?: Collection; adapterOptions?: Record<string, unknown> };\n  };\n  const { type, query } = data as {\n    type: string;\n    query: Record<string, unknown>;\n    options: { _recordArray?: Collection; adapterOptions?: Record<string, unknown> };\n  };\n  const adapter = store.adapterFor(type);\n\n  assert(`You tried to make a query but you have no adapter (for ${type})`, adapter);\n  assert(`You tried to make a query but your adapter does not implement 'query'`, typeof adapter.query === 'function');\n\n  const recordArray =\n    options._recordArray ||\n    store.recordArrayManager.createArray({\n      type,\n      query,\n    });\n\n  if (DEBUG) {\n    options = Object.assign({}, options);\n    delete options._recordArray;\n  } else {\n    delete options._recordArray;\n  }\n  const schema = store.modelFor(type);\n  let promise = Promise.resolve().then(() => adapter.query(store, schema, query, recordArray, options));\n\n  return promise.then((adapterPayload) => {\n    const serializer = store.serializerFor(type);\n    const payload = normalizeResponseHelper(\n      serializer,\n      store,\n      schema,\n      adapterPayload as Record<string, unknown>,\n      null,\n      'query'\n    );\n    const identifiers = store._push(payload, true);\n\n    assert(\n      'The response to store.query is expected to be an array but it was a single record. Please wrap your response in an array or use `store.queryRecord` to query for a single record.',\n      Array.isArray(identifiers)\n    );\n\n    store.recordArrayManager.populateManagedArray(recordArray, identifiers, payload as CollectionResourceDocument);\n\n    return recordArray;\n  }) as Promise<T>;\n}\n\nfunction assertSingleResourceDocument(payload: JsonApiDocument): asserts payload is SingleResourceDocument {\n  assert(\n    `Expected the primary data returned by the serializer for a 'queryRecord' response to be a single object or null but instead it was an array.`,\n    !Array.isArray(payload.data)\n  );\n}\n\nfunction queryRecord<T>(context: StoreRequestContext): Promise<T> {\n  const { store, data } = context.request;\n  const { type, query, options } = data as { type: string; query: Record<string, unknown>; options: object };\n  const adapter = store.adapterFor(type);\n\n  assert(`You tried to make a query but you have no adapter (for ${type})`, adapter);\n  assert(\n    `You tried to make a query but your adapter does not implement 'queryRecord'`,\n    typeof adapter.queryRecord === 'function'\n  );\n\n  const schema = store.modelFor(type);\n  let promise = Promise.resolve().then(() => adapter.queryRecord(store, schema, query, options)) as Promise<T>;\n\n  return promise.then((adapterPayload: T) => {\n    const serializer = store.serializerFor(type);\n    const payload = normalizeResponseHelper(\n      serializer,\n      store,\n      schema,\n      adapterPayload as Record<string, unknown>,\n      null,\n      'queryRecord'\n    );\n\n    assertSingleResourceDocument(payload);\n\n    const identifier = store._push(payload, true) as StableRecordIdentifier;\n    return identifier ? store.peekRecord(identifier) : null;\n  }) as Promise<T>;\n}\n"],"names":["PotentialLegacyOperations","Set","LegacyNetworkHandler","request","context","next","url","op","has","store","_fetchManager","FetchManager","findRecord","findAll","query","queryRecord","findBelongsTo","findHasMany","saveRecord","data","records","identifiers","options","record","links","useLink","field","identifier","pendingRequest","getPendingFetch","_findBelongsTo","related","assert","Array","isArray","length","manager","assertIdentifierHasId","reload","scheduleFetch","fetchDataIfNeededForIdentifier","adapter","adapterFor","type","_findHasMany","fetches","i","Promise","all","operation","saveOptions","Object","assign","SaveOp","fetchManagerPromise","scheduleSave","then","payload","macroCondition","getOwnConfig","debug","LOG_PAYLOADS","JSON","parse","stringify","console","log","e","result","_join","cache","didCommit","content","peekRecord","catch","err","Error","adapterDidInvalidate","error","isAdapterError","code","serializer","serializerFor","extractErrors","errorsHash","modelFor","id","errors","errorsHashToArray","String","getErrors","jsonApiErrors","title","detail","source","pointer","commitWasRejected","makeArray","value","PRIMARY_ATTRIBUTE_KEY","out","keys","forEach","key","messages","push","promise","_instanceCache","recordIsLoaded","snapshot","shouldReloadRecord","createSnapshot","env","DEBUG","backgroundReload","shouldBackgroundReloadRecord","resolve","maybeRecordArray","recordArrayManager","_live","get","snapshotArray","SnapshotRecordArray","shouldReload","shouldReloadAll","fetch","isUpdating","_findAll","peekAll","shouldBackgroundReloadAll","isAsyncFlush","schema","adapterPayload","payloadIsNotBlank","normalizeResponseHelper","_push","_recordArray","TESTING","disableTestWaiter","waitForPromise","importSync","recordArray","createArray","populateManagedArray","assertSingleResourceDocument"],"mappings":";;;;;AAOO,SAAS,YAAY,CAAC,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,YAAY,EAAE,OAAO,EAAE;AACtF,EAAE,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,MAAM;AAC7C,IAAI,MAAM,QAAQ,GAAG,KAAK,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;AAC7E,IAAI,IAAI,OAAO,GAAG,CAAC,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,CAAC;AACpD,IAAI,IAAI,WAAW,GAAG,OAAO,GAAG,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AACjD,IAAI,OAAO,OAAO,CAAC,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;AAC3E,GAAG,CAAC,CAAC;AACL;AACA,EAAE,OAAO,GAAG,OAAO,CAAC,IAAI;AACxB,IAAI,CAAC,cAAc,KAAK;AACxB,MAAM,MAAM;AACZ,QAAQ,CAAC,uCAAuC,EAAE,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC,GAAG,CAAC,4BAA4B,EAAE,IAAI,CAAC,oDAAoD,CAAC;AACjL,QAAQ,iBAAiB,CAAC,cAAc,CAAC;AACzC,OAAO,CAAC;AACR,MAAM,MAAM,UAAU,GAAG,KAAK,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;AAC3D;AACA,MAAM,IAAI,UAAU,GAAG,KAAK,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;AAC9D,MAAM,IAAI,OAAO,GAAG,uBAAuB,CAAC,UAAU,EAAE,KAAK,EAAE,UAAU,EAAE,cAAc,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;AAChH;AACA,MAAM,MAAM;AACZ,QAAQ,CAAC,kCAAkC,EAAE,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE,UAAU,CAAC,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC,yGAAyG,CAAC;AACrO,QAAQ,MAAM,IAAI,OAAO,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;AACxD,OAAO,CAAC;AACR;AACA,MAAM,OAAO,GAAG,4BAA4B,CAAC,KAAK,EAAE,OAAO,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;AACvF,MAAM,OAAO,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AACxC,KAAK;AACL,IAAI,IAAI;AACR,IAAI,CAAC,wBAAwB,EAAE,UAAU,CAAC,IAAI,CAAC,aAAa,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;AAClF,GAAG,CAAC;AACJ;AACA,EAAE,OAAO,OAAO,CAAC;AACjB,CAAC;AACD;AACO,SAAS,cAAc,CAAC,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,YAAY,EAAE,OAAO,EAAE;AAC/E,EAAE,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,MAAM;AAC7C,IAAI,IAAI,OAAO,GAAG,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AACpD,IAAI,MAAM,CAAC,CAAC,wEAAwE,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;AACnH,IAAI,MAAM;AACV,MAAM,CAAC,8IAA8I,CAAC;AACtJ,MAAM,OAAO,OAAO,CAAC,aAAa,KAAK,UAAU;AACjD,KAAK,CAAC;AACN,IAAI,IAAI,QAAQ,GAAG,KAAK,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;AAC3E,IAAI,IAAI,OAAO,GAAG,CAAC,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,CAAC;AACpD,IAAI,IAAI,WAAW,GAAG,OAAO,GAAG,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AACjD,IAAI,OAAO,OAAO,CAAC,aAAa,CAAC,KAAK,EAAE,QAAQ,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;AAC7E,GAAG,CAAC,CAAC;AACL;AACA,EAAE,OAAO,GAAG,OAAO,CAAC,IAAI;AACxB,IAAI,CAAC,cAAc,KAAK;AACxB,MAAM,IAAI,UAAU,GAAG,KAAK,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;AACzD,MAAM,IAAI,UAAU,GAAG,KAAK,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;AAC9D,MAAM,IAAI,OAAO,GAAG,uBAAuB,CAAC,UAAU,EAAE,KAAK,EAAE,UAAU,EAAE,cAAc,EAAE,IAAI,EAAE,eAAe,CAAC,CAAC;AAClH;AACA,MAAM,MAAM;AACZ,QAAQ,CAAC,oCAAoC,EAAE,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE,UAAU,CAAC,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC,2GAA2G,CAAC;AACzO,QAAQ,MAAM,IAAI,OAAO;AACzB,WAAW,OAAO,CAAC,IAAI,KAAK,IAAI,KAAK,OAAO,OAAO,CAAC,IAAI,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;AACvG,OAAO,CAAC;AACR;AACA,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;AAC5D,QAAQ,OAAO,IAAI,CAAC;AACpB,OAAO;AACP;AACA,MAAM,OAAO,GAAG,4BAA4B,CAAC,KAAK,EAAE,OAAO,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;AACvF;AACA,MAAM,OAAO,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AACxC,KAAK;AACL,IAAI,IAAI;AACR,IAAI,CAAC,uBAAuB,EAAE,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;AACtE,GAAG,CAAC;AACJ;AACA,EAAE,OAAO,OAAO,CAAC;AACjB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,4BAA4B,CAAC,KAAK,EAAE,OAAO,EAAE,gBAAgB,EAAE,YAAY,EAAE;AACtF;AACA;AACA,EAAE,IAAI,gBAAgB,GAAG,OAAO,CAAC,IAAI;AACrC,MAAM,WAAW,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,KAAK,KAAK;AACjD,QAAQ,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;AAClC,QAAQ,+BAA+B,CAAC,IAAI,EAAE,gBAAgB,EAAE,KAAK,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;AAC5F,QAAQ,OAAO,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC;AAC5B,OAAO,CAAC;AACR,MAAM,IAAI,CAAC;AACX;AACA,EAAE,MAAM,eAAe,GAAG,EAAE,CAAC;AAC7B;AACA,EAAE,IAAI,MAAM,IAAI,OAAO,EAAE;AACzB,IAAI,eAAe,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;AACxC,GAAG;AACH,EAAE,IAAI,OAAO,IAAI,OAAO,EAAE;AAC1B,IAAI,eAAe,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;AAC1C,GAAG;AACH,EAAE,IAAI,MAAM,IAAI,OAAO,EAAE;AACzB,IAAI,eAAe,CAAC,IAAI,GAAG,gBAAgB,CAAC;AAC5C,GAAG;AACH;AACA;AACA;AACA,EAAE,MAAM,aAAa,GAAG;AACxB,IAAI,EAAE,EAAE,gBAAgB,CAAC,EAAE;AAC3B,IAAI,IAAI,EAAE,gBAAgB,CAAC,IAAI;AAC/B,IAAI,aAAa,EAAE;AACnB,MAAM,CAAC,YAAY,CAAC,GAAG,GAAG,eAAe;AACzC,KAAK;AACL,GAAG,CAAC;AACJ;AACA,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;AACxC,IAAI,OAAO,CAAC,QAAQ,GAAG,EAAE,CAAC;AAC1B,GAAG;AACH,EAAE,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AACvC;AACA,EAAE,OAAO,OAAO,CAAC;AACjB,CAAC;AACD;AACA,SAAS,+BAA+B,CAAC,OAAO,EAAE,gBAAgB,EAAE,KAAK,EAAE,kBAAkB,EAAE,KAAK,EAAE;AACtG,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;AAC7B;AACA,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE;AAC9B,IAAI,OAAO,CAAC,aAAa,GAAG,EAAE,CAAC;AAC/B,GAAG;AACH,EAAE,IAAI,EAAE,aAAa,EAAE,GAAG,OAAO,CAAC;AAClC;AACA,EAAE,IAAI,OAAO,GAAG,UAAU,CAAC,KAAK,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,IAAI,CAAC,CAAC;AAC9E,EAAE,IAAI,OAAO,EAAE;AACf,IAAI,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;AACvC;AACA,IAAI,IAAI,gBAAgB,GAAG,aAAa,CAAC,UAAU,CAAC,IAAI,aAAa,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC;AACvF;AACA,IAAI,IAAI,KAAK,EAAE;AACf,MAAM;AACN,QAAQ,OAAO,gBAAgB,KAAK,WAAW;AAC/C,QAAQ,CAAC,8BAA8B,CAAC,gBAAgB,EAAE,gBAAgB,CAAC;AAC3E,QAAQ;AACR,QAAQ,IAAI,OAAO,GAAG,SAAS,OAAO,CAAC,KAAK,EAAE;AAC9C,UAAU,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,SAAS,CAAC;AACV,QAAQ,IAAI,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACvC,QAAQ,IAAI,aAAa,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAChD,QAAQ,IAAI,QAAQ,GAAG,OAAO,CAAC;AAC/B,UAAU,EAAE,EAAE,gBAAgB,CAAC,EAAE;AACjC,UAAU,IAAI,EAAE,gBAAgB,CAAC,IAAI;AACrC,SAAS,CAAC,CAAC;AACX,QAAQ,IAAI,aAAa,GAAG,CAAC,EAAE,gBAAgB,CAAC,IAAI,CAAC,CAAC,EAAE,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC;AAC9E,QAAQ,IAAI,GAAG,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAC5C,QAAQ,IAAI,MAAM,GAAG,OAAO,KAAK,KAAK,QAAQ,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC3E,QAAQ,IAAI,IAAI,GAAG,CAAC,EAAE,MAAM,CAAC,eAAe,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC;AAChE,QAAQ,IAAI,KAAK,GAAG,gBAAgB,GAAG,CAAC,CAAC,EAAE,gBAAgB,CAAC,IAAI,CAAC,CAAC,EAAE,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;AAClG,QAAQ,IAAI,mBAAmB,GAAG,CAAC,EAAE,aAAa,CAAC,CAAC,EAAE,kBAAkB,CAAC,IAAI,CAAC,EAAE,EAAE,kBAAkB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAC9G,QAAQ,IAAI,cAAc,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AAC/C,QAAQ,IAAI,OAAO,GAAG;AACtB,UAAU,CAAC,yDAAyD,EAAE,IAAI,CAAC,qBAAqB,EAAE,mBAAmB,CAAC,YAAY,EAAE,QAAQ,CAAC,SAAS,EAAE,GAAG,CAAC,WAAW,CAAC;AACxK,UAAU,CAAC,IAAI,EAAE,cAAc,CAAC,kBAAkB,EAAE,MAAM,CAAC,0BAA0B,EAAE,KAAK,CAAC,QAAQ,EAAE,aAAa,CAAC,4BAA4B,EAAE,aAAa,CAAC,2DAA2D,EAAE,aAAa,CAAC,SAAS,CAAC;AACtP,UAAU,CAAC,sCAAsC,EAAE,mBAAmB,CAAC,gCAAgC,EAAE,UAAU,CAAC,gCAAgC,EAAE,aAAa,CAAC,qCAAqC,EAAE,gBAAgB,CAAC,IAAI,CAAC,gBAAgB,CAAC;AAClP,UAAU,CAAC,6BAA6B,EAAE,cAAc,CAAC,UAAU,EAAE,aAAa,CAAC,iBAAiB,EAAE,aAAa,CAAC,SAAS,EAAE,mBAAmB,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC,CAAC;AACpL,UAAU,CAAC,0HAA0H,EAAE,UAAU,CAAC,sBAAsB,EAAE,aAAa,CAAC,UAAU,EAAE,aAAa,CAAC,cAAc,EAAE,aAAa,CAAC,gCAAgC,CAAC;AACjR,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACrB;AACA,QAAQ,MAAM,CAAC,OAAO,CAAC,CAAC;AACxB,OAAO;AACP,KAAK;AACL;AACA,IAAI,IAAI,IAAI,KAAK,SAAS,IAAI,OAAO,gBAAgB,KAAK,WAAW,EAAE;AACvE,MAAM,aAAa,CAAC,UAAU,CAAC,GAAG,aAAa,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;AAClE,MAAM,aAAa,CAAC,UAAU,CAAC,CAAC,IAAI,GAAG,mBAAmB,CAAC,gBAAgB,EAAE,IAAI,EAAE,gBAAgB,CAAC,CAAC;AACrG,KAAK;AACL,GAAG;AACH,CAAC;AACD;AACA,SAAS,sBAAsB,CAAC,KAAK,EAAE,UAAU,EAAE,GAAG,EAAE;AACxD,EAAE,MAAM,UAAU,GAAG,KAAK,CAAC,0BAA0B,EAAE,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC;AACpG,EAAE,IAAI,CAAC,UAAU,EAAE;AACnB,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG;AACH;AACA,EAAE,MAAM;AACR,IAAI,CAAC,wEAAwE,CAAC;AAC9E,IAAI,UAAU,CAAC,OAAO,EAAE,OAAO,KAAK,IAAI;AACxC,OAAO,OAAO,UAAU,CAAC,OAAO,EAAE,OAAO,KAAK,QAAQ,IAAI,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;AAChG,GAAG,CAAC;AACJ,EAAE,OAAO,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC;AACpC,CAAC;AACD;AACA,SAAS,UAAU,CAAC,KAAK,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,IAAI,EAAE;AACvE,EAAE,IAAI,EAAE,IAAI,EAAE,oBAAoB,EAAE,GAAG,kBAAkB,CAAC;AAC1D,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,gBAAgB,CAAC;AAC9C,EAAE,IAAI,UAAU,GAAG,sBAAsB,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE,EAAE,oBAAoB,CAAC,CAAC;AAC7F;AACA,EAAE,IAAI,UAAU,EAAE;AAClB,IAAI,MAAM,UAAU,GAAG,KAAK,CAAC,0BAA0B,EAAE,CAAC,0BAA0B,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;AAC/F,IAAI,IAAI,EAAE,IAAI,EAAE,GAAG,UAAU,CAAC,UAAU,CAAC,CAAC;AAC1C,IAAI,OAAO;AACX,MAAM,UAAU;AAChB,MAAM,IAAI;AACV,KAAK,CAAC;AACN,GAAG;AACH,CAAC;AACD;AACA,SAAS,8BAA8B,CAAC,gBAAgB,EAAE,UAAU,EAAE;AACtE,EAAE,IAAI,gBAAgB,KAAK,IAAI,EAAE;AACjC,IAAI,OAAO,KAAK,CAAC;AACjB,GAAG;AACH;AACA,EAAE,IAAI,KAAK,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE;AACvC,IAAI,IAAI,gBAAgB,CAAC,MAAM,KAAK,CAAC,EAAE;AACvC,MAAM,OAAO,KAAK,CAAC;AACnB,KAAK;AACL,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,gBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACtD,MAAM,IAAI,KAAK,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;AACtC,MAAM,IAAI,yBAAyB,CAAC,KAAK,EAAE,UAAU,CAAC,EAAE;AACxD,QAAQ,OAAO,IAAI,CAAC;AACpB,OAAO;AACP,KAAK;AACL,GAAG,MAAM;AACT,IAAI,OAAO,yBAAyB,CAAC,gBAAgB,EAAE,UAAU,CAAC,CAAC;AACnE,GAAG;AACH;AACA,EAAE,OAAO,KAAK,CAAC;AACf,CAAC;AACD;AACA,SAAS,mBAAmB,CAAC,gBAAgB,EAAE,gBAAgB,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE;AAC/E,EAAE,IAAI,sBAAsB,GAAG;AAC/B,IAAI,EAAE;AACN,IAAI,IAAI;AACR,GAAG,CAAC;AACJ;AACA,EAAE,IAAI,OAAO,CAAC;AACd;AACA,EAAE,IAAI,gBAAgB,KAAK,SAAS,EAAE;AACtC,IAAI,OAAO,GAAG,gBAAgB,IAAI,EAAE,CAAC;AACrC,IAAI,IAAI,gBAAgB,EAAE;AAC1B;AACA;AACA;AACA,MAAM,IAAI,KAAK,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK;AAC/C,QAAQ,OAAO,CAAC,CAAC,IAAI,KAAK,sBAAsB,CAAC,IAAI,IAAI,CAAC,CAAC,EAAE,KAAK,sBAAsB,CAAC,EAAE,CAAC;AAC5F,OAAO,CAAC,CAAC;AACT,MAAM,IAAI,CAAC,KAAK,EAAE;AAClB,QAAQ,OAAO,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;AAC7C,OAAO;AACP,KAAK,MAAM;AACX,MAAM,OAAO,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;AAC3C,KAAK;AACL,GAAG,MAAM;AACT,IAAI,OAAO,GAAG,gBAAgB,IAAI,EAAE,CAAC;AACrC,IAAI,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,sBAAsB,CAAC,CAAC;AACnD,GAAG;AACH;AACA,EAAE,OAAO,OAAO,CAAC;AACjB,CAAC;AACD;AACA,SAAS,yBAAyB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,aAAa,EAAE,EAAE;AAClE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,QAAQ,EAAE,KAAK,aAAa,CAAC;AAC/C;;ACrOA,MAAMA,yBAAyB,GAAG,IAAIC,GAAG,CAAC,CACxC,YAAY,EACZ,SAAS,EACT,OAAO,EACP,aAAa,EACb,eAAe,EACf,aAAa,EACb,cAAc,EACd,cAAc,EACd,cAAc,CACf,CAAC,CAAA;AAEK,MAAMC,oBAA6B,GAAG;AAC3CC,EAAAA,OAAOA,CAAIC,OAA4B,EAAEC,IAAe,EAAc;AACpE;IACA,IAAID,OAAO,CAACD,OAAO,CAACG,GAAG,IAAI,CAACF,OAAO,CAACD,OAAO,CAACI,EAAE,IAAI,CAACP,yBAAyB,CAACQ,GAAG,CAACJ,OAAO,CAACD,OAAO,CAACI,EAAE,CAAC,EAAE;AACpG,MAAA,OAAOF,IAAI,CAACD,OAAO,CAACD,OAAO,CAAC,CAAA;AAC9B,KAAA;IAEA,MAAM;AAAEM,MAAAA,KAAAA;KAAO,GAAGL,OAAO,CAACD,OAAO,CAAA;AACjC,IAAA,IAAI,CAACM,KAAK,CAACC,aAAa,EAAE;AACxBD,MAAAA,KAAK,CAACC,aAAa,GAAG,IAAIC,YAAY,CAACF,KAAK,CAAC,CAAA;AAC/C,KAAA;AAEA,IAAA,QAAQL,OAAO,CAACD,OAAO,CAACI,EAAE;AACxB,MAAA,KAAK,YAAY;QACf,OAAOK,UAAU,CAACR,OAAO,CAAC,CAAA;AAC5B,MAAA,KAAK,SAAS;QACZ,OAAOS,OAAO,CAACT,OAAO,CAAC,CAAA;AACzB,MAAA,KAAK,OAAO;QACV,OAAOU,KAAK,CAACV,OAAO,CAAC,CAAA;AACvB,MAAA,KAAK,aAAa;QAChB,OAAOW,WAAW,CAACX,OAAO,CAAC,CAAA;AAC7B,MAAA,KAAK,eAAe;QAClB,OAAOY,aAAa,CAACZ,OAAO,CAAC,CAAA;AAC/B,MAAA,KAAK,aAAa;QAChB,OAAOa,WAAW,CAACb,OAAO,CAAC,CAAA;AAC7B,MAAA,KAAK,cAAc;QACjB,OAAOc,UAAU,CAACd,OAAO,CAAC,CAAA;AAC5B,MAAA,KAAK,cAAc;QACjB,OAAOc,UAAU,CAACd,OAAO,CAAC,CAAA;AAC5B,MAAA,KAAK,cAAc;QACjB,OAAOc,UAAU,CAACd,OAAO,CAAC,CAAA;AAC5B,MAAA;AACE,QAAA,OAAOC,IAAI,CAACD,OAAO,CAACD,OAAO,CAAC,CAAA;AAChC,KAAA;AACF,GAAA;AACF,EAAC;AAED,SAASa,aAAaA,CAAIZ,OAA4B,EAAc;EAClE,MAAM;IAAEK,KAAK;IAAEU,IAAI;AAAEC,IAAAA,OAAO,EAAEC,WAAAA;GAAa,GAAGjB,OAAO,CAACD,OAAO,CAAA;EAC7D,MAAM;IAAEmB,OAAO;IAAEC,MAAM;IAAEC,KAAK;IAAEC,OAAO;AAAEC,IAAAA,KAAAA;AAAM,GAAC,GAAGP,IAMlD,CAAA;AACD,EAAA,MAAMQ,UAAU,GAAGN,WAAW,GAAG,CAAC,CAAC,CAAA;;AAEnC;AACA,EAAA,IAAIO,cAAc,GAChBD,UAAU,IAAIlB,KAAK,CAACC,aAAa,CAACmB,eAAe,CAACF,UAAU,EAAoCL,OAAO,CAAC,CAAA;AAC1G,EAAA,IAAIM,cAAc,EAAE;AAClB,IAAA,OAAOA,cAAc,CAAA;AACvB,GAAA;AAEA,EAAA,IAAIH,OAAO,EAAE;AACX,IAAA,OAAOK,cAAc,CAACrB,KAAK,EAAEc,MAAM,EAAEC,KAAK,CAAEO,OAAO,EAAEL,KAAK,EAAEJ,OAAO,CAAC,CAAA;AACtE,GAAA;AAEAU,EAAAA,MAAM,CAAE,CAAA,sBAAA,CAAuB,EAAEC,KAAK,CAACC,OAAO,CAACb,WAAW,CAAC,IAAIA,WAAW,CAACc,MAAM,KAAK,CAAC,CAAC,CAAA;AAExF,EAAA,MAAMC,OAAO,GAAG3B,KAAK,CAACC,aAAa,CAAA;EACnC2B,qBAAqB,CAACV,UAAW,CAAC,CAAA;AAElC,EAAA,OAAOL,OAAO,CAACgB,MAAM,GAChBF,OAAO,CAACG,aAAa,CAACZ,UAAU,EAAEL,OAAO,EAAElB,OAAO,CAACD,OAAO,CAAC,GAC3DiC,OAAO,CAACI,8BAA8B,CAACb,UAAU,EAAEL,OAAO,EAAElB,OAAO,CAACD,OAAO,CAAgB,CAAA;AAClG,CAAA;AAEA,SAASc,WAAWA,CAAIb,OAA4B,EAAc;EAChE,MAAM;IAAEK,KAAK;IAAEU,IAAI;AAAEC,IAAAA,OAAO,EAAEC,WAAAA;GAAa,GAAGjB,OAAO,CAACD,OAAO,CAAA;EAC7D,MAAM;IAAEmB,OAAO;IAAEC,MAAM;IAAEC,KAAK;IAAEC,OAAO;AAAEC,IAAAA,KAAAA;AAAM,GAAC,GAAGP,IAMlD,CAAA;;AAED;AACA,EAAA,IAAIM,OAAO,EAAE;IACX,MAAMgB,OAAO,GAAGhC,KAAK,CAACiC,UAAU,CAACnB,MAAM,CAACoB,IAAI,CAAC,CAAA;AAC7C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAGIX,MAAM,CAAE,yEAAwET,MAAM,CAACoB,IAAK,CAAE,CAAA,CAAA,EAAEF,OAAO,CAAC,CAAA;IACxGT,MAAM,CACH,4IAA2I,EAC5I,OAAOS,OAAO,CAACxB,WAAW,KAAK,UACjC,CAAC,CAAA;AAED,IAAA,OAAO2B,YAAY,CAACH,OAAO,EAAEhC,KAAK,EAAEc,MAAM,EAAEC,KAAK,CAAEO,OAAO,EAAEL,KAAK,EAAEJ,OAAO,CAAC,CAAA;AAC7E,GAAA;;AAEA;;EAEA,MAAMuB,OAAO,GAAG,IAAIZ,KAAK,CAA6CZ,WAAW,CAAEc,MAAM,CAAC,CAAA;AAC1F,EAAA,MAAMC,OAAO,GAAG3B,KAAK,CAACC,aAAa,CAAA;AAEnC,EAAA,KAAK,IAAIoC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGzB,WAAW,CAAEc,MAAM,EAAEW,CAAC,EAAE,EAAE;AAC5C,IAAA,IAAInB,UAAU,GAAGN,WAAW,CAAEyB,CAAC,CAAC,CAAA;AAChC;IACAT,qBAAqB,CAACV,UAAU,CAAC,CAAA;AACjCkB,IAAAA,OAAO,CAACC,CAAC,CAAC,GAAGxB,OAAO,CAACgB,MAAM,GACvBF,OAAO,CAACG,aAAa,CAACZ,UAAU,EAAEL,OAAO,EAAElB,OAAO,CAACD,OAAO,CAAC,GAC3DiC,OAAO,CAACI,8BAA8B,CAACb,UAAU,EAAEL,OAAO,EAAElB,OAAO,CAACD,OAAO,CAAC,CAAA;AAClF,GAAA;AAEA,EAAA,OAAO4C,OAAO,CAACC,GAAG,CAACH,OAAO,CAAC,CAAA;AAC7B,CAAA;AAEA,SAAS3B,UAAUA,CAAId,OAA4B,EAAc;EAC/D,MAAM;IAAEK,KAAK;IAAEU,IAAI;AAAEZ,IAAAA,EAAE,EAAE0C,SAAAA;GAAW,GAAG7C,OAAO,CAACD,OAAO,CAAA;EACtD,MAAM;IAAEmB,OAAO;AAAEC,IAAAA,MAAM,EAAEI,UAAAA;AAAW,GAAC,GAAGR,IAA4E,CAAA;AAEpH,EAAA,MAAM+B,WAAW,GAAGC,MAAM,CAACC,MAAM,CAC/B;AAAE,IAAA,CAACC,MAAM,GAAGJ,SAAAA;GAA+D,EAC3E3B,OACF,CAAC,CAAA;EACD,MAAMgC,mBAAmB,GAAG7C,KAAK,CAACC,aAAa,CAAC6C,YAAY,CAAC5B,UAAU,EAAEuB,WAAW,CAAC,CAAA;AAErF,EAAA,OAAOI,mBAAmB,CACvBE,IAAI,CAAEC,OAAO,IAAK;AACjB,IAAA,IAAAC,cAAA,CAAAC,YAAA,GAAAC,KAAA,CAAAC,YAAA,CAAkB,EAAA;MAChB,IAAI;AACF,QAAA,IAAI1C,IAAa,GAAGsC,OAAO,GAAGK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACP,OAAO,CAAC,CAAC,GAAGA,OAAO,CAAA;AAC3E;QACAQ,OAAO,CAACC,GAAG,CAAE,CAAA,sBAAA,EAAwBjB,SAAW,CAAC,CAAA,EAAE9B,IAAI,CAAC,CAAA;OACzD,CAAC,OAAOgD,CAAC,EAAE;AACV;QACAF,OAAO,CAACC,GAAG,CAAE,CAAA,sBAAA,EAAwBjB,SAAW,CAAC,CAAA,EAAEQ,OAAO,CAAC,CAAA;AAC7D,OAAA;AACF,KAAA;AACA,IAAA,IAAIW,MAAkC,CAAA;AACtC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAGM3D,KAAK,CAAC4D,KAAK,CAAC,MAAM;MAChBD,MAAM,GAAG3D,KAAK,CAAC6D,KAAK,CAACC,SAAS,CAAC5C,UAAU,EAAE;QAAExB,OAAO,EAAEC,OAAO,CAACD,OAAO;AAAEqE,QAAAA,OAAO,EAAEf,OAAAA;AAAQ,OAAC,CAAC,CAAA;AAC5F,KAAC,CAAC,CAAA;AACF,IAAA,OAAOhD,KAAK,CAACgE,UAAU,CAACL,MAAM,CAAEjD,IAAK,CAAC,CAAA;AACxC,GAAC,CAAC,CACDuD,KAAK,CAAEP,CAAU,IAAK;IACrB,IAAIQ,GAAG,GAAGR,CAAC,CAAA;IACX,IAAI,CAACA,CAAC,EAAE;AACNQ,MAAAA,GAAG,GAAG,IAAIC,KAAK,CAAE,uCAAsC,CAAC,CAAA;AAC1D,KAAC,MAAM,IAAI,OAAOT,CAAC,KAAK,QAAQ,EAAE;AAChCQ,MAAAA,GAAG,GAAG,IAAIC,KAAK,CAACT,CAAC,CAAC,CAAA;AACpB,KAAA;AACAU,IAAAA,oBAAoB,CAACpE,KAAK,EAAEkB,UAAU,EAAEgD,GAAY,CAAC,CAAA;AACrD,IAAA,MAAMA,GAAG,CAAA;AACX,GAAC,CAAC,CAAA;AACN,CAAA;AAEA,SAASE,oBAAoBA,CAC3BpE,KAAY,EACZkB,UAAkC,EAClCmD,KAAgF,EAChF;AACA,EAAA,IAAIA,KAAK,IAAIA,KAAK,CAACC,cAAc,KAAK,IAAI,IAAID,KAAK,CAACE,IAAI,KAAK,cAAc,EAAE;IAC3E,IAAIC,UAAU,GAAGxE,KAAK,CAACyE,aAAa,CAACvD,UAAU,CAACgB,IAAI,CAA8B,CAAA;;AAElF;AACA;IACA,IAAIsC,UAAU,IAAI,OAAOA,UAAU,CAACE,aAAa,KAAK,UAAU,EAAE;MAChE,IAAIC,UAAU,GAAGH,UAAU,CAACE,aAAa,CAAC1E,KAAK,EAAEA,KAAK,CAAC4E,QAAQ,CAAC1D,UAAU,CAACgB,IAAI,CAAC,EAAEmC,KAAK,EAAEnD,UAAU,CAAC2D,EAAE,CAGrG,CAAA;AACDR,MAAAA,KAAK,CAACS,MAAM,GAAGC,iBAAiB,CAACJ,UAAU,CAAC,CAAA;AAC9C,KAAA;AACF,GAAA;AACA,EAAA,MAAMd,KAAK,GAAG7D,KAAK,CAAC6D,KAAK,CAAA;EAEzB,IAAIQ,KAAK,CAACS,MAAM,EAAE;AAChBvD,IAAAA,MAAM,CACH,CAAA,sCAAA,EAAwCyD,MAAM,CAC7C9D,UACF,CAAE,CAAA,8DAAA,CAA+D,EACjE,OAAO2C,KAAK,CAACoB,SAAS,KAAK,UAC7B,CAAC,CAAA;AAED,IAAA,IAAIC,aAA6B,GAAGb,KAAK,CAACS,MAAM,CAAA;AAChD,IAAA,IAAII,aAAa,CAACxD,MAAM,KAAK,CAAC,EAAE;AAC9BwD,MAAAA,aAAa,GAAG,CAAC;AAAEC,QAAAA,KAAK,EAAE,eAAe;AAAEC,QAAAA,MAAM,EAAE,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,OAAO,EAAE,OAAA;AAAQ,SAAA;AAAE,OAAC,CAAC,CAAA;AACxF,KAAA;AACAzB,IAAAA,KAAK,CAAC0B,iBAAiB,CAACrE,UAAU,EAAEgE,aAAa,CAAC,CAAA;AACpD,GAAC,MAAM;AACLrB,IAAAA,KAAK,CAAC0B,iBAAiB,CAACrE,UAAU,CAAC,CAAA;AACrC,GAAA;AACF,CAAA;AAEA,SAASsE,SAASA,CAAIC,KAAc,EAAO;EACzC,OAAOjE,KAAK,CAACC,OAAO,CAACgE,KAAK,CAAC,GAAGA,KAAK,GAAG,CAACA,KAAK,CAAC,CAAA;AAC/C,CAAA;AAEA,MAAMC,qBAAqB,GAAG,MAAM,CAAA;AACpC,SAASX,iBAAiBA,CAACD,MAAyC,EAAkB;EACpF,MAAMa,GAAmB,GAAG,EAAE,CAAA;AAE9B,EAAA,IAAIb,MAAM,EAAE;IACVpC,MAAM,CAACkD,IAAI,CAACd,MAAM,CAAC,CAACe,OAAO,CAAEC,GAAG,IAAK;MACnC,IAAIC,QAAQ,GAAGP,SAAS,CAACV,MAAM,CAACgB,GAAG,CAAC,CAAC,CAAA;AACrC,MAAA,KAAK,IAAIzD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0D,QAAQ,CAACrE,MAAM,EAAEW,CAAC,EAAE,EAAE;QACxC,IAAI8C,KAAK,GAAG,mBAAmB,CAAA;AAC/B,QAAA,IAAIG,OAAO,GAAI,CAAmBQ,iBAAAA,EAAAA,GAAI,CAAC,CAAA,CAAA;QACvC,IAAIA,GAAG,KAAKJ,qBAAqB,EAAE;AACjCP,UAAAA,KAAK,GAAG,kBAAkB,CAAA;AAC1BG,UAAAA,OAAO,GAAI,CAAM,KAAA,CAAA,CAAA;AACnB,SAAA;QACAK,GAAG,CAACK,IAAI,CAAC;AACPb,UAAAA,KAAK,EAAEA,KAAK;AACZC,UAAAA,MAAM,EAAEW,QAAQ,CAAC1D,CAAC,CAAC;AACnBgD,UAAAA,MAAM,EAAE;AACNC,YAAAA,OAAO,EAAEA,OAAAA;AACX,WAAA;AACF,SAAC,CAAC,CAAA;AACJ,OAAA;AACF,KAAC,CAAC,CAAA;AACJ,GAAA;AAEA,EAAA,OAAOK,GAAG,CAAA;AACZ,CAAA;AAEA,SAASxF,UAAUA,CAAIR,OAA4B,EAAc;EAC/D,MAAM;IAAEK,KAAK;AAAEU,IAAAA,IAAAA;GAAM,GAAGf,OAAO,CAACD,OAAO,CAAA;EACvC,MAAM;AAAEoB,IAAAA,MAAM,EAAEI,UAAU;AAAEL,IAAAA,OAAAA;AAAQ,GAAC,GAAGH,IAGvC,CAAA;AACD,EAAA,IAAIuF,OAAwC,CAAA;;AAE5C;EACA,IAAI,CAACjG,KAAK,CAACkG,cAAc,CAACC,cAAc,CAACjF,UAAU,CAAC,EAAE;AACpD+E,IAAAA,OAAO,GAAGjG,KAAK,CAACC,aAAa,CAAC8B,8BAA8B,CAACb,UAAU,EAAEL,OAAO,EAAElB,OAAO,CAACD,OAAO,CAAC,CAAA;;AAElG;AACF,GAAC,MAAM,IAAImB,OAAO,CAACgB,MAAM,EAAE;IACzBD,qBAAqB,CAACV,UAAU,CAAC,CAAA;AAEjC+E,IAAAA,OAAO,GAAGjG,KAAK,CAACC,aAAa,CAAC6B,aAAa,CAACZ,UAAU,EAAEL,OAAO,EAAElB,OAAO,CAACD,OAAO,CAAC,CAAA;AACnF,GAAC,MAAM;IACL,IAAI0G,QAAyB,GAAG,IAAI,CAAA;IACpC,IAAIpE,OAAO,GAAGhC,KAAK,CAACiC,UAAU,CAACf,UAAU,CAACgB,IAAI,CAAC,CAAA;;AAE/C;AACA,IAAA,IACE,OAAOrB,OAAO,CAACgB,MAAM,KAAK,WAAW,IACrCG,OAAO,CAACqE,kBAAkB,IAC1BrE,OAAO,CAACqE,kBAAkB,CAACrG,KAAK,EAAGoG,QAAQ,GAAGpG,KAAK,CAACC,aAAa,CAACqG,cAAc,CAACpF,UAAU,EAAEL,OAAO,CAAE,CAAC,EACvG;MACAe,qBAAqB,CAACV,UAAU,CAAC,CAAA;AACjC,MAAA,IAAA+B,cAAA,CAAAC,YAAA,GAAAqD,GAAA,CAAAC,KAAA,CAAW,EAAA;AACTP,QAAAA,OAAO,GAAGjG,KAAK,CAACC,aAAa,CAAC6B,aAAa,CACzCZ,UAAU,EACVwB,MAAM,CAACC,MAAM,CAAC,EAAE,EAAE9B,OAAO,EAAE;AAAEgB,UAAAA,MAAM,EAAE,IAAA;AAAK,SAAC,CAAC,EAC5ClC,OAAO,CAACD,OACV,CAAC,CAAA;AACH,OAAC,MAAM;QACLmB,OAAO,CAACgB,MAAM,GAAG,IAAI,CAAA;AACrBoE,QAAAA,OAAO,GAAGjG,KAAK,CAACC,aAAa,CAAC6B,aAAa,CAACZ,UAAU,EAAEL,OAAO,EAAElB,OAAO,CAACD,OAAO,CAAC,CAAA;AACnF,OAAA;AACF,KAAC,MAAM;AACL;AACA,MAAA,IACEmB,OAAO,CAAC4F,gBAAgB,KAAK,KAAK,KACjC5F,OAAO,CAAC4F,gBAAgB,IACvB,CAACzE,OAAO,CAAC0E,4BAA4B,IACrC1E,OAAO,CAAC0E,4BAA4B,CAClC1G,KAAK,EACJoG,QAAQ,GAAGA,QAAQ,IAAIpG,KAAK,CAACC,aAAa,CAACqG,cAAc,CAACpF,UAAU,EAAEL,OAAO,CAChF,CAAC,CAAC,EACJ;QACAe,qBAAqB,CAACV,UAAU,CAAC,CAAA;AAEjC,QAAA,IAAA+B,cAAA,CAAAC,YAAA,GAAAqD,GAAA,CAAAC,KAAA,CAAW,EAAA;AACT,UAAA,KAAKxG,KAAK,CAACC,aAAa,CAAC6B,aAAa,CACpCZ,UAAU,EACVwB,MAAM,CAACC,MAAM,CAAC,EAAE,EAAE9B,OAAO,EAAE;AAAE4F,YAAAA,gBAAgB,EAAE,IAAA;AAAK,WAAC,CAAC,EACtD9G,OAAO,CAACD,OACV,CAAC,CAAA;AACH,SAAC,MAAM;UACLmB,OAAO,CAAC4F,gBAAgB,GAAG,IAAI,CAAA;AAC/B,UAAA,KAAKzG,KAAK,CAACC,aAAa,CAAC6B,aAAa,CAACZ,UAAU,EAAEL,OAAO,EAAElB,OAAO,CAACD,OAAO,CAAC,CAAA;AAC9E,SAAA;AACF,OAAA;;AAEA;AACAuG,MAAAA,OAAO,GAAG3D,OAAO,CAACqE,OAAO,CAACzF,UAAU,CAAoC,CAAA;AAC1E,KAAA;AACF,GAAA;AAEA,EAAA,OAAO+E,OAAO,CAAClD,IAAI,CAAE7B,UAAkC,IAAKlB,KAAK,CAACgE,UAAU,CAAC9C,UAAU,CAAC,CAAC,CAAA;AAC3F,CAAA;AAEA,SAASd,OAAOA,CAAIT,OAA4B,EAAc;EAC5D,MAAM;IAAEK,KAAK;AAAEU,IAAAA,IAAAA;GAAM,GAAGf,OAAO,CAACD,OAAO,CAAA;EACvC,MAAM;IAAEwC,IAAI;AAAErB,IAAAA,OAAAA;AAAQ,GAAC,GAAGH,IAGzB,CAAA;AACD,EAAA,MAAMsB,OAAO,GAAGhC,KAAK,CAACiC,UAAU,CAACC,IAAI,CAAC,CAAA;AAEtCX,EAAAA,MAAM,CAAE,CAA6DW,2DAAAA,EAAAA,IAAK,CAAE,CAAA,CAAA,EAAEF,OAAO,CAAC,CAAA;EACtFT,MAAM,CACH,6EAA4E,EAC7E,OAAOS,OAAO,CAAC5B,OAAO,KAAK,UAC7B,CAAC,CAAA;;AAED;EACA,MAAMwG,gBAAgB,GAAG5G,KAAK,CAAC6G,kBAAkB,CAACC,KAAK,CAACC,GAAG,CAAC7E,IAAI,CAAC,CAAA;EACjE,MAAM8E,aAAa,GAAG,IAAIC,mBAAmB,CAACjH,KAAK,EAAEkC,IAAI,EAAErB,OAAO,CAAC,CAAA;AAEnE,EAAA,MAAMqG,YAAY,GAChBrG,OAAO,CAACgB,MAAM,IACbhB,OAAO,CAACgB,MAAM,KAAK,KAAK,KACrBG,OAAO,CAACmF,eAAe,IAAInF,OAAO,CAACmF,eAAe,CAACnH,KAAK,EAAEgH,aAAa,CAAC,IACvE,CAAChF,OAAO,CAACmF,eAAe,IAAIH,aAAa,CAACtF,MAAM,KAAK,CAAE,CAAE,CAAA;AAEhE,EAAA,IAAI0F,KAA6B,CAAA;AACjC,EAAA,IAAIF,YAAY,EAAE;AAChBN,IAAAA,gBAAgB,KAAKA,gBAAgB,CAACS,UAAU,GAAG,IAAI,CAAC,CAAA;AACxDD,IAAAA,KAAK,GAAGE,QAAQ,CAACtF,OAAO,EAAEhC,KAAK,EAAEkC,IAAI,EAAE8E,aAAa,EAAErH,OAAO,CAACD,OAAO,EAAE,IAAI,CAAC,CAAA;AAC9E,GAAC,MAAM;IACL0H,KAAK,GAAG9E,OAAO,CAACqE,OAAO,CAAC3G,KAAK,CAACuH,OAAO,CAACrF,IAAI,CAAC,CAAe,CAAA;IAE1D,IACErB,OAAO,CAAC4F,gBAAgB,IACvB5F,OAAO,CAAC4F,gBAAgB,KAAK,KAAK,KAChC,CAACzE,OAAO,CAACwF,yBAAyB,IAAIxF,OAAO,CAACwF,yBAAyB,CAACxH,KAAK,EAAEgH,aAAa,CAAC,CAAE,EAClG;AACAJ,MAAAA,gBAAgB,KAAKA,gBAAgB,CAACS,UAAU,GAAG,IAAI,CAAC,CAAA;AACxD,MAAA,KAAKC,QAAQ,CAACtF,OAAO,EAAEhC,KAAK,EAAEkC,IAAI,EAAE8E,aAAa,EAAErH,OAAO,CAACD,OAAO,EAAE,KAAK,CAAC,CAAA;AAC5E,KAAA;AACF,GAAA;AAEA,EAAA,OAAO0H,KAAK,CAAA;AACd,CAAA;AAEA,SAASE,QAAQA,CACftF,OAAgC,EAChChC,KAAY,EACZkC,IAAY,EACZ8E,aAAkC,EAClCtH,OAAyB,EACzB+H,YAAqB,EACT;AACZ,EAAA,MAAMC,MAAM,GAAG1H,KAAK,CAAC4E,QAAQ,CAAC1C,IAAI,CAAC,CAAA;EACnC,IAAI+D,OAAmB,GAAG3D,OAAO,CAACqE,OAAO,EAAE,CAAC5D,IAAI,CAAC,MAC/Cf,OAAO,CAAC5B,OAAO,CAACJ,KAAK,EAAE0H,MAAM,EAAE,IAAI,EAAEV,aAAa,CACpD,CAAe,CAAA;AAEff,EAAAA,OAAO,GAAGA,OAAO,CAAClD,IAAI,CAAE4E,cAAiB,IAAK;IAC5CpG,MAAM,CACH,qCAAoCW,IAAK,CAAA,2DAAA,CAA4D,EACtG0F,iBAAiB,CAACD,cAAc,CAClC,CAAC,CAAA;AACD,IAAA,MAAMnD,UAAU,GAAGxE,KAAK,CAACyE,aAAa,CAACvC,IAAI,CAAC,CAAA;AAC5C,IAAA,MAAMc,OAAO,GAAG6E,uBAAuB,CAACrD,UAAU,EAAExE,KAAK,EAAE0H,MAAM,EAAEC,cAAc,EAAE,IAAI,EAAE,SAAS,CAAC,CAAA;AAEnG3H,IAAAA,KAAK,CAAC8H,KAAK,CAAC9E,OAAO,EAAEyE,YAAY,CAAC,CAAA;AAClCT,IAAAA,aAAa,CAACe,YAAY,CAACV,UAAU,GAAG,KAAK,CAAA;AAE7C,IAAA,IAAApE,cAAA,CAAAC,YAAA,GAAAC,KAAA,CAAAC,YAAA,CAAkB,EAAA;AAChB;AACAI,MAAAA,OAAO,CAACC,GAAG,CAAE,CAAmBvB,iBAAAA,EAAAA,IAAK,8BAA6B,CAAC,CAAA;AACrE,KAAA;IACA,OAAO8E,aAAa,CAACe,YAAY,CAAA;AACnC,GAAC,CAAe,CAAA;AAEhB,EAAA,IAAA9E,cAAA,CAAAC,YAAA,GAAAqD,GAAA,CAAAyB,OAAA,CAAa,EAAA;AACX,IAAA,IAAI,CAACtI,OAAO,CAACuI,iBAAiB,EAAE;MAC9B,MAAM;AAAEC,QAAAA,cAAAA;AAAe,OAAC,GAAGC,UAAU,CAAC,qBAAqB,CAE1D,CAAA;AACDlC,MAAAA,OAAO,GAAGiC,cAAc,CAACjC,OAAO,CAAC,CAAA;AACnC,KAAA;AACF,GAAA;AAEA,EAAA,OAAOA,OAAO,CAAA;AAChB,CAAA;AAEA,SAAS5F,KAAKA,CAAIV,OAA4B,EAAc;EAC1D,MAAM;IAAEK,KAAK;AAAEU,IAAAA,IAAAA;GAAM,GAAGf,OAAO,CAACD,OAAO,CAAA;EACvC,IAAI;AAAEmB,IAAAA,OAAAA;AAAQ,GAAC,GAAGH,IAEjB,CAAA;EACD,MAAM;IAAEwB,IAAI;AAAE7B,IAAAA,KAAAA;AAAM,GAAC,GAAGK,IAIvB,CAAA;AACD,EAAA,MAAMsB,OAAO,GAAGhC,KAAK,CAACiC,UAAU,CAACC,IAAI,CAAC,CAAA;AAEtCX,EAAAA,MAAM,CAAE,CAAyDW,uDAAAA,EAAAA,IAAK,CAAE,CAAA,CAAA,EAAEF,OAAO,CAAC,CAAA;EAClFT,MAAM,CAAE,uEAAsE,EAAE,OAAOS,OAAO,CAAC3B,KAAK,KAAK,UAAU,CAAC,CAAA;EAEpH,MAAM+H,WAAW,GACfvH,OAAO,CAACkH,YAAY,IACpB/H,KAAK,CAAC6G,kBAAkB,CAACwB,WAAW,CAAC;IACnCnG,IAAI;AACJ7B,IAAAA,KAAAA;AACF,GAAC,CAAC,CAAA;AAEJ,EAAA,IAAA4C,cAAA,CAAAC,YAAA,GAAAqD,GAAA,CAAAC,KAAA,CAAW,EAAA;IACT3F,OAAO,GAAG6B,MAAM,CAACC,MAAM,CAAC,EAAE,EAAE9B,OAAO,CAAC,CAAA;IACpC,OAAOA,OAAO,CAACkH,YAAY,CAAA;AAC7B,GAAC,MAAM;IACL,OAAOlH,OAAO,CAACkH,YAAY,CAAA;AAC7B,GAAA;AACA,EAAA,MAAML,MAAM,GAAG1H,KAAK,CAAC4E,QAAQ,CAAC1C,IAAI,CAAC,CAAA;EACnC,IAAI+D,OAAO,GAAG3D,OAAO,CAACqE,OAAO,EAAE,CAAC5D,IAAI,CAAC,MAAMf,OAAO,CAAC3B,KAAK,CAACL,KAAK,EAAE0H,MAAM,EAAErH,KAAK,EAAE+H,WAAW,EAAEvH,OAAO,CAAC,CAAC,CAAA;AAErG,EAAA,OAAOoF,OAAO,CAAClD,IAAI,CAAE4E,cAAc,IAAK;AACtC,IAAA,MAAMnD,UAAU,GAAGxE,KAAK,CAACyE,aAAa,CAACvC,IAAI,CAAC,CAAA;AAC5C,IAAA,MAAMc,OAAO,GAAG6E,uBAAuB,CACrCrD,UAAU,EACVxE,KAAK,EACL0H,MAAM,EACNC,cAAc,EACd,IAAI,EACJ,OACF,CAAC,CAAA;IACD,MAAM/G,WAAW,GAAGZ,KAAK,CAAC8H,KAAK,CAAC9E,OAAO,EAAE,IAAI,CAAC,CAAA;IAE9CzB,MAAM,CACJ,mLAAmL,EACnLC,KAAK,CAACC,OAAO,CAACb,WAAW,CAC3B,CAAC,CAAA;IAEDZ,KAAK,CAAC6G,kBAAkB,CAACyB,oBAAoB,CAACF,WAAW,EAAExH,WAAW,EAAEoC,OAAqC,CAAC,CAAA;AAE9G,IAAA,OAAOoF,WAAW,CAAA;AACpB,GAAC,CAAC,CAAA;AACJ,CAAA;AAEA,SAASG,4BAA4BA,CAACvF,OAAwB,EAA6C;AACzGzB,EAAAA,MAAM,CACH,CAAA,4IAAA,CAA6I,EAC9I,CAACC,KAAK,CAACC,OAAO,CAACuB,OAAO,CAACtC,IAAI,CAC7B,CAAC,CAAA;AACH,CAAA;AAEA,SAASJ,WAAWA,CAAIX,OAA4B,EAAc;EAChE,MAAM;IAAEK,KAAK;AAAEU,IAAAA,IAAAA;GAAM,GAAGf,OAAO,CAACD,OAAO,CAAA;EACvC,MAAM;IAAEwC,IAAI;IAAE7B,KAAK;AAAEQ,IAAAA,OAAAA;AAAQ,GAAC,GAAGH,IAAyE,CAAA;AAC1G,EAAA,MAAMsB,OAAO,GAAGhC,KAAK,CAACiC,UAAU,CAACC,IAAI,CAAC,CAAA;AAEtCX,EAAAA,MAAM,CAAE,CAAyDW,uDAAAA,EAAAA,IAAK,CAAE,CAAA,CAAA,EAAEF,OAAO,CAAC,CAAA;EAClFT,MAAM,CACH,6EAA4E,EAC7E,OAAOS,OAAO,CAAC1B,WAAW,KAAK,UACjC,CAAC,CAAA;AAED,EAAA,MAAMoH,MAAM,GAAG1H,KAAK,CAAC4E,QAAQ,CAAC1C,IAAI,CAAC,CAAA;EACnC,IAAI+D,OAAO,GAAG3D,OAAO,CAACqE,OAAO,EAAE,CAAC5D,IAAI,CAAC,MAAMf,OAAO,CAAC1B,WAAW,CAACN,KAAK,EAAE0H,MAAM,EAAErH,KAAK,EAAEQ,OAAO,CAAC,CAAe,CAAA;AAE5G,EAAA,OAAOoF,OAAO,CAAClD,IAAI,CAAE4E,cAAiB,IAAK;AACzC,IAAA,MAAMnD,UAAU,GAAGxE,KAAK,CAACyE,aAAa,CAACvC,IAAI,CAAC,CAAA;AAC5C,IAAA,MAAMc,OAAO,GAAG6E,uBAAuB,CACrCrD,UAAU,EACVxE,KAAK,EACL0H,MAAM,EACNC,cAAc,EACd,IAAI,EACJ,aACF,CAAC,CAAA;IAEDY,4BAA4B,CAACvF,OAAO,CAAC,CAAA;IAErC,MAAM9B,UAAU,GAAGlB,KAAK,CAAC8H,KAAK,CAAC9E,OAAO,EAAE,IAAI,CAA2B,CAAA;IACvE,OAAO9B,UAAU,GAAGlB,KAAK,CAACgE,UAAU,CAAC9C,UAAU,CAAC,GAAG,IAAI,CAAA;AACzD,GAAC,CAAC,CAAA;AACJ;;;;"}
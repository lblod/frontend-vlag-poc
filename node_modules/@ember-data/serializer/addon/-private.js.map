{"version":3,"file":"-private.js","sources":["../src/-private/transforms/boolean.js","../src/-private/transforms/date.js","../src/-private/transforms/number.js","../src/-private/transforms/string.js"],"sourcesContent":["/**\n  @module @ember-data/serializer\n*/\n\n/**\n  The `BooleanTransform` class is used to serialize and deserialize\n  boolean attributes on Ember Data record objects. This transform is\n  used when `boolean` is passed as the type parameter to the\n  [attr](/ember-data/release/functions/@ember-data%2Fmodel/attr) function.\n\n  Usage\n\n  ```app/models/user.js\n  import Model, { attr } from '@ember-data/model';\n\n  export default class UserModel extends Model {\n    @attr('boolean') isAdmin;\n    @attr('string') name;\n    @attr('string') email;\n  }\n  ```\n\n  By default, the boolean transform only allows for values of `true` or\n  `false`. You can opt into allowing `null` values for\n  boolean attributes via `attr('boolean', { allowNull: true })`\n\n  ```app/models/user.js\n  import Model, { attr } from '@ember-data/model';\n\n  export default class UserModel extends Model {\n    @attr('string') email;\n    @attr('string') username;\n    @attr('boolean', { allowNull: true }) wantsWeeklyEmail;\n  }\n  ```\n\n  @class BooleanTransform\n  @public\n */\nexport default class BooleanTransform {\n  deserialize(serialized, options) {\n    if ((serialized === null || serialized === undefined) && options.allowNull === true) {\n      return null;\n    }\n\n    let type = typeof serialized;\n    if (type === 'boolean') {\n      return serialized;\n    } else if (type === 'string') {\n      return /^(true|t|1)$/i.test(serialized);\n    } else if (type === 'number') {\n      return serialized === 1;\n    } else {\n      return false;\n    }\n  }\n\n  serialize(deserialized, options) {\n    if ((deserialized === null || deserialized === undefined) && options.allowNull === true) {\n      return null;\n    }\n\n    return Boolean(deserialized);\n  }\n\n  static create() {\n    return new this();\n  }\n}\n","/**\n  @module @ember-data/serializer\n*/\n\n/**\n The `DateTransform` class is used to serialize and deserialize\n date attributes on Ember Data record objects. This transform is used\n when `date` is passed as the type parameter to the\n [attr](/ember-data/release/functions/@ember-data%2Fmodel/attr) function. It uses the [`ISO 8601`](https://en.wikipedia.org/wiki/ISO_8601)\n standard.\n\n ```app/models/score.js\n import Model, { attr, belongsTo } from '@ember-data/model';\n\n export default class ScoreModel extends Model {\n    @attr('number') value;\n    @belongsTo('player') player;\n    @attr('date') date;\n  }\n ```\n\n @class DateTransform\n  @public\n */\n\nexport default class DateTransform {\n  deserialize(serialized) {\n    let type = typeof serialized;\n\n    if (type === 'string') {\n      let offset = serialized.indexOf('+');\n\n      if (offset !== -1 && serialized.length - 5 === offset) {\n        offset += 3;\n        return new Date(serialized.slice(0, offset) + ':' + serialized.slice(offset));\n      }\n      return new Date(serialized);\n    } else if (type === 'number') {\n      return new Date(serialized);\n    } else if (serialized === null || serialized === undefined) {\n      // if the value is null return null\n      // if the value is not present in the data return undefined\n      return serialized;\n    } else {\n      return null;\n    }\n  }\n\n  serialize(date) {\n    if (date instanceof Date && !isNaN(date)) {\n      return date.toISOString();\n    } else {\n      return null;\n    }\n  }\n\n  static create() {\n    return new this();\n  }\n}\n","/**\n  @module @ember-data/serializer\n*/\n\nfunction isNumber(value) {\n  return value === value && value !== Infinity && value !== -Infinity;\n}\n\n/**\n  The `NumberTransform` class is used to serialize and deserialize\n  numeric attributes on Ember Data record objects. This transform is\n  used when `number` is passed as the type parameter to the\n  [attr](/ember-data/release/functions/@ember-data%2Fmodel/attr) function.\n\n  Usage\n\n  ```app/models/score.js\n  import Model, { attr, belongsTo } from '@ember-data/model';\n\n  export default class ScoreModel extends Model {\n    @attr('number') value;\n    @belongsTo('player') player;\n    @attr('date') date;\n  }\n  ```\n\n  @class NumberTransform\n  @public\n */\nexport default class NumberTransform {\n  deserialize(serialized) {\n    let transformed;\n\n    if (serialized === '' || serialized === null || serialized === undefined) {\n      return null;\n    } else {\n      transformed = Number(serialized);\n\n      return isNumber(transformed) ? transformed : null;\n    }\n  }\n\n  serialize(deserialized) {\n    let transformed;\n\n    if (deserialized === '' || deserialized === null || deserialized === undefined) {\n      return null;\n    } else {\n      transformed = Number(deserialized);\n\n      return isNumber(transformed) ? transformed : null;\n    }\n  }\n\n  static create() {\n    return new this();\n  }\n}\n","/**\n  @module @ember-data/serializer\n*/\n\n/**\n  The `StringTransform` class is used to serialize and deserialize\n  string attributes on Ember Data record objects. This transform is\n  used when `string` is passed as the type parameter to the\n  [attr](/ember-data/release/functions/@ember-data%2Fmodel/attr) function.\n\n  Usage\n\n  ```app/models/user.js\n  import Model, { attr, belongsTo } from '@ember-data/model';\n\n  export default class UserModel extends Model {\n    @attr('boolean') isAdmin;\n    @attr('string') name;\n    @attr('string') email;\n  }\n  ```\n\n  @class StringTransform\n  @public\n */\nexport default class StringTransform {\n  deserialize(serialized) {\n    return !serialized && serialized !== '' ? null : String(serialized);\n  }\n  serialize(deserialized) {\n    return !deserialized && deserialized !== '' ? null : String(deserialized);\n  }\n\n  static create() {\n    return new this();\n  }\n}\n"],"names":["BooleanTransform","deserialize","serialized","options","undefined","allowNull","type","test","serialize","deserialized","Boolean","create","DateTransform","offset","indexOf","length","Date","slice","date","isNaN","toISOString","isNumber","value","Infinity","NumberTransform","transformed","Number","StringTransform","String"],"mappings":"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"}
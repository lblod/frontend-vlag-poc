"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setInternalModifierManager = setInternalModifierManager;
exports.getInternalModifierManager = getInternalModifierManager;
exports.setInternalHelperManager = setInternalHelperManager;
exports.getInternalHelperManager = getInternalHelperManager;
exports.setInternalComponentManager = setInternalComponentManager;
exports.getInternalComponentManager = getInternalComponentManager;
exports.hasInternalComponentManager = hasInternalComponentManager;
exports.hasInternalHelperManager = hasInternalHelperManager;
exports.hasInternalModifierManager = hasInternalModifierManager;

var _env = require("@glimmer/env");

var _util = require("@glimmer/util");

var _globalContext = require("@glimmer/global-context");

var _helper = require("../public/helper");

var _defaults = require("./defaults");

const COMPONENT_MANAGERS = new WeakMap();
const MODIFIER_MANAGERS = new WeakMap();
const HELPER_MANAGERS = new WeakMap(); ///////////

const getPrototypeOf = Object.getPrototypeOf;

function setManager(map, manager, obj) {
  if (_env.DEBUG && (typeof obj !== 'object' || obj === null) && typeof obj !== 'function') {
    throw new Error(`Attempted to set a manager on a non-object value. Managers can only be associated with objects or functions. Value was ${(0, _util.debugToString)(obj)}`);
  }

  if (_env.DEBUG && map.has(obj)) {
    throw new Error(`Attempted to set the same type of manager multiple times on a value. You can only associate one manager of each type with a given value. Value was ${(0, _util.debugToString)(obj)}`);
  }

  map.set(obj, manager);
  return obj;
}

function getManager(map, obj) {
  let pointer = obj;

  while (pointer !== undefined && pointer !== null) {
    const manager = map.get(pointer);

    if (manager !== undefined) {
      return manager;
    }

    pointer = getPrototypeOf(pointer);
  }

  return undefined;
} ///////////


function setInternalModifierManager(manager, definition) {
  return setManager(MODIFIER_MANAGERS, manager, definition);
}

function getInternalModifierManager(definition, isOptional) {
  if (_env.DEBUG && typeof definition !== 'function' && (typeof definition !== 'object' || definition === null)) {
    throw new Error(`Attempted to use a value as a modifier, but it was not an object or function. Modifier definitions must be objects or functions with an associated modifier manager. The value was: ${definition}`);
  }

  const manager = getManager(MODIFIER_MANAGERS, definition);

  if (manager === undefined) {
    if (isOptional === true) {
      return null;
    } else if (_env.DEBUG) {
      throw new Error(`Attempted to load a modifier, but there wasn't a modifier manager associated with the definition. The definition was: ${(0, _util.debugToString)(definition)}`);
    }
  }

  return manager;
}

function setInternalHelperManager(manager, definition) {
  return setManager(HELPER_MANAGERS, manager, definition);
}

const DEFAULT_MANAGER = new _helper.CustomHelperManager(() => new _defaults.FunctionHelperManager());

function getInternalHelperManager(definition, isOptional) {
  if (_env.DEBUG && typeof definition !== 'function' && (typeof definition !== 'object' || definition === null)) {
    throw new Error(`Attempted to use a value as a helper, but it was not an object or function. Helper definitions must be objects or functions with an associated helper manager. The value was: ${definition}`);
  }

  let manager = getManager(HELPER_MANAGERS, definition);

  if (_globalContext.FEATURE_DEFAULT_HELPER_MANAGER) {
    // Functions are special-cased because functions are defined
    // as the "default" helper, per: https://github.com/emberjs/rfcs/pull/756
    if (manager === undefined && typeof definition === 'function') {
      manager = DEFAULT_MANAGER;
    }
  }

  if (manager) {
    return manager;
  } else if (isOptional === true) {
    return null;
  } else if (_env.DEBUG) {
    throw new Error(`Attempted to load a helper, but there wasn't a helper manager associated with the definition. The definition was: ${(0, _util.debugToString)(definition)}`);
  }

  return null;
}

function setInternalComponentManager(factory, obj) {
  return setManager(COMPONENT_MANAGERS, factory, obj);
}

function getInternalComponentManager(definition, isOptional) {
  if (_env.DEBUG && typeof definition !== 'function' && (typeof definition !== 'object' || definition === null)) {
    throw new Error(`Attempted to use a value as a component, but it was not an object or function. Component definitions must be objects or functions with an associated component manager. The value was: ${definition}`);
  }

  const manager = getManager(COMPONENT_MANAGERS, definition);

  if (manager === undefined) {
    if (isOptional === true) {
      return null;
    } else if (_env.DEBUG) {
      throw new Error(`Attempted to load a component, but there wasn't a component manager associated with the definition. The definition was: ${(0, _util.debugToString)(definition)}`);
    }
  }

  return manager;
} ///////////


function hasInternalComponentManager(definition) {
  return hasDefaultComponentManager(definition) || getManager(COMPONENT_MANAGERS, definition) !== undefined;
}

function hasInternalHelperManager(definition) {
  return hasDefaultHelperManager(definition) || getManager(HELPER_MANAGERS, definition) !== undefined;
}

function hasInternalModifierManager(definition) {
  return hasDefaultModifierManager(definition) || getManager(MODIFIER_MANAGERS, definition) !== undefined;
}

function hasDefaultComponentManager(_definition) {
  return false;
}

function hasDefaultHelperManager(definition) {
  if (_globalContext.FEATURE_DEFAULT_HELPER_MANAGER) {
    return typeof definition === 'function';
  }

  return false;
}

function hasDefaultModifierManager(_definition) {
  return false;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
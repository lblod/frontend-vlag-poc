"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.componentCapabilities = componentCapabilities;
exports.hasAsyncLifeCycleCallbacks = hasAsyncLifeCycleCallbacks;
exports.hasUpdateHook = hasUpdateHook;
exports.hasAsyncUpdateHook = hasAsyncUpdateHook;
exports.hasDestructors = hasDestructors;
exports.CustomComponentState = exports.CustomComponentManager = void 0;

var _env = require("@glimmer/env");

var _reference = require("@glimmer/reference");

var _destroyable = require("@glimmer/destroyable");

var _capabilities = require("../util/capabilities");

var _argsProxy = require("../util/args-proxy");

const CAPABILITIES = {
  dynamicLayout: false,
  dynamicTag: false,
  prepareArgs: false,
  createArgs: true,
  attributeHook: false,
  elementHook: false,
  createCaller: false,
  dynamicScope: true,
  updateHook: true,
  createInstance: true,
  wrapped: false,
  willDestroy: false,
  hasSubOwner: false
};

function componentCapabilities(managerAPI, options = {}) {
  if (_env.DEBUG && managerAPI !== '3.13') {
    throw new Error('Invalid component manager compatibility specified');
  }

  let updateHook = Boolean(options.updateHook);
  return (0, _capabilities.buildCapabilities)({
    asyncLifeCycleCallbacks: Boolean(options.asyncLifecycleCallbacks),
    destructor: Boolean(options.destructor),
    updateHook
  });
}

function hasAsyncLifeCycleCallbacks(delegate) {
  return delegate.capabilities.asyncLifeCycleCallbacks;
}

function hasUpdateHook(delegate) {
  return delegate.capabilities.updateHook;
}

function hasAsyncUpdateHook(delegate) {
  return hasAsyncLifeCycleCallbacks(delegate) && hasUpdateHook(delegate);
}

function hasDestructors(delegate) {
  return delegate.capabilities.destructor;
}
/**
  The CustomComponentManager allows addons to provide custom component
  implementations that integrate seamlessly into Ember. This is accomplished
  through a delegate, registered with the custom component manager, which
  implements a set of hooks that determine component behavior.

  To create a custom component manager, instantiate a new CustomComponentManager
  class and pass the delegate as the first argument:

  ```js
  let manager = new CustomComponentManager({
    // ...delegate implementation...
  });
  ```

  ## Delegate Hooks

  Throughout the lifecycle of a component, the component manager will invoke
  delegate hooks that are responsible for surfacing those lifecycle changes to
  the end developer.

  * `create()` - invoked when a new instance of a component should be created
  * `update()` - invoked when the arguments passed to a component change
  * `getContext()` - returns the object that should be
*/


class CustomComponentManager {
  constructor(factory) {
    this.factory = factory;
    this.componentManagerDelegates = new WeakMap();
  }

  getDelegateFor(owner) {
    let {
      componentManagerDelegates
    } = this;
    let delegate = componentManagerDelegates.get(owner);

    if (delegate === undefined) {
      let {
        factory
      } = this;
      delegate = factory(owner);

      if (_env.DEBUG && !_capabilities.FROM_CAPABILITIES.has(delegate.capabilities)) {
        // TODO: This error message should make sense in both Ember and Glimmer https://github.com/glimmerjs/glimmer-vm/issues/1200
        throw new Error(`Custom component managers must have a \`capabilities\` property that is the result of calling the \`capabilities('3.13')\` (imported via \`import { capabilities } from '@ember/component';\`). Received: \`${JSON.stringify(delegate.capabilities)}\` for: \`${delegate}\``);
      }

      componentManagerDelegates.set(owner, delegate);
    }

    return delegate;
  }

  create(owner, definition, vmArgs) {
    let delegate = this.getDelegateFor(owner);
    let args = (0, _argsProxy.argsProxyFor)(vmArgs.capture(), 'component');
    let component = delegate.createComponent(definition, args);
    return new CustomComponentState(component, delegate, args);
  }

  getDebugName(definition) {
    return typeof definition === 'function' ? definition.name : definition.toString();
  }

  update(bucket) {
    let {
      delegate
    } = bucket;

    if (hasUpdateHook(delegate)) {
      let {
        component,
        args
      } = bucket;
      delegate.updateComponent(component, args);
    }
  }

  didCreate({
    component,
    delegate
  }) {
    if (hasAsyncLifeCycleCallbacks(delegate)) {
      delegate.didCreateComponent(component);
    }
  }

  didUpdate({
    component,
    delegate
  }) {
    if (hasAsyncUpdateHook(delegate)) {
      delegate.didUpdateComponent(component);
    }
  }

  didRenderLayout() {}

  didUpdateLayout() {}

  getSelf({
    component,
    delegate
  }) {
    return (0, _reference.createConstRef)(delegate.getContext(component), 'this');
  }

  getDestroyable(bucket) {
    const {
      delegate
    } = bucket;

    if (hasDestructors(delegate)) {
      const {
        component
      } = bucket;
      (0, _destroyable.registerDestructor)(bucket, () => delegate.destroyComponent(component));
      return bucket;
    }

    return null;
  }

  getCapabilities() {
    return CAPABILITIES;
  }

}
/**
 * Stores internal state about a component instance after it's been created.
 */


exports.CustomComponentManager = CustomComponentManager;

class CustomComponentState {
  constructor(component, delegate, args) {
    this.component = component;
    this.delegate = delegate;
    this.args = args;
  }

}

exports.CustomComponentState = CustomComponentState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
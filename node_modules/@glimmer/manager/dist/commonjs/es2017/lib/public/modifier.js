"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.modifierCapabilities = modifierCapabilities;
exports.reifyArgs = reifyArgs;
exports.CustomModifierManager = void 0;

var _env = require("@glimmer/env");

var _destroyable = require("@glimmer/destroyable");

var _reference = require("@glimmer/reference");

var _util = require("@glimmer/util");

var _validator = require("@glimmer/validator");

var _capabilities = require("../util/capabilities");

var _argsProxy = require("../util/args-proxy");

function modifierCapabilities(managerAPI, optionalFeatures = {}) {
  if (_env.DEBUG && managerAPI !== '3.22') {
    throw new Error('Invalid modifier manager compatibility specified');
  }

  return (0, _capabilities.buildCapabilities)({
    disableAutoTracking: Boolean(optionalFeatures.disableAutoTracking)
  });
}
/**
  The CustomModifierManager allows addons to provide custom modifier
  implementations that integrate seamlessly into Ember. This is accomplished
  through a delegate, registered with the custom modifier manager, which
  implements a set of hooks that determine modifier behavior.
  To create a custom modifier manager, instantiate a new CustomModifierManager
  class and pass the delegate as the first argument:

  ```js
  let manager = new CustomModifierManager({
    // ...delegate implementation...
  });
  ```

  ## Delegate Hooks

  Throughout the lifecycle of a modifier, the modifier manager will invoke
  delegate hooks that are responsible for surfacing those lifecycle changes to
  the end developer.
  * `createModifier()` - invoked when a new instance of a modifier should be created
  * `installModifier()` - invoked when the modifier is installed on the element
  * `updateModifier()` - invoked when the arguments passed to a modifier change
  * `destroyModifier()` - invoked when the modifier is about to be destroyed
*/


class CustomModifierManager {
  constructor(factory) {
    this.factory = factory;
    this.componentManagerDelegates = new WeakMap();
  }

  getDelegateFor(owner) {
    let {
      componentManagerDelegates
    } = this;
    let delegate = componentManagerDelegates.get(owner);

    if (delegate === undefined) {
      let {
        factory
      } = this;
      delegate = factory(owner);

      if (_env.DEBUG && !_capabilities.FROM_CAPABILITIES.has(delegate.capabilities)) {
        // TODO: This error message should make sense in both Ember and Glimmer https://github.com/glimmerjs/glimmer-vm/issues/1200
        throw new Error(`Custom modifier managers must have a \`capabilities\` property that is the result of calling the \`capabilities('3.22')\` (imported via \`import { capabilities } from '@ember/modifier';\`). Received: \`${JSON.stringify(delegate.capabilities)}\` for: \`${delegate}\``);
      }

      componentManagerDelegates.set(owner, delegate);
    }

    return delegate;
  }

  create(owner, element, definition, capturedArgs) {
    let delegate = this.getDelegateFor(owner);
    let args = (0, _argsProxy.argsProxyFor)(capturedArgs, 'modifier');
    let instance = delegate.createModifier(definition, args);
    let tag = (0, _validator.createUpdatableTag)();
    let state;
    state = {
      tag,
      element,
      delegate,
      args,
      modifier: instance
    };

    if (_env.DEBUG) {
      state.debugName = typeof definition === 'function' ? definition.name : definition.toString();
    }

    (0, _destroyable.registerDestructor)(state, () => delegate.destroyModifier(instance, args));
    return state;
  }

  getDebugName({
    debugName
  }) {
    return debugName;
  }

  getTag({
    tag
  }) {
    return tag;
  }

  install({
    element,
    args,
    modifier,
    delegate
  }) {
    let {
      capabilities
    } = delegate;

    if (capabilities.disableAutoTracking === true) {
      (0, _validator.untrack)(() => delegate.installModifier(modifier, element, args));
    } else {
      delegate.installModifier(modifier, element, args);
    }
  }

  update({
    args,
    modifier,
    delegate
  }) {
    let {
      capabilities
    } = delegate;

    if (capabilities.disableAutoTracking === true) {
      (0, _validator.untrack)(() => delegate.updateModifier(modifier, args));
    } else {
      delegate.updateModifier(modifier, args);
    }
  }

  getDestroyable(state) {
    return state;
  }

}

exports.CustomModifierManager = CustomModifierManager;

function reifyArgs({
  named,
  positional
}) {
  let reifiedNamed = (0, _util.dict)();

  for (let key in named) {
    reifiedNamed[key] = (0, _reference.valueForRef)(named[key]);
  }

  let reifiedPositional = positional.map(_reference.valueForRef);
  return {
    named: reifiedNamed,
    positional: reifiedPositional
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
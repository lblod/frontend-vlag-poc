"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.componentCapabilities = componentCapabilities;
exports.hasAsyncLifeCycleCallbacks = hasAsyncLifeCycleCallbacks;
exports.hasUpdateHook = hasUpdateHook;
exports.hasAsyncUpdateHook = hasAsyncUpdateHook;
exports.hasDestructors = hasDestructors;
exports.CustomComponentState = exports.CustomComponentManager = void 0;

var _env = require("@glimmer/env");

var _reference = require("@glimmer/reference");

var _destroyable = require("@glimmer/destroyable");

var _capabilities = require("../util/capabilities");

var _argsProxy = require("../util/args-proxy");

var CAPABILITIES = {
  dynamicLayout: false,
  dynamicTag: false,
  prepareArgs: false,
  createArgs: true,
  attributeHook: false,
  elementHook: false,
  createCaller: false,
  dynamicScope: true,
  updateHook: true,
  createInstance: true,
  wrapped: false,
  willDestroy: false,
  hasSubOwner: false
};

function componentCapabilities(managerAPI, options) {
  if (options === void 0) {
    options = {};
  }

  if (_env.DEBUG && managerAPI !== '3.13') {
    throw new Error('Invalid component manager compatibility specified');
  }

  var updateHook = Boolean(options.updateHook);
  return (0, _capabilities.buildCapabilities)({
    asyncLifeCycleCallbacks: Boolean(options.asyncLifecycleCallbacks),
    destructor: Boolean(options.destructor),
    updateHook: updateHook
  });
}

function hasAsyncLifeCycleCallbacks(delegate) {
  return delegate.capabilities.asyncLifeCycleCallbacks;
}

function hasUpdateHook(delegate) {
  return delegate.capabilities.updateHook;
}

function hasAsyncUpdateHook(delegate) {
  return hasAsyncLifeCycleCallbacks(delegate) && hasUpdateHook(delegate);
}

function hasDestructors(delegate) {
  return delegate.capabilities.destructor;
}
/**
  The CustomComponentManager allows addons to provide custom component
  implementations that integrate seamlessly into Ember. This is accomplished
  through a delegate, registered with the custom component manager, which
  implements a set of hooks that determine component behavior.

  To create a custom component manager, instantiate a new CustomComponentManager
  class and pass the delegate as the first argument:

  ```js
  let manager = new CustomComponentManager({
    // ...delegate implementation...
  });
  ```

  ## Delegate Hooks

  Throughout the lifecycle of a component, the component manager will invoke
  delegate hooks that are responsible for surfacing those lifecycle changes to
  the end developer.

  * `create()` - invoked when a new instance of a component should be created
  * `update()` - invoked when the arguments passed to a component change
  * `getContext()` - returns the object that should be
*/


var CustomComponentManager = /*#__PURE__*/function () {
  function CustomComponentManager(factory) {
    this.factory = factory;
    this.componentManagerDelegates = new WeakMap();
  }

  var _proto = CustomComponentManager.prototype;

  _proto.getDelegateFor = function getDelegateFor(owner) {
    var componentManagerDelegates = this.componentManagerDelegates;
    var delegate = componentManagerDelegates.get(owner);

    if (delegate === undefined) {
      var factory = this.factory;
      delegate = factory(owner);

      if (_env.DEBUG && !_capabilities.FROM_CAPABILITIES.has(delegate.capabilities)) {
        // TODO: This error message should make sense in both Ember and Glimmer https://github.com/glimmerjs/glimmer-vm/issues/1200
        throw new Error("Custom component managers must have a `capabilities` property that is the result of calling the `capabilities('3.13')` (imported via `import { capabilities } from '@ember/component';`). Received: `" + JSON.stringify(delegate.capabilities) + "` for: `" + delegate + "`");
      }

      componentManagerDelegates.set(owner, delegate);
    }

    return delegate;
  };

  _proto.create = function create(owner, definition, vmArgs) {
    var delegate = this.getDelegateFor(owner);
    var args = (0, _argsProxy.argsProxyFor)(vmArgs.capture(), 'component');
    var component = delegate.createComponent(definition, args);
    return new CustomComponentState(component, delegate, args);
  };

  _proto.getDebugName = function getDebugName(definition) {
    return typeof definition === 'function' ? definition.name : definition.toString();
  };

  _proto.update = function update(bucket) {
    var delegate = bucket.delegate;

    if (hasUpdateHook(delegate)) {
      var component = bucket.component,
          args = bucket.args;
      delegate.updateComponent(component, args);
    }
  };

  _proto.didCreate = function didCreate(_ref) {
    var component = _ref.component,
        delegate = _ref.delegate;

    if (hasAsyncLifeCycleCallbacks(delegate)) {
      delegate.didCreateComponent(component);
    }
  };

  _proto.didUpdate = function didUpdate(_ref2) {
    var component = _ref2.component,
        delegate = _ref2.delegate;

    if (hasAsyncUpdateHook(delegate)) {
      delegate.didUpdateComponent(component);
    }
  };

  _proto.didRenderLayout = function didRenderLayout() {};

  _proto.didUpdateLayout = function didUpdateLayout() {};

  _proto.getSelf = function getSelf(_ref3) {
    var component = _ref3.component,
        delegate = _ref3.delegate;
    return (0, _reference.createConstRef)(delegate.getContext(component), 'this');
  };

  _proto.getDestroyable = function getDestroyable(bucket) {
    var delegate = bucket.delegate;

    if (hasDestructors(delegate)) {
      var component = bucket.component;
      (0, _destroyable.registerDestructor)(bucket, function () {
        return delegate.destroyComponent(component);
      });
      return bucket;
    }

    return null;
  };

  _proto.getCapabilities = function getCapabilities() {
    return CAPABILITIES;
  };

  return CustomComponentManager;
}();
/**
 * Stores internal state about a component instance after it's been created.
 */


exports.CustomComponentManager = CustomComponentManager;

var CustomComponentState = function CustomComponentState(component, delegate, args) {
  this.component = component;
  this.delegate = delegate;
  this.args = args;
};

exports.CustomComponentState = CustomComponentState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
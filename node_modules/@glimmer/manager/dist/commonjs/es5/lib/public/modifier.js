"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.modifierCapabilities = modifierCapabilities;
exports.reifyArgs = reifyArgs;
exports.CustomModifierManager = void 0;

var _env = require("@glimmer/env");

var _destroyable = require("@glimmer/destroyable");

var _reference = require("@glimmer/reference");

var _util = require("@glimmer/util");

var _validator = require("@glimmer/validator");

var _capabilities = require("../util/capabilities");

var _argsProxy = require("../util/args-proxy");

function modifierCapabilities(managerAPI, optionalFeatures) {
  if (optionalFeatures === void 0) {
    optionalFeatures = {};
  }

  if (_env.DEBUG && managerAPI !== '3.22') {
    throw new Error('Invalid modifier manager compatibility specified');
  }

  return (0, _capabilities.buildCapabilities)({
    disableAutoTracking: Boolean(optionalFeatures.disableAutoTracking)
  });
}
/**
  The CustomModifierManager allows addons to provide custom modifier
  implementations that integrate seamlessly into Ember. This is accomplished
  through a delegate, registered with the custom modifier manager, which
  implements a set of hooks that determine modifier behavior.
  To create a custom modifier manager, instantiate a new CustomModifierManager
  class and pass the delegate as the first argument:

  ```js
  let manager = new CustomModifierManager({
    // ...delegate implementation...
  });
  ```

  ## Delegate Hooks

  Throughout the lifecycle of a modifier, the modifier manager will invoke
  delegate hooks that are responsible for surfacing those lifecycle changes to
  the end developer.
  * `createModifier()` - invoked when a new instance of a modifier should be created
  * `installModifier()` - invoked when the modifier is installed on the element
  * `updateModifier()` - invoked when the arguments passed to a modifier change
  * `destroyModifier()` - invoked when the modifier is about to be destroyed
*/


var CustomModifierManager = /*#__PURE__*/function () {
  function CustomModifierManager(factory) {
    this.factory = factory;
    this.componentManagerDelegates = new WeakMap();
  }

  var _proto = CustomModifierManager.prototype;

  _proto.getDelegateFor = function getDelegateFor(owner) {
    var componentManagerDelegates = this.componentManagerDelegates;
    var delegate = componentManagerDelegates.get(owner);

    if (delegate === undefined) {
      var factory = this.factory;
      delegate = factory(owner);

      if (_env.DEBUG && !_capabilities.FROM_CAPABILITIES.has(delegate.capabilities)) {
        // TODO: This error message should make sense in both Ember and Glimmer https://github.com/glimmerjs/glimmer-vm/issues/1200
        throw new Error("Custom modifier managers must have a `capabilities` property that is the result of calling the `capabilities('3.22')` (imported via `import { capabilities } from '@ember/modifier';`). Received: `" + JSON.stringify(delegate.capabilities) + "` for: `" + delegate + "`");
      }

      componentManagerDelegates.set(owner, delegate);
    }

    return delegate;
  };

  _proto.create = function create(owner, element, definition, capturedArgs) {
    var delegate = this.getDelegateFor(owner);
    var args = (0, _argsProxy.argsProxyFor)(capturedArgs, 'modifier');
    var instance = delegate.createModifier(definition, args);
    var tag = (0, _validator.createUpdatableTag)();
    var state;
    state = {
      tag: tag,
      element: element,
      delegate: delegate,
      args: args,
      modifier: instance
    };

    if (_env.DEBUG) {
      state.debugName = typeof definition === 'function' ? definition.name : definition.toString();
    }

    (0, _destroyable.registerDestructor)(state, function () {
      return delegate.destroyModifier(instance, args);
    });
    return state;
  };

  _proto.getDebugName = function getDebugName(_ref) {
    var debugName = _ref.debugName;
    return debugName;
  };

  _proto.getTag = function getTag(_ref2) {
    var tag = _ref2.tag;
    return tag;
  };

  _proto.install = function install(_ref3) {
    var element = _ref3.element,
        args = _ref3.args,
        modifier = _ref3.modifier,
        delegate = _ref3.delegate;
    var capabilities = delegate.capabilities;

    if (capabilities.disableAutoTracking === true) {
      (0, _validator.untrack)(function () {
        return delegate.installModifier(modifier, element, args);
      });
    } else {
      delegate.installModifier(modifier, element, args);
    }
  };

  _proto.update = function update(_ref4) {
    var args = _ref4.args,
        modifier = _ref4.modifier,
        delegate = _ref4.delegate;
    var capabilities = delegate.capabilities;

    if (capabilities.disableAutoTracking === true) {
      (0, _validator.untrack)(function () {
        return delegate.updateModifier(modifier, args);
      });
    } else {
      delegate.updateModifier(modifier, args);
    }
  };

  _proto.getDestroyable = function getDestroyable(state) {
    return state;
  };

  return CustomModifierManager;
}();

exports.CustomModifierManager = CustomModifierManager;

function reifyArgs(_ref5) {
  var named = _ref5.named,
      positional = _ref5.positional;
  var reifiedNamed = (0, _util.dict)();

  for (var key in named) {
    reifiedNamed[key] = (0, _reference.valueForRef)(named[key]);
  }

  var reifiedPositional = positional.map(_reference.valueForRef);
  return {
    named: reifiedNamed,
    positional: reifiedPositional
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCustomTagFor = getCustomTagFor;
exports.setCustomTagFor = setCustomTagFor;
exports.argsProxyFor = void 0;

var _env = require("@glimmer/env");

var _reference = require("@glimmer/reference");

var _util = require("@glimmer/util");

var _validator = require("@glimmer/validator");

var CUSTOM_TAG_FOR = new WeakMap();

function getCustomTagFor(obj) {
  return CUSTOM_TAG_FOR.get(obj);
}

function setCustomTagFor(obj, customTagFn) {
  CUSTOM_TAG_FOR.set(obj, customTagFn);
}

function convertToInt(prop) {
  if (typeof prop === 'symbol') return null;
  var num = Number(prop);
  if (isNaN(num)) return null;
  return num % 1 === 0 ? num : null;
}

function tagForNamedArg(namedArgs, key) {
  return (0, _validator.track)(function () {
    if (key in namedArgs) {
      (0, _reference.valueForRef)(namedArgs[key]);
    }
  });
}

function tagForPositionalArg(positionalArgs, key) {
  return (0, _validator.track)(function () {
    if (key === '[]') {
      // consume all of the tags in the positional array
      positionalArgs.forEach(_reference.valueForRef);
    }

    var parsed = convertToInt(key);

    if (parsed !== null && parsed < positionalArgs.length) {
      // consume the tag of the referenced index
      (0, _reference.valueForRef)(positionalArgs[parsed]);
    }
  });
}

var argsProxyFor;
exports.argsProxyFor = argsProxyFor;

var NamedArgsProxy = /*#__PURE__*/function () {
  function NamedArgsProxy(named) {
    this.named = named;
  }

  var _proto = NamedArgsProxy.prototype;

  _proto.get = function get(_target, prop) {
    var ref = this.named[prop];

    if (ref !== undefined) {
      return (0, _reference.valueForRef)(ref);
    }
  };

  _proto.has = function has(_target, prop) {
    return prop in this.named;
  };

  _proto.ownKeys = function ownKeys() {
    return Object.keys(this.named);
  };

  _proto.isExtensible = function isExtensible() {
    return false;
  };

  _proto.getOwnPropertyDescriptor = function getOwnPropertyDescriptor(_target, prop) {
    if (_env.DEBUG && !(prop in this.named)) {
      throw new Error("args proxies do not have real property descriptors, so you should never need to call getOwnPropertyDescriptor yourself. This code exists for enumerability, such as in for-in loops and Object.keys(). Attempted to get the descriptor for `" + String(prop) + "`");
    }

    return {
      enumerable: true,
      configurable: true
    };
  };

  return NamedArgsProxy;
}();

var PositionalArgsProxy = /*#__PURE__*/function () {
  function PositionalArgsProxy(positional) {
    this.positional = positional;
  }

  var _proto2 = PositionalArgsProxy.prototype;

  _proto2.get = function get(target, prop) {
    var positional = this.positional;

    if (prop === 'length') {
      return positional.length;
    }

    var parsed = convertToInt(prop);

    if (parsed !== null && parsed < positional.length) {
      return (0, _reference.valueForRef)(positional[parsed]);
    }

    return target[prop];
  };

  _proto2.isExtensible = function isExtensible() {
    return false;
  };

  _proto2.has = function has(_target, prop) {
    var parsed = convertToInt(prop);
    return parsed !== null && parsed < this.positional.length;
  };

  return PositionalArgsProxy;
}();

if (_util.HAS_NATIVE_PROXY) {
  exports.argsProxyFor = argsProxyFor = function argsProxyFor(capturedArgs, type) {
    var named = capturedArgs.named,
        positional = capturedArgs.positional;

    var getNamedTag = function getNamedTag(_obj, key) {
      return tagForNamedArg(named, key);
    };

    var getPositionalTag = function getPositionalTag(_obj, key) {
      return tagForPositionalArg(positional, key);
    };

    var namedHandler = new NamedArgsProxy(named);
    var positionalHandler = new PositionalArgsProxy(positional);
    var namedTarget = Object.create(null);
    var positionalTarget = [];

    if (_env.DEBUG) {
      var setHandler = function setHandler(_target, prop) {
        throw new Error("You attempted to set " + String(prop) + " on the arguments of a component, helper, or modifier. Arguments are immutable and cannot be updated directly; they always represent the values that are passed down. If you want to set default values, you should use a getter and local tracked state instead.");
      };

      var forInDebugHandler = function forInDebugHandler() {
        throw new Error("Object.keys() was called on the positional arguments array for a " + type + ", which is not supported. This function is a low-level function that should not need to be called for positional argument arrays. You may be attempting to iterate over the array using for...in instead of for...of.");
      };

      namedHandler.set = setHandler;
      positionalHandler.set = setHandler;
      positionalHandler.ownKeys = forInDebugHandler;
    }

    var namedProxy = new Proxy(namedTarget, namedHandler);
    var positionalProxy = new Proxy(positionalTarget, positionalHandler);
    setCustomTagFor(namedProxy, getNamedTag);
    setCustomTagFor(positionalProxy, getPositionalTag);
    return {
      named: namedProxy,
      positional: positionalProxy
    };
  };
} else {
  exports.argsProxyFor = argsProxyFor = function argsProxyFor(capturedArgs, _type) {
    var named = capturedArgs.named,
        positional = capturedArgs.positional;

    var getNamedTag = function getNamedTag(_obj, key) {
      return tagForNamedArg(named, key);
    };

    var getPositionalTag = function getPositionalTag(_obj, key) {
      return tagForPositionalArg(positional, key);
    };

    var namedProxy = {};
    var positionalProxy = [];
    setCustomTagFor(namedProxy, getNamedTag);
    setCustomTagFor(positionalProxy, getPositionalTag);
    Object.keys(named).forEach(function (name) {
      Object.defineProperty(namedProxy, name, {
        enumerable: true,
        configurable: true,
        get: function get() {
          return (0, _reference.valueForRef)(named[name]);
        }
      });
    });
    positional.forEach(function (ref, index) {
      Object.defineProperty(positionalProxy, index, {
        enumerable: true,
        configurable: true,
        get: function get() {
          return (0, _reference.valueForRef)(ref);
        }
      });
    });

    if (_env.DEBUG) {
      // Prevent mutations in development mode. This will not prevent the
      // proxy from updating, but will prevent assigning new values or pushing
      // for instance.
      Object.freeze(namedProxy);
      Object.freeze(positionalProxy);
    }

    return {
      named: namedProxy,
      positional: positionalProxy
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
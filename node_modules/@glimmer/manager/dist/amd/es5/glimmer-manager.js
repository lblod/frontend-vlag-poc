define('@glimmer/manager', ['exports', '@glimmer/env', '@glimmer/util', '@glimmer/global-context', '@glimmer/destroyable', '@glimmer/reference', '@glimmer/validator'], function (exports, env, util, globalContext, destroyable, reference, validator) { 'use strict';

  var FROM_CAPABILITIES = env.DEBUG ? new util._WeakSet() : undefined;
  function buildCapabilities(capabilities) {
    if (env.DEBUG) {
      FROM_CAPABILITIES.add(capabilities);
      Object.freeze(capabilities);
    }

    return capabilities;
  }
  /**
   * Converts a ComponentCapabilities object into a 32-bit integer representation.
   */

  function capabilityFlagsFrom(capabilities) {
    return 0 | (capabilities.dynamicLayout ? 1
    /* DynamicLayout */
    : 0) | (capabilities.dynamicTag ? 2
    /* DynamicTag */
    : 0) | (capabilities.prepareArgs ? 4
    /* PrepareArgs */
    : 0) | (capabilities.createArgs ? 8
    /* CreateArgs */
    : 0) | (capabilities.attributeHook ? 16
    /* AttributeHook */
    : 0) | (capabilities.elementHook ? 32
    /* ElementHook */
    : 0) | (capabilities.dynamicScope ? 64
    /* DynamicScope */
    : 0) | (capabilities.createCaller ? 128
    /* CreateCaller */
    : 0) | (capabilities.updateHook ? 256
    /* UpdateHook */
    : 0) | (capabilities.createInstance ? 512
    /* CreateInstance */
    : 0) | (capabilities.wrapped ? 1024
    /* Wrapped */
    : 0) | (capabilities.willDestroy ? 2048
    /* WillDestroy */
    : 0) | (capabilities.hasSubOwner ? 4096
    /* HasSubOwner */
    : 0);
  }
  function managerHasCapability(_manager, capabilities, capability) {
    return !!(capabilities & capability);
  }
  function hasCapability(capabilities, capability) {
    return !!(capabilities & capability);
  }

  var CUSTOM_TAG_FOR = new WeakMap();
  function getCustomTagFor(obj) {
    return CUSTOM_TAG_FOR.get(obj);
  }
  function setCustomTagFor(obj, customTagFn) {
    CUSTOM_TAG_FOR.set(obj, customTagFn);
  }

  function convertToInt(prop) {
    if (typeof prop === 'symbol') return null;
    var num = Number(prop);
    if (isNaN(num)) return null;
    return num % 1 === 0 ? num : null;
  }

  function tagForNamedArg(namedArgs, key) {
    return validator.track(function () {
      if (key in namedArgs) {
        reference.valueForRef(namedArgs[key]);
      }
    });
  }

  function tagForPositionalArg(positionalArgs, key) {
    return validator.track(function () {
      if (key === '[]') {
        // consume all of the tags in the positional array
        positionalArgs.forEach(reference.valueForRef);
      }

      var parsed = convertToInt(key);

      if (parsed !== null && parsed < positionalArgs.length) {
        // consume the tag of the referenced index
        reference.valueForRef(positionalArgs[parsed]);
      }
    });
  }

  var argsProxyFor;

  var NamedArgsProxy = /*#__PURE__*/function () {
    function NamedArgsProxy(named) {
      this.named = named;
    }

    var _proto = NamedArgsProxy.prototype;

    _proto.get = function get(_target, prop) {
      var ref = this.named[prop];

      if (ref !== undefined) {
        return reference.valueForRef(ref);
      }
    };

    _proto.has = function has(_target, prop) {
      return prop in this.named;
    };

    _proto.ownKeys = function ownKeys() {
      return Object.keys(this.named);
    };

    _proto.isExtensible = function isExtensible() {
      return false;
    };

    _proto.getOwnPropertyDescriptor = function getOwnPropertyDescriptor(_target, prop) {
      if (env.DEBUG && !(prop in this.named)) {
        throw new Error("args proxies do not have real property descriptors, so you should never need to call getOwnPropertyDescriptor yourself. This code exists for enumerability, such as in for-in loops and Object.keys(). Attempted to get the descriptor for `" + String(prop) + "`");
      }

      return {
        enumerable: true,
        configurable: true
      };
    };

    return NamedArgsProxy;
  }();

  var PositionalArgsProxy = /*#__PURE__*/function () {
    function PositionalArgsProxy(positional) {
      this.positional = positional;
    }

    var _proto2 = PositionalArgsProxy.prototype;

    _proto2.get = function get(target, prop) {
      var positional = this.positional;

      if (prop === 'length') {
        return positional.length;
      }

      var parsed = convertToInt(prop);

      if (parsed !== null && parsed < positional.length) {
        return reference.valueForRef(positional[parsed]);
      }

      return target[prop];
    };

    _proto2.isExtensible = function isExtensible() {
      return false;
    };

    _proto2.has = function has(_target, prop) {
      var parsed = convertToInt(prop);
      return parsed !== null && parsed < this.positional.length;
    };

    return PositionalArgsProxy;
  }();

  if (util.HAS_NATIVE_PROXY) {
    argsProxyFor = function argsProxyFor(capturedArgs, type) {
      var named = capturedArgs.named,
          positional = capturedArgs.positional;

      var getNamedTag = function getNamedTag(_obj, key) {
        return tagForNamedArg(named, key);
      };

      var getPositionalTag = function getPositionalTag(_obj, key) {
        return tagForPositionalArg(positional, key);
      };

      var namedHandler = new NamedArgsProxy(named);
      var positionalHandler = new PositionalArgsProxy(positional);
      var namedTarget = Object.create(null);
      var positionalTarget = [];

      if (env.DEBUG) {
        var setHandler = function setHandler(_target, prop) {
          throw new Error("You attempted to set " + String(prop) + " on the arguments of a component, helper, or modifier. Arguments are immutable and cannot be updated directly; they always represent the values that are passed down. If you want to set default values, you should use a getter and local tracked state instead.");
        };

        var forInDebugHandler = function forInDebugHandler() {
          throw new Error("Object.keys() was called on the positional arguments array for a " + type + ", which is not supported. This function is a low-level function that should not need to be called for positional argument arrays. You may be attempting to iterate over the array using for...in instead of for...of.");
        };

        namedHandler.set = setHandler;
        positionalHandler.set = setHandler;
        positionalHandler.ownKeys = forInDebugHandler;
      }

      var namedProxy = new Proxy(namedTarget, namedHandler);
      var positionalProxy = new Proxy(positionalTarget, positionalHandler);
      setCustomTagFor(namedProxy, getNamedTag);
      setCustomTagFor(positionalProxy, getPositionalTag);
      return {
        named: namedProxy,
        positional: positionalProxy
      };
    };
  } else {
    argsProxyFor = function argsProxyFor(capturedArgs, _type) {
      var named = capturedArgs.named,
          positional = capturedArgs.positional;

      var getNamedTag = function getNamedTag(_obj, key) {
        return tagForNamedArg(named, key);
      };

      var getPositionalTag = function getPositionalTag(_obj, key) {
        return tagForPositionalArg(positional, key);
      };

      var namedProxy = {};
      var positionalProxy = [];
      setCustomTagFor(namedProxy, getNamedTag);
      setCustomTagFor(positionalProxy, getPositionalTag);
      Object.keys(named).forEach(function (name) {
        Object.defineProperty(namedProxy, name, {
          enumerable: true,
          configurable: true,
          get: function get() {
            return reference.valueForRef(named[name]);
          }
        });
      });
      positional.forEach(function (ref, index) {
        Object.defineProperty(positionalProxy, index, {
          enumerable: true,
          configurable: true,
          get: function get() {
            return reference.valueForRef(ref);
          }
        });
      });

      if (env.DEBUG) {
        // Prevent mutations in development mode. This will not prevent the
        // proxy from updating, but will prevent assigning new values or pushing
        // for instance.
        Object.freeze(namedProxy);
        Object.freeze(positionalProxy);
      }

      return {
        named: namedProxy,
        positional: positionalProxy
      };
    };
  }

  function helperCapabilities(managerAPI, options) {
    if (options === void 0) {
      options = {};
    }

    if (env.DEBUG && managerAPI !== '3.23') {
      throw new Error('Invalid helper manager compatibility specified');
    }

    if (env.DEBUG && (!(options.hasValue || options.hasScheduledEffect) || options.hasValue && options.hasScheduledEffect)) {
      throw new Error('You must pass either the `hasValue` OR the `hasScheduledEffect` capability when defining a helper manager. Passing neither, or both, is not permitted.');
    }

    if (env.DEBUG && options.hasScheduledEffect) {
      throw new Error('The `hasScheduledEffect` capability has not yet been implemented for helper managers. Please pass `hasValue` instead');
    }

    return buildCapabilities({
      hasValue: Boolean(options.hasValue),
      hasDestroyable: Boolean(options.hasDestroyable),
      hasScheduledEffect: Boolean(options.hasScheduledEffect)
    });
  } ////////////

  function hasValue(manager) {
    return manager.capabilities.hasValue;
  }
  function hasDestroyable(manager) {
    return manager.capabilities.hasDestroyable;
  } ////////////

  var CustomHelperManager = /*#__PURE__*/function () {
    function CustomHelperManager(factory) {
      this.factory = factory;
      this.helperManagerDelegates = new WeakMap();
      this.undefinedDelegate = null;
    }

    var _proto = CustomHelperManager.prototype;

    _proto.getDelegateForOwner = function getDelegateForOwner(owner) {
      var delegate = this.helperManagerDelegates.get(owner);

      if (delegate === undefined) {
        var factory = this.factory;
        delegate = factory(owner);

        if (env.DEBUG && !FROM_CAPABILITIES.has(delegate.capabilities)) {
          // TODO: This error message should make sense in both Ember and Glimmer https://github.com/glimmerjs/glimmer-vm/issues/1200
          throw new Error("Custom helper managers must have a `capabilities` property that is the result of calling the `capabilities('3.23')` (imported via `import { capabilities } from '@ember/helper';`). Received: `" + JSON.stringify(delegate.capabilities) + "` for: `" + delegate + "`");
        }

        this.helperManagerDelegates.set(owner, delegate);
      }

      return delegate;
    };

    _proto.getDelegateFor = function getDelegateFor(owner) {
      if (owner === undefined) {
        var undefinedDelegate = this.undefinedDelegate;

        if (undefinedDelegate === null) {
          var factory = this.factory;
          this.undefinedDelegate = undefinedDelegate = factory(undefined);
        }

        return undefinedDelegate;
      } else {
        return this.getDelegateForOwner(owner);
      }
    };

    _proto.getHelper = function getHelper(definition) {
      var _this = this;

      return function (capturedArgs, owner) {
        var _a, _b;

        var manager = _this.getDelegateFor(owner);

        var args = argsProxyFor(capturedArgs, 'helper');
        var bucket = manager.createHelper(definition, args);

        if (hasValue(manager)) {
          var cache = reference.createComputeRef(function () {
            return manager.getValue(bucket);
          }, null, env.DEBUG && manager.getDebugName && manager.getDebugName(definition));

          if (hasDestroyable(manager)) {
            destroyable.associateDestroyableChild(cache, manager.getDestroyable(bucket));
          }

          return cache;
        } else if (hasDestroyable(manager)) {
          var ref = reference.createConstRef(undefined, env.DEBUG && ((_b = (_a = manager.getDebugName) === null || _a === void 0 ? void 0 : _a.call(manager, definition)) !== null && _b !== void 0 ? _b : 'unknown helper'));
          destroyable.associateDestroyableChild(ref, manager.getDestroyable(bucket));
          return ref;
        } else {
          return reference.UNDEFINED_REFERENCE;
        }
      };
    };

    return CustomHelperManager;
  }();

  var FunctionHelperManager = /*#__PURE__*/function () {
    function FunctionHelperManager() {
      this.capabilities = buildCapabilities({
        hasValue: true,
        hasDestroyable: false,
        hasScheduledEffect: false
      });
    }

    var _proto = FunctionHelperManager.prototype;

    _proto.createHelper = function createHelper(fn, args) {
      return {
        fn: fn,
        args: args
      };
    };

    _proto.getValue = function getValue(_ref) {
      var fn = _ref.fn,
          args = _ref.args;

      if (Object.keys(args.named).length > 0) {
        var argsForFn = [].concat(args.positional, [args.named]);
        return fn.apply(void 0, argsForFn);
      }

      return fn.apply(void 0, args.positional);
    };

    _proto.getDebugName = function getDebugName(fn) {
      if (fn.name) {
        return "(helper function " + fn.name + ")";
      }

      return '(anonymous helper function)';
    };

    return FunctionHelperManager;
  }();

  var COMPONENT_MANAGERS = new WeakMap();
  var MODIFIER_MANAGERS = new WeakMap();
  var HELPER_MANAGERS = new WeakMap(); ///////////

  var getPrototypeOf = Object.getPrototypeOf;

  function setManager(map, manager, obj) {
    if (env.DEBUG && (typeof obj !== 'object' || obj === null) && typeof obj !== 'function') {
      throw new Error("Attempted to set a manager on a non-object value. Managers can only be associated with objects or functions. Value was " + util.debugToString(obj));
    }

    if (env.DEBUG && map.has(obj)) {
      throw new Error("Attempted to set the same type of manager multiple times on a value. You can only associate one manager of each type with a given value. Value was " + util.debugToString(obj));
    }

    map.set(obj, manager);
    return obj;
  }

  function getManager(map, obj) {
    var pointer = obj;

    while (pointer !== undefined && pointer !== null) {
      var manager = map.get(pointer);

      if (manager !== undefined) {
        return manager;
      }

      pointer = getPrototypeOf(pointer);
    }

    return undefined;
  } ///////////


  function setInternalModifierManager(manager, definition) {
    return setManager(MODIFIER_MANAGERS, manager, definition);
  }
  function getInternalModifierManager(definition, isOptional) {
    if (env.DEBUG && typeof definition !== 'function' && (typeof definition !== 'object' || definition === null)) {
      throw new Error("Attempted to use a value as a modifier, but it was not an object or function. Modifier definitions must be objects or functions with an associated modifier manager. The value was: " + definition);
    }

    var manager = getManager(MODIFIER_MANAGERS, definition);

    if (manager === undefined) {
      if (isOptional === true) {
        return null;
      } else if (env.DEBUG) {
        throw new Error("Attempted to load a modifier, but there wasn't a modifier manager associated with the definition. The definition was: " + util.debugToString(definition));
      }
    }

    return manager;
  }
  function setInternalHelperManager(manager, definition) {
    return setManager(HELPER_MANAGERS, manager, definition);
  }
  var DEFAULT_MANAGER = new CustomHelperManager(function () {
    return new FunctionHelperManager();
  });
  function getInternalHelperManager(definition, isOptional) {
    if (env.DEBUG && typeof definition !== 'function' && (typeof definition !== 'object' || definition === null)) {
      throw new Error("Attempted to use a value as a helper, but it was not an object or function. Helper definitions must be objects or functions with an associated helper manager. The value was: " + definition);
    }

    var manager = getManager(HELPER_MANAGERS, definition);

    if (globalContext.FEATURE_DEFAULT_HELPER_MANAGER) {
      // Functions are special-cased because functions are defined
      // as the "default" helper, per: https://github.com/emberjs/rfcs/pull/756
      if (manager === undefined && typeof definition === 'function') {
        manager = DEFAULT_MANAGER;
      }
    }

    if (manager) {
      return manager;
    } else if (isOptional === true) {
      return null;
    } else if (env.DEBUG) {
      throw new Error("Attempted to load a helper, but there wasn't a helper manager associated with the definition. The definition was: " + util.debugToString(definition));
    }

    return null;
  }
  function setInternalComponentManager(factory, obj) {
    return setManager(COMPONENT_MANAGERS, factory, obj);
  }
  function getInternalComponentManager(definition, isOptional) {
    if (env.DEBUG && typeof definition !== 'function' && (typeof definition !== 'object' || definition === null)) {
      throw new Error("Attempted to use a value as a component, but it was not an object or function. Component definitions must be objects or functions with an associated component manager. The value was: " + definition);
    }

    var manager = getManager(COMPONENT_MANAGERS, definition);

    if (manager === undefined) {
      if (isOptional === true) {
        return null;
      } else if (env.DEBUG) {
        throw new Error("Attempted to load a component, but there wasn't a component manager associated with the definition. The definition was: " + util.debugToString(definition));
      }
    }

    return manager;
  } ///////////

  function hasInternalComponentManager(definition) {
    return  getManager(COMPONENT_MANAGERS, definition) !== undefined;
  }
  function hasInternalHelperManager(definition) {
    return hasDefaultHelperManager(definition) || getManager(HELPER_MANAGERS, definition) !== undefined;
  }
  function hasInternalModifierManager(definition) {
    return  getManager(MODIFIER_MANAGERS, definition) !== undefined;
  }

  function hasDefaultHelperManager(definition) {
    if (globalContext.FEATURE_DEFAULT_HELPER_MANAGER) {
      return typeof definition === 'function';
    }

    return false;
  }

  var CAPABILITIES = {
    dynamicLayout: false,
    dynamicTag: false,
    prepareArgs: false,
    createArgs: true,
    attributeHook: false,
    elementHook: false,
    createCaller: false,
    dynamicScope: true,
    updateHook: true,
    createInstance: true,
    wrapped: false,
    willDestroy: false,
    hasSubOwner: false
  };
  function componentCapabilities(managerAPI, options) {
    if (options === void 0) {
      options = {};
    }

    if (env.DEBUG && managerAPI !== '3.13') {
      throw new Error('Invalid component manager compatibility specified');
    }

    var updateHook = Boolean(options.updateHook);
    return buildCapabilities({
      asyncLifeCycleCallbacks: Boolean(options.asyncLifecycleCallbacks),
      destructor: Boolean(options.destructor),
      updateHook: updateHook
    });
  }
  function hasAsyncLifeCycleCallbacks(delegate) {
    return delegate.capabilities.asyncLifeCycleCallbacks;
  }
  function hasUpdateHook(delegate) {
    return delegate.capabilities.updateHook;
  }
  function hasAsyncUpdateHook(delegate) {
    return hasAsyncLifeCycleCallbacks(delegate) && hasUpdateHook(delegate);
  }
  function hasDestructors(delegate) {
    return delegate.capabilities.destructor;
  }
  /**
    The CustomComponentManager allows addons to provide custom component
    implementations that integrate seamlessly into Ember. This is accomplished
    through a delegate, registered with the custom component manager, which
    implements a set of hooks that determine component behavior.

    To create a custom component manager, instantiate a new CustomComponentManager
    class and pass the delegate as the first argument:

    ```js
    let manager = new CustomComponentManager({
      // ...delegate implementation...
    });
    ```

    ## Delegate Hooks

    Throughout the lifecycle of a component, the component manager will invoke
    delegate hooks that are responsible for surfacing those lifecycle changes to
    the end developer.

    * `create()` - invoked when a new instance of a component should be created
    * `update()` - invoked when the arguments passed to a component change
    * `getContext()` - returns the object that should be
  */

  var CustomComponentManager = /*#__PURE__*/function () {
    function CustomComponentManager(factory) {
      this.factory = factory;
      this.componentManagerDelegates = new WeakMap();
    }

    var _proto = CustomComponentManager.prototype;

    _proto.getDelegateFor = function getDelegateFor(owner) {
      var componentManagerDelegates = this.componentManagerDelegates;
      var delegate = componentManagerDelegates.get(owner);

      if (delegate === undefined) {
        var factory = this.factory;
        delegate = factory(owner);

        if (env.DEBUG && !FROM_CAPABILITIES.has(delegate.capabilities)) {
          // TODO: This error message should make sense in both Ember and Glimmer https://github.com/glimmerjs/glimmer-vm/issues/1200
          throw new Error("Custom component managers must have a `capabilities` property that is the result of calling the `capabilities('3.13')` (imported via `import { capabilities } from '@ember/component';`). Received: `" + JSON.stringify(delegate.capabilities) + "` for: `" + delegate + "`");
        }

        componentManagerDelegates.set(owner, delegate);
      }

      return delegate;
    };

    _proto.create = function create(owner, definition, vmArgs) {
      var delegate = this.getDelegateFor(owner);
      var args = argsProxyFor(vmArgs.capture(), 'component');
      var component = delegate.createComponent(definition, args);
      return new CustomComponentState(component, delegate, args);
    };

    _proto.getDebugName = function getDebugName(definition) {
      return typeof definition === 'function' ? definition.name : definition.toString();
    };

    _proto.update = function update(bucket) {
      var delegate = bucket.delegate;

      if (hasUpdateHook(delegate)) {
        var component = bucket.component,
            args = bucket.args;
        delegate.updateComponent(component, args);
      }
    };

    _proto.didCreate = function didCreate(_ref) {
      var component = _ref.component,
          delegate = _ref.delegate;

      if (hasAsyncLifeCycleCallbacks(delegate)) {
        delegate.didCreateComponent(component);
      }
    };

    _proto.didUpdate = function didUpdate(_ref2) {
      var component = _ref2.component,
          delegate = _ref2.delegate;

      if (hasAsyncUpdateHook(delegate)) {
        delegate.didUpdateComponent(component);
      }
    };

    _proto.didRenderLayout = function didRenderLayout() {};

    _proto.didUpdateLayout = function didUpdateLayout() {};

    _proto.getSelf = function getSelf(_ref3) {
      var component = _ref3.component,
          delegate = _ref3.delegate;
      return reference.createConstRef(delegate.getContext(component), 'this');
    };

    _proto.getDestroyable = function getDestroyable(bucket) {
      var delegate = bucket.delegate;

      if (hasDestructors(delegate)) {
        var component = bucket.component;
        destroyable.registerDestructor(bucket, function () {
          return delegate.destroyComponent(component);
        });
        return bucket;
      }

      return null;
    };

    _proto.getCapabilities = function getCapabilities() {
      return CAPABILITIES;
    };

    return CustomComponentManager;
  }();
  /**
   * Stores internal state about a component instance after it's been created.
   */

  var CustomComponentState = function CustomComponentState(component, delegate, args) {
    this.component = component;
    this.delegate = delegate;
    this.args = args;
  };

  function modifierCapabilities(managerAPI, optionalFeatures) {
    if (optionalFeatures === void 0) {
      optionalFeatures = {};
    }

    if (env.DEBUG && managerAPI !== '3.22') {
      throw new Error('Invalid modifier manager compatibility specified');
    }

    return buildCapabilities({
      disableAutoTracking: Boolean(optionalFeatures.disableAutoTracking)
    });
  }
  /**
    The CustomModifierManager allows addons to provide custom modifier
    implementations that integrate seamlessly into Ember. This is accomplished
    through a delegate, registered with the custom modifier manager, which
    implements a set of hooks that determine modifier behavior.
    To create a custom modifier manager, instantiate a new CustomModifierManager
    class and pass the delegate as the first argument:

    ```js
    let manager = new CustomModifierManager({
      // ...delegate implementation...
    });
    ```

    ## Delegate Hooks

    Throughout the lifecycle of a modifier, the modifier manager will invoke
    delegate hooks that are responsible for surfacing those lifecycle changes to
    the end developer.
    * `createModifier()` - invoked when a new instance of a modifier should be created
    * `installModifier()` - invoked when the modifier is installed on the element
    * `updateModifier()` - invoked when the arguments passed to a modifier change
    * `destroyModifier()` - invoked when the modifier is about to be destroyed
  */

  var CustomModifierManager = /*#__PURE__*/function () {
    function CustomModifierManager(factory) {
      this.factory = factory;
      this.componentManagerDelegates = new WeakMap();
    }

    var _proto = CustomModifierManager.prototype;

    _proto.getDelegateFor = function getDelegateFor(owner) {
      var componentManagerDelegates = this.componentManagerDelegates;
      var delegate = componentManagerDelegates.get(owner);

      if (delegate === undefined) {
        var factory = this.factory;
        delegate = factory(owner);

        if (env.DEBUG && !FROM_CAPABILITIES.has(delegate.capabilities)) {
          // TODO: This error message should make sense in both Ember and Glimmer https://github.com/glimmerjs/glimmer-vm/issues/1200
          throw new Error("Custom modifier managers must have a `capabilities` property that is the result of calling the `capabilities('3.22')` (imported via `import { capabilities } from '@ember/modifier';`). Received: `" + JSON.stringify(delegate.capabilities) + "` for: `" + delegate + "`");
        }

        componentManagerDelegates.set(owner, delegate);
      }

      return delegate;
    };

    _proto.create = function create(owner, element, definition, capturedArgs) {
      var delegate = this.getDelegateFor(owner);
      var args = argsProxyFor(capturedArgs, 'modifier');
      var instance = delegate.createModifier(definition, args);
      var tag = validator.createUpdatableTag();
      var state;
      state = {
        tag: tag,
        element: element,
        delegate: delegate,
        args: args,
        modifier: instance
      };

      if (env.DEBUG) {
        state.debugName = typeof definition === 'function' ? definition.name : definition.toString();
      }

      destroyable.registerDestructor(state, function () {
        return delegate.destroyModifier(instance, args);
      });
      return state;
    };

    _proto.getDebugName = function getDebugName(_ref) {
      var debugName = _ref.debugName;
      return debugName;
    };

    _proto.getTag = function getTag(_ref2) {
      var tag = _ref2.tag;
      return tag;
    };

    _proto.install = function install(_ref3) {
      var element = _ref3.element,
          args = _ref3.args,
          modifier = _ref3.modifier,
          delegate = _ref3.delegate;
      var capabilities = delegate.capabilities;

      if (capabilities.disableAutoTracking === true) {
        validator.untrack(function () {
          return delegate.installModifier(modifier, element, args);
        });
      } else {
        delegate.installModifier(modifier, element, args);
      }
    };

    _proto.update = function update(_ref4) {
      var args = _ref4.args,
          modifier = _ref4.modifier,
          delegate = _ref4.delegate;
      var capabilities = delegate.capabilities;

      if (capabilities.disableAutoTracking === true) {
        validator.untrack(function () {
          return delegate.updateModifier(modifier, args);
        });
      } else {
        delegate.updateModifier(modifier, args);
      }
    };

    _proto.getDestroyable = function getDestroyable(state) {
      return state;
    };

    return CustomModifierManager;
  }();

  function setComponentManager(factory, obj) {
    return setInternalComponentManager(new CustomComponentManager(factory), obj);
  }
  function setModifierManager(factory, obj) {
    return setInternalModifierManager(new CustomModifierManager(factory), obj);
  }
  function setHelperManager(factory, obj) {
    return setInternalHelperManager(new CustomHelperManager(factory), obj);
  }

  var TEMPLATES = new WeakMap();
  var getPrototypeOf$1 = Object.getPrototypeOf;
  function setComponentTemplate(factory, obj) {
    if (env.DEBUG && !(obj !== null && (typeof obj === 'object' || typeof obj === 'function'))) {
      throw new Error("Cannot call `setComponentTemplate` on `" + util.debugToString(obj) + "`");
    }

    if (env.DEBUG && TEMPLATES.has(obj)) {
      throw new Error("Cannot call `setComponentTemplate` multiple times on the same class (`" + util.debugToString(obj) + "`)");
    }

    TEMPLATES.set(obj, factory);
    return obj;
  }
  function getComponentTemplate(obj) {
    var pointer = obj;

    while (pointer !== null) {
      var template = TEMPLATES.get(pointer);

      if (template !== undefined) {
        return template;
      }

      pointer = getPrototypeOf$1(pointer);
    }

    return undefined;
  }

  exports.CustomComponentManager = CustomComponentManager;
  exports.CustomHelperManager = CustomHelperManager;
  exports.CustomModifierManager = CustomModifierManager;
  exports.capabilityFlagsFrom = capabilityFlagsFrom;
  exports.componentCapabilities = componentCapabilities;
  exports.getComponentTemplate = getComponentTemplate;
  exports.getCustomTagFor = getCustomTagFor;
  exports.getInternalComponentManager = getInternalComponentManager;
  exports.getInternalHelperManager = getInternalHelperManager;
  exports.getInternalModifierManager = getInternalModifierManager;
  exports.hasCapability = hasCapability;
  exports.hasDestroyable = hasDestroyable;
  exports.hasInternalComponentManager = hasInternalComponentManager;
  exports.hasInternalHelperManager = hasInternalHelperManager;
  exports.hasInternalModifierManager = hasInternalModifierManager;
  exports.hasValue = hasValue;
  exports.helperCapabilities = helperCapabilities;
  exports.managerHasCapability = managerHasCapability;
  exports.modifierCapabilities = modifierCapabilities;
  exports.setComponentManager = setComponentManager;
  exports.setComponentTemplate = setComponentTemplate;
  exports.setCustomTagFor = setCustomTagFor;
  exports.setHelperManager = setHelperManager;
  exports.setInternalComponentManager = setInternalComponentManager;
  exports.setInternalHelperManager = setInternalHelperManager;
  exports.setInternalModifierManager = setInternalModifierManager;
  exports.setModifierManager = setModifierManager;

  Object.defineProperty(exports, '__esModule', { value: true });

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

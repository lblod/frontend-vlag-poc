import { Capabilities, InternalComponentCapabilities, InternalComponentManager, WithUpdateHook, WithPrepareArgs, WithCreateInstance, WithDynamicLayout, InternalComponentCapability, WithSubOwner } from '@glimmer/interfaces';
export declare const FROM_CAPABILITIES: WeakSet<object> | undefined;
export declare function buildCapabilities<T extends object>(capabilities: T): T & Capabilities;
/**
 * Converts a ComponentCapabilities object into a 32-bit integer representation.
 */
export declare function capabilityFlagsFrom(capabilities: InternalComponentCapabilities): InternalComponentCapability;
export interface InternalComponentCapabilityMap {
    [InternalComponentCapability.DynamicLayout]: WithDynamicLayout;
    [InternalComponentCapability.DynamicTag]: InternalComponentManager;
    [InternalComponentCapability.PrepareArgs]: WithPrepareArgs;
    [InternalComponentCapability.CreateArgs]: InternalComponentManager;
    [InternalComponentCapability.AttributeHook]: InternalComponentManager;
    [InternalComponentCapability.ElementHook]: InternalComponentManager;
    [InternalComponentCapability.DynamicScope]: InternalComponentManager;
    [InternalComponentCapability.CreateCaller]: InternalComponentManager;
    [InternalComponentCapability.UpdateHook]: WithUpdateHook;
    [InternalComponentCapability.CreateInstance]: WithCreateInstance;
    [InternalComponentCapability.Wrapped]: InternalComponentManager;
    [InternalComponentCapability.WillDestroy]: InternalComponentManager;
    [InternalComponentCapability.HasSubOwner]: WithSubOwner;
}
export declare function managerHasCapability<F extends keyof InternalComponentCapabilityMap>(_manager: InternalComponentManager, capabilities: InternalComponentCapability, capability: F): _manager is InternalComponentCapabilityMap[F];
export declare function hasCapability<F extends keyof InternalComponentCapabilityMap>(capabilities: InternalComponentCapability, capability: F): boolean;
//# sourceMappingURL=capabilities.d.ts.map
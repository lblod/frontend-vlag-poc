import { Helper, HelperCapabilities, HelperCapabilitiesVersions, HelperDefinitionState, HelperManager, HelperManagerWithDestroyable, HelperManagerWithValue, InternalHelperManager, Owner } from '@glimmer/interfaces';
import { ManagerFactory } from './index';
export declare function helperCapabilities<Version extends keyof HelperCapabilitiesVersions>(managerAPI: Version, options?: Partial<HelperCapabilities>): HelperCapabilities;
export declare function hasValue(manager: HelperManager<unknown>): manager is HelperManagerWithValue<unknown>;
export declare function hasDestroyable(manager: HelperManager<unknown>): manager is HelperManagerWithDestroyable<unknown>;
export declare class CustomHelperManager<O extends Owner = Owner> implements InternalHelperManager<O> {
    private factory;
    constructor(factory: ManagerFactory<O | undefined, HelperManager<unknown>>);
    private helperManagerDelegates;
    private undefinedDelegate;
    private getDelegateForOwner;
    getDelegateFor(owner: O | undefined): HelperManager<unknown>;
    getHelper(definition: HelperDefinitionState): Helper;
}
//# sourceMappingURL=helper.d.ts.map
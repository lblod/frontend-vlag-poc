import { ComponentManager, HelperManager, ModifierManager, Owner } from '@glimmer/interfaces';
declare type Manager = ComponentManager<unknown> | ModifierManager<unknown> | HelperManager<unknown>;
export declare type ManagerFactory<O, D extends Manager = Manager> = (owner: O) => D;
export declare function setComponentManager<O extends Owner, T extends object>(factory: ManagerFactory<O, ComponentManager<unknown>>, obj: T): T;
export declare function setModifierManager<O extends Owner, T extends object>(factory: ManagerFactory<O, ModifierManager<unknown>>, obj: T): T;
export declare function setHelperManager<O extends Owner, T extends object>(factory: ManagerFactory<O | undefined, HelperManager<unknown>>, obj: T): T;
export {};
//# sourceMappingURL=index.d.ts.map
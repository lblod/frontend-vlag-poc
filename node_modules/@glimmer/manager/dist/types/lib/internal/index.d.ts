import { InternalComponentManager, InternalModifierManager, Helper, Owner } from '@glimmer/interfaces';
import { CustomHelperManager } from '../public/helper';
export declare function setInternalModifierManager<T extends object>(manager: InternalModifierManager, definition: T): T;
export declare function getInternalModifierManager(definition: object): InternalModifierManager;
export declare function getInternalModifierManager(definition: object, isOptional: true | undefined): InternalModifierManager | null;
export declare function setInternalHelperManager<T extends object, O extends Owner>(manager: CustomHelperManager<O> | Helper<O>, definition: T): T;
export declare function getInternalHelperManager(definition: object): CustomHelperManager | Helper;
export declare function getInternalHelperManager(definition: object, isOptional: true | undefined): CustomHelperManager | Helper | null;
export declare function setInternalComponentManager<T extends object>(factory: InternalComponentManager, obj: T): T;
export declare function getInternalComponentManager(definition: object): InternalComponentManager;
export declare function getInternalComponentManager(definition: object, isOptional: true | undefined): InternalComponentManager | null;
export declare function hasInternalComponentManager(definition: object): boolean;
export declare function hasInternalHelperManager(definition: object): boolean;
export declare function hasInternalModifierManager(definition: object): boolean;
//# sourceMappingURL=index.d.ts.map
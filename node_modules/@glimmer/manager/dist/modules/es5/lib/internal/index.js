import { DEBUG } from '@glimmer/env';
import { debugToString } from '@glimmer/util';
import { FEATURE_DEFAULT_HELPER_MANAGER } from '@glimmer/global-context';
import { CustomHelperManager } from '../public/helper';
import { FunctionHelperManager } from './defaults';
var COMPONENT_MANAGERS = new WeakMap();
var MODIFIER_MANAGERS = new WeakMap();
var HELPER_MANAGERS = new WeakMap(); ///////////

var getPrototypeOf = Object.getPrototypeOf;

function setManager(map, manager, obj) {
  if (DEBUG && (typeof obj !== 'object' || obj === null) && typeof obj !== 'function') {
    throw new Error("Attempted to set a manager on a non-object value. Managers can only be associated with objects or functions. Value was " + debugToString(obj));
  }

  if (DEBUG && map.has(obj)) {
    throw new Error("Attempted to set the same type of manager multiple times on a value. You can only associate one manager of each type with a given value. Value was " + debugToString(obj));
  }

  map.set(obj, manager);
  return obj;
}

function getManager(map, obj) {
  var pointer = obj;

  while (pointer !== undefined && pointer !== null) {
    var manager = map.get(pointer);

    if (manager !== undefined) {
      return manager;
    }

    pointer = getPrototypeOf(pointer);
  }

  return undefined;
} ///////////


export function setInternalModifierManager(manager, definition) {
  return setManager(MODIFIER_MANAGERS, manager, definition);
}
export function getInternalModifierManager(definition, isOptional) {
  if (DEBUG && typeof definition !== 'function' && (typeof definition !== 'object' || definition === null)) {
    throw new Error("Attempted to use a value as a modifier, but it was not an object or function. Modifier definitions must be objects or functions with an associated modifier manager. The value was: " + definition);
  }

  var manager = getManager(MODIFIER_MANAGERS, definition);

  if (manager === undefined) {
    if (isOptional === true) {
      return null;
    } else if (DEBUG) {
      throw new Error("Attempted to load a modifier, but there wasn't a modifier manager associated with the definition. The definition was: " + debugToString(definition));
    }
  }

  return manager;
}
export function setInternalHelperManager(manager, definition) {
  return setManager(HELPER_MANAGERS, manager, definition);
}
var DEFAULT_MANAGER = new CustomHelperManager(function () {
  return new FunctionHelperManager();
});
export function getInternalHelperManager(definition, isOptional) {
  if (DEBUG && typeof definition !== 'function' && (typeof definition !== 'object' || definition === null)) {
    throw new Error("Attempted to use a value as a helper, but it was not an object or function. Helper definitions must be objects or functions with an associated helper manager. The value was: " + definition);
  }

  var manager = getManager(HELPER_MANAGERS, definition);

  if (FEATURE_DEFAULT_HELPER_MANAGER) {
    // Functions are special-cased because functions are defined
    // as the "default" helper, per: https://github.com/emberjs/rfcs/pull/756
    if (manager === undefined && typeof definition === 'function') {
      manager = DEFAULT_MANAGER;
    }
  }

  if (manager) {
    return manager;
  } else if (isOptional === true) {
    return null;
  } else if (DEBUG) {
    throw new Error("Attempted to load a helper, but there wasn't a helper manager associated with the definition. The definition was: " + debugToString(definition));
  }

  return null;
}
export function setInternalComponentManager(factory, obj) {
  return setManager(COMPONENT_MANAGERS, factory, obj);
}
export function getInternalComponentManager(definition, isOptional) {
  if (DEBUG && typeof definition !== 'function' && (typeof definition !== 'object' || definition === null)) {
    throw new Error("Attempted to use a value as a component, but it was not an object or function. Component definitions must be objects or functions with an associated component manager. The value was: " + definition);
  }

  var manager = getManager(COMPONENT_MANAGERS, definition);

  if (manager === undefined) {
    if (isOptional === true) {
      return null;
    } else if (DEBUG) {
      throw new Error("Attempted to load a component, but there wasn't a component manager associated with the definition. The definition was: " + debugToString(definition));
    }
  }

  return manager;
} ///////////

export function hasInternalComponentManager(definition) {
  return hasDefaultComponentManager(definition) || getManager(COMPONENT_MANAGERS, definition) !== undefined;
}
export function hasInternalHelperManager(definition) {
  return hasDefaultHelperManager(definition) || getManager(HELPER_MANAGERS, definition) !== undefined;
}
export function hasInternalModifierManager(definition) {
  return hasDefaultModifierManager(definition) || getManager(MODIFIER_MANAGERS, definition) !== undefined;
}

function hasDefaultComponentManager(_definition) {
  return false;
}

function hasDefaultHelperManager(definition) {
  if (FEATURE_DEFAULT_HELPER_MANAGER) {
    return typeof definition === 'function';
  }

  return false;
}

function hasDefaultModifierManager(_definition) {
  return false;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
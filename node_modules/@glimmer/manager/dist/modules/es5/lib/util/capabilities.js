import { DEBUG } from '@glimmer/env';
import { _WeakSet } from '@glimmer/util';
export var FROM_CAPABILITIES = DEBUG ? new _WeakSet() : undefined;
export function buildCapabilities(capabilities) {
  if (DEBUG) {
    FROM_CAPABILITIES.add(capabilities);
    Object.freeze(capabilities);
  }

  return capabilities;
}
/**
 * Converts a ComponentCapabilities object into a 32-bit integer representation.
 */

export function capabilityFlagsFrom(capabilities) {
  return 0 | (capabilities.dynamicLayout ? 1
  /* DynamicLayout */
  : 0) | (capabilities.dynamicTag ? 2
  /* DynamicTag */
  : 0) | (capabilities.prepareArgs ? 4
  /* PrepareArgs */
  : 0) | (capabilities.createArgs ? 8
  /* CreateArgs */
  : 0) | (capabilities.attributeHook ? 16
  /* AttributeHook */
  : 0) | (capabilities.elementHook ? 32
  /* ElementHook */
  : 0) | (capabilities.dynamicScope ? 64
  /* DynamicScope */
  : 0) | (capabilities.createCaller ? 128
  /* CreateCaller */
  : 0) | (capabilities.updateHook ? 256
  /* UpdateHook */
  : 0) | (capabilities.createInstance ? 512
  /* CreateInstance */
  : 0) | (capabilities.wrapped ? 1024
  /* Wrapped */
  : 0) | (capabilities.willDestroy ? 2048
  /* WillDestroy */
  : 0) | (capabilities.hasSubOwner ? 4096
  /* HasSubOwner */
  : 0);
}
export function managerHasCapability(_manager, capabilities, capability) {
  return !!(capabilities & capability);
}
export function hasCapability(capabilities, capability) {
  return !!(capabilities & capability);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL21hbmFnZXIvbGliL3V0aWwvY2FwYWJpbGl0aWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQUEsS0FBQSxRQUFBLGNBQUE7QUFDQSxTQUFBLFFBQUEsUUFBQSxlQUFBO0FBY0EsT0FBTyxJQUFNLGlCQUFpQixHQUFHLEtBQUssR0FBRyxJQUFILFFBQUcsRUFBSCxHQUEvQixTQUFBO0FBRVAsT0FBTSxTQUFBLGlCQUFBLENBQUEsWUFBQSxFQUE2RDtBQUNqRSxNQUFBLEtBQUEsRUFBVztBQUNULElBQUEsaUJBQWtCLENBQWxCLEdBQUEsQ0FBQSxZQUFBO0FBQ0EsSUFBQSxNQUFNLENBQU4sTUFBQSxDQUFBLFlBQUE7QUFDRDs7QUFFRCxTQUFBLFlBQUE7QUFDRDtBQUVEOzs7O0FBR0EsT0FBTSxTQUFBLG1CQUFBLENBQUEsWUFBQSxFQUN1QztBQUUzQyxTQUNFLEtBQ0MsWUFBWSxDQUFaLGFBQUEsR0FBNEI7QUFBQTtBQUE1QixJQURELENBQUEsS0FFQyxZQUFZLENBQVosVUFBQSxHQUF5QjtBQUFBO0FBQXpCLElBRkQsQ0FBQSxLQUdDLFlBQVksQ0FBWixXQUFBLEdBQTBCO0FBQUE7QUFBMUIsSUFIRCxDQUFBLEtBSUMsWUFBWSxDQUFaLFVBQUEsR0FBeUI7QUFBQTtBQUF6QixJQUpELENBQUEsS0FLQyxZQUFZLENBQVosYUFBQSxHQUE0QjtBQUFBO0FBQTVCLElBTEQsQ0FBQSxLQU1DLFlBQVksQ0FBWixXQUFBLEdBQTBCO0FBQUE7QUFBMUIsSUFORCxDQUFBLEtBT0MsWUFBWSxDQUFaLFlBQUEsR0FBMkI7QUFBQTtBQUEzQixJQVBELENBQUEsS0FRQyxZQUFZLENBQVosWUFBQSxHQUEyQjtBQUFBO0FBQTNCLElBUkQsQ0FBQSxLQVNDLFlBQVksQ0FBWixVQUFBLEdBQXlCO0FBQUE7QUFBekIsSUFURCxDQUFBLEtBVUMsWUFBWSxDQUFaLGNBQUEsR0FBNkI7QUFBQTtBQUE3QixJQVZELENBQUEsS0FXQyxZQUFZLENBQVosT0FBQSxHQUFzQjtBQUFBO0FBQXRCLElBWEQsQ0FBQSxLQVlDLFlBQVksQ0FBWixXQUFBLEdBQTBCO0FBQUE7QUFBMUIsSUFaRCxDQUFBLEtBYUMsWUFBWSxDQUFaLFdBQUEsR0FBMEI7QUFBQTtBQUExQixJQWRILENBQ0UsQ0FERjtBQWdCRDtBQWtCRCxPQUFNLFNBQUEsb0JBQUEsQ0FBQSxRQUFBLEVBQUEsWUFBQSxFQUFBLFVBQUEsRUFHUztBQUdiLFNBQU8sQ0FBQyxFQUFFLFlBQVksR0FBdEIsVUFBUSxDQUFSO0FBQ0Q7QUFFRCxPQUFNLFNBQUEsYUFBQSxDQUFBLFlBQUEsRUFBQSxVQUFBLEVBRVM7QUFHYixTQUFPLENBQUMsRUFBRSxZQUFZLEdBQXRCLFVBQVEsQ0FBUjtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgREVCVUcgfSBmcm9tICdAZ2xpbW1lci9lbnYnO1xuaW1wb3J0IHsgX1dlYWtTZXQgfSBmcm9tICdAZ2xpbW1lci91dGlsJztcbmltcG9ydCB7XG4gIENhcGFiaWxpdGllcyxcbiAgSW50ZXJuYWxDb21wb25lbnRDYXBhYmlsaXRpZXMsXG4gIEludGVybmFsQ29tcG9uZW50TWFuYWdlcixcbiAgV2l0aFVwZGF0ZUhvb2ssXG4gIFdpdGhQcmVwYXJlQXJncyxcbiAgV2l0aENyZWF0ZUluc3RhbmNlLFxuICBXaXRoRHluYW1pY0xheW91dCxcbiAgSW50ZXJuYWxDb21wb25lbnRDYXBhYmlsaXR5LFxuICBXaXRoU3ViT3duZXIsXG59IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgY2hlY2ssIENoZWNrTnVtYmVyIH0gZnJvbSAnQGdsaW1tZXIvZGVidWcnO1xuXG5leHBvcnQgY29uc3QgRlJPTV9DQVBBQklMSVRJRVMgPSBERUJVRyA/IG5ldyBfV2Vha1NldCgpIDogdW5kZWZpbmVkO1xuXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRDYXBhYmlsaXRpZXM8VCBleHRlbmRzIG9iamVjdD4oY2FwYWJpbGl0aWVzOiBUKTogVCAmIENhcGFiaWxpdGllcyB7XG4gIGlmIChERUJVRykge1xuICAgIEZST01fQ0FQQUJJTElUSUVTIS5hZGQoY2FwYWJpbGl0aWVzKTtcbiAgICBPYmplY3QuZnJlZXplKGNhcGFiaWxpdGllcyk7XG4gIH1cblxuICByZXR1cm4gY2FwYWJpbGl0aWVzIGFzIFQgJiBDYXBhYmlsaXRpZXM7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBDb21wb25lbnRDYXBhYmlsaXRpZXMgb2JqZWN0IGludG8gYSAzMi1iaXQgaW50ZWdlciByZXByZXNlbnRhdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhcGFiaWxpdHlGbGFnc0Zyb20oXG4gIGNhcGFiaWxpdGllczogSW50ZXJuYWxDb21wb25lbnRDYXBhYmlsaXRpZXNcbik6IEludGVybmFsQ29tcG9uZW50Q2FwYWJpbGl0eSB7XG4gIHJldHVybiAoXG4gICAgMCB8XG4gICAgKGNhcGFiaWxpdGllcy5keW5hbWljTGF5b3V0ID8gSW50ZXJuYWxDb21wb25lbnRDYXBhYmlsaXR5LkR5bmFtaWNMYXlvdXQgOiAwKSB8XG4gICAgKGNhcGFiaWxpdGllcy5keW5hbWljVGFnID8gSW50ZXJuYWxDb21wb25lbnRDYXBhYmlsaXR5LkR5bmFtaWNUYWcgOiAwKSB8XG4gICAgKGNhcGFiaWxpdGllcy5wcmVwYXJlQXJncyA/IEludGVybmFsQ29tcG9uZW50Q2FwYWJpbGl0eS5QcmVwYXJlQXJncyA6IDApIHxcbiAgICAoY2FwYWJpbGl0aWVzLmNyZWF0ZUFyZ3MgPyBJbnRlcm5hbENvbXBvbmVudENhcGFiaWxpdHkuQ3JlYXRlQXJncyA6IDApIHxcbiAgICAoY2FwYWJpbGl0aWVzLmF0dHJpYnV0ZUhvb2sgPyBJbnRlcm5hbENvbXBvbmVudENhcGFiaWxpdHkuQXR0cmlidXRlSG9vayA6IDApIHxcbiAgICAoY2FwYWJpbGl0aWVzLmVsZW1lbnRIb29rID8gSW50ZXJuYWxDb21wb25lbnRDYXBhYmlsaXR5LkVsZW1lbnRIb29rIDogMCkgfFxuICAgIChjYXBhYmlsaXRpZXMuZHluYW1pY1Njb3BlID8gSW50ZXJuYWxDb21wb25lbnRDYXBhYmlsaXR5LkR5bmFtaWNTY29wZSA6IDApIHxcbiAgICAoY2FwYWJpbGl0aWVzLmNyZWF0ZUNhbGxlciA/IEludGVybmFsQ29tcG9uZW50Q2FwYWJpbGl0eS5DcmVhdGVDYWxsZXIgOiAwKSB8XG4gICAgKGNhcGFiaWxpdGllcy51cGRhdGVIb29rID8gSW50ZXJuYWxDb21wb25lbnRDYXBhYmlsaXR5LlVwZGF0ZUhvb2sgOiAwKSB8XG4gICAgKGNhcGFiaWxpdGllcy5jcmVhdGVJbnN0YW5jZSA/IEludGVybmFsQ29tcG9uZW50Q2FwYWJpbGl0eS5DcmVhdGVJbnN0YW5jZSA6IDApIHxcbiAgICAoY2FwYWJpbGl0aWVzLndyYXBwZWQgPyBJbnRlcm5hbENvbXBvbmVudENhcGFiaWxpdHkuV3JhcHBlZCA6IDApIHxcbiAgICAoY2FwYWJpbGl0aWVzLndpbGxEZXN0cm95ID8gSW50ZXJuYWxDb21wb25lbnRDYXBhYmlsaXR5LldpbGxEZXN0cm95IDogMCkgfFxuICAgIChjYXBhYmlsaXRpZXMuaGFzU3ViT3duZXIgPyBJbnRlcm5hbENvbXBvbmVudENhcGFiaWxpdHkuSGFzU3ViT3duZXIgOiAwKVxuICApO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEludGVybmFsQ29tcG9uZW50Q2FwYWJpbGl0eU1hcCB7XG4gIFtJbnRlcm5hbENvbXBvbmVudENhcGFiaWxpdHkuRHluYW1pY0xheW91dF06IFdpdGhEeW5hbWljTGF5b3V0O1xuICBbSW50ZXJuYWxDb21wb25lbnRDYXBhYmlsaXR5LkR5bmFtaWNUYWddOiBJbnRlcm5hbENvbXBvbmVudE1hbmFnZXI7XG4gIFtJbnRlcm5hbENvbXBvbmVudENhcGFiaWxpdHkuUHJlcGFyZUFyZ3NdOiBXaXRoUHJlcGFyZUFyZ3M7XG4gIFtJbnRlcm5hbENvbXBvbmVudENhcGFiaWxpdHkuQ3JlYXRlQXJnc106IEludGVybmFsQ29tcG9uZW50TWFuYWdlcjtcbiAgW0ludGVybmFsQ29tcG9uZW50Q2FwYWJpbGl0eS5BdHRyaWJ1dGVIb29rXTogSW50ZXJuYWxDb21wb25lbnRNYW5hZ2VyO1xuICBbSW50ZXJuYWxDb21wb25lbnRDYXBhYmlsaXR5LkVsZW1lbnRIb29rXTogSW50ZXJuYWxDb21wb25lbnRNYW5hZ2VyO1xuICBbSW50ZXJuYWxDb21wb25lbnRDYXBhYmlsaXR5LkR5bmFtaWNTY29wZV06IEludGVybmFsQ29tcG9uZW50TWFuYWdlcjtcbiAgW0ludGVybmFsQ29tcG9uZW50Q2FwYWJpbGl0eS5DcmVhdGVDYWxsZXJdOiBJbnRlcm5hbENvbXBvbmVudE1hbmFnZXI7XG4gIFtJbnRlcm5hbENvbXBvbmVudENhcGFiaWxpdHkuVXBkYXRlSG9va106IFdpdGhVcGRhdGVIb29rO1xuICBbSW50ZXJuYWxDb21wb25lbnRDYXBhYmlsaXR5LkNyZWF0ZUluc3RhbmNlXTogV2l0aENyZWF0ZUluc3RhbmNlO1xuICBbSW50ZXJuYWxDb21wb25lbnRDYXBhYmlsaXR5LldyYXBwZWRdOiBJbnRlcm5hbENvbXBvbmVudE1hbmFnZXI7XG4gIFtJbnRlcm5hbENvbXBvbmVudENhcGFiaWxpdHkuV2lsbERlc3Ryb3ldOiBJbnRlcm5hbENvbXBvbmVudE1hbmFnZXI7XG4gIFtJbnRlcm5hbENvbXBvbmVudENhcGFiaWxpdHkuSGFzU3ViT3duZXJdOiBXaXRoU3ViT3duZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYW5hZ2VySGFzQ2FwYWJpbGl0eTxGIGV4dGVuZHMga2V5b2YgSW50ZXJuYWxDb21wb25lbnRDYXBhYmlsaXR5TWFwPihcbiAgX21hbmFnZXI6IEludGVybmFsQ29tcG9uZW50TWFuYWdlcixcbiAgY2FwYWJpbGl0aWVzOiBJbnRlcm5hbENvbXBvbmVudENhcGFiaWxpdHksXG4gIGNhcGFiaWxpdHk6IEZcbik6IF9tYW5hZ2VyIGlzIEludGVybmFsQ29tcG9uZW50Q2FwYWJpbGl0eU1hcFtGXSB7XG4gIGNoZWNrKGNhcGFiaWxpdGllcywgQ2hlY2tOdW1iZXIpO1xuICByZXR1cm4gISEoY2FwYWJpbGl0aWVzICYgY2FwYWJpbGl0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNDYXBhYmlsaXR5PEYgZXh0ZW5kcyBrZXlvZiBJbnRlcm5hbENvbXBvbmVudENhcGFiaWxpdHlNYXA+KFxuICBjYXBhYmlsaXRpZXM6IEludGVybmFsQ29tcG9uZW50Q2FwYWJpbGl0eSxcbiAgY2FwYWJpbGl0eTogRlxuKTogYm9vbGVhbiB7XG4gIGNoZWNrKGNhcGFiaWxpdGllcywgQ2hlY2tOdW1iZXIpO1xuICByZXR1cm4gISEoY2FwYWJpbGl0aWVzICYgY2FwYWJpbGl0eSk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9
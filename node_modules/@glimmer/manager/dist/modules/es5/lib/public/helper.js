import { associateDestroyableChild } from '@glimmer/destroyable';
import { DEBUG } from '@glimmer/env';
import { createComputeRef, createConstRef, UNDEFINED_REFERENCE } from '@glimmer/reference';
import { buildCapabilities, FROM_CAPABILITIES } from '../util/capabilities';
import { argsProxyFor } from '../util/args-proxy';
export function helperCapabilities(managerAPI, options) {
  if (options === void 0) {
    options = {};
  }

  if (DEBUG && managerAPI !== '3.23') {
    throw new Error('Invalid helper manager compatibility specified');
  }

  if (DEBUG && (!(options.hasValue || options.hasScheduledEffect) || options.hasValue && options.hasScheduledEffect)) {
    throw new Error('You must pass either the `hasValue` OR the `hasScheduledEffect` capability when defining a helper manager. Passing neither, or both, is not permitted.');
  }

  if (DEBUG && options.hasScheduledEffect) {
    throw new Error('The `hasScheduledEffect` capability has not yet been implemented for helper managers. Please pass `hasValue` instead');
  }

  return buildCapabilities({
    hasValue: Boolean(options.hasValue),
    hasDestroyable: Boolean(options.hasDestroyable),
    hasScheduledEffect: Boolean(options.hasScheduledEffect)
  });
} ////////////

export function hasValue(manager) {
  return manager.capabilities.hasValue;
}
export function hasDestroyable(manager) {
  return manager.capabilities.hasDestroyable;
} ////////////

export var CustomHelperManager = /*#__PURE__*/function () {
  function CustomHelperManager(factory) {
    this.factory = factory;
    this.helperManagerDelegates = new WeakMap();
    this.undefinedDelegate = null;
  }

  var _proto = CustomHelperManager.prototype;

  _proto.getDelegateForOwner = function getDelegateForOwner(owner) {
    var delegate = this.helperManagerDelegates.get(owner);

    if (delegate === undefined) {
      var factory = this.factory;
      delegate = factory(owner);

      if (DEBUG && !FROM_CAPABILITIES.has(delegate.capabilities)) {
        // TODO: This error message should make sense in both Ember and Glimmer https://github.com/glimmerjs/glimmer-vm/issues/1200
        throw new Error("Custom helper managers must have a `capabilities` property that is the result of calling the `capabilities('3.23')` (imported via `import { capabilities } from '@ember/helper';`). Received: `" + JSON.stringify(delegate.capabilities) + "` for: `" + delegate + "`");
      }

      this.helperManagerDelegates.set(owner, delegate);
    }

    return delegate;
  };

  _proto.getDelegateFor = function getDelegateFor(owner) {
    if (owner === undefined) {
      var undefinedDelegate = this.undefinedDelegate;

      if (undefinedDelegate === null) {
        var factory = this.factory;
        this.undefinedDelegate = undefinedDelegate = factory(undefined);
      }

      return undefinedDelegate;
    } else {
      return this.getDelegateForOwner(owner);
    }
  };

  _proto.getHelper = function getHelper(definition) {
    var _this = this;

    return function (capturedArgs, owner) {
      var _a, _b;

      var manager = _this.getDelegateFor(owner);

      var args = argsProxyFor(capturedArgs, 'helper');
      var bucket = manager.createHelper(definition, args);

      if (hasValue(manager)) {
        var cache = createComputeRef(function () {
          return manager.getValue(bucket);
        }, null, DEBUG && manager.getDebugName && manager.getDebugName(definition));

        if (hasDestroyable(manager)) {
          associateDestroyableChild(cache, manager.getDestroyable(bucket));
        }

        return cache;
      } else if (hasDestroyable(manager)) {
        var ref = createConstRef(undefined, DEBUG && ((_b = (_a = manager.getDebugName) === null || _a === void 0 ? void 0 : _a.call(manager, definition)) !== null && _b !== void 0 ? _b : 'unknown helper'));
        associateDestroyableChild(ref, manager.getDestroyable(bucket));
        return ref;
      } else {
        return UNDEFINED_REFERENCE;
      }
    };
  };

  return CustomHelperManager;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
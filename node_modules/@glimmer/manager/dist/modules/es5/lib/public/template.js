import { DEBUG } from '@glimmer/env';
import { debugToString } from '@glimmer/util';
var TEMPLATES = new WeakMap();
var getPrototypeOf = Object.getPrototypeOf;
export function setComponentTemplate(factory, obj) {
  if (DEBUG && !(obj !== null && (typeof obj === 'object' || typeof obj === 'function'))) {
    throw new Error("Cannot call `setComponentTemplate` on `" + debugToString(obj) + "`");
  }

  if (DEBUG && TEMPLATES.has(obj)) {
    throw new Error("Cannot call `setComponentTemplate` multiple times on the same class (`" + debugToString(obj) + "`)");
  }

  TEMPLATES.set(obj, factory);
  return obj;
}
export function getComponentTemplate(obj) {
  var pointer = obj;

  while (pointer !== null) {
    var template = TEMPLATES.get(pointer);

    if (template !== undefined) {
      return template;
    }

    pointer = getPrototypeOf(pointer);
  }

  return undefined;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL21hbmFnZXIvbGliL3B1YmxpYy90ZW1wbGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFBLEtBQUEsUUFBQSxjQUFBO0FBQ0EsU0FBQSxhQUFBLFFBQUEsZUFBQTtBQUdBLElBQU0sU0FBUyxHQUFxQyxJQUFwRCxPQUFvRCxFQUFwRDtBQUVBLElBQU0sY0FBYyxHQUFHLE1BQU0sQ0FBN0IsY0FBQTtBQUVBLE9BQU0sU0FBQSxvQkFBQSxDQUFBLE9BQUEsRUFBQSxHQUFBLEVBQW9FO0FBQ3hFLE1BQUksS0FBSyxJQUFJLEVBQUUsR0FBRyxLQUFILElBQUEsS0FBaUIsT0FBQSxHQUFBLEtBQUEsUUFBQSxJQUEyQixPQUFBLEdBQUEsS0FBM0QsVUFBZSxDQUFGLENBQWIsRUFBd0Y7QUFDdEYsVUFBTSxJQUFBLEtBQUEsNkNBQXVELGFBQWMsQ0FBM0UsR0FBMkUsQ0FBckUsT0FBTjtBQUNEOztBQUVELE1BQUksS0FBSyxJQUFJLFNBQVMsQ0FBVCxHQUFBLENBQWIsR0FBYSxDQUFiLEVBQWlDO0FBQy9CLFVBQU0sSUFBQSxLQUFBLDRFQUN3RSxhQUFjLENBRDVGLEdBQzRGLENBRHRGLFFBQU47QUFLRDs7QUFFRCxFQUFBLFNBQVMsQ0FBVCxHQUFBLENBQUEsR0FBQSxFQUFBLE9BQUE7QUFFQSxTQUFBLEdBQUE7QUFDRDtBQUVELE9BQU0sU0FBQSxvQkFBQSxDQUFBLEdBQUEsRUFBMEM7QUFDOUMsTUFBSSxPQUFPLEdBQVgsR0FBQTs7QUFFQSxTQUFPLE9BQU8sS0FBZCxJQUFBLEVBQXlCO0FBQ3ZCLFFBQUksUUFBUSxHQUFHLFNBQVMsQ0FBVCxHQUFBLENBQWYsT0FBZSxDQUFmOztBQUVBLFFBQUksUUFBUSxLQUFaLFNBQUEsRUFBNEI7QUFDMUIsYUFBQSxRQUFBO0FBQ0Q7O0FBRUQsSUFBQSxPQUFPLEdBQUcsY0FBYyxDQUF4QixPQUF3QixDQUF4QjtBQUNEOztBQUVELFNBQUEsU0FBQTtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgREVCVUcgfSBmcm9tICdAZ2xpbW1lci9lbnYnO1xuaW1wb3J0IHsgZGVidWdUb1N0cmluZyB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuaW1wb3J0IHsgVGVtcGxhdGVGYWN0b3J5IH0gZnJvbSAnQGdsaW1tZXIvaW50ZXJmYWNlcyc7XG5cbmNvbnN0IFRFTVBMQVRFUzogV2Vha01hcDxvYmplY3QsIFRlbXBsYXRlRmFjdG9yeT4gPSBuZXcgV2Vha01hcCgpO1xuXG5jb25zdCBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNldENvbXBvbmVudFRlbXBsYXRlKGZhY3Rvcnk6IFRlbXBsYXRlRmFjdG9yeSwgb2JqOiBvYmplY3QpIHtcbiAgaWYgKERFQlVHICYmICEob2JqICE9PSBudWxsICYmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBjYWxsIFxcYHNldENvbXBvbmVudFRlbXBsYXRlXFxgIG9uIFxcYCR7ZGVidWdUb1N0cmluZyEob2JqKX1cXGBgKTtcbiAgfVxuXG4gIGlmIChERUJVRyAmJiBURU1QTEFURVMuaGFzKG9iaikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgQ2Fubm90IGNhbGwgXFxgc2V0Q29tcG9uZW50VGVtcGxhdGVcXGAgbXVsdGlwbGUgdGltZXMgb24gdGhlIHNhbWUgY2xhc3MgKFxcYCR7ZGVidWdUb1N0cmluZyEoXG4gICAgICAgIG9ialxuICAgICAgKX1cXGApYFxuICAgICk7XG4gIH1cblxuICBURU1QTEFURVMuc2V0KG9iaiwgZmFjdG9yeSk7XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbXBvbmVudFRlbXBsYXRlKG9iajogb2JqZWN0KTogVGVtcGxhdGVGYWN0b3J5IHwgdW5kZWZpbmVkIHtcbiAgbGV0IHBvaW50ZXIgPSBvYmo7XG5cbiAgd2hpbGUgKHBvaW50ZXIgIT09IG51bGwpIHtcbiAgICBsZXQgdGVtcGxhdGUgPSBURU1QTEFURVMuZ2V0KHBvaW50ZXIpO1xuXG4gICAgaWYgKHRlbXBsYXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICB9XG5cbiAgICBwb2ludGVyID0gZ2V0UHJvdG90eXBlT2YocG9pbnRlcik7XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==
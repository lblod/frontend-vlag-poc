import { DEBUG } from '@glimmer/env';
import { _WeakSet } from '@glimmer/util';
export const FROM_CAPABILITIES = DEBUG ? new _WeakSet() : undefined;
export function buildCapabilities(capabilities) {
  if (DEBUG) {
    FROM_CAPABILITIES.add(capabilities);
    Object.freeze(capabilities);
  }

  return capabilities;
}
/**
 * Converts a ComponentCapabilities object into a 32-bit integer representation.
 */

export function capabilityFlagsFrom(capabilities) {
  return 0 | (capabilities.dynamicLayout ? 1
  /* DynamicLayout */
  : 0) | (capabilities.dynamicTag ? 2
  /* DynamicTag */
  : 0) | (capabilities.prepareArgs ? 4
  /* PrepareArgs */
  : 0) | (capabilities.createArgs ? 8
  /* CreateArgs */
  : 0) | (capabilities.attributeHook ? 16
  /* AttributeHook */
  : 0) | (capabilities.elementHook ? 32
  /* ElementHook */
  : 0) | (capabilities.dynamicScope ? 64
  /* DynamicScope */
  : 0) | (capabilities.createCaller ? 128
  /* CreateCaller */
  : 0) | (capabilities.updateHook ? 256
  /* UpdateHook */
  : 0) | (capabilities.createInstance ? 512
  /* CreateInstance */
  : 0) | (capabilities.wrapped ? 1024
  /* Wrapped */
  : 0) | (capabilities.willDestroy ? 2048
  /* WillDestroy */
  : 0) | (capabilities.hasSubOwner ? 4096
  /* HasSubOwner */
  : 0);
}
export function managerHasCapability(_manager, capabilities, capability) {
  return !!(capabilities & capability);
}
export function hasCapability(capabilities, capability) {
  return !!(capabilities & capability);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL21hbmFnZXIvbGliL3V0aWwvY2FwYWJpbGl0aWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQVMsS0FBVCxRQUFzQixjQUF0QjtBQUNBLFNBQVMsUUFBVCxRQUF5QixlQUF6QjtBQWNBLE9BQU8sTUFBTSxpQkFBaUIsR0FBRyxLQUFLLEdBQUcsSUFBSSxRQUFKLEVBQUgsR0FBb0IsU0FBbkQ7QUFFUCxPQUFNLFNBQVUsaUJBQVYsQ0FBOEMsWUFBOUMsRUFBNkQ7QUFDakUsTUFBSSxLQUFKLEVBQVc7QUFDVCxJQUFBLGlCQUFrQixDQUFDLEdBQW5CLENBQXVCLFlBQXZCO0FBQ0EsSUFBQSxNQUFNLENBQUMsTUFBUCxDQUFjLFlBQWQ7QUFDRDs7QUFFRCxTQUFPLFlBQVA7QUFDRDtBQUVEOzs7O0FBR0EsT0FBTSxTQUFVLG1CQUFWLENBQ0osWUFESSxFQUN1QztBQUUzQyxTQUNFLEtBQ0MsWUFBWSxDQUFDLGFBQWIsR0FBNEI7QUFBQTtBQUE1QixJQUF5RSxDQUQxRSxLQUVDLFlBQVksQ0FBQyxVQUFiLEdBQXlCO0FBQUE7QUFBekIsSUFBbUUsQ0FGcEUsS0FHQyxZQUFZLENBQUMsV0FBYixHQUEwQjtBQUFBO0FBQTFCLElBQXFFLENBSHRFLEtBSUMsWUFBWSxDQUFDLFVBQWIsR0FBeUI7QUFBQTtBQUF6QixJQUFtRSxDQUpwRSxLQUtDLFlBQVksQ0FBQyxhQUFiLEdBQTRCO0FBQUE7QUFBNUIsSUFBeUUsQ0FMMUUsS0FNQyxZQUFZLENBQUMsV0FBYixHQUEwQjtBQUFBO0FBQTFCLElBQXFFLENBTnRFLEtBT0MsWUFBWSxDQUFDLFlBQWIsR0FBMkI7QUFBQTtBQUEzQixJQUF1RSxDQVB4RSxLQVFDLFlBQVksQ0FBQyxZQUFiLEdBQTJCO0FBQUE7QUFBM0IsSUFBdUUsQ0FSeEUsS0FTQyxZQUFZLENBQUMsVUFBYixHQUF5QjtBQUFBO0FBQXpCLElBQW1FLENBVHBFLEtBVUMsWUFBWSxDQUFDLGNBQWIsR0FBNkI7QUFBQTtBQUE3QixJQUEyRSxDQVY1RSxLQVdDLFlBQVksQ0FBQyxPQUFiLEdBQXNCO0FBQUE7QUFBdEIsSUFBNkQsQ0FYOUQsS0FZQyxZQUFZLENBQUMsV0FBYixHQUEwQjtBQUFBO0FBQTFCLElBQXFFLENBWnRFLEtBYUMsWUFBWSxDQUFDLFdBQWIsR0FBMEI7QUFBQTtBQUExQixJQUFxRSxDQWJ0RSxDQURGO0FBZ0JEO0FBa0JELE9BQU0sU0FBVSxvQkFBVixDQUNKLFFBREksRUFFSixZQUZJLEVBR0osVUFISSxFQUdTO0FBR2IsU0FBTyxDQUFDLEVBQUUsWUFBWSxHQUFHLFVBQWpCLENBQVI7QUFDRDtBQUVELE9BQU0sU0FBVSxhQUFWLENBQ0osWUFESSxFQUVKLFVBRkksRUFFUztBQUdiLFNBQU8sQ0FBQyxFQUFFLFlBQVksR0FBRyxVQUFqQixDQUFSO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBERUJVRyB9IGZyb20gJ0BnbGltbWVyL2Vudic7XG5pbXBvcnQgeyBfV2Vha1NldCB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuaW1wb3J0IHtcbiAgQ2FwYWJpbGl0aWVzLFxuICBJbnRlcm5hbENvbXBvbmVudENhcGFiaWxpdGllcyxcbiAgSW50ZXJuYWxDb21wb25lbnRNYW5hZ2VyLFxuICBXaXRoVXBkYXRlSG9vayxcbiAgV2l0aFByZXBhcmVBcmdzLFxuICBXaXRoQ3JlYXRlSW5zdGFuY2UsXG4gIFdpdGhEeW5hbWljTGF5b3V0LFxuICBJbnRlcm5hbENvbXBvbmVudENhcGFiaWxpdHksXG4gIFdpdGhTdWJPd25lcixcbn0gZnJvbSAnQGdsaW1tZXIvaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBjaGVjaywgQ2hlY2tOdW1iZXIgfSBmcm9tICdAZ2xpbW1lci9kZWJ1Zyc7XG5cbmV4cG9ydCBjb25zdCBGUk9NX0NBUEFCSUxJVElFUyA9IERFQlVHID8gbmV3IF9XZWFrU2V0KCkgOiB1bmRlZmluZWQ7XG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZENhcGFiaWxpdGllczxUIGV4dGVuZHMgb2JqZWN0PihjYXBhYmlsaXRpZXM6IFQpOiBUICYgQ2FwYWJpbGl0aWVzIHtcbiAgaWYgKERFQlVHKSB7XG4gICAgRlJPTV9DQVBBQklMSVRJRVMhLmFkZChjYXBhYmlsaXRpZXMpO1xuICAgIE9iamVjdC5mcmVlemUoY2FwYWJpbGl0aWVzKTtcbiAgfVxuXG4gIHJldHVybiBjYXBhYmlsaXRpZXMgYXMgVCAmIENhcGFiaWxpdGllcztcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIENvbXBvbmVudENhcGFiaWxpdGllcyBvYmplY3QgaW50byBhIDMyLWJpdCBpbnRlZ2VyIHJlcHJlc2VudGF0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FwYWJpbGl0eUZsYWdzRnJvbShcbiAgY2FwYWJpbGl0aWVzOiBJbnRlcm5hbENvbXBvbmVudENhcGFiaWxpdGllc1xuKTogSW50ZXJuYWxDb21wb25lbnRDYXBhYmlsaXR5IHtcbiAgcmV0dXJuIChcbiAgICAwIHxcbiAgICAoY2FwYWJpbGl0aWVzLmR5bmFtaWNMYXlvdXQgPyBJbnRlcm5hbENvbXBvbmVudENhcGFiaWxpdHkuRHluYW1pY0xheW91dCA6IDApIHxcbiAgICAoY2FwYWJpbGl0aWVzLmR5bmFtaWNUYWcgPyBJbnRlcm5hbENvbXBvbmVudENhcGFiaWxpdHkuRHluYW1pY1RhZyA6IDApIHxcbiAgICAoY2FwYWJpbGl0aWVzLnByZXBhcmVBcmdzID8gSW50ZXJuYWxDb21wb25lbnRDYXBhYmlsaXR5LlByZXBhcmVBcmdzIDogMCkgfFxuICAgIChjYXBhYmlsaXRpZXMuY3JlYXRlQXJncyA/IEludGVybmFsQ29tcG9uZW50Q2FwYWJpbGl0eS5DcmVhdGVBcmdzIDogMCkgfFxuICAgIChjYXBhYmlsaXRpZXMuYXR0cmlidXRlSG9vayA/IEludGVybmFsQ29tcG9uZW50Q2FwYWJpbGl0eS5BdHRyaWJ1dGVIb29rIDogMCkgfFxuICAgIChjYXBhYmlsaXRpZXMuZWxlbWVudEhvb2sgPyBJbnRlcm5hbENvbXBvbmVudENhcGFiaWxpdHkuRWxlbWVudEhvb2sgOiAwKSB8XG4gICAgKGNhcGFiaWxpdGllcy5keW5hbWljU2NvcGUgPyBJbnRlcm5hbENvbXBvbmVudENhcGFiaWxpdHkuRHluYW1pY1Njb3BlIDogMCkgfFxuICAgIChjYXBhYmlsaXRpZXMuY3JlYXRlQ2FsbGVyID8gSW50ZXJuYWxDb21wb25lbnRDYXBhYmlsaXR5LkNyZWF0ZUNhbGxlciA6IDApIHxcbiAgICAoY2FwYWJpbGl0aWVzLnVwZGF0ZUhvb2sgPyBJbnRlcm5hbENvbXBvbmVudENhcGFiaWxpdHkuVXBkYXRlSG9vayA6IDApIHxcbiAgICAoY2FwYWJpbGl0aWVzLmNyZWF0ZUluc3RhbmNlID8gSW50ZXJuYWxDb21wb25lbnRDYXBhYmlsaXR5LkNyZWF0ZUluc3RhbmNlIDogMCkgfFxuICAgIChjYXBhYmlsaXRpZXMud3JhcHBlZCA/IEludGVybmFsQ29tcG9uZW50Q2FwYWJpbGl0eS5XcmFwcGVkIDogMCkgfFxuICAgIChjYXBhYmlsaXRpZXMud2lsbERlc3Ryb3kgPyBJbnRlcm5hbENvbXBvbmVudENhcGFiaWxpdHkuV2lsbERlc3Ryb3kgOiAwKSB8XG4gICAgKGNhcGFiaWxpdGllcy5oYXNTdWJPd25lciA/IEludGVybmFsQ29tcG9uZW50Q2FwYWJpbGl0eS5IYXNTdWJPd25lciA6IDApXG4gICk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW50ZXJuYWxDb21wb25lbnRDYXBhYmlsaXR5TWFwIHtcbiAgW0ludGVybmFsQ29tcG9uZW50Q2FwYWJpbGl0eS5EeW5hbWljTGF5b3V0XTogV2l0aER5bmFtaWNMYXlvdXQ7XG4gIFtJbnRlcm5hbENvbXBvbmVudENhcGFiaWxpdHkuRHluYW1pY1RhZ106IEludGVybmFsQ29tcG9uZW50TWFuYWdlcjtcbiAgW0ludGVybmFsQ29tcG9uZW50Q2FwYWJpbGl0eS5QcmVwYXJlQXJnc106IFdpdGhQcmVwYXJlQXJncztcbiAgW0ludGVybmFsQ29tcG9uZW50Q2FwYWJpbGl0eS5DcmVhdGVBcmdzXTogSW50ZXJuYWxDb21wb25lbnRNYW5hZ2VyO1xuICBbSW50ZXJuYWxDb21wb25lbnRDYXBhYmlsaXR5LkF0dHJpYnV0ZUhvb2tdOiBJbnRlcm5hbENvbXBvbmVudE1hbmFnZXI7XG4gIFtJbnRlcm5hbENvbXBvbmVudENhcGFiaWxpdHkuRWxlbWVudEhvb2tdOiBJbnRlcm5hbENvbXBvbmVudE1hbmFnZXI7XG4gIFtJbnRlcm5hbENvbXBvbmVudENhcGFiaWxpdHkuRHluYW1pY1Njb3BlXTogSW50ZXJuYWxDb21wb25lbnRNYW5hZ2VyO1xuICBbSW50ZXJuYWxDb21wb25lbnRDYXBhYmlsaXR5LkNyZWF0ZUNhbGxlcl06IEludGVybmFsQ29tcG9uZW50TWFuYWdlcjtcbiAgW0ludGVybmFsQ29tcG9uZW50Q2FwYWJpbGl0eS5VcGRhdGVIb29rXTogV2l0aFVwZGF0ZUhvb2s7XG4gIFtJbnRlcm5hbENvbXBvbmVudENhcGFiaWxpdHkuQ3JlYXRlSW5zdGFuY2VdOiBXaXRoQ3JlYXRlSW5zdGFuY2U7XG4gIFtJbnRlcm5hbENvbXBvbmVudENhcGFiaWxpdHkuV3JhcHBlZF06IEludGVybmFsQ29tcG9uZW50TWFuYWdlcjtcbiAgW0ludGVybmFsQ29tcG9uZW50Q2FwYWJpbGl0eS5XaWxsRGVzdHJveV06IEludGVybmFsQ29tcG9uZW50TWFuYWdlcjtcbiAgW0ludGVybmFsQ29tcG9uZW50Q2FwYWJpbGl0eS5IYXNTdWJPd25lcl06IFdpdGhTdWJPd25lcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hbmFnZXJIYXNDYXBhYmlsaXR5PEYgZXh0ZW5kcyBrZXlvZiBJbnRlcm5hbENvbXBvbmVudENhcGFiaWxpdHlNYXA+KFxuICBfbWFuYWdlcjogSW50ZXJuYWxDb21wb25lbnRNYW5hZ2VyLFxuICBjYXBhYmlsaXRpZXM6IEludGVybmFsQ29tcG9uZW50Q2FwYWJpbGl0eSxcbiAgY2FwYWJpbGl0eTogRlxuKTogX21hbmFnZXIgaXMgSW50ZXJuYWxDb21wb25lbnRDYXBhYmlsaXR5TWFwW0ZdIHtcbiAgY2hlY2soY2FwYWJpbGl0aWVzLCBDaGVja051bWJlcik7XG4gIHJldHVybiAhIShjYXBhYmlsaXRpZXMgJiBjYXBhYmlsaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc0NhcGFiaWxpdHk8RiBleHRlbmRzIGtleW9mIEludGVybmFsQ29tcG9uZW50Q2FwYWJpbGl0eU1hcD4oXG4gIGNhcGFiaWxpdGllczogSW50ZXJuYWxDb21wb25lbnRDYXBhYmlsaXR5LFxuICBjYXBhYmlsaXR5OiBGXG4pOiBib29sZWFuIHtcbiAgY2hlY2soY2FwYWJpbGl0aWVzLCBDaGVja051bWJlcik7XG4gIHJldHVybiAhIShjYXBhYmlsaXRpZXMgJiBjYXBhYmlsaXR5KTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=
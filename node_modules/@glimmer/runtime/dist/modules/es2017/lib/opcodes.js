import { valueForRef } from '@glimmer/reference';
import { assert, fillNulls, LOCAL_LOGGER } from '@glimmer/util';
import { $fp, $pc, $ra, $sp } from '@glimmer/vm';
import { isScopeReference } from './scope';
import { DESTROYABLE_STACK, INNER_VM, STACKS } from './symbols';
import { CURSOR_STACK } from './vm/element-builder';
export class AppendOpcodes {
  constructor() {
    this.evaluateOpcode = fillNulls(104
    /* Size */
    ).slice();
  }

  add(name, evaluate, kind = 'syscall') {
    this.evaluateOpcode[name] = {
      syscall: kind !== 'machine',
      evaluate
    };
  }

  debugBefore(vm, opcode) {
    let params = undefined;
    let opName = undefined;

    if (false
    /* LOCAL_SHOULD_LOG */
    ) {
      let pos = vm[INNER_VM].fetchRegister($pc) - opcode.size;
      [opName, params] = []; // console.log(`${typePos(vm['pc'])}.`);

      LOCAL_LOGGER.log(`${pos}. ${""}`);
      let debugParams = [];

      for (let prop in params) {
        debugParams.push(prop, '=', params[prop]);
      }

      LOCAL_LOGGER.log(...debugParams);
    }

    let sp;

    if (false
    /* LOCAL_DEBUG */
    ) {
      sp = vm.fetchValue($sp);
    }

    return {
      sp: sp,
      pc: vm.fetchValue($pc),
      name: opName,
      params,
      type: opcode.type,
      isMachine: opcode.isMachine,
      size: opcode.size,
      state: undefined
    };
  }

  debugAfter(vm, pre) {
    let {
      sp,
      type,
      isMachine,
      pc
    } = pre;

    if (false
    /* LOCAL_DEBUG */
    ) {
      let meta = type;
      let actualChange = vm.fetchValue($sp) - sp;

      if (meta && meta.check && typeof meta.stackChange === 'number' && meta.stackChange !== actualChange) {
        throw new Error(`Error in ${pre.name}:\n\n${pc}. ${""}\n\nStack changed by ${actualChange}, expected ${meta.stackChange}`);
      }

      if (false
      /* LOCAL_SHOULD_LOG */
      ) {
        LOCAL_LOGGER.log('%c -> pc: %d, ra: %d, fp: %d, sp: %d, s0: %O, s1: %O, t0: %O, t1: %O, v0: %O', 'color: orange', vm[INNER_VM].registers[$pc], vm[INNER_VM].registers[$ra], vm[INNER_VM].registers[$fp], vm[INNER_VM].registers[$sp], vm['s0'], vm['s1'], vm['t0'], vm['t1'], vm['v0']);
        LOCAL_LOGGER.log('%c -> eval stack', 'color: red', vm.stack.toArray());
        LOCAL_LOGGER.log('%c -> block stack', 'color: magenta', vm.elements().debugBlocks());
        LOCAL_LOGGER.log('%c -> destructor stack', 'color: violet', vm[DESTROYABLE_STACK].toArray());

        if (vm[STACKS].scope.current === null) {
          LOCAL_LOGGER.log('%c -> scope', 'color: green', 'null');
        } else {
          LOCAL_LOGGER.log('%c -> scope', 'color: green', vm.scope().slots.map(s => isScopeReference(s) ? valueForRef(s) : s));
        }

        LOCAL_LOGGER.log('%c -> elements', 'color: blue', vm.elements()[CURSOR_STACK].current.element);
        LOCAL_LOGGER.log('%c -> constructing', 'color: aqua', vm.elements()['constructing']);
      }
    }
  }

  evaluate(vm, opcode, type) {
    let operation = this.evaluateOpcode[type];

    if (operation.syscall) {
      (false && assert(!opcode.isMachine, `BUG: Mismatch between operation.syscall (${operation.syscall}) and opcode.isMachine (${opcode.isMachine}) for ${opcode.type}`));
      operation.evaluate(vm, opcode);
    } else {
      (false && assert(opcode.isMachine, `BUG: Mismatch between operation.syscall (${operation.syscall}) and opcode.isMachine (${opcode.isMachine}) for ${opcode.type}`));
      operation.evaluate(vm[INNER_VM], opcode);
    }
  }

}
export const APPEND_OPCODES = new AppendOpcodes();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
import { isConstRef, valueForRef } from '@glimmer/reference';
import { isObject } from '@glimmer/util';
import { APPEND_OPCODES } from '../../opcodes';
import { isEmpty, isSafeString, isFragment, isNode, shouldCoerce } from '../../dom/normalize';
import DynamicTextContent from '../../vm/content/text';
import { AssertFilter } from './vm';
import { hasInternalComponentManager, hasInternalHelperManager } from '@glimmer/manager';
import { DEBUG } from '@glimmer/env';
import { isCurriedType } from '../../curried-value';

function toContentType(value) {
  if (shouldCoerce(value)) {
    return 2
    /* String */
    ;
  } else if (isCurriedType(value, 0
  /* Component */
  ) || hasInternalComponentManager(value)) {
    return 0
    /* Component */
    ;
  } else if (isCurriedType(value, 1
  /* Helper */
  ) || hasInternalHelperManager(value)) {
    return 1
    /* Helper */
    ;
  } else if (isSafeString(value)) {
    return 4
    /* SafeString */
    ;
  } else if (isFragment(value)) {
    return 5
    /* Fragment */
    ;
  } else if (isNode(value)) {
    return 6
    /* Node */
    ;
  } else {
      return 2
      /* String */
      ;
    }
}

function toDynamicContentType(value) {
  if (!isObject(value)) {
    return 2
    /* String */
    ;
  }

  if (isCurriedType(value, 0
  /* Component */
  ) || hasInternalComponentManager(value)) {
    return 0
    /* Component */
    ;
  } else {
    if (DEBUG && !isCurriedType(value, 1
    /* Helper */
    ) && !hasInternalHelperManager(value)) {
      throw new Error(`Attempted use a dynamic value as a component or helper, but that value did not have an associated component or helper manager. The value was: ${value}`);
    }

    return 1
    /* Helper */
    ;
  }
}

APPEND_OPCODES.add(76
/* ContentType */
, vm => {
  let reference = vm.stack.peek();
  vm.stack.push(toContentType(valueForRef(reference)));

  if (!isConstRef(reference)) {
    vm.updateWith(new AssertFilter(reference, toContentType));
  }
});
APPEND_OPCODES.add(106
/* DynamicContentType */
, vm => {
  let reference = vm.stack.peek();
  vm.stack.push(toDynamicContentType(valueForRef(reference)));

  if (!isConstRef(reference)) {
    vm.updateWith(new AssertFilter(reference, toDynamicContentType));
  }
});
APPEND_OPCODES.add(43
/* AppendHTML */
, vm => {
  let reference = vm.stack.pop();
  let rawValue = valueForRef(reference);
  let value = isEmpty(rawValue) ? '' : String(rawValue);
  vm.elements().appendDynamicHTML(value);
});
APPEND_OPCODES.add(44
/* AppendSafeHTML */
, vm => {
  let reference = vm.stack.pop();
  let rawValue = valueForRef(reference).toHTML();
  let value = isEmpty(rawValue) ? '' : rawValue;
  vm.elements().appendDynamicHTML(value);
});
APPEND_OPCODES.add(47
/* AppendText */
, vm => {
  let reference = vm.stack.pop();
  let rawValue = valueForRef(reference);
  let value = isEmpty(rawValue) ? '' : String(rawValue);
  let node = vm.elements().appendDynamicText(value);

  if (!isConstRef(reference)) {
    vm.updateWith(new DynamicTextContent(node, reference, value));
  }
});
APPEND_OPCODES.add(45
/* AppendDocumentFragment */
, vm => {
  let reference = vm.stack.pop();
  let value = valueForRef(reference);
  vm.elements().appendDynamicFragment(value);
});
APPEND_OPCODES.add(46
/* AppendNode */
, vm => {
  let reference = vm.stack.pop();
  let value = valueForRef(reference);
  vm.elements().appendDynamicNode(value);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
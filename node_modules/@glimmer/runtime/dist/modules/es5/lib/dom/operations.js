import { ConcreteBounds } from '../bounds'; // http://www.w3.org/TR/html/syntax.html#html-integration-point

var SVG_INTEGRATION_POINTS = {
  foreignObject: 1,
  desc: 1,
  title: 1
}; // http://www.w3.org/TR/html/syntax.html#adjust-svg-attributes
// TODO: Adjust SVG attributes
// http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign
// TODO: Adjust SVG elements
// http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign

export var BLACKLIST_TABLE = Object.create(null);
export var DOMOperations = /*#__PURE__*/function () {
  function DOMOperations(document) {
    this.document = document;
    this.setupUselessElement();
  } // split into separate method so that NodeDOMTreeConstruction
  // can override it.


  var _proto = DOMOperations.prototype;

  _proto.setupUselessElement = function setupUselessElement() {
    this.uselessElement = this.document.createElement('div');
  };

  _proto.createElement = function createElement(tag, context) {
    var isElementInSVGNamespace, isHTMLIntegrationPoint;

    if (context) {
      isElementInSVGNamespace = context.namespaceURI === "http://www.w3.org/2000/svg"
      /* SVG */
      || tag === 'svg';
      isHTMLIntegrationPoint = !!SVG_INTEGRATION_POINTS[context.tagName];
    } else {
      isElementInSVGNamespace = tag === 'svg';
      isHTMLIntegrationPoint = false;
    }

    if (isElementInSVGNamespace && !isHTMLIntegrationPoint) {
      // FIXME: This does not properly handle <font> with color, face, or
      // size attributes, which is also disallowed by the spec. We should fix
      // this.
      if (BLACKLIST_TABLE[tag]) {
        throw new Error("Cannot create a " + tag + " inside an SVG context");
      }

      return this.document.createElementNS("http://www.w3.org/2000/svg"
      /* SVG */
      , tag);
    } else {
      return this.document.createElement(tag);
    }
  };

  _proto.insertBefore = function insertBefore(parent, node, reference) {
    parent.insertBefore(node, reference);
  };

  _proto.insertHTMLBefore = function insertHTMLBefore(parent, nextSibling, html) {
    if (html === '') {
      var comment = this.createComment('');
      parent.insertBefore(comment, nextSibling);
      return new ConcreteBounds(parent, comment, comment);
    }

    var prev = nextSibling ? nextSibling.previousSibling : parent.lastChild;
    var last;

    if (nextSibling === null) {
      parent.insertAdjacentHTML("beforeend"
      /* beforeend */
      , html);
      last = parent.lastChild;
    } else if (nextSibling instanceof HTMLElement) {
      nextSibling.insertAdjacentHTML('beforebegin', html);
      last = nextSibling.previousSibling;
    } else {
      // Non-element nodes do not support insertAdjacentHTML, so add an
      // element and call it on that element. Then remove the element.
      //
      // This also protects Edge, IE and Firefox w/o the inspector open
      // from merging adjacent text nodes. See ./compat/text-node-merging-fix.ts
      var uselessElement = this.uselessElement;
      parent.insertBefore(uselessElement, nextSibling);
      uselessElement.insertAdjacentHTML("beforebegin"
      /* beforebegin */
      , html);
      last = uselessElement.previousSibling;
      parent.removeChild(uselessElement);
    }

    var first = prev ? prev.nextSibling : parent.firstChild;
    return new ConcreteBounds(parent, first, last);
  };

  _proto.createTextNode = function createTextNode(text) {
    return this.document.createTextNode(text);
  };

  _proto.createComment = function createComment(data) {
    return this.document.createComment(data);
  };

  return DOMOperations;
}();
export function moveNodesBefore(source, target, nextSibling) {
  var first = source.firstChild;
  var last = first;
  var current = first;

  while (current) {
    var next = current.nextSibling;
    target.insertBefore(current, nextSibling);
    last = current;
    current = next;
  }

  return new ConcreteBounds(target, first, last);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
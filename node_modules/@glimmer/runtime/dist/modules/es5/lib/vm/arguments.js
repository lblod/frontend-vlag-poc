function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

import { DEBUG } from '@glimmer/env';
import { createDebugAliasRef, UNDEFINED_REFERENCE, valueForRef } from '@glimmer/reference';
import { dict, emptyArray, EMPTY_STRING_ARRAY } from '@glimmer/util';
import { CONSTANT_TAG } from '@glimmer/validator';
import { $sp } from '@glimmer/vm';
import { REGISTERS } from '../symbols';
/*
  The calling convention is:

  * 0-N block arguments at the bottom
  * 0-N positional arguments next (left-to-right)
  * 0-N named arguments next
*/

export var VMArgumentsImpl = /*#__PURE__*/function () {
  function VMArgumentsImpl() {
    this.stack = null;
    this.positional = new PositionalArgumentsImpl();
    this.named = new NamedArgumentsImpl();
    this.blocks = new BlockArgumentsImpl();
  }

  var _proto = VMArgumentsImpl.prototype;

  _proto.empty = function empty(stack) {
    var base = stack[REGISTERS][$sp] + 1;
    this.named.empty(stack, base);
    this.positional.empty(stack, base);
    this.blocks.empty(stack, base);
    return this;
  };

  _proto.setup = function setup(stack, names, blockNames, positionalCount, atNames) {
    this.stack = stack;
    /*
           | ... | blocks      | positional  | named |
           | ... | b0    b1    | p0 p1 p2 p3 | n0 n1 |
     index | ... | 4/5/6 7/8/9 | 10 11 12 13 | 14 15 |
                   ^             ^             ^  ^
                 bbase         pbase       nbase  sp
    */

    var named = this.named;
    var namedCount = names.length;
    var namedBase = stack[REGISTERS][$sp] - namedCount + 1;
    named.setup(stack, namedBase, namedCount, names, atNames);
    var positional = this.positional;
    var positionalBase = namedBase - positionalCount;
    positional.setup(stack, positionalBase, positionalCount);
    var blocks = this.blocks;
    var blocksCount = blockNames.length;
    var blocksBase = positionalBase - blocksCount * 3;
    blocks.setup(stack, blocksBase, blocksCount, blockNames);
  };

  _proto.at = function at(pos) {
    return this.positional.at(pos);
  };

  _proto.realloc = function realloc(offset) {
    var stack = this.stack;

    if (offset > 0 && stack !== null) {
      var positional = this.positional,
          named = this.named;
      var newBase = positional.base + offset;
      var length = positional.length + named.length;

      for (var i = length - 1; i >= 0; i--) {
        stack.copy(i + positional.base, i + newBase);
      }

      positional.base += offset;
      named.base += offset;
      stack[REGISTERS][$sp] += offset;
    }
  };

  _proto.capture = function capture() {
    var positional = this.positional.length === 0 ? EMPTY_POSITIONAL : this.positional.capture();
    var named = this.named.length === 0 ? EMPTY_NAMED : this.named.capture();
    return {
      named: named,
      positional: positional
    };
  };

  _proto.clear = function clear() {
    var stack = this.stack,
        length = this.length;
    if (length > 0 && stack !== null) stack.pop(length);
  };

  _createClass(VMArgumentsImpl, [{
    key: "base",
    get: function get() {
      return this.blocks.base;
    }
  }, {
    key: "length",
    get: function get() {
      return this.positional.length + this.named.length + this.blocks.length * 3;
    }
  }]);

  return VMArgumentsImpl;
}();
var EMPTY_REFERENCES = emptyArray();
export var PositionalArgumentsImpl = /*#__PURE__*/function () {
  function PositionalArgumentsImpl() {
    this.base = 0;
    this.length = 0;
    this.stack = null;
    this._references = null;
  }

  var _proto2 = PositionalArgumentsImpl.prototype;

  _proto2.empty = function empty(stack, base) {
    this.stack = stack;
    this.base = base;
    this.length = 0;
    this._references = EMPTY_REFERENCES;
  };

  _proto2.setup = function setup(stack, base, length) {
    this.stack = stack;
    this.base = base;
    this.length = length;

    if (length === 0) {
      this._references = EMPTY_REFERENCES;
    } else {
      this._references = null;
    }
  };

  _proto2.at = function at(position) {
    var base = this.base,
        length = this.length,
        stack = this.stack;

    if (position < 0 || position >= length) {
      return UNDEFINED_REFERENCE;
    }

    return stack.get(position, base);
  };

  _proto2.capture = function capture() {
    return this.references;
  };

  _proto2.prepend = function prepend(other) {
    var additions = other.length;

    if (additions > 0) {
      var base = this.base,
          length = this.length,
          stack = this.stack;
      this.base = base = base - additions;
      this.length = length + additions;

      for (var i = 0; i < additions; i++) {
        stack.set(other[i], i, base);
      }

      this._references = null;
    }
  };

  _createClass(PositionalArgumentsImpl, [{
    key: "references",
    get: function get() {
      var references = this._references;

      if (!references) {
        var stack = this.stack,
            base = this.base,
            length = this.length;
        references = this._references = stack.slice(base, base + length);
      }

      return references;
    }
  }]);

  return PositionalArgumentsImpl;
}();
export var NamedArgumentsImpl = /*#__PURE__*/function () {
  function NamedArgumentsImpl() {
    this.base = 0;
    this.length = 0;
    this._references = null;
    this._names = EMPTY_STRING_ARRAY;
    this._atNames = EMPTY_STRING_ARRAY;
  }

  var _proto3 = NamedArgumentsImpl.prototype;

  _proto3.empty = function empty(stack, base) {
    this.stack = stack;
    this.base = base;
    this.length = 0;
    this._references = EMPTY_REFERENCES;
    this._names = EMPTY_STRING_ARRAY;
    this._atNames = EMPTY_STRING_ARRAY;
  };

  _proto3.setup = function setup(stack, base, length, names, atNames) {
    this.stack = stack;
    this.base = base;
    this.length = length;

    if (length === 0) {
      this._references = EMPTY_REFERENCES;
      this._names = EMPTY_STRING_ARRAY;
      this._atNames = EMPTY_STRING_ARRAY;
    } else {
      this._references = null;

      if (atNames) {
        this._names = null;
        this._atNames = names;
      } else {
        this._names = names;
        this._atNames = null;
      }
    }
  };

  _proto3.has = function has(name) {
    return this.names.indexOf(name) !== -1;
  };

  _proto3.get = function get(name, atNames) {
    if (atNames === void 0) {
      atNames = false;
    }

    var base = this.base,
        stack = this.stack;
    var names = atNames ? this.atNames : this.names;
    var idx = names.indexOf(name);

    if (idx === -1) {
      return UNDEFINED_REFERENCE;
    }

    var ref = stack.get(idx, base);

    if (DEBUG) {
      return createDebugAliasRef(atNames ? name : "@" + name, ref);
    } else {
      return ref;
    }
  };

  _proto3.capture = function capture() {
    var names = this.names,
        references = this.references;
    var map = dict();

    for (var i = 0; i < names.length; i++) {
      var name = names[i];

      if (DEBUG) {
        map[name] = createDebugAliasRef("@" + name, references[i]);
      } else {
        map[name] = references[i];
      }
    }

    return map;
  };

  _proto3.merge = function merge(other) {
    var keys = Object.keys(other);

    if (keys.length > 0) {
      var names = this.names,
          length = this.length,
          stack = this.stack;
      var newNames = names.slice();

      for (var i = 0; i < keys.length; i++) {
        var name = keys[i];
        var idx = newNames.indexOf(name);

        if (idx === -1) {
          length = newNames.push(name);
          stack.push(other[name]);
        }
      }

      this.length = length;
      this._references = null;
      this._names = newNames;
      this._atNames = null;
    }
  };

  _proto3.toSyntheticName = function toSyntheticName(name) {
    return name.slice(1);
  };

  _proto3.toAtName = function toAtName(name) {
    return "@" + name;
  };

  _createClass(NamedArgumentsImpl, [{
    key: "names",
    get: function get() {
      var names = this._names;

      if (!names) {
        names = this._names = this._atNames.map(this.toSyntheticName);
      }

      return names;
    }
  }, {
    key: "atNames",
    get: function get() {
      var atNames = this._atNames;

      if (!atNames) {
        atNames = this._atNames = this._names.map(this.toAtName);
      }

      return atNames;
    }
  }, {
    key: "references",
    get: function get() {
      var references = this._references;

      if (!references) {
        var base = this.base,
            length = this.length,
            stack = this.stack;
        references = this._references = stack.slice(base, base + length);
      }

      return references;
    }
  }]);

  return NamedArgumentsImpl;
}();

function toSymbolName(name) {
  return "&" + name;
}

var EMPTY_BLOCK_VALUES = emptyArray();
export var BlockArgumentsImpl = /*#__PURE__*/function () {
  function BlockArgumentsImpl() {
    this.internalValues = null;
    this._symbolNames = null;
    this.internalTag = null;
    this.names = EMPTY_STRING_ARRAY;
    this.length = 0;
    this.base = 0;
  }

  var _proto4 = BlockArgumentsImpl.prototype;

  _proto4.empty = function empty(stack, base) {
    this.stack = stack;
    this.names = EMPTY_STRING_ARRAY;
    this.base = base;
    this.length = 0;
    this._symbolNames = null;
    this.internalTag = CONSTANT_TAG;
    this.internalValues = EMPTY_BLOCK_VALUES;
  };

  _proto4.setup = function setup(stack, base, length, names) {
    this.stack = stack;
    this.names = names;
    this.base = base;
    this.length = length;
    this._symbolNames = null;

    if (length === 0) {
      this.internalTag = CONSTANT_TAG;
      this.internalValues = EMPTY_BLOCK_VALUES;
    } else {
      this.internalTag = null;
      this.internalValues = null;
    }
  };

  _proto4.has = function has(name) {
    return this.names.indexOf(name) !== -1;
  };

  _proto4.get = function get(name) {
    var idx = this.names.indexOf(name);

    if (idx === -1) {
      return null;
    }

    var base = this.base,
        stack = this.stack;
    var table = stack.get(idx * 3, base);
    var scope = stack.get(idx * 3 + 1, base);
    var handle = stack.get(idx * 3 + 2, base);
    return handle === null ? null : [handle, scope, table];
  };

  _proto4.capture = function capture() {
    return new CapturedBlockArgumentsImpl(this.names, this.values);
  };

  _createClass(BlockArgumentsImpl, [{
    key: "values",
    get: function get() {
      var values = this.internalValues;

      if (!values) {
        var base = this.base,
            length = this.length,
            stack = this.stack;
        values = this.internalValues = stack.slice(base, base + length * 3);
      }

      return values;
    }
  }, {
    key: "symbolNames",
    get: function get() {
      var symbolNames = this._symbolNames;

      if (symbolNames === null) {
        symbolNames = this._symbolNames = this.names.map(toSymbolName);
      }

      return symbolNames;
    }
  }]);

  return BlockArgumentsImpl;
}();

var CapturedBlockArgumentsImpl = /*#__PURE__*/function () {
  function CapturedBlockArgumentsImpl(names, values) {
    this.names = names;
    this.values = values;
    this.length = names.length;
  }

  var _proto5 = CapturedBlockArgumentsImpl.prototype;

  _proto5.has = function has(name) {
    return this.names.indexOf(name) !== -1;
  };

  _proto5.get = function get(name) {
    var idx = this.names.indexOf(name);
    if (idx === -1) return null;
    return [this.values[idx * 3 + 2], this.values[idx * 3 + 1], this.values[idx * 3]];
  };

  return CapturedBlockArgumentsImpl;
}();

export function createCapturedArgs(named, positional) {
  return {
    named: named,
    positional: positional
  };
}
export function reifyNamed(named) {
  var reified = dict();

  for (var key in named) {
    reified[key] = valueForRef(named[key]);
  }

  return reified;
}
export function reifyPositional(positional) {
  return positional.map(valueForRef);
}
export function reifyArgs(args) {
  return {
    named: reifyNamed(args.named),
    positional: reifyPositional(args.positional)
  };
}
export var EMPTY_NAMED = Object.freeze(Object.create(null));
export var EMPTY_POSITIONAL = EMPTY_REFERENCES;
export var EMPTY_ARGS = createCapturedArgs(EMPTY_NAMED, EMPTY_POSITIONAL);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
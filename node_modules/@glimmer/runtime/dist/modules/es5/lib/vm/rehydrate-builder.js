function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import { assert } from '@glimmer/util';
import { ConcreteBounds, CursorImpl } from '../bounds';
import { CURSOR_STACK, NewElementBuilder, RemoteLiveBlock } from './element-builder';
export var SERIALIZATION_FIRST_NODE_STRING = '%+b:0%';
export function isSerializationFirstNode(node) {
  return node.nodeValue === SERIALIZATION_FIRST_NODE_STRING;
}
export var RehydratingCursor = /*#__PURE__*/function (_CursorImpl) {
  _inheritsLoose(RehydratingCursor, _CursorImpl);

  function RehydratingCursor(element, nextSibling, startingBlockDepth) {
    var _this;

    _this = _CursorImpl.call(this, element, nextSibling) || this;
    _this.startingBlockDepth = startingBlockDepth;
    _this.candidate = null;
    _this.injectedOmittedNode = false;
    _this.openBlockDepth = startingBlockDepth - 1;
    return _this;
  }

  return RehydratingCursor;
}(CursorImpl);
export var RehydrateBuilder = /*#__PURE__*/function (_NewElementBuilder) {
  _inheritsLoose(RehydrateBuilder, _NewElementBuilder);

  function RehydrateBuilder(env, parentNode, nextSibling) {
    var _this2;

    _this2 = _NewElementBuilder.call(this, env, parentNode, nextSibling) || this;
    _this2.unmatchedAttributes = null;
    _this2.blockDepth = 0;
    if (nextSibling) throw new Error('Rehydration with nextSibling not supported');
    var node = _this2.currentCursor.element.firstChild;

    while (node !== null) {
      if (isOpenBlock(node)) {
        break;
      }

      node = node.nextSibling;
    }

    false && assert(node, 'Must have opening comment for rehydration.');
    _this2.candidate = node;
    var startingBlockOffset = getBlockDepth(node);

    if (startingBlockOffset !== 0) {
      // We are rehydrating from a partial tree and not the root component
      // We need to add an extra block before the first block to rehydrate correctly
      // The extra block is needed since the renderComponent API creates a synthetic component invocation which generates the extra block
      var newBlockDepth = startingBlockOffset - 1;

      var newCandidate = _this2.dom.createComment("%+b:" + newBlockDepth + "%");

      node.parentNode.insertBefore(newCandidate, _this2.candidate);
      var closingNode = node.nextSibling;

      while (closingNode !== null) {
        if (isCloseBlock(closingNode) && getBlockDepth(closingNode) === startingBlockOffset) {
          break;
        }

        closingNode = closingNode.nextSibling;
      }

      false && assert(closingNode, 'Must have closing comment for starting block comment');

      var newClosingBlock = _this2.dom.createComment("%-b:" + newBlockDepth + "%");

      node.parentNode.insertBefore(newClosingBlock, closingNode.nextSibling);
      _this2.candidate = newCandidate;
      _this2.startingBlockOffset = newBlockDepth;
    } else {
      _this2.startingBlockOffset = 0;
    }

    return _this2;
  }

  var _proto = RehydrateBuilder.prototype;

  _proto.disableRehydration = function disableRehydration(nextSibling) {
    var currentCursor = this.currentCursor; // rehydration will be disabled until we either:
    // * hit popElement (and return to using the parent elements cursor)
    // * hit closeBlock and the next sibling is a close block comment
    //   matching the expected openBlockDepth

    currentCursor.candidate = null;
    currentCursor.nextSibling = nextSibling;
  };

  _proto.enableRehydration = function enableRehydration(candidate) {
    var currentCursor = this.currentCursor;
    currentCursor.candidate = candidate;
    currentCursor.nextSibling = null;
  };

  _proto.pushElement = function pushElement(element, nextSibling) {
    if (nextSibling === void 0) {
      nextSibling = null;
    }

    var cursor = new RehydratingCursor(element, nextSibling, this.blockDepth || 0);
    /**
     * <div>   <---------------  currentCursor.element
     *   <!--%+b:1%--> <-------  would have been removed during openBlock
     *   <div> <---------------  currentCursor.candidate -> cursor.element
     *     <!--%+b:2%--> <-----  currentCursor.candidate.firstChild -> cursor.candidate
     *     Foo
     *     <!--%-b:2%-->
     *   </div>
     *   <!--%-b:1%-->  <------  becomes currentCursor.candidate
     */

    if (this.candidate !== null) {
      cursor.candidate = element.firstChild;
      this.candidate = element.nextSibling;
    }

    this[CURSOR_STACK].push(cursor);
  } // clears until the end of the current container
  // either the current open block or higher
  ;

  _proto.clearMismatch = function clearMismatch(candidate) {
    var current = candidate;
    var currentCursor = this.currentCursor;

    if (currentCursor !== null) {
      var openBlockDepth = currentCursor.openBlockDepth;

      if (openBlockDepth >= currentCursor.startingBlockDepth) {
        while (current) {
          if (isCloseBlock(current)) {
            var closeBlockDepth = getBlockDepthWithOffset(current, this.startingBlockOffset);

            if (openBlockDepth >= closeBlockDepth) {
              break;
            }
          }

          current = this.remove(current);
        }
      } else {
        while (current !== null) {
          current = this.remove(current);
        }
      } // current cursor parentNode should be openCandidate if element
      // or openCandidate.parentNode if comment


      this.disableRehydration(current);
    }
  };

  _proto.__openBlock = function __openBlock() {
    var currentCursor = this.currentCursor;
    if (currentCursor === null) return;
    var blockDepth = this.blockDepth;
    this.blockDepth++;
    var candidate = currentCursor.candidate;
    if (candidate === null) return;
    var tagName = currentCursor.element.tagName;

    if (isOpenBlock(candidate) && getBlockDepthWithOffset(candidate, this.startingBlockOffset) === blockDepth) {
      this.candidate = this.remove(candidate);
      currentCursor.openBlockDepth = blockDepth;
    } else if (tagName !== 'TITLE' && tagName !== 'SCRIPT' && tagName !== 'STYLE') {
      this.clearMismatch(candidate);
    }
  };

  _proto.__closeBlock = function __closeBlock() {
    var currentCursor = this.currentCursor;
    if (currentCursor === null) return; // openBlock is the last rehydrated open block

    var openBlockDepth = currentCursor.openBlockDepth; // this currently is the expected next open block depth

    this.blockDepth--;
    var candidate = currentCursor.candidate;
    var isRehydrating = false;

    if (candidate !== null) {
      isRehydrating = true; //assert(
      //  openBlockDepth === this.blockDepth,
      //  'when rehydrating, openBlockDepth should match this.blockDepth here'
      //);

      if (isCloseBlock(candidate) && getBlockDepthWithOffset(candidate, this.startingBlockOffset) === openBlockDepth) {
        var nextSibling = this.remove(candidate);
        this.candidate = nextSibling;
        currentCursor.openBlockDepth--;
      } else {
        // close the block and clear mismatch in parent container
        // we will be either at the end of the element
        // or at the end of our containing block
        this.clearMismatch(candidate);
        isRehydrating = false;
      }
    }

    if (isRehydrating === false) {
      // check if nextSibling matches our expected close block
      // if so, we remove the close block comment and
      // restore rehydration after clearMismatch disabled
      var _nextSibling = currentCursor.nextSibling;

      if (_nextSibling !== null && isCloseBlock(_nextSibling) && getBlockDepthWithOffset(_nextSibling, this.startingBlockOffset) === this.blockDepth) {
        // restore rehydration state
        var _candidate2 = this.remove(_nextSibling);

        this.enableRehydration(_candidate2);
        currentCursor.openBlockDepth--;
      }
    }
  };

  _proto.__appendNode = function __appendNode(node) {
    var candidate = this.candidate; // This code path is only used when inserting precisely one node. It needs more
    // comparison logic, but we can probably lean on the cases where this code path
    // is actually used.

    if (candidate) {
      return candidate;
    } else {
      return _NewElementBuilder.prototype.__appendNode.call(this, node);
    }
  };

  _proto.__appendHTML = function __appendHTML(html) {
    var candidateBounds = this.markerBounds();

    if (candidateBounds) {
      var first = candidateBounds.firstNode();
      var last = candidateBounds.lastNode();
      var newBounds = new ConcreteBounds(this.element, first.nextSibling, last.previousSibling);
      var possibleEmptyMarker = this.remove(first);
      this.remove(last);

      if (possibleEmptyMarker !== null && isEmpty(possibleEmptyMarker)) {
        this.candidate = this.remove(possibleEmptyMarker);

        if (this.candidate !== null) {
          this.clearMismatch(this.candidate);
        }
      }

      return newBounds;
    } else {
      return _NewElementBuilder.prototype.__appendHTML.call(this, html);
    }
  };

  _proto.remove = function remove(node) {
    var element = node.parentNode;
    var next = node.nextSibling;
    element.removeChild(node);
    return next;
  };

  _proto.markerBounds = function markerBounds() {
    var _candidate = this.candidate;

    if (_candidate && isMarker(_candidate)) {
      var first = _candidate;
      var last = first.nextSibling;

      while (last && !isMarker(last)) {
        last = last.nextSibling;
      }

      return new ConcreteBounds(this.element, first, last);
    } else {
      return null;
    }
  };

  _proto.__appendText = function __appendText(string) {
    var candidate = this.candidate;

    if (candidate) {
      if (isTextNode(candidate)) {
        if (candidate.nodeValue !== string) {
          candidate.nodeValue = string;
        }

        this.candidate = candidate.nextSibling;
        return candidate;
      } else if (isSeparator(candidate)) {
        this.candidate = this.remove(candidate);
        return this.__appendText(string);
      } else if (isEmpty(candidate) && string === '') {
        this.candidate = this.remove(candidate);
        return this.__appendText(string);
      } else {
        this.clearMismatch(candidate);
        return _NewElementBuilder.prototype.__appendText.call(this, string);
      }
    } else {
      return _NewElementBuilder.prototype.__appendText.call(this, string);
    }
  };

  _proto.__appendComment = function __appendComment(string) {
    var _candidate = this.candidate;

    if (_candidate && isComment(_candidate)) {
      if (_candidate.nodeValue !== string) {
        _candidate.nodeValue = string;
      }

      this.candidate = _candidate.nextSibling;
      return _candidate;
    } else if (_candidate) {
      this.clearMismatch(_candidate);
    }

    return _NewElementBuilder.prototype.__appendComment.call(this, string);
  };

  _proto.__openElement = function __openElement(tag) {
    var _candidate = this.candidate;

    if (_candidate && isElement(_candidate) && isSameNodeType(_candidate, tag)) {
      this.unmatchedAttributes = [].slice.call(_candidate.attributes);
      return _candidate;
    } else if (_candidate) {
      if (isElement(_candidate) && _candidate.tagName === 'TBODY') {
        this.pushElement(_candidate, null);
        this.currentCursor.injectedOmittedNode = true;
        return this.__openElement(tag);
      }

      this.clearMismatch(_candidate);
    }

    return _NewElementBuilder.prototype.__openElement.call(this, tag);
  };

  _proto.__setAttribute = function __setAttribute(name, value, namespace) {
    var unmatched = this.unmatchedAttributes;

    if (unmatched) {
      var attr = findByName(unmatched, name);

      if (attr) {
        if (attr.value !== value) {
          attr.value = value;
        }

        unmatched.splice(unmatched.indexOf(attr), 1);
        return;
      }
    }

    return _NewElementBuilder.prototype.__setAttribute.call(this, name, value, namespace);
  };

  _proto.__setProperty = function __setProperty(name, value) {
    var unmatched = this.unmatchedAttributes;

    if (unmatched) {
      var attr = findByName(unmatched, name);

      if (attr) {
        if (attr.value !== value) {
          attr.value = value;
        }

        unmatched.splice(unmatched.indexOf(attr), 1);
        return;
      }
    }

    return _NewElementBuilder.prototype.__setProperty.call(this, name, value);
  };

  _proto.__flushElement = function __flushElement(parent, constructing) {
    var unmatched = this.unmatchedAttributes;

    if (unmatched) {
      for (var i = 0; i < unmatched.length; i++) {
        this.constructing.removeAttribute(unmatched[i].name);
      }

      this.unmatchedAttributes = null;
    } else {
      _NewElementBuilder.prototype.__flushElement.call(this, parent, constructing);
    }
  };

  _proto.willCloseElement = function willCloseElement() {
    var candidate = this.candidate,
        currentCursor = this.currentCursor;

    if (candidate !== null) {
      this.clearMismatch(candidate);
    }

    if (currentCursor && currentCursor.injectedOmittedNode) {
      this.popElement();
    }

    _NewElementBuilder.prototype.willCloseElement.call(this);
  };

  _proto.getMarker = function getMarker(element, guid) {
    var marker = element.querySelector("script[glmr=\"" + guid + "\"]");

    if (marker) {
      return marker;
    }

    return null;
  };

  _proto.__pushRemoteElement = function __pushRemoteElement(element, cursorId, insertBefore) {
    var marker = this.getMarker(element, cursorId);
    false && assert(!marker || marker.parentNode === element, "expected remote element marker's parent node to match remote element"); // when insertBefore is not present, we clear the element

    if (insertBefore === undefined) {
      while (element.firstChild !== null && element.firstChild !== marker) {
        this.remove(element.firstChild);
      }

      insertBefore = null;
    }

    var cursor = new RehydratingCursor(element, null, this.blockDepth);
    this[CURSOR_STACK].push(cursor);

    if (marker === null) {
      this.disableRehydration(insertBefore);
    } else {
      this.candidate = this.remove(marker);
    }

    var block = new RemoteLiveBlock(element);
    return this.pushLiveBlock(block, true);
  };

  _proto.didAppendBounds = function didAppendBounds(bounds) {
    _NewElementBuilder.prototype.didAppendBounds.call(this, bounds);

    if (this.candidate) {
      var last = bounds.lastNode();
      this.candidate = last && last.nextSibling;
    }

    return bounds;
  };

  _createClass(RehydrateBuilder, [{
    key: "currentCursor",
    get: function get() {
      return this[CURSOR_STACK].current;
    }
  }, {
    key: "candidate",
    get: function get() {
      if (this.currentCursor) {
        return this.currentCursor.candidate;
      }

      return null;
    },
    set: function set(node) {
      var currentCursor = this.currentCursor;
      currentCursor.candidate = node;
    }
  }]);

  return RehydrateBuilder;
}(NewElementBuilder);

function isTextNode(node) {
  return node.nodeType === 3;
}

function isComment(node) {
  return node.nodeType === 8;
}

function isOpenBlock(node) {
  return node.nodeType === 8
  /* COMMENT_NODE */
  && node.nodeValue.lastIndexOf('%+b:', 0) === 0;
}

function isCloseBlock(node) {
  return node.nodeType === 8
  /* COMMENT_NODE */
  && node.nodeValue.lastIndexOf('%-b:', 0) === 0;
}

function getBlockDepth(node) {
  return parseInt(node.nodeValue.slice(4), 10);
}

function getBlockDepthWithOffset(node, offset) {
  return getBlockDepth(node) - offset;
}

function isElement(node) {
  return node.nodeType === 1;
}

function isMarker(node) {
  return node.nodeType === 8 && node.nodeValue === '%glmr%';
}

function isSeparator(node) {
  return node.nodeType === 8 && node.nodeValue === '%|%';
}

function isEmpty(node) {
  return node.nodeType === 8 && node.nodeValue === '% %';
}

function isSameNodeType(candidate, tag) {
  if (candidate.namespaceURI === "http://www.w3.org/2000/svg"
  /* SVG */
  ) {
      return candidate.tagName === tag;
    }

  return candidate.tagName === tag.toUpperCase();
}

function findByName(array, name) {
  for (var i = 0; i < array.length; i++) {
    var attr = array[i];
    if (attr.name === name) return attr;
  }

  return undefined;
}

export function rehydrationBuilder(env, cursor) {
  return RehydrateBuilder.forInitialRender(env, cursor);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
import { childRefFor, createConstRef } from '@glimmer/reference';
import { unwrapHandle } from '@glimmer/util';
import { ARGS, CONSTANTS } from './symbols';
import VM from './vm/append';
import { DynamicScopeImpl } from './scope';
import { inTransaction } from './environment';
import { DEBUG } from '@glimmer/env';
import { runInTrackingTransaction } from '@glimmer/validator';

var TemplateIteratorImpl = /*#__PURE__*/function () {
  function TemplateIteratorImpl(vm) {
    this.vm = vm;
  }

  var _proto = TemplateIteratorImpl.prototype;

  _proto.next = function next() {
    return this.vm.next();
  };

  _proto.sync = function sync() {
    var _this = this;

    if (DEBUG) {
      return runInTrackingTransaction(function () {
        return _this.vm.execute();
      }, '- While rendering:');
    } else {
      return this.vm.execute();
    }
  };

  return TemplateIteratorImpl;
}();

export function renderSync(env, iterator) {
  var result;
  inTransaction(env, function () {
    return result = iterator.sync();
  });
  return result;
}
export function renderMain(runtime, context, owner, self, treeBuilder, layout, dynamicScope) {
  if (dynamicScope === void 0) {
    dynamicScope = new DynamicScopeImpl();
  }

  var handle = unwrapHandle(layout.compile(context));
  var numSymbols = layout.symbolTable.symbols.length;
  var vm = VM.initial(runtime, context, {
    self: self,
    dynamicScope: dynamicScope,
    treeBuilder: treeBuilder,
    handle: handle,
    numSymbols: numSymbols,
    owner: owner
  });
  return new TemplateIteratorImpl(vm);
}

function renderInvocation(vm, context, owner, definition, args) {
  // Get a list of tuples of argument names and references, like
  // [['title', reference], ['name', reference]]
  var argList = Object.keys(args).map(function (key) {
    return [key, args[key]];
  });
  var blockNames = ['main', 'else', 'attrs']; // Prefix argument names with `@` symbol

  var argNames = argList.map(function (_ref) {
    var name = _ref[0];
    return "@" + name;
  });
  var reified = vm[CONSTANTS].component(definition, owner);
  vm.pushFrame(); // Push blocks on to the stack, three stack values per block

  for (var i = 0; i < 3 * blockNames.length; i++) {
    vm.stack.push(null);
  }

  vm.stack.push(null); // For each argument, push its backing reference on to the stack

  argList.forEach(function (_ref2) {
    var reference = _ref2[1];
    vm.stack.push(reference);
  }); // Configure VM based on blocks and args just pushed on to the stack.

  vm[ARGS].setup(vm.stack, argNames, blockNames, 0, true);
  var compilable = reified.compilable;
  var layoutHandle = unwrapHandle(compilable.compile(context));
  var invocation = {
    handle: layoutHandle,
    symbolTable: compilable.symbolTable
  }; // Needed for the Op.Main opcode: arguments, component invocation object, and
  // component definition.

  vm.stack.push(vm[ARGS]);
  vm.stack.push(invocation);
  vm.stack.push(reified);
  return new TemplateIteratorImpl(vm);
}

export function renderComponent(runtime, treeBuilder, context, owner, definition, args, dynamicScope) {
  if (args === void 0) {
    args = {};
  }

  if (dynamicScope === void 0) {
    dynamicScope = new DynamicScopeImpl();
  }

  var vm = VM.empty(runtime, {
    treeBuilder: treeBuilder,
    handle: context.stdlib.main,
    dynamicScope: dynamicScope,
    owner: owner
  }, context);
  return renderInvocation(vm, context, owner, definition, recordToReference(args));
}

function recordToReference(record) {
  var root = createConstRef(record, 'args');
  return Object.keys(record).reduce(function (acc, key) {
    acc[key] = childRefFor(root, key);
    return acc;
  }, {});
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
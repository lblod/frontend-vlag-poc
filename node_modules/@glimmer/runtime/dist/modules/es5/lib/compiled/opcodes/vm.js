import { toBool } from '@glimmer/global-context';
import { valueForRef, isConstRef, createPrimitiveRef, UNDEFINED_REFERENCE, NULL_REFERENCE, TRUE_REFERENCE, FALSE_REFERENCE, createComputeRef, createConstRef } from '@glimmer/reference';
import { CONSTANT_TAG, valueForTag, validateTag, INITIAL, beginTrackFrame, endTrackFrame, consumeTag } from '@glimmer/validator';
import { assert, decodeHandle, decodeImmediate, isHandle } from '@glimmer/util';
import { stackAssert } from './assert';
import { APPEND_OPCODES } from '../../opcodes';
import { CONSTANTS } from '../../symbols';
APPEND_OPCODES.add(39
/* ChildScope */
, function (vm) {
  return vm.pushChildScope();
});
APPEND_OPCODES.add(40
/* PopScope */
, function (vm) {
  return vm.popScope();
});
APPEND_OPCODES.add(59
/* PushDynamicScope */
, function (vm) {
  return vm.pushDynamicScope();
});
APPEND_OPCODES.add(60
/* PopDynamicScope */
, function (vm) {
  return vm.popDynamicScope();
});
APPEND_OPCODES.add(28
/* Constant */
, function (vm, _ref) {
  var other = _ref.op1;
  vm.stack.push(vm[CONSTANTS].getValue(decodeHandle(other)));
});
APPEND_OPCODES.add(29
/* ConstantReference */
, function (vm, _ref2) {
  var other = _ref2.op1;
  vm.stack.push(createConstRef(vm[CONSTANTS].getValue(decodeHandle(other)), false));
});
APPEND_OPCODES.add(30
/* Primitive */
, function (vm, _ref3) {
  var primitive = _ref3.op1;
  var stack = vm.stack;

  if (isHandle(primitive)) {
    // it is a handle which does not already exist on the stack
    var value = vm[CONSTANTS].getValue(decodeHandle(primitive));
    stack.push(value);
  } else {
    // is already an encoded immediate or primitive handle
    stack.push(decodeImmediate(primitive));
  }
});
APPEND_OPCODES.add(31
/* PrimitiveReference */
, function (vm) {
  var stack = vm.stack;
  var value = stack.pop();
  var ref;

  if (value === undefined) {
    ref = UNDEFINED_REFERENCE;
  } else if (value === null) {
    ref = NULL_REFERENCE;
  } else if (value === true) {
    ref = TRUE_REFERENCE;
  } else if (value === false) {
    ref = FALSE_REFERENCE;
  } else {
    ref = createPrimitiveRef(value);
  }

  stack.push(ref);
});
APPEND_OPCODES.add(33
/* Dup */
, function (vm, _ref4) {
  var register = _ref4.op1,
      offset = _ref4.op2;
  var position = vm.fetchValue(register) - offset;
  vm.stack.dup(position);
});
APPEND_OPCODES.add(34
/* Pop */
, function (vm, _ref5) {
  var count = _ref5.op1;
  vm.stack.pop(count);
});
APPEND_OPCODES.add(35
/* Load */
, function (vm, _ref6) {
  var register = _ref6.op1;
  vm.load(register);
});
APPEND_OPCODES.add(36
/* Fetch */
, function (vm, _ref7) {
  var register = _ref7.op1;
  vm.fetch(register);
});
APPEND_OPCODES.add(58
/* BindDynamicScope */
, function (vm, _ref8) {
  var _names = _ref8.op1;
  var names = vm[CONSTANTS].getArray(_names);
  vm.bindDynamicScope(names);
});
APPEND_OPCODES.add(69
/* Enter */
, function (vm, _ref9) {
  var args = _ref9.op1;
  vm.enter(args);
});
APPEND_OPCODES.add(70
/* Exit */
, function (vm) {
  vm.exit();
});
APPEND_OPCODES.add(63
/* PushSymbolTable */
, function (vm, _ref10) {
  var _table = _ref10.op1;
  var stack = vm.stack;
  stack.push(vm[CONSTANTS].getValue(_table));
});
APPEND_OPCODES.add(62
/* PushBlockScope */
, function (vm) {
  var stack = vm.stack;
  stack.push(vm.scope());
});
APPEND_OPCODES.add(61
/* CompileBlock */
, function (vm) {
  var stack = vm.stack;
  var block = stack.pop();

  if (block) {
    stack.push(vm.compile(block));
  } else {
    stack.push(null);
  }
});
APPEND_OPCODES.add(64
/* InvokeYield */
, function (vm) {
  var stack = vm.stack;
  var handle = stack.pop();
  var scope = stack.pop();
  var table = stack.pop();
  false && assert(table === null || table && typeof table === 'object' && Array.isArray(table.parameters), stackAssert('Option<BlockSymbolTable>', table));
  var args = stack.pop();

  if (table === null) {
    // To balance the pop{Frame,Scope}
    vm.pushFrame();
    vm.pushScope(scope !== null && scope !== void 0 ? scope : vm.scope());
    return;
  }

  var invokingScope = scope; // If necessary, create a child scope

  {
    var locals = table.parameters;
    var localsCount = locals.length;

    if (localsCount > 0) {
      invokingScope = invokingScope.child();

      for (var i = 0; i < localsCount; i++) {
        invokingScope.bindSymbol(locals[i], args.at(i));
      }
    }
  }
  vm.pushFrame();
  vm.pushScope(invokingScope);
  vm.call(handle);
});
APPEND_OPCODES.add(65
/* JumpIf */
, function (vm, _ref11) {
  var target = _ref11.op1;
  var reference = vm.stack.pop();
  var value = Boolean(valueForRef(reference));

  if (isConstRef(reference)) {
    if (value === true) {
      vm["goto"](target);
    }
  } else {
    if (value === true) {
      vm["goto"](target);
    }

    vm.updateWith(new Assert(reference));
  }
});
APPEND_OPCODES.add(66
/* JumpUnless */
, function (vm, _ref12) {
  var target = _ref12.op1;
  var reference = vm.stack.pop();
  var value = Boolean(valueForRef(reference));

  if (isConstRef(reference)) {
    if (value === false) {
      vm["goto"](target);
    }
  } else {
    if (value === false) {
      vm["goto"](target);
    }

    vm.updateWith(new Assert(reference));
  }
});
APPEND_OPCODES.add(67
/* JumpEq */
, function (vm, _ref13) {
  var target = _ref13.op1,
      comparison = _ref13.op2;
  var other = vm.stack.peek();

  if (other === comparison) {
    vm["goto"](target);
  }
});
APPEND_OPCODES.add(68
/* AssertSame */
, function (vm) {
  var reference = vm.stack.peek();

  if (isConstRef(reference) === false) {
    vm.updateWith(new Assert(reference));
  }
});
APPEND_OPCODES.add(71
/* ToBoolean */
, function (vm) {
  var stack = vm.stack;
  var valueRef = stack.pop();
  stack.push(createComputeRef(function () {
    return toBool(valueForRef(valueRef));
  }));
});
export var Assert = /*#__PURE__*/function () {
  function Assert(ref) {
    this.ref = ref;
    this.last = valueForRef(ref);
  }

  var _proto = Assert.prototype;

  _proto.evaluate = function evaluate(vm) {
    var last = this.last,
        ref = this.ref;
    var current = valueForRef(ref);

    if (last !== current) {
      vm["throw"]();
    }
  };

  return Assert;
}();
export var AssertFilter = /*#__PURE__*/function () {
  function AssertFilter(ref, filter) {
    this.ref = ref;
    this.filter = filter;
    this.last = filter(valueForRef(ref));
  }

  var _proto2 = AssertFilter.prototype;

  _proto2.evaluate = function evaluate(vm) {
    var last = this.last,
        ref = this.ref,
        filter = this.filter;
    var current = filter(valueForRef(ref));

    if (last !== current) {
      vm["throw"]();
    }
  };

  return AssertFilter;
}();
export var JumpIfNotModifiedOpcode = /*#__PURE__*/function () {
  function JumpIfNotModifiedOpcode() {
    this.tag = CONSTANT_TAG;
    this.lastRevision = INITIAL;
  }

  var _proto3 = JumpIfNotModifiedOpcode.prototype;

  _proto3.finalize = function finalize(tag, target) {
    this.target = target;
    this.didModify(tag);
  };

  _proto3.evaluate = function evaluate(vm) {
    var tag = this.tag,
        target = this.target,
        lastRevision = this.lastRevision;

    if (!vm.alwaysRevalidate && validateTag(tag, lastRevision)) {
      consumeTag(tag);
      vm["goto"](target);
    }
  };

  _proto3.didModify = function didModify(tag) {
    this.tag = tag;
    this.lastRevision = valueForTag(this.tag);
    consumeTag(tag);
  };

  return JumpIfNotModifiedOpcode;
}();
export var BeginTrackFrameOpcode = /*#__PURE__*/function () {
  function BeginTrackFrameOpcode(debugLabel) {
    this.debugLabel = debugLabel;
  }

  var _proto4 = BeginTrackFrameOpcode.prototype;

  _proto4.evaluate = function evaluate() {
    beginTrackFrame(this.debugLabel);
  };

  return BeginTrackFrameOpcode;
}();
export var EndTrackFrameOpcode = /*#__PURE__*/function () {
  function EndTrackFrameOpcode(target) {
    this.target = target;
  }

  var _proto5 = EndTrackFrameOpcode.prototype;

  _proto5.evaluate = function evaluate() {
    var tag = endTrackFrame();
    this.target.didModify(tag);
  };

  return EndTrackFrameOpcode;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
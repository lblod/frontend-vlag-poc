import { valueForRef, isConstRef, createComputeRef } from '@glimmer/reference';
import { valueForTag, validateTag, consumeTag, CURRENT_TAG } from '@glimmer/validator';
import { $t0 } from '@glimmer/vm';
import { APPEND_OPCODES } from '../../opcodes';
import { Assert } from './vm';
import { CONSTANTS } from '../../symbols';
import { assign, debugToString, isObject } from '@glimmer/util';
import { isCurriedType, resolveCurriedValue } from '../../curried-value';
import { DEBUG } from '@glimmer/env';
import { associateDestroyableChild, destroy } from '@glimmer/destroyable';
APPEND_OPCODES.add(41
/* Text */
, function (vm, _ref) {
  var text = _ref.op1;
  vm.elements().appendText(vm[CONSTANTS].getValue(text));
});
APPEND_OPCODES.add(42
/* Comment */
, function (vm, _ref2) {
  var text = _ref2.op1;
  vm.elements().appendComment(vm[CONSTANTS].getValue(text));
});
APPEND_OPCODES.add(48
/* OpenElement */
, function (vm, _ref3) {
  var tag = _ref3.op1;
  vm.elements().openElement(vm[CONSTANTS].getValue(tag));
});
APPEND_OPCODES.add(49
/* OpenDynamicElement */
, function (vm) {
  var tagName = valueForRef(vm.stack.pop());
  vm.elements().openElement(tagName);
});
APPEND_OPCODES.add(50
/* PushRemoteElement */
, function (vm) {
  var elementRef = vm.stack.pop();
  var insertBeforeRef = vm.stack.pop();
  var guidRef = vm.stack.pop();
  var element = valueForRef(elementRef);
  var insertBefore = valueForRef(insertBeforeRef);
  var guid = valueForRef(guidRef);

  if (!isConstRef(elementRef)) {
    vm.updateWith(new Assert(elementRef));
  }

  if (insertBefore !== undefined && !isConstRef(insertBeforeRef)) {
    vm.updateWith(new Assert(insertBeforeRef));
  }

  var block = vm.elements().pushRemoteElement(element, guid, insertBefore);
  if (block) vm.associateDestroyable(block);
});
APPEND_OPCODES.add(56
/* PopRemoteElement */
, function (vm) {
  vm.elements().popRemoteElement();
});
APPEND_OPCODES.add(54
/* FlushElement */
, function (vm) {
  var operations = vm.fetchValue($t0);
  var modifiers = null;

  if (operations) {
    modifiers = operations.flush(vm);
    vm.loadValue($t0, null);
  }

  vm.elements().flushElement(modifiers);
});
APPEND_OPCODES.add(55
/* CloseElement */
, function (vm) {
  var modifiers = vm.elements().closeElement();

  if (modifiers) {
    modifiers.forEach(function (modifier) {
      vm.env.scheduleInstallModifier(modifier);
      var manager = modifier.manager,
          state = modifier.state;
      var d = manager.getDestroyable(state);

      if (d) {
        vm.associateDestroyable(d);
      }
    });
  }
});
APPEND_OPCODES.add(57
/* Modifier */
, function (vm, _ref4) {
  var handle = _ref4.op1;

  if (vm.env.isInteractive === false) {
    return;
  }

  var owner = vm.getOwner();
  var args = vm.stack.pop();
  var definition = vm[CONSTANTS].getValue(handle);
  var manager = definition.manager;

  var _vm$elements = vm.elements(),
      constructing = _vm$elements.constructing;

  var state = manager.create(owner, constructing, definition.state, args.capture());
  var instance = {
    manager: manager,
    state: state,
    definition: definition
  };
  var operations = vm.fetchValue($t0);
  operations.addModifier(instance);
  var tag = manager.getTag(state);

  if (tag !== null) {
    consumeTag(tag);
    return vm.updateWith(new UpdateModifierOpcode(tag, instance));
  }
});
APPEND_OPCODES.add(108
/* DynamicModifier */
, function (vm) {
  if (vm.env.isInteractive === false) {
    return;
  }

  var stack = vm.stack,
      constants = vm[CONSTANTS];
  var ref = stack.pop();
  var args = stack.pop().capture();

  var _vm$elements2 = vm.elements(),
      constructing = _vm$elements2.constructing;

  var initialOwner = vm.getOwner();
  var instanceRef = createComputeRef(function () {
    var value = valueForRef(ref);
    var owner;

    if (!isObject(value)) {
      return;
    }

    var hostDefinition;

    if (isCurriedType(value, 2
    /* Modifier */
    )) {
      var _resolveCurriedValue = resolveCurriedValue(value),
          resolvedDefinition = _resolveCurriedValue.definition,
          curriedOwner = _resolveCurriedValue.owner,
          positional = _resolveCurriedValue.positional,
          named = _resolveCurriedValue.named;

      hostDefinition = resolvedDefinition;
      owner = curriedOwner;

      if (positional !== undefined) {
        args.positional = positional.concat(args.positional);
      }

      if (named !== undefined) {
        args.named = assign.apply(void 0, [{}].concat(named, [args.named]));
      }
    } else {
      hostDefinition = value;
      owner = initialOwner;
    }

    var handle = constants.modifier(hostDefinition, null, true);

    if (DEBUG && handle === null) {
      throw new Error("Expected a dynamic modifier definition, but received an object or function that did not have a modifier manager associated with it. The dynamic invocation was `{{" + ref.debugLabel + "}}`, and the incorrect definition is the value at the path `" + ref.debugLabel + "`, which was: " + debugToString(hostDefinition));
    }

    var definition = constants.getValue(handle);
    var manager = definition.manager;
    var state = manager.create(owner, constructing, definition.state, args);
    return {
      manager: manager,
      state: state,
      definition: definition
    };
  });
  var instance = valueForRef(instanceRef);
  var tag = null;

  if (instance !== undefined) {
    var operations = vm.fetchValue($t0);
    operations.addModifier(instance);
    tag = instance.manager.getTag(instance.state);

    if (tag !== null) {
      consumeTag(tag);
    }
  }

  if (!isConstRef(ref) || tag) {
    return vm.updateWith(new UpdateDynamicModifierOpcode(tag, instance, instanceRef));
  }
});
export var UpdateModifierOpcode = /*#__PURE__*/function () {
  function UpdateModifierOpcode(tag, modifier) {
    this.tag = tag;
    this.modifier = modifier;
    this.lastUpdated = valueForTag(tag);
  }

  var _proto = UpdateModifierOpcode.prototype;

  _proto.evaluate = function evaluate(vm) {
    var modifier = this.modifier,
        tag = this.tag,
        lastUpdated = this.lastUpdated;
    consumeTag(tag);

    if (!validateTag(tag, lastUpdated)) {
      vm.env.scheduleUpdateModifier(modifier);
      this.lastUpdated = valueForTag(tag);
    }
  };

  return UpdateModifierOpcode;
}();
export var UpdateDynamicModifierOpcode = /*#__PURE__*/function () {
  function UpdateDynamicModifierOpcode(tag, instance, instanceRef) {
    this.tag = tag;
    this.instance = instance;
    this.instanceRef = instanceRef;
    this.lastUpdated = valueForTag(tag !== null && tag !== void 0 ? tag : CURRENT_TAG);
  }

  var _proto2 = UpdateDynamicModifierOpcode.prototype;

  _proto2.evaluate = function evaluate(vm) {
    var tag = this.tag,
        lastUpdated = this.lastUpdated,
        instance = this.instance,
        instanceRef = this.instanceRef;
    var newInstance = valueForRef(instanceRef);

    if (newInstance !== instance) {
      if (instance !== undefined) {
        var destroyable = instance.manager.getDestroyable(instance.state);

        if (destroyable !== null) {
          destroy(destroyable);
        }
      }

      if (newInstance !== undefined) {
        var manager = newInstance.manager,
            state = newInstance.state;

        var _destroyable = manager.getDestroyable(state);

        if (_destroyable !== null) {
          associateDestroyableChild(this, _destroyable);
        }

        tag = manager.getTag(state);

        if (tag !== null) {
          this.lastUpdated = valueForTag(tag);
        }

        this.tag = tag;
        vm.env.scheduleInstallModifier(newInstance);
      }

      this.instance = newInstance;
    } else if (tag !== null && !validateTag(tag, lastUpdated)) {
      vm.env.scheduleUpdateModifier(instance);
      this.lastUpdated = valueForTag(tag);
    }

    if (tag !== null) {
      consumeTag(tag);
    }
  };

  return UpdateDynamicModifierOpcode;
}();
APPEND_OPCODES.add(51
/* StaticAttr */
, function (vm, _ref5) {
  var _name = _ref5.op1,
      _value = _ref5.op2,
      _namespace = _ref5.op3;
  var name = vm[CONSTANTS].getValue(_name);
  var value = vm[CONSTANTS].getValue(_value);
  var namespace = _namespace ? vm[CONSTANTS].getValue(_namespace) : null;
  vm.elements().setStaticAttribute(name, value, namespace);
});
APPEND_OPCODES.add(52
/* DynamicAttr */
, function (vm, _ref6) {
  var _name = _ref6.op1,
      _trusting = _ref6.op2,
      _namespace = _ref6.op3;
  var name = vm[CONSTANTS].getValue(_name);
  var trusting = vm[CONSTANTS].getValue(_trusting);
  var reference = vm.stack.pop();
  var value = valueForRef(reference);
  var namespace = _namespace ? vm[CONSTANTS].getValue(_namespace) : null;
  var attribute = vm.elements().setDynamicAttribute(name, value, trusting, namespace);

  if (!isConstRef(reference)) {
    vm.updateWith(new UpdateDynamicAttributeOpcode(reference, attribute, vm.env));
  }
});
export var UpdateDynamicAttributeOpcode = /*#__PURE__*/function () {
  function UpdateDynamicAttributeOpcode(reference, attribute, env) {
    var initialized = false;
    this.updateRef = createComputeRef(function () {
      var value = valueForRef(reference);

      if (initialized === true) {
        attribute.update(value, env);
      } else {
        initialized = true;
      }
    });
    valueForRef(this.updateRef);
  }

  var _proto3 = UpdateDynamicAttributeOpcode.prototype;

  _proto3.evaluate = function evaluate() {
    valueForRef(this.updateRef);
  };

  return UpdateDynamicAttributeOpcode;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
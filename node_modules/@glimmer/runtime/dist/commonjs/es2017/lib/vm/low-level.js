"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initializeRegisters = initializeRegisters;
exports.initializeRegistersWithSP = initializeRegistersWithSP;
exports.initializeRegistersWithPC = initializeRegistersWithPC;
exports.default = void 0;

var _opcodes = require("../opcodes");

var _vm = require("@glimmer/vm");

var _util = require("@glimmer/util");

function initializeRegisters() {
  return [0, -1, 0, 0];
}

function initializeRegistersWithSP(sp) {
  return [0, -1, sp, 0];
}

function initializeRegistersWithPC(pc) {
  return [pc, -1, 0, 0];
}

class LowLevelVM {
  constructor(stack, heap, program, externs, registers) {
    this.stack = stack;
    this.heap = heap;
    this.program = program;
    this.externs = externs;
    this.registers = registers;
    this.currentOpSize = 0;
  }

  fetchRegister(register) {
    return this.registers[register];
  }

  loadRegister(register, value) {
    this.registers[register] = value;
  }

  setPc(pc) {
    false && (0, _util.assert)(typeof pc === 'number' && !isNaN(pc), 'pc is set to a number');
    this.registers[_vm.$pc] = pc;
  } // Start a new frame and save $ra and $fp on the stack


  pushFrame() {
    this.stack.push(this.registers[_vm.$ra]);
    this.stack.push(this.registers[_vm.$fp]);
    this.registers[_vm.$fp] = this.registers[_vm.$sp] - 1;
  } // Restore $ra, $sp and $fp


  popFrame() {
    this.registers[_vm.$sp] = this.registers[_vm.$fp] - 1;
    this.registers[_vm.$ra] = this.stack.get(0);
    this.registers[_vm.$fp] = this.stack.get(1);
  }

  pushSmallFrame() {
    this.stack.push(this.registers[_vm.$ra]);
  }

  popSmallFrame() {
    this.registers[_vm.$ra] = this.stack.pop();
  } // Jump to an address in `program`


  goto(offset) {
    this.setPc(this.target(offset));
  }

  target(offset) {
    return this.registers[_vm.$pc] + offset - this.currentOpSize;
  } // Save $pc into $ra, then jump to a new address in `program` (jal in MIPS)


  call(handle) {
    false && (0, _util.assert)(handle < 0xffffffff, `Jumping to placeholder address`);
    this.registers[_vm.$ra] = this.registers[_vm.$pc];
    this.setPc(this.heap.getaddr(handle));
  } // Put a specific `program` address in $ra


  returnTo(offset) {
    this.registers[_vm.$ra] = this.target(offset);
  } // Return to the `program` address stored in $ra


  return() {
    this.setPc(this.registers[_vm.$ra]);
  }

  nextStatement() {
    let {
      registers,
      program
    } = this;
    let pc = registers[_vm.$pc];
    false && (0, _util.assert)(typeof pc === 'number', 'pc is a number');

    if (pc === -1) {
      return null;
    } // We have to save off the current operations size so that
    // when we do a jump we can calculate the correct offset
    // to where we are going. We can't simply ask for the size
    // in a jump because we have have already incremented the
    // program counter to the next instruction prior to executing.


    let opcode = program.opcode(pc);
    let operationSize = this.currentOpSize = opcode.size;
    this.registers[_vm.$pc] += operationSize;
    return opcode;
  }

  evaluateOuter(opcode, vm) {
    if (false
    /* LOCAL_DEBUG */
    ) {
        let {
          externs: {
            debugBefore,
            debugAfter
          }
        } = this;
        let state = debugBefore(opcode);
        this.evaluateInner(opcode, vm);
        debugAfter(state);
      } else {
      this.evaluateInner(opcode, vm);
    }
  }

  evaluateInner(opcode, vm) {
    if (opcode.isMachine) {
      this.evaluateMachine(opcode);
    } else {
      this.evaluateSyscall(opcode, vm);
    }
  }

  evaluateMachine(opcode) {
    switch (opcode.type) {
      case 0
      /* PushFrame */
      :
        return this.pushFrame();

      case 1
      /* PopFrame */
      :
        return this.popFrame();

      case 3
      /* InvokeStatic */
      :
        return this.call(opcode.op1);

      case 2
      /* InvokeVirtual */
      :
        return this.call(this.stack.pop());

      case 4
      /* Jump */
      :
        return this.goto(opcode.op1);

      case 5
      /* Return */
      :
        return this.return();

      case 6
      /* ReturnTo */
      :
        return this.returnTo(opcode.op1);
    }
  }

  evaluateSyscall(opcode, vm) {
    _opcodes.APPEND_OPCODES.evaluate(vm, opcode, opcode.type);
  }

}

exports.default = LowLevelVM;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";

var _reference = require("@glimmer/reference");

var _vm = require("@glimmer/vm");

var _opcodes = require("../../opcodes");

var _concat = require("../expressions/concat");

var _destroyable = require("@glimmer/destroyable");

var _util = require("@glimmer/util");

var _globalContext = require("@glimmer/global-context");

var _symbols = require("../../symbols");

var _env = require("@glimmer/env");

var _curryValue = _interopRequireDefault(require("../../references/curry-value"));

var _curriedValue = require("../../curried-value");

var _arguments = require("../../vm/arguments");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_opcodes.APPEND_OPCODES.add(77
/* Curry */
, (vm, {
  op1: type,
  op2: _isStrict
}) => {
  let stack = vm.stack;
  let definition = stack.pop();
  let capturedArgs = stack.pop();
  let owner = vm.getOwner();
  let resolver = vm.runtime.resolver;
  let isStrict = false;

  if (_env.DEBUG) {
    // strict check only happens in DEBUG builds, no reason to load it otherwise
    isStrict = vm[_symbols.CONSTANTS].getValue((0, _util.decodeHandle)(_isStrict));
  }

  vm.loadValue(_vm.$v0, (0, _curryValue.default)(type, definition, owner, capturedArgs, resolver, isStrict));
});

_opcodes.APPEND_OPCODES.add(107
/* DynamicHelper */
, vm => {
  let stack = vm.stack;
  let ref = stack.pop();
  let args = stack.pop().capture();
  let helperRef;
  let initialOwner = vm.getOwner();
  let helperInstanceRef = (0, _reference.createComputeRef)(() => {
    if (helperRef !== undefined) {
      (0, _destroyable.destroy)(helperRef);
    }

    let definition = (0, _reference.valueForRef)(ref);

    if ((0, _curriedValue.isCurriedType)(definition, 1
    /* Helper */
    )) {
      let {
        definition: resolvedDef,
        owner,
        positional,
        named
      } = (0, _curriedValue.resolveCurriedValue)(definition);
      let helper = resolveHelper(vm[_symbols.CONSTANTS], resolvedDef, ref);

      if (named !== undefined) {
        args.named = (0, _util.assign)({}, ...named, args.named);
      }

      if (positional !== undefined) {
        args.positional = positional.concat(args.positional);
      }

      helperRef = helper(args, owner);
      (0, _destroyable.associateDestroyableChild)(helperInstanceRef, helperRef);
    } else if ((0, _util.isObject)(definition)) {
      let helper = resolveHelper(vm[_symbols.CONSTANTS], definition, ref);
      helperRef = helper(args, initialOwner);

      if ((0, _destroyable._hasDestroyableChildren)(helperRef)) {
        (0, _destroyable.associateDestroyableChild)(helperInstanceRef, helperRef);
      }
    } else {
      helperRef = _reference.UNDEFINED_REFERENCE;
    }
  });
  let helperValueRef = (0, _reference.createComputeRef)(() => {
    (0, _reference.valueForRef)(helperInstanceRef);
    return (0, _reference.valueForRef)(helperRef);
  });
  vm.associateDestroyable(helperInstanceRef);
  vm.loadValue(_vm.$v0, helperValueRef);
});

function resolveHelper(constants, definition, ref) {
  let handle = constants.helper(definition, null, true);

  if (_env.DEBUG && handle === null) {
    throw new Error(`Expected a dynamic helper definition, but received an object or function that did not have a helper manager associated with it. The dynamic invocation was \`{{${ref.debugLabel}}}\` or \`(${ref.debugLabel})\`, and the incorrect definition is the value at the path \`${ref.debugLabel}\`, which was: ${(0, _util.debugToString)(definition)}`);
  }

  return constants.getValue(handle);
}

_opcodes.APPEND_OPCODES.add(16
/* Helper */
, (vm, {
  op1: handle
}) => {
  let stack = vm.stack;

  let helper = vm[_symbols.CONSTANTS].getValue(handle);

  let args = stack.pop();
  let value = helper(args.capture(), vm.getOwner(), vm.dynamicScope());

  if ((0, _destroyable._hasDestroyableChildren)(value)) {
    vm.associateDestroyable(value);
  }

  vm.loadValue(_vm.$v0, value);
});

_opcodes.APPEND_OPCODES.add(21
/* GetVariable */
, (vm, {
  op1: symbol
}) => {
  let expr = vm.referenceForSymbol(symbol);
  vm.stack.push(expr);
});

_opcodes.APPEND_OPCODES.add(19
/* SetVariable */
, (vm, {
  op1: symbol
}) => {
  let expr = vm.stack.pop();
  vm.scope().bindSymbol(symbol, expr);
});

_opcodes.APPEND_OPCODES.add(20
/* SetBlock */
, (vm, {
  op1: symbol
}) => {
  let handle = vm.stack.pop();
  let scope = vm.stack.pop();
  let table = vm.stack.pop();
  vm.scope().bindBlock(symbol, [handle, scope, table]);
});

_opcodes.APPEND_OPCODES.add(102
/* ResolveMaybeLocal */
, (vm, {
  op1: _name
}) => {
  let name = vm[_symbols.CONSTANTS].getValue(_name);

  let locals = vm.scope().getPartialMap();
  let ref = locals[name];

  if (ref === undefined) {
    ref = (0, _reference.childRefFor)(vm.getSelf(), name);
  }

  vm.stack.push(ref);
});

_opcodes.APPEND_OPCODES.add(37
/* RootScope */
, (vm, {
  op1: symbols
}) => {
  vm.pushRootScope(symbols, vm.getOwner());
});

_opcodes.APPEND_OPCODES.add(22
/* GetProperty */
, (vm, {
  op1: _key
}) => {
  let key = vm[_symbols.CONSTANTS].getValue(_key);

  let expr = vm.stack.pop();
  vm.stack.push((0, _reference.childRefFor)(expr, key));
});

_opcodes.APPEND_OPCODES.add(23
/* GetBlock */
, (vm, {
  op1: _block
}) => {
  let {
    stack
  } = vm;
  let block = vm.scope().getBlock(_block);
  stack.push(block);
});

_opcodes.APPEND_OPCODES.add(24
/* SpreadBlock */
, vm => {
  let {
    stack
  } = vm;
  let block = stack.pop();

  if (block && !isUndefinedReference(block)) {
    let [handleOrCompilable, scope, table] = block;
    stack.push(table);
    stack.push(scope);
    stack.push(handleOrCompilable);
  } else {
    stack.push(null);
    stack.push(null);
    stack.push(null);
  }
});

function isUndefinedReference(input) {
  false && (0, _util.assert)(Array.isArray(input) || input === _reference.UNDEFINED_REFERENCE, 'a reference other than UNDEFINED_REFERENCE is illegal here');
  return input === _reference.UNDEFINED_REFERENCE;
}

_opcodes.APPEND_OPCODES.add(25
/* HasBlock */
, vm => {
  let {
    stack
  } = vm;
  let block = stack.pop();

  if (block && !isUndefinedReference(block)) {
    stack.push(_reference.TRUE_REFERENCE);
  } else {
    stack.push(_reference.FALSE_REFERENCE);
  }
});

_opcodes.APPEND_OPCODES.add(26
/* HasBlockParams */
, vm => {
  // FIXME(mmun): should only need to push the symbol table
  let block = vm.stack.pop();
  let scope = vm.stack.pop();
  let table = vm.stack.pop();
  let hasBlockParams = table && table.parameters.length;
  vm.stack.push(hasBlockParams ? _reference.TRUE_REFERENCE : _reference.FALSE_REFERENCE);
});

_opcodes.APPEND_OPCODES.add(27
/* Concat */
, (vm, {
  op1: count
}) => {
  let out = new Array(count);

  for (let i = count; i > 0; i--) {
    let offset = i - 1;
    out[offset] = vm.stack.pop();
  }

  vm.stack.push((0, _concat.createConcatRef)(out));
});

_opcodes.APPEND_OPCODES.add(109
/* IfInline */
, vm => {
  let condition = vm.stack.pop();
  let truthy = vm.stack.pop();
  let falsy = vm.stack.pop();
  vm.stack.push((0, _reference.createComputeRef)(() => {
    if ((0, _globalContext.toBool)((0, _reference.valueForRef)(condition)) === true) {
      return (0, _reference.valueForRef)(truthy);
    } else {
      return (0, _reference.valueForRef)(falsy);
    }
  }));
});

_opcodes.APPEND_OPCODES.add(110
/* Not */
, vm => {
  let ref = vm.stack.pop();
  vm.stack.push((0, _reference.createComputeRef)(() => {
    return !(0, _globalContext.toBool)((0, _reference.valueForRef)(ref));
  }));
});

_opcodes.APPEND_OPCODES.add(111
/* GetDynamicVar */
, vm => {
  let scope = vm.dynamicScope();
  let stack = vm.stack;
  let nameRef = stack.pop();
  stack.push((0, _reference.createComputeRef)(() => {
    let name = String((0, _reference.valueForRef)(nameRef));
    return (0, _reference.valueForRef)(scope.get(name));
  }));
});

_opcodes.APPEND_OPCODES.add(112
/* Log */
, vm => {
  let {
    positional
  } = vm.stack.pop().capture();
  vm.loadValue(_vm.$v0, (0, _reference.createComputeRef)(() => {
    // eslint-disable-next-line no-console
    console.log(...(0, _arguments.reifyPositional)(positional));
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";

var _reference = require("@glimmer/reference");

var _util = require("@glimmer/util");

var _opcodes = require("../../opcodes");

var _normalize = require("../../dom/normalize");

var _text = _interopRequireDefault(require("../../vm/content/text"));

var _vm = require("./vm");

var _manager = require("@glimmer/manager");

var _env = require("@glimmer/env");

var _curriedValue = require("../../curried-value");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function toContentType(value) {
  if ((0, _normalize.shouldCoerce)(value)) {
    return 2
    /* String */
    ;
  } else if ((0, _curriedValue.isCurriedType)(value, 0
  /* Component */
  ) || (0, _manager.hasInternalComponentManager)(value)) {
    return 0
    /* Component */
    ;
  } else if ((0, _curriedValue.isCurriedType)(value, 1
  /* Helper */
  ) || (0, _manager.hasInternalHelperManager)(value)) {
    return 1
    /* Helper */
    ;
  } else if ((0, _normalize.isSafeString)(value)) {
    return 4
    /* SafeString */
    ;
  } else if ((0, _normalize.isFragment)(value)) {
    return 5
    /* Fragment */
    ;
  } else if ((0, _normalize.isNode)(value)) {
    return 6
    /* Node */
    ;
  } else {
      return 2
      /* String */
      ;
    }
}

function toDynamicContentType(value) {
  if (!(0, _util.isObject)(value)) {
    return 2
    /* String */
    ;
  }

  if ((0, _curriedValue.isCurriedType)(value, 0
  /* Component */
  ) || (0, _manager.hasInternalComponentManager)(value)) {
    return 0
    /* Component */
    ;
  } else {
    if (_env.DEBUG && !(0, _curriedValue.isCurriedType)(value, 1
    /* Helper */
    ) && !(0, _manager.hasInternalHelperManager)(value)) {
      throw new Error(`Attempted use a dynamic value as a component or helper, but that value did not have an associated component or helper manager. The value was: ${value}`);
    }

    return 1
    /* Helper */
    ;
  }
}

_opcodes.APPEND_OPCODES.add(76
/* ContentType */
, vm => {
  let reference = vm.stack.peek();
  vm.stack.push(toContentType((0, _reference.valueForRef)(reference)));

  if (!(0, _reference.isConstRef)(reference)) {
    vm.updateWith(new _vm.AssertFilter(reference, toContentType));
  }
});

_opcodes.APPEND_OPCODES.add(106
/* DynamicContentType */
, vm => {
  let reference = vm.stack.peek();
  vm.stack.push(toDynamicContentType((0, _reference.valueForRef)(reference)));

  if (!(0, _reference.isConstRef)(reference)) {
    vm.updateWith(new _vm.AssertFilter(reference, toDynamicContentType));
  }
});

_opcodes.APPEND_OPCODES.add(43
/* AppendHTML */
, vm => {
  let reference = vm.stack.pop();
  let rawValue = (0, _reference.valueForRef)(reference);
  let value = (0, _normalize.isEmpty)(rawValue) ? '' : String(rawValue);
  vm.elements().appendDynamicHTML(value);
});

_opcodes.APPEND_OPCODES.add(44
/* AppendSafeHTML */
, vm => {
  let reference = vm.stack.pop();
  let rawValue = (0, _reference.valueForRef)(reference).toHTML();
  let value = (0, _normalize.isEmpty)(rawValue) ? '' : rawValue;
  vm.elements().appendDynamicHTML(value);
});

_opcodes.APPEND_OPCODES.add(47
/* AppendText */
, vm => {
  let reference = vm.stack.pop();
  let rawValue = (0, _reference.valueForRef)(reference);
  let value = (0, _normalize.isEmpty)(rawValue) ? '' : String(rawValue);
  let node = vm.elements().appendDynamicText(value);

  if (!(0, _reference.isConstRef)(reference)) {
    vm.updateWith(new _text.default(node, reference, value));
  }
});

_opcodes.APPEND_OPCODES.add(45
/* AppendDocumentFragment */
, vm => {
  let reference = vm.stack.pop();
  let value = (0, _reference.valueForRef)(reference);
  vm.elements().appendDynamicFragment(value);
});

_opcodes.APPEND_OPCODES.add(46
/* AppendNode */
, vm => {
  let reference = vm.stack.pop();
  let value = (0, _reference.valueForRef)(reference);
  vm.elements().appendDynamicNode(value);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
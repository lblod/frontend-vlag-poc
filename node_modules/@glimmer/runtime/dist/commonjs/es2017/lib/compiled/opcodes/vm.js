"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EndTrackFrameOpcode = exports.BeginTrackFrameOpcode = exports.JumpIfNotModifiedOpcode = exports.AssertFilter = exports.Assert = void 0;

var _globalContext = require("@glimmer/global-context");

var _reference = require("@glimmer/reference");

var _validator = require("@glimmer/validator");

var _util = require("@glimmer/util");

var _assert = require("./assert");

var _opcodes = require("../../opcodes");

var _symbols = require("../../symbols");

_opcodes.APPEND_OPCODES.add(39
/* ChildScope */
, vm => vm.pushChildScope());

_opcodes.APPEND_OPCODES.add(40
/* PopScope */
, vm => vm.popScope());

_opcodes.APPEND_OPCODES.add(59
/* PushDynamicScope */
, vm => vm.pushDynamicScope());

_opcodes.APPEND_OPCODES.add(60
/* PopDynamicScope */
, vm => vm.popDynamicScope());

_opcodes.APPEND_OPCODES.add(28
/* Constant */
, (vm, {
  op1: other
}) => {
  vm.stack.push(vm[_symbols.CONSTANTS].getValue((0, _util.decodeHandle)(other)));
});

_opcodes.APPEND_OPCODES.add(29
/* ConstantReference */
, (vm, {
  op1: other
}) => {
  vm.stack.push((0, _reference.createConstRef)(vm[_symbols.CONSTANTS].getValue((0, _util.decodeHandle)(other)), false));
});

_opcodes.APPEND_OPCODES.add(30
/* Primitive */
, (vm, {
  op1: primitive
}) => {
  let stack = vm.stack;

  if ((0, _util.isHandle)(primitive)) {
    // it is a handle which does not already exist on the stack
    let value = vm[_symbols.CONSTANTS].getValue((0, _util.decodeHandle)(primitive));

    stack.push(value);
  } else {
    // is already an encoded immediate or primitive handle
    stack.push((0, _util.decodeImmediate)(primitive));
  }
});

_opcodes.APPEND_OPCODES.add(31
/* PrimitiveReference */
, vm => {
  let stack = vm.stack;
  let value = stack.pop();
  let ref;

  if (value === undefined) {
    ref = _reference.UNDEFINED_REFERENCE;
  } else if (value === null) {
    ref = _reference.NULL_REFERENCE;
  } else if (value === true) {
    ref = _reference.TRUE_REFERENCE;
  } else if (value === false) {
    ref = _reference.FALSE_REFERENCE;
  } else {
    ref = (0, _reference.createPrimitiveRef)(value);
  }

  stack.push(ref);
});

_opcodes.APPEND_OPCODES.add(33
/* Dup */
, (vm, {
  op1: register,
  op2: offset
}) => {
  let position = vm.fetchValue(register) - offset;
  vm.stack.dup(position);
});

_opcodes.APPEND_OPCODES.add(34
/* Pop */
, (vm, {
  op1: count
}) => {
  vm.stack.pop(count);
});

_opcodes.APPEND_OPCODES.add(35
/* Load */
, (vm, {
  op1: register
}) => {
  vm.load(register);
});

_opcodes.APPEND_OPCODES.add(36
/* Fetch */
, (vm, {
  op1: register
}) => {
  vm.fetch(register);
});

_opcodes.APPEND_OPCODES.add(58
/* BindDynamicScope */
, (vm, {
  op1: _names
}) => {
  let names = vm[_symbols.CONSTANTS].getArray(_names);

  vm.bindDynamicScope(names);
});

_opcodes.APPEND_OPCODES.add(69
/* Enter */
, (vm, {
  op1: args
}) => {
  vm.enter(args);
});

_opcodes.APPEND_OPCODES.add(70
/* Exit */
, vm => {
  vm.exit();
});

_opcodes.APPEND_OPCODES.add(63
/* PushSymbolTable */
, (vm, {
  op1: _table
}) => {
  let stack = vm.stack;
  stack.push(vm[_symbols.CONSTANTS].getValue(_table));
});

_opcodes.APPEND_OPCODES.add(62
/* PushBlockScope */
, vm => {
  let stack = vm.stack;
  stack.push(vm.scope());
});

_opcodes.APPEND_OPCODES.add(61
/* CompileBlock */
, vm => {
  let stack = vm.stack;
  let block = stack.pop();

  if (block) {
    stack.push(vm.compile(block));
  } else {
    stack.push(null);
  }
});

_opcodes.APPEND_OPCODES.add(64
/* InvokeYield */
, vm => {
  let {
    stack
  } = vm;
  let handle = stack.pop();
  let scope = stack.pop();
  let table = stack.pop();
  false && (0, _util.assert)(table === null || table && typeof table === 'object' && Array.isArray(table.parameters), (0, _assert.stackAssert)('Option<BlockSymbolTable>', table));
  let args = stack.pop();

  if (table === null) {
    // To balance the pop{Frame,Scope}
    vm.pushFrame();
    vm.pushScope(scope !== null && scope !== void 0 ? scope : vm.scope());
    return;
  }

  let invokingScope = scope; // If necessary, create a child scope

  {
    let locals = table.parameters;
    let localsCount = locals.length;

    if (localsCount > 0) {
      invokingScope = invokingScope.child();

      for (let i = 0; i < localsCount; i++) {
        invokingScope.bindSymbol(locals[i], args.at(i));
      }
    }
  }
  vm.pushFrame();
  vm.pushScope(invokingScope);
  vm.call(handle);
});

_opcodes.APPEND_OPCODES.add(65
/* JumpIf */
, (vm, {
  op1: target
}) => {
  let reference = vm.stack.pop();
  let value = Boolean((0, _reference.valueForRef)(reference));

  if ((0, _reference.isConstRef)(reference)) {
    if (value === true) {
      vm.goto(target);
    }
  } else {
    if (value === true) {
      vm.goto(target);
    }

    vm.updateWith(new Assert(reference));
  }
});

_opcodes.APPEND_OPCODES.add(66
/* JumpUnless */
, (vm, {
  op1: target
}) => {
  let reference = vm.stack.pop();
  let value = Boolean((0, _reference.valueForRef)(reference));

  if ((0, _reference.isConstRef)(reference)) {
    if (value === false) {
      vm.goto(target);
    }
  } else {
    if (value === false) {
      vm.goto(target);
    }

    vm.updateWith(new Assert(reference));
  }
});

_opcodes.APPEND_OPCODES.add(67
/* JumpEq */
, (vm, {
  op1: target,
  op2: comparison
}) => {
  let other = vm.stack.peek();

  if (other === comparison) {
    vm.goto(target);
  }
});

_opcodes.APPEND_OPCODES.add(68
/* AssertSame */
, vm => {
  let reference = vm.stack.peek();

  if ((0, _reference.isConstRef)(reference) === false) {
    vm.updateWith(new Assert(reference));
  }
});

_opcodes.APPEND_OPCODES.add(71
/* ToBoolean */
, vm => {
  let {
    stack
  } = vm;
  let valueRef = stack.pop();
  stack.push((0, _reference.createComputeRef)(() => (0, _globalContext.toBool)((0, _reference.valueForRef)(valueRef))));
});

class Assert {
  constructor(ref) {
    this.ref = ref;
    this.last = (0, _reference.valueForRef)(ref);
  }

  evaluate(vm) {
    let {
      last,
      ref
    } = this;
    let current = (0, _reference.valueForRef)(ref);

    if (last !== current) {
      vm.throw();
    }
  }

}

exports.Assert = Assert;

class AssertFilter {
  constructor(ref, filter) {
    this.ref = ref;
    this.filter = filter;
    this.last = filter((0, _reference.valueForRef)(ref));
  }

  evaluate(vm) {
    let {
      last,
      ref,
      filter
    } = this;
    let current = filter((0, _reference.valueForRef)(ref));

    if (last !== current) {
      vm.throw();
    }
  }

}

exports.AssertFilter = AssertFilter;

class JumpIfNotModifiedOpcode {
  constructor() {
    this.tag = _validator.CONSTANT_TAG;
    this.lastRevision = _validator.INITIAL;
  }

  finalize(tag, target) {
    this.target = target;
    this.didModify(tag);
  }

  evaluate(vm) {
    let {
      tag,
      target,
      lastRevision
    } = this;

    if (!vm.alwaysRevalidate && (0, _validator.validateTag)(tag, lastRevision)) {
      (0, _validator.consumeTag)(tag);
      vm.goto(target);
    }
  }

  didModify(tag) {
    this.tag = tag;
    this.lastRevision = (0, _validator.valueForTag)(this.tag);
    (0, _validator.consumeTag)(tag);
  }

}

exports.JumpIfNotModifiedOpcode = JumpIfNotModifiedOpcode;

class BeginTrackFrameOpcode {
  constructor(debugLabel) {
    this.debugLabel = debugLabel;
  }

  evaluate() {
    (0, _validator.beginTrackFrame)(this.debugLabel);
  }

}

exports.BeginTrackFrameOpcode = BeginTrackFrameOpcode;

class EndTrackFrameOpcode {
  constructor(target) {
    this.target = target;
  }

  evaluate() {
    let tag = (0, _validator.endTrackFrame)();
    this.target.didModify(tag);
  }

}

exports.EndTrackFrameOpcode = EndTrackFrameOpcode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
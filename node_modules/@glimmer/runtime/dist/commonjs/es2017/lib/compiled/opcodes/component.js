"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DidUpdateLayoutOpcode = exports.UpdateComponentOpcode = exports.ComponentElementOperations = void 0;

var _env = require("@glimmer/env");

var _reference = require("@glimmer/reference");

var _util = require("@glimmer/util");

var _vm2 = require("@glimmer/vm");

var _destroyable = require("@glimmer/destroyable");

var _manager = require("@glimmer/manager");

var _resolve = require("../../component/resolve");

var _interfaces = require("../../component/interfaces");

var _opcodes = require("../../opcodes");

var _classList = _interopRequireDefault(require("../../references/class-list"));

var _symbols = require("../../symbols");

var _arguments = require("../../vm/arguments");

var _dom = require("./dom");

var _curriedValue = require("../../curried-value");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_opcodes.APPEND_OPCODES.add(78
/* PushComponentDefinition */
, (vm, {
  op1: handle
}) => {
  let definition = vm[_symbols.CONSTANTS].getValue(handle);

  false && (0, _util.assert)(!!definition, `Missing component for ${handle}`);
  let {
    manager,
    capabilities
  } = definition;
  let instance = {
    definition,
    manager,
    capabilities,
    state: null,
    handle: null,
    table: null,
    lookup: null
  };
  vm.stack.push(instance);
});

_opcodes.APPEND_OPCODES.add(80
/* ResolveDynamicComponent */
, (vm, {
  op1: _isStrict
}) => {
  let stack = vm.stack;
  let component = (0, _reference.valueForRef)(stack.pop());
  let constants = vm[_symbols.CONSTANTS];
  let owner = vm.getOwner();
  let isStrict = constants.getValue(_isStrict);
  vm.loadValue(_vm2.$t1, null); // Clear the temp register

  let definition;

  if (typeof component === 'string') {
    if (_env.DEBUG && isStrict) {
      throw new Error(`Attempted to resolve a dynamic component with a string definition, \`${component}\` in a strict mode template. In strict mode, using strings to resolve component definitions is prohibited. You can instead import the component definition and use it directly.`);
    }

    let resolvedDefinition = (0, _resolve.resolveComponent)(vm.runtime.resolver, constants, component, owner);
    definition = resolvedDefinition;
  } else if ((0, _curriedValue.isCurriedValue)(component)) {
    definition = component;
  } else {
    definition = constants.component(component, owner);
  }

  stack.push(definition);
});

_opcodes.APPEND_OPCODES.add(81
/* ResolveCurriedComponent */
, vm => {
  let stack = vm.stack;
  let ref = stack.pop();
  let value = (0, _reference.valueForRef)(ref);
  let constants = vm[_symbols.CONSTANTS];
  let definition;

  if (_env.DEBUG && !(typeof value === 'function' || typeof value === 'object' && value !== null)) {
    throw new Error(`Expected a component definition, but received ${value}. You may have accidentally done <${ref.debugLabel}>, where "${ref.debugLabel}" was a string instead of a curried component definition. You must either use the component definition directly, or use the {{component}} helper to create a curried component definition when invoking dynamically.`);
  }

  if ((0, _curriedValue.isCurriedValue)(value)) {
    definition = value;
  } else {
    definition = constants.component(value, vm.getOwner(), true);

    if (_env.DEBUG && definition === null) {
      throw new Error(`Expected a dynamic component definition, but received an object or function that did not have a component manager associated with it. The dynamic invocation was \`<${ref.debugLabel}>\` or \`{{${ref.debugLabel}}}\`, and the incorrect definition is the value at the path \`${ref.debugLabel}\`, which was: ${(0, _util.debugToString)(value)}`);
    }
  }

  stack.push(definition);
});

_opcodes.APPEND_OPCODES.add(79
/* PushDynamicComponentInstance */
, vm => {
  let {
    stack
  } = vm;
  let definition = stack.pop();
  let capabilities, manager;

  if ((0, _curriedValue.isCurriedValue)(definition)) {
    manager = capabilities = null;
  } else {
    manager = definition.manager;
    capabilities = definition.capabilities;
  }

  stack.push({
    definition,
    capabilities,
    manager,
    state: null,
    handle: null,
    table: null
  });
});

_opcodes.APPEND_OPCODES.add(82
/* PushArgs */
, (vm, {
  op1: _names,
  op2: _blockNames,
  op3: flags
}) => {
  let stack = vm.stack;

  let names = vm[_symbols.CONSTANTS].getArray(_names);

  let positionalCount = flags >> 4;
  let atNames = flags & 0b1000;
  let blockNames = flags & 0b0111 ? vm[_symbols.CONSTANTS].getArray(_blockNames) : _util.EMPTY_STRING_ARRAY;

  vm[_symbols.ARGS].setup(stack, names, blockNames, positionalCount, !!atNames);

  stack.push(vm[_symbols.ARGS]);
});

_opcodes.APPEND_OPCODES.add(83
/* PushEmptyArgs */
, vm => {
  let {
    stack
  } = vm;
  stack.push(vm[_symbols.ARGS].empty(stack));
});

_opcodes.APPEND_OPCODES.add(86
/* CaptureArgs */
, vm => {
  let stack = vm.stack;
  let args = stack.pop();
  let capturedArgs = args.capture();
  stack.push(capturedArgs);
});

_opcodes.APPEND_OPCODES.add(85
/* PrepareArgs */
, (vm, {
  op1: _state
}) => {
  let stack = vm.stack;
  let instance = vm.fetchValue(_state);
  let args = stack.pop();
  let {
    definition
  } = instance;

  if ((0, _curriedValue.isCurriedType)(definition, 0
  /* Component */
  )) {
    false && (0, _util.assert)(!definition.manager, "If the component definition was curried, we don't yet have a manager");
    let constants = vm[_symbols.CONSTANTS];
    let {
      definition: resolvedDefinition,
      owner,
      resolved,
      positional,
      named
    } = (0, _curriedValue.resolveCurriedValue)(definition);

    if (resolved === true) {
      definition = resolvedDefinition;
    } else if (typeof resolvedDefinition === 'string') {
      let resolvedValue = vm.runtime.resolver.lookupComponent(resolvedDefinition, owner);
      definition = constants.resolvedComponent(resolvedValue, resolvedDefinition);
    } else {
      definition = constants.component(resolvedDefinition, owner);
    }

    if (named !== undefined) {
      args.named.merge((0, _util.assign)({}, ...named));
    }

    if (positional !== undefined) {
      args.realloc(positional.length);
      args.positional.prepend(positional);
    }

    let {
      manager
    } = definition;
    false && (0, _util.assert)(instance.manager === null, 'component instance manager should not be populated yet');
    false && (0, _util.assert)(instance.capabilities === null, 'component instance manager should not be populated yet');
    instance.definition = definition;
    instance.manager = manager;
    instance.capabilities = definition.capabilities; // Save off the owner that this component was curried with. Later on,
    // we'll fetch the value of this register and set it as the owner on the
    // new root scope.

    vm.loadValue(_vm2.$t1, owner);
  }

  let {
    manager,
    state
  } = definition;
  let capabilities = instance.capabilities;

  if (!(0, _manager.managerHasCapability)(manager, capabilities, 4
  /* PrepareArgs */
  )) {
    stack.push(args);
    return;
  }

  let blocks = args.blocks.values;
  let blockNames = args.blocks.names;
  let preparedArgs = manager.prepareArgs(state, args);

  if (preparedArgs) {
    args.clear();

    for (let i = 0; i < blocks.length; i++) {
      stack.push(blocks[i]);
    }

    let {
      positional,
      named
    } = preparedArgs;
    let positionalCount = positional.length;

    for (let i = 0; i < positionalCount; i++) {
      stack.push(positional[i]);
    }

    let names = Object.keys(named);

    for (let i = 0; i < names.length; i++) {
      stack.push(named[names[i]]);
    }

    args.setup(stack, names, blockNames, positionalCount, false);
  }

  stack.push(args);
});

_opcodes.APPEND_OPCODES.add(87
/* CreateComponent */
, (vm, {
  op1: flags,
  op2: _state
}) => {
  let instance = vm.fetchValue(_state);
  let {
    definition,
    manager,
    capabilities
  } = instance;

  if (!(0, _manager.managerHasCapability)(manager, capabilities, 512
  /* CreateInstance */
  )) {
    // TODO: Closure and Main components are always invoked dynamically, so this
    // opcode may run even if this capability is not enabled. In the future we
    // should handle this in a better way.
    return;
  }

  let dynamicScope = null;

  if ((0, _manager.managerHasCapability)(manager, capabilities, 64
  /* DynamicScope */
  )) {
    dynamicScope = vm.dynamicScope();
  }

  let hasDefaultBlock = flags & 1;
  let args = null;

  if ((0, _manager.managerHasCapability)(manager, capabilities, 8
  /* CreateArgs */
  )) {
    args = vm.stack.peek();
  }

  let self = null;

  if ((0, _manager.managerHasCapability)(manager, capabilities, 128
  /* CreateCaller */
  )) {
    self = vm.getSelf();
  }

  let state = manager.create(vm.getOwner(), definition.state, args, vm.env, dynamicScope, self, !!hasDefaultBlock); // We want to reuse the `state` POJO here, because we know that the opcodes
  // only transition at exactly one place.

  instance.state = state;

  if ((0, _manager.managerHasCapability)(manager, capabilities, 256
  /* UpdateHook */
  )) {
    vm.updateWith(new UpdateComponentOpcode(state, manager, dynamicScope));
  }
});

_opcodes.APPEND_OPCODES.add(88
/* RegisterComponentDestructor */
, (vm, {
  op1: _state
}) => {
  let {
    manager,
    state,
    capabilities
  } = vm.fetchValue(_state);
  let d = manager.getDestroyable(state);

  if (_env.DEBUG && !(0, _manager.managerHasCapability)(manager, capabilities, 2048
  /* WillDestroy */
  ) && d !== null && typeof 'willDestroy' in d) {
    throw new Error('BUG: Destructor has willDestroy, but the willDestroy capability was not enabled for this component. Pre-destruction hooks must be explicitly opted into');
  }

  if (d) vm.associateDestroyable(d);
});

_opcodes.APPEND_OPCODES.add(97
/* BeginComponentTransaction */
, (vm, {
  op1: _state
}) => {
  var _a;

  let name;

  if (_env.DEBUG) {
    let {
      definition,
      manager
    } = vm.fetchValue(_state);
    name = (_a = definition.resolvedName) !== null && _a !== void 0 ? _a : manager.getDebugName(definition.state);
  }

  vm.beginCacheGroup(name);
  vm.elements().pushSimpleBlock();
});

_opcodes.APPEND_OPCODES.add(89
/* PutComponentOperations */
, vm => {
  vm.loadValue(_vm2.$t0, new ComponentElementOperations());
});

_opcodes.APPEND_OPCODES.add(53
/* ComponentAttr */
, (vm, {
  op1: _name,
  op2: _trusting,
  op3: _namespace
}) => {
  let name = vm[_symbols.CONSTANTS].getValue(_name);

  let trusting = vm[_symbols.CONSTANTS].getValue(_trusting);

  let reference = vm.stack.pop();
  let namespace = _namespace ? vm[_symbols.CONSTANTS].getValue(_namespace) : null;
  vm.fetchValue(_vm2.$t0).setAttribute(name, reference, trusting, namespace);
});

_opcodes.APPEND_OPCODES.add(105
/* StaticComponentAttr */
, (vm, {
  op1: _name,
  op2: _value,
  op3: _namespace
}) => {
  let name = vm[_symbols.CONSTANTS].getValue(_name);

  let value = vm[_symbols.CONSTANTS].getValue(_value);

  let namespace = _namespace ? vm[_symbols.CONSTANTS].getValue(_namespace) : null;
  vm.fetchValue(_vm2.$t0).setStaticAttribute(name, value, namespace);
});

class ComponentElementOperations {
  constructor() {
    this.attributes = (0, _util.dict)();
    this.classes = [];
    this.modifiers = [];
  }

  setAttribute(name, value, trusting, namespace) {
    let deferred = {
      value,
      namespace,
      trusting
    };

    if (name === 'class') {
      this.classes.push(value);
    }

    this.attributes[name] = deferred;
  }

  setStaticAttribute(name, value, namespace) {
    let deferred = {
      value,
      namespace
    };

    if (name === 'class') {
      this.classes.push(value);
    }

    this.attributes[name] = deferred;
  }

  addModifier(modifier) {
    this.modifiers.push(modifier);
  }

  flush(vm) {
    let type;
    let attributes = this.attributes;

    for (let name in this.attributes) {
      if (name === 'type') {
        type = attributes[name];
        continue;
      }

      let attr = this.attributes[name];

      if (name === 'class') {
        setDeferredAttr(vm, 'class', mergeClasses(this.classes), attr.namespace, attr.trusting);
      } else {
        setDeferredAttr(vm, name, attr.value, attr.namespace, attr.trusting);
      }
    }

    if (type !== undefined) {
      setDeferredAttr(vm, 'type', type.value, type.namespace, type.trusting);
    }

    return this.modifiers;
  }

}

exports.ComponentElementOperations = ComponentElementOperations;

function mergeClasses(classes) {
  if (classes.length === 0) {
    return '';
  }

  if (classes.length === 1) {
    return classes[0];
  }

  if (allStringClasses(classes)) {
    return classes.join(' ');
  }

  return (0, _classList.default)(classes);
}

function allStringClasses(classes) {
  for (let i = 0; i < classes.length; i++) {
    if (typeof classes[i] !== 'string') {
      return false;
    }
  }

  return true;
}

function setDeferredAttr(vm, name, value, namespace, trusting = false) {
  if (typeof value === 'string') {
    vm.elements().setStaticAttribute(name, value, namespace);
  } else {
    let attribute = vm.elements().setDynamicAttribute(name, (0, _reference.valueForRef)(value), trusting, namespace);

    if (!(0, _reference.isConstRef)(value)) {
      vm.updateWith(new _dom.UpdateDynamicAttributeOpcode(value, attribute, vm.env));
    }
  }
}

_opcodes.APPEND_OPCODES.add(99
/* DidCreateElement */
, (vm, {
  op1: _state
}) => {
  let {
    definition,
    state
  } = vm.fetchValue(_state);
  let {
    manager
  } = definition;
  let operations = vm.fetchValue(_vm2.$t0);
  manager.didCreateElement(state, vm.elements().constructing, operations);
});

_opcodes.APPEND_OPCODES.add(90
/* GetComponentSelf */
, (vm, {
  op1: _state,
  op2: _names
}) => {
  var _a;

  let instance = vm.fetchValue(_state);
  let {
    definition,
    state
  } = instance;
  let {
    manager
  } = definition;
  let selfRef = manager.getSelf(state);

  if (vm.env.debugRenderTree !== undefined) {
    let instance = vm.fetchValue(_state);
    let {
      definition,
      manager
    } = instance;
    let args;

    if (vm.stack.peek() === vm[_symbols.ARGS]) {
      args = vm[_symbols.ARGS].capture();
    } else {
      let names = vm[_symbols.CONSTANTS].getArray(_names);

      vm[_symbols.ARGS].setup(vm.stack, names, [], 0, true);

      args = vm[_symbols.ARGS].capture();
    }

    let moduleName;
    let compilable = definition.compilable;

    if (compilable === null) {
      false && (0, _util.assert)((0, _manager.managerHasCapability)(manager, instance.capabilities, 1
      /* DynamicLayout */
      ), 'BUG: No template was found for this component, and the component did not have the dynamic layout capability');
      compilable = manager.getDynamicLayout(state, vm.runtime.resolver);

      if (compilable !== null) {
        moduleName = compilable.moduleName;
      } else {
        moduleName = '__default__.hbs';
      }
    } else {
      moduleName = compilable.moduleName;
    } // For tearing down the debugRenderTree


    vm.associateDestroyable(instance);

    if ((0, _interfaces.hasCustomDebugRenderTreeLifecycle)(manager)) {
      let nodes = manager.getDebugCustomRenderTree(instance.definition.state, instance.state, args, moduleName);
      nodes.forEach(node => {
        let {
          bucket
        } = node;
        vm.env.debugRenderTree.create(bucket, node);
        (0, _destroyable.registerDestructor)(instance, () => {
          var _a;

          (_a = vm.env.debugRenderTree) === null || _a === void 0 ? void 0 : _a.willDestroy(bucket);
        });
        vm.updateWith(new DebugRenderTreeUpdateOpcode(bucket));
      });
    } else {
      let name = (_a = definition.resolvedName) !== null && _a !== void 0 ? _a : manager.getDebugName(definition.state);
      vm.env.debugRenderTree.create(instance, {
        type: 'component',
        name,
        args,
        template: moduleName,
        instance: (0, _reference.valueForRef)(selfRef)
      });
      vm.associateDestroyable(instance);
      (0, _destroyable.registerDestructor)(instance, () => {
        var _a;

        (_a = vm.env.debugRenderTree) === null || _a === void 0 ? void 0 : _a.willDestroy(instance);
      });
      vm.updateWith(new DebugRenderTreeUpdateOpcode(instance));
    }
  }

  vm.stack.push(selfRef);
});

_opcodes.APPEND_OPCODES.add(91
/* GetComponentTagName */
, (vm, {
  op1: _state
}) => {
  let {
    definition,
    state
  } = vm.fetchValue(_state);
  let {
    manager
  } = definition;
  let tagName = manager.getTagName(state); // User provided value from JS, so we don't bother to encode

  vm.stack.push(tagName);
}); // Dynamic Invocation Only


_opcodes.APPEND_OPCODES.add(92
/* GetComponentLayout */
, (vm, {
  op1: _state
}) => {
  let instance = vm.fetchValue(_state);
  let {
    manager,
    definition
  } = instance;
  let {
    stack
  } = vm;
  let {
    compilable
  } = definition;

  if (compilable === null) {
    let {
      capabilities
    } = instance;
    false && (0, _util.assert)((0, _manager.managerHasCapability)(manager, capabilities, 1
    /* DynamicLayout */
    ), 'BUG: No template was found for this component, and the component did not have the dynamic layout capability');
    compilable = manager.getDynamicLayout(instance.state, vm.runtime.resolver);

    if (compilable === null) {
      if ((0, _manager.managerHasCapability)(manager, capabilities, 1024
      /* Wrapped */
      )) {
        compilable = (0, _util.unwrapTemplate)(vm[_symbols.CONSTANTS].defaultTemplate).asWrappedLayout();
      } else {
        compilable = (0, _util.unwrapTemplate)(vm[_symbols.CONSTANTS].defaultTemplate).asLayout();
      }
    }
  }

  let handle = compilable.compile(vm.context);
  stack.push(compilable.symbolTable);
  stack.push(handle);
});

_opcodes.APPEND_OPCODES.add(75
/* Main */
, (vm, {
  op1: register
}) => {
  let definition = vm.stack.pop();
  let invocation = vm.stack.pop();
  let {
    manager,
    capabilities
  } = definition;
  let state = {
    definition,
    manager,
    capabilities,
    state: null,
    handle: invocation.handle,
    table: invocation.symbolTable,
    lookup: null
  };
  vm.loadValue(register, state);
});

_opcodes.APPEND_OPCODES.add(95
/* PopulateLayout */
, (vm, {
  op1: _state
}) => {
  let {
    stack
  } = vm; // In DEBUG handles could be ErrHandle objects

  let handle = stack.pop();
  let table = stack.pop();
  let state = vm.fetchValue(_state);
  state.handle = handle;
  state.table = table;
});

_opcodes.APPEND_OPCODES.add(38
/* VirtualRootScope */
, (vm, {
  op1: _state
}) => {
  let {
    table,
    manager,
    capabilities,
    state
  } = vm.fetchValue(_state);
  let owner;

  if ((0, _manager.managerHasCapability)(manager, capabilities, 4096
  /* HasSubOwner */
  )) {
    owner = manager.getOwner(state);
    vm.loadValue(_vm2.$t1, null); // Clear the temp register
  } else {
    // Check the temp register to see if an owner was resolved from currying
    owner = vm.fetchValue(_vm2.$t1);

    if (owner === null) {
      // If an owner wasn't found, default to using the current owner. This
      // will happen for normal dynamic component invocation,
      // e.g. <SomeClassicEmberComponent/>
      owner = vm.getOwner();
    } else {
      // Else the owner was found, so clear the temp register. This will happen
      // if we are loading a curried component, e.g. <@someCurriedComponent/>
      vm.loadValue(_vm2.$t1, null);
    }
  }

  vm.pushRootScope(table.symbols.length + 1, owner);
});

_opcodes.APPEND_OPCODES.add(94
/* SetupForEval */
, (vm, {
  op1: _state
}) => {
  let state = vm.fetchValue(_state);

  if (state.table.hasEval) {
    let lookup = state.lookup = (0, _util.dict)();
    vm.scope().bindEvalScope(lookup);
  }
});

_opcodes.APPEND_OPCODES.add(17
/* SetNamedVariables */
, (vm, {
  op1: _state
}) => {
  let state = vm.fetchValue(_state);
  let scope = vm.scope();
  let args = vm.stack.peek();
  let callerNames = args.named.atNames;

  for (let i = callerNames.length - 1; i >= 0; i--) {
    let atName = callerNames[i];
    let symbol = state.table.symbols.indexOf(callerNames[i]);
    let value = args.named.get(atName, true);
    if (symbol !== -1) scope.bindSymbol(symbol + 1, value);
    if (state.lookup) state.lookup[atName] = value;
  }
});

function bindBlock(symbolName, blockName, state, blocks, vm) {
  let symbol = state.table.symbols.indexOf(symbolName);
  let block = blocks.get(blockName);
  if (symbol !== -1) vm.scope().bindBlock(symbol + 1, block);
  if (state.lookup) state.lookup[symbolName] = block;
}

_opcodes.APPEND_OPCODES.add(18
/* SetBlocks */
, (vm, {
  op1: _state
}) => {
  let state = vm.fetchValue(_state);
  let {
    blocks
  } = vm.stack.peek();

  for (let i = 0; i < blocks.names.length; i++) {
    bindBlock(blocks.symbolNames[i], blocks.names[i], state, blocks, vm);
  }
}); // Dynamic Invocation Only


_opcodes.APPEND_OPCODES.add(96
/* InvokeComponentLayout */
, (vm, {
  op1: _state
}) => {
  let state = vm.fetchValue(_state);
  vm.call(state.handle);
});

_opcodes.APPEND_OPCODES.add(100
/* DidRenderLayout */
, (vm, {
  op1: _state
}) => {
  let instance = vm.fetchValue(_state);
  let {
    manager,
    state,
    capabilities
  } = instance;
  let bounds = vm.elements().popBlock();

  if (vm.env.debugRenderTree !== undefined) {
    if ((0, _interfaces.hasCustomDebugRenderTreeLifecycle)(manager)) {
      let nodes = manager.getDebugCustomRenderTree(instance.definition.state, state, _arguments.EMPTY_ARGS);
      nodes.reverse().forEach(node => {
        let {
          bucket
        } = node;
        vm.env.debugRenderTree.didRender(bucket, bounds);
        vm.updateWith(new DebugRenderTreeDidRenderOpcode(bucket, bounds));
      });
    } else {
      vm.env.debugRenderTree.didRender(instance, bounds);
      vm.updateWith(new DebugRenderTreeDidRenderOpcode(instance, bounds));
    }
  }

  if ((0, _manager.managerHasCapability)(manager, capabilities, 512
  /* CreateInstance */
  )) {
    let mgr = manager;
    mgr.didRenderLayout(state, bounds);
    vm.env.didCreate(instance);
    vm.updateWith(new DidUpdateLayoutOpcode(instance, bounds));
  }
});

_opcodes.APPEND_OPCODES.add(98
/* CommitComponentTransaction */
, vm => {
  vm.commitCacheGroup();
});

class UpdateComponentOpcode {
  constructor(component, manager, dynamicScope) {
    this.component = component;
    this.manager = manager;
    this.dynamicScope = dynamicScope;
  }

  evaluate(_vm) {
    let {
      component,
      manager,
      dynamicScope
    } = this;
    manager.update(component, dynamicScope);
  }

}

exports.UpdateComponentOpcode = UpdateComponentOpcode;

class DidUpdateLayoutOpcode {
  constructor(component, bounds) {
    this.component = component;
    this.bounds = bounds;
  }

  evaluate(vm) {
    let {
      component,
      bounds
    } = this;
    let {
      manager,
      state
    } = component;
    manager.didUpdateLayout(state, bounds);
    vm.env.didUpdate(component);
  }

}

exports.DidUpdateLayoutOpcode = DidUpdateLayoutOpcode;

class DebugRenderTreeUpdateOpcode {
  constructor(bucket) {
    this.bucket = bucket;
  }

  evaluate(vm) {
    var _a;

    (_a = vm.env.debugRenderTree) === null || _a === void 0 ? void 0 : _a.update(this.bucket);
  }

}

class DebugRenderTreeDidRenderOpcode {
  constructor(bucket, bounds) {
    this.bucket = bucket;
    this.bounds = bounds;
  }

  evaluate(vm) {
    var _a;

    (_a = vm.env.debugRenderTree) === null || _a === void 0 ? void 0 : _a.didRender(this.bucket, this.bounds);
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UpdateDynamicAttributeOpcode = exports.UpdateDynamicModifierOpcode = exports.UpdateModifierOpcode = void 0;

var _reference = require("@glimmer/reference");

var _validator = require("@glimmer/validator");

var _vm = require("@glimmer/vm");

var _opcodes = require("../../opcodes");

var _vm2 = require("./vm");

var _symbols = require("../../symbols");

var _util = require("@glimmer/util");

var _curriedValue = require("../../curried-value");

var _env = require("@glimmer/env");

var _destroyable = require("@glimmer/destroyable");

_opcodes.APPEND_OPCODES.add(41
/* Text */
, (vm, {
  op1: text
}) => {
  vm.elements().appendText(vm[_symbols.CONSTANTS].getValue(text));
});

_opcodes.APPEND_OPCODES.add(42
/* Comment */
, (vm, {
  op1: text
}) => {
  vm.elements().appendComment(vm[_symbols.CONSTANTS].getValue(text));
});

_opcodes.APPEND_OPCODES.add(48
/* OpenElement */
, (vm, {
  op1: tag
}) => {
  vm.elements().openElement(vm[_symbols.CONSTANTS].getValue(tag));
});

_opcodes.APPEND_OPCODES.add(49
/* OpenDynamicElement */
, vm => {
  let tagName = (0, _reference.valueForRef)(vm.stack.pop());
  vm.elements().openElement(tagName);
});

_opcodes.APPEND_OPCODES.add(50
/* PushRemoteElement */
, vm => {
  let elementRef = vm.stack.pop();
  let insertBeforeRef = vm.stack.pop();
  let guidRef = vm.stack.pop();
  let element = (0, _reference.valueForRef)(elementRef);
  let insertBefore = (0, _reference.valueForRef)(insertBeforeRef);
  let guid = (0, _reference.valueForRef)(guidRef);

  if (!(0, _reference.isConstRef)(elementRef)) {
    vm.updateWith(new _vm2.Assert(elementRef));
  }

  if (insertBefore !== undefined && !(0, _reference.isConstRef)(insertBeforeRef)) {
    vm.updateWith(new _vm2.Assert(insertBeforeRef));
  }

  let block = vm.elements().pushRemoteElement(element, guid, insertBefore);
  if (block) vm.associateDestroyable(block);
});

_opcodes.APPEND_OPCODES.add(56
/* PopRemoteElement */
, vm => {
  vm.elements().popRemoteElement();
});

_opcodes.APPEND_OPCODES.add(54
/* FlushElement */
, vm => {
  let operations = vm.fetchValue(_vm.$t0);
  let modifiers = null;

  if (operations) {
    modifiers = operations.flush(vm);
    vm.loadValue(_vm.$t0, null);
  }

  vm.elements().flushElement(modifiers);
});

_opcodes.APPEND_OPCODES.add(55
/* CloseElement */
, vm => {
  let modifiers = vm.elements().closeElement();

  if (modifiers) {
    modifiers.forEach(modifier => {
      vm.env.scheduleInstallModifier(modifier);
      let {
        manager,
        state
      } = modifier;
      let d = manager.getDestroyable(state);

      if (d) {
        vm.associateDestroyable(d);
      }
    });
  }
});

_opcodes.APPEND_OPCODES.add(57
/* Modifier */
, (vm, {
  op1: handle
}) => {
  if (vm.env.isInteractive === false) {
    return;
  }

  let owner = vm.getOwner();
  let args = vm.stack.pop();

  let definition = vm[_symbols.CONSTANTS].getValue(handle);

  let {
    manager
  } = definition;
  let {
    constructing
  } = vm.elements();
  let state = manager.create(owner, constructing, definition.state, args.capture());
  let instance = {
    manager,
    state,
    definition
  };
  let operations = vm.fetchValue(_vm.$t0);
  operations.addModifier(instance);
  let tag = manager.getTag(state);

  if (tag !== null) {
    (0, _validator.consumeTag)(tag);
    return vm.updateWith(new UpdateModifierOpcode(tag, instance));
  }
});

_opcodes.APPEND_OPCODES.add(108
/* DynamicModifier */
, vm => {
  if (vm.env.isInteractive === false) {
    return;
  }

  let {
    stack,
    [_symbols.CONSTANTS]: constants
  } = vm;
  let ref = stack.pop();
  let args = stack.pop().capture();
  let {
    constructing
  } = vm.elements();
  let initialOwner = vm.getOwner();
  let instanceRef = (0, _reference.createComputeRef)(() => {
    let value = (0, _reference.valueForRef)(ref);
    let owner;

    if (!(0, _util.isObject)(value)) {
      return;
    }

    let hostDefinition;

    if ((0, _curriedValue.isCurriedType)(value, 2
    /* Modifier */
    )) {
      let {
        definition: resolvedDefinition,
        owner: curriedOwner,
        positional,
        named
      } = (0, _curriedValue.resolveCurriedValue)(value);
      hostDefinition = resolvedDefinition;
      owner = curriedOwner;

      if (positional !== undefined) {
        args.positional = positional.concat(args.positional);
      }

      if (named !== undefined) {
        args.named = (0, _util.assign)({}, ...named, args.named);
      }
    } else {
      hostDefinition = value;
      owner = initialOwner;
    }

    let handle = constants.modifier(hostDefinition, null, true);

    if (_env.DEBUG && handle === null) {
      throw new Error(`Expected a dynamic modifier definition, but received an object or function that did not have a modifier manager associated with it. The dynamic invocation was \`{{${ref.debugLabel}}}\`, and the incorrect definition is the value at the path \`${ref.debugLabel}\`, which was: ${(0, _util.debugToString)(hostDefinition)}`);
    }

    let definition = constants.getValue(handle);
    let {
      manager
    } = definition;
    let state = manager.create(owner, constructing, definition.state, args);
    return {
      manager,
      state,
      definition
    };
  });
  let instance = (0, _reference.valueForRef)(instanceRef);
  let tag = null;

  if (instance !== undefined) {
    let operations = vm.fetchValue(_vm.$t0);
    operations.addModifier(instance);
    tag = instance.manager.getTag(instance.state);

    if (tag !== null) {
      (0, _validator.consumeTag)(tag);
    }
  }

  if (!(0, _reference.isConstRef)(ref) || tag) {
    return vm.updateWith(new UpdateDynamicModifierOpcode(tag, instance, instanceRef));
  }
});

class UpdateModifierOpcode {
  constructor(tag, modifier) {
    this.tag = tag;
    this.modifier = modifier;
    this.lastUpdated = (0, _validator.valueForTag)(tag);
  }

  evaluate(vm) {
    let {
      modifier,
      tag,
      lastUpdated
    } = this;
    (0, _validator.consumeTag)(tag);

    if (!(0, _validator.validateTag)(tag, lastUpdated)) {
      vm.env.scheduleUpdateModifier(modifier);
      this.lastUpdated = (0, _validator.valueForTag)(tag);
    }
  }

}

exports.UpdateModifierOpcode = UpdateModifierOpcode;

class UpdateDynamicModifierOpcode {
  constructor(tag, instance, instanceRef) {
    this.tag = tag;
    this.instance = instance;
    this.instanceRef = instanceRef;
    this.lastUpdated = (0, _validator.valueForTag)(tag !== null && tag !== void 0 ? tag : _validator.CURRENT_TAG);
  }

  evaluate(vm) {
    let {
      tag,
      lastUpdated,
      instance,
      instanceRef
    } = this;
    let newInstance = (0, _reference.valueForRef)(instanceRef);

    if (newInstance !== instance) {
      if (instance !== undefined) {
        let destroyable = instance.manager.getDestroyable(instance.state);

        if (destroyable !== null) {
          (0, _destroyable.destroy)(destroyable);
        }
      }

      if (newInstance !== undefined) {
        let {
          manager,
          state
        } = newInstance;
        let destroyable = manager.getDestroyable(state);

        if (destroyable !== null) {
          (0, _destroyable.associateDestroyableChild)(this, destroyable);
        }

        tag = manager.getTag(state);

        if (tag !== null) {
          this.lastUpdated = (0, _validator.valueForTag)(tag);
        }

        this.tag = tag;
        vm.env.scheduleInstallModifier(newInstance);
      }

      this.instance = newInstance;
    } else if (tag !== null && !(0, _validator.validateTag)(tag, lastUpdated)) {
      vm.env.scheduleUpdateModifier(instance);
      this.lastUpdated = (0, _validator.valueForTag)(tag);
    }

    if (tag !== null) {
      (0, _validator.consumeTag)(tag);
    }
  }

}

exports.UpdateDynamicModifierOpcode = UpdateDynamicModifierOpcode;

_opcodes.APPEND_OPCODES.add(51
/* StaticAttr */
, (vm, {
  op1: _name,
  op2: _value,
  op3: _namespace
}) => {
  let name = vm[_symbols.CONSTANTS].getValue(_name);

  let value = vm[_symbols.CONSTANTS].getValue(_value);

  let namespace = _namespace ? vm[_symbols.CONSTANTS].getValue(_namespace) : null;
  vm.elements().setStaticAttribute(name, value, namespace);
});

_opcodes.APPEND_OPCODES.add(52
/* DynamicAttr */
, (vm, {
  op1: _name,
  op2: _trusting,
  op3: _namespace
}) => {
  let name = vm[_symbols.CONSTANTS].getValue(_name);

  let trusting = vm[_symbols.CONSTANTS].getValue(_trusting);

  let reference = vm.stack.pop();
  let value = (0, _reference.valueForRef)(reference);
  let namespace = _namespace ? vm[_symbols.CONSTANTS].getValue(_namespace) : null;
  let attribute = vm.elements().setDynamicAttribute(name, value, trusting, namespace);

  if (!(0, _reference.isConstRef)(reference)) {
    vm.updateWith(new UpdateDynamicAttributeOpcode(reference, attribute, vm.env));
  }
});

class UpdateDynamicAttributeOpcode {
  constructor(reference, attribute, env) {
    let initialized = false;
    this.updateRef = (0, _reference.createComputeRef)(() => {
      let value = (0, _reference.valueForRef)(reference);

      if (initialized === true) {
        attribute.update(value, env);
      } else {
        initialized = true;
      }
    });
    (0, _reference.valueForRef)(this.updateRef);
  }

  evaluate() {
    (0, _reference.valueForRef)(this.updateRef);
  }

}

exports.UpdateDynamicAttributeOpcode = UpdateDynamicAttributeOpcode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
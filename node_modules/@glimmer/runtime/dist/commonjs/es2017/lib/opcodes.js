"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.APPEND_OPCODES = exports.AppendOpcodes = void 0;

var _reference = require("@glimmer/reference");

var _util = require("@glimmer/util");

var _vm = require("@glimmer/vm");

var _scope = require("./scope");

var _symbols = require("./symbols");

var _elementBuilder = require("./vm/element-builder");

class AppendOpcodes {
  constructor() {
    this.evaluateOpcode = (0, _util.fillNulls)(104
    /* Size */
    ).slice();
  }

  add(name, evaluate, kind = 'syscall') {
    this.evaluateOpcode[name] = {
      syscall: kind !== 'machine',
      evaluate
    };
  }

  debugBefore(vm, opcode) {
    let params = undefined;
    let opName = undefined;

    if (false
    /* LOCAL_SHOULD_LOG */
    ) {
        let pos = vm[_symbols.INNER_VM].fetchRegister(_vm.$pc) - opcode.size;
        [opName, params] = []; // console.log(`${typePos(vm['pc'])}.`);

        _util.LOCAL_LOGGER.log(`${pos}. ${""}`);

        let debugParams = [];

        for (let prop in params) {
          debugParams.push(prop, '=', params[prop]);
        }

        _util.LOCAL_LOGGER.log(...debugParams);
      }

    let sp;

    if (false
    /* LOCAL_DEBUG */
    ) {
        sp = vm.fetchValue(_vm.$sp);
      }

    return {
      sp: sp,
      pc: vm.fetchValue(_vm.$pc),
      name: opName,
      params,
      type: opcode.type,
      isMachine: opcode.isMachine,
      size: opcode.size,
      state: undefined
    };
  }

  debugAfter(vm, pre) {
    let {
      sp,
      type,
      isMachine,
      pc
    } = pre;

    if (false
    /* LOCAL_DEBUG */
    ) {
        let meta = type;
        let actualChange = vm.fetchValue(_vm.$sp) - sp;

        if (meta && meta.check && typeof meta.stackChange === 'number' && meta.stackChange !== actualChange) {
          throw new Error(`Error in ${pre.name}:\n\n${pc}. ${""}\n\nStack changed by ${actualChange}, expected ${meta.stackChange}`);
        }

        if (false
        /* LOCAL_SHOULD_LOG */
        ) {
            _util.LOCAL_LOGGER.log('%c -> pc: %d, ra: %d, fp: %d, sp: %d, s0: %O, s1: %O, t0: %O, t1: %O, v0: %O', 'color: orange', vm[_symbols.INNER_VM].registers[_vm.$pc], vm[_symbols.INNER_VM].registers[_vm.$ra], vm[_symbols.INNER_VM].registers[_vm.$fp], vm[_symbols.INNER_VM].registers[_vm.$sp], vm['s0'], vm['s1'], vm['t0'], vm['t1'], vm['v0']);

            _util.LOCAL_LOGGER.log('%c -> eval stack', 'color: red', vm.stack.toArray());

            _util.LOCAL_LOGGER.log('%c -> block stack', 'color: magenta', vm.elements().debugBlocks());

            _util.LOCAL_LOGGER.log('%c -> destructor stack', 'color: violet', vm[_symbols.DESTROYABLE_STACK].toArray());

            if (vm[_symbols.STACKS].scope.current === null) {
              _util.LOCAL_LOGGER.log('%c -> scope', 'color: green', 'null');
            } else {
              _util.LOCAL_LOGGER.log('%c -> scope', 'color: green', vm.scope().slots.map(s => (0, _scope.isScopeReference)(s) ? (0, _reference.valueForRef)(s) : s));
            }

            _util.LOCAL_LOGGER.log('%c -> elements', 'color: blue', vm.elements()[_elementBuilder.CURSOR_STACK].current.element);

            _util.LOCAL_LOGGER.log('%c -> constructing', 'color: aqua', vm.elements()['constructing']);
          }
      }
  }

  evaluate(vm, opcode, type) {
    let operation = this.evaluateOpcode[type];

    if (operation.syscall) {
      false && (0, _util.assert)(!opcode.isMachine, `BUG: Mismatch between operation.syscall (${operation.syscall}) and opcode.isMachine (${opcode.isMachine}) for ${opcode.type}`);
      operation.evaluate(vm, opcode);
    } else {
      false && (0, _util.assert)(opcode.isMachine, `BUG: Mismatch between operation.syscall (${operation.syscall}) and opcode.isMachine (${opcode.isMachine}) for ${opcode.type}`);
      operation.evaluate(vm[_symbols.INNER_VM], opcode);
    }
  }

}

exports.AppendOpcodes = AppendOpcodes;
const APPEND_OPCODES = new AppendOpcodes();
exports.APPEND_OPCODES = APPEND_OPCODES;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
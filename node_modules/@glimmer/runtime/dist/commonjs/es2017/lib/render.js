"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderSync = renderSync;
exports.renderMain = renderMain;
exports.renderComponent = renderComponent;

var _reference = require("@glimmer/reference");

var _util = require("@glimmer/util");

var _symbols = require("./symbols");

var _append = _interopRequireDefault(require("./vm/append"));

var _scope = require("./scope");

var _environment = require("./environment");

var _env = require("@glimmer/env");

var _validator = require("@glimmer/validator");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class TemplateIteratorImpl {
  constructor(vm) {
    this.vm = vm;
  }

  next() {
    return this.vm.next();
  }

  sync() {
    if (_env.DEBUG) {
      return (0, _validator.runInTrackingTransaction)(() => this.vm.execute(), '- While rendering:');
    } else {
      return this.vm.execute();
    }
  }

}

function renderSync(env, iterator) {
  let result;
  (0, _environment.inTransaction)(env, () => result = iterator.sync());
  return result;
}

function renderMain(runtime, context, owner, self, treeBuilder, layout, dynamicScope = new _scope.DynamicScopeImpl()) {
  let handle = (0, _util.unwrapHandle)(layout.compile(context));
  let numSymbols = layout.symbolTable.symbols.length;

  let vm = _append.default.initial(runtime, context, {
    self,
    dynamicScope,
    treeBuilder,
    handle,
    numSymbols,
    owner
  });

  return new TemplateIteratorImpl(vm);
}

function renderInvocation(vm, context, owner, definition, args) {
  // Get a list of tuples of argument names and references, like
  // [['title', reference], ['name', reference]]
  const argList = Object.keys(args).map(key => [key, args[key]]);
  const blockNames = ['main', 'else', 'attrs']; // Prefix argument names with `@` symbol

  const argNames = argList.map(([name]) => `@${name}`);

  let reified = vm[_symbols.CONSTANTS].component(definition, owner);

  vm.pushFrame(); // Push blocks on to the stack, three stack values per block

  for (let i = 0; i < 3 * blockNames.length; i++) {
    vm.stack.push(null);
  }

  vm.stack.push(null); // For each argument, push its backing reference on to the stack

  argList.forEach(([, reference]) => {
    vm.stack.push(reference);
  }); // Configure VM based on blocks and args just pushed on to the stack.

  vm[_symbols.ARGS].setup(vm.stack, argNames, blockNames, 0, true);

  const compilable = reified.compilable;
  const layoutHandle = (0, _util.unwrapHandle)(compilable.compile(context));
  const invocation = {
    handle: layoutHandle,
    symbolTable: compilable.symbolTable
  }; // Needed for the Op.Main opcode: arguments, component invocation object, and
  // component definition.

  vm.stack.push(vm[_symbols.ARGS]);
  vm.stack.push(invocation);
  vm.stack.push(reified);
  return new TemplateIteratorImpl(vm);
}

function renderComponent(runtime, treeBuilder, context, owner, definition, args = {}, dynamicScope = new _scope.DynamicScopeImpl()) {
  let vm = _append.default.empty(runtime, {
    treeBuilder,
    handle: context.stdlib.main,
    dynamicScope,
    owner
  }, context);

  return renderInvocation(vm, context, owner, definition, recordToReference(args));
}

function recordToReference(record) {
  const root = (0, _reference.createConstRef)(record, 'args');
  return Object.keys(record).reduce((acc, key) => {
    acc[key] = (0, _reference.childRefFor)(root, key);
    return acc;
  }, {});
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initializeRegisters = initializeRegisters;
exports.initializeRegistersWithSP = initializeRegistersWithSP;
exports.initializeRegistersWithPC = initializeRegistersWithPC;
exports.default = void 0;

var _opcodes = require("../opcodes");

var _vm = require("@glimmer/vm");

var _util = require("@glimmer/util");

function initializeRegisters() {
  return [0, -1, 0, 0];
}

function initializeRegistersWithSP(sp) {
  return [0, -1, sp, 0];
}

function initializeRegistersWithPC(pc) {
  return [pc, -1, 0, 0];
}

var LowLevelVM = /*#__PURE__*/function () {
  function LowLevelVM(stack, heap, program, externs, registers) {
    this.stack = stack;
    this.heap = heap;
    this.program = program;
    this.externs = externs;
    this.registers = registers;
    this.currentOpSize = 0;
  }

  var _proto = LowLevelVM.prototype;

  _proto.fetchRegister = function fetchRegister(register) {
    return this.registers[register];
  };

  _proto.loadRegister = function loadRegister(register, value) {
    this.registers[register] = value;
  };

  _proto.setPc = function setPc(pc) {
    false && (0, _util.assert)(typeof pc === 'number' && !isNaN(pc), 'pc is set to a number');
    this.registers[_vm.$pc] = pc;
  } // Start a new frame and save $ra and $fp on the stack
  ;

  _proto.pushFrame = function pushFrame() {
    this.stack.push(this.registers[_vm.$ra]);
    this.stack.push(this.registers[_vm.$fp]);
    this.registers[_vm.$fp] = this.registers[_vm.$sp] - 1;
  } // Restore $ra, $sp and $fp
  ;

  _proto.popFrame = function popFrame() {
    this.registers[_vm.$sp] = this.registers[_vm.$fp] - 1;
    this.registers[_vm.$ra] = this.stack.get(0);
    this.registers[_vm.$fp] = this.stack.get(1);
  };

  _proto.pushSmallFrame = function pushSmallFrame() {
    this.stack.push(this.registers[_vm.$ra]);
  };

  _proto.popSmallFrame = function popSmallFrame() {
    this.registers[_vm.$ra] = this.stack.pop();
  } // Jump to an address in `program`
  ;

  _proto["goto"] = function goto(offset) {
    this.setPc(this.target(offset));
  };

  _proto.target = function target(offset) {
    return this.registers[_vm.$pc] + offset - this.currentOpSize;
  } // Save $pc into $ra, then jump to a new address in `program` (jal in MIPS)
  ;

  _proto.call = function call(handle) {
    false && (0, _util.assert)(handle < 0xffffffff, "Jumping to placeholder address");
    this.registers[_vm.$ra] = this.registers[_vm.$pc];
    this.setPc(this.heap.getaddr(handle));
  } // Put a specific `program` address in $ra
  ;

  _proto.returnTo = function returnTo(offset) {
    this.registers[_vm.$ra] = this.target(offset);
  } // Return to the `program` address stored in $ra
  ;

  _proto["return"] = function _return() {
    this.setPc(this.registers[_vm.$ra]);
  };

  _proto.nextStatement = function nextStatement() {
    var registers = this.registers,
        program = this.program;
    var pc = registers[_vm.$pc];
    false && (0, _util.assert)(typeof pc === 'number', 'pc is a number');

    if (pc === -1) {
      return null;
    } // We have to save off the current operations size so that
    // when we do a jump we can calculate the correct offset
    // to where we are going. We can't simply ask for the size
    // in a jump because we have have already incremented the
    // program counter to the next instruction prior to executing.


    var opcode = program.opcode(pc);
    var operationSize = this.currentOpSize = opcode.size;
    this.registers[_vm.$pc] += operationSize;
    return opcode;
  };

  _proto.evaluateOuter = function evaluateOuter(opcode, vm) {
    if (false
    /* LOCAL_DEBUG */
    ) {
        var _this$externs = this.externs,
            debugBefore = _this$externs.debugBefore,
            debugAfter = _this$externs.debugAfter;
        var state = debugBefore(opcode);
        this.evaluateInner(opcode, vm);
        debugAfter(state);
      } else {
      this.evaluateInner(opcode, vm);
    }
  };

  _proto.evaluateInner = function evaluateInner(opcode, vm) {
    if (opcode.isMachine) {
      this.evaluateMachine(opcode);
    } else {
      this.evaluateSyscall(opcode, vm);
    }
  };

  _proto.evaluateMachine = function evaluateMachine(opcode) {
    switch (opcode.type) {
      case 0
      /* PushFrame */
      :
        return this.pushFrame();

      case 1
      /* PopFrame */
      :
        return this.popFrame();

      case 3
      /* InvokeStatic */
      :
        return this.call(opcode.op1);

      case 2
      /* InvokeVirtual */
      :
        return this.call(this.stack.pop());

      case 4
      /* Jump */
      :
        return this["goto"](opcode.op1);

      case 5
      /* Return */
      :
        return this["return"]();

      case 6
      /* ReturnTo */
      :
        return this.returnTo(opcode.op1);
    }
  };

  _proto.evaluateSyscall = function evaluateSyscall(opcode, vm) {
    _opcodes.APPEND_OPCODES.evaluate(vm, opcode, opcode.type);
  };

  return LowLevelVM;
}();

exports.default = LowLevelVM;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _env = require("@glimmer/env");

var _globalContext = require("@glimmer/global-context");

var _reference = require("@glimmer/reference");

var _util = require("@glimmer/util");

var _validator = require("@glimmer/validator");

var _vm = require("@glimmer/vm");

var _destroyable = require("@glimmer/destroyable");

var _vm2 = require("../compiled/opcodes/vm");

var _opcodes = require("../opcodes");

var _scope = require("../scope");

var _symbols = require("../symbols");

var _arguments = require("./arguments");

var _lowLevel = _interopRequireDefault(require("./low-level"));

var _renderResult = _interopRequireDefault(require("./render-result"));

var _stack = _interopRequireDefault(require("./stack"));

var _update = require("./update");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var _a, _b;

var Stacks = function Stacks() {
  this.scope = new _util.Stack();
  this.dynamicScope = new _util.Stack();
  this.updating = new _util.Stack();
  this.cache = new _util.Stack();
  this.list = new _util.Stack();
};

var VM = /*#__PURE__*/function () {
  /**
   * End of migrated.
   */
  function VM(runtime, _ref, elementStack, context) {
    var _this = this;

    var pc = _ref.pc,
        scope = _ref.scope,
        dynamicScope = _ref.dynamicScope,
        stack = _ref.stack;
    this.runtime = runtime;
    this.elementStack = elementStack;
    this.context = context;
    this[_a] = new Stacks();
    this[_b] = new _util.Stack();
    this.s0 = null;
    this.s1 = null;
    this.t0 = null;
    this.t1 = null;
    this.v0 = null;
    this.resume = initVM(this.context);

    if (_env.DEBUG) {
      (0, _globalContext.assertGlobalContextWasSet)();
    }

    var evalStack = _stack.default.restore(stack);

    false && (0, _util.assert)(typeof pc === 'number', 'pc is a number');
    evalStack[_symbols.REGISTERS][_vm.$pc] = pc;
    evalStack[_symbols.REGISTERS][_vm.$sp] = stack.length - 1;
    evalStack[_symbols.REGISTERS][_vm.$fp] = -1;
    this[_symbols.HEAP] = this.program.heap;
    this[_symbols.CONSTANTS] = this.program.constants;
    this.elementStack = elementStack;

    this[_symbols.STACKS].scope.push(scope);

    this[_symbols.STACKS].dynamicScope.push(dynamicScope);

    this[_symbols.ARGS] = new _arguments.VMArgumentsImpl();
    this[_symbols.INNER_VM] = new _lowLevel.default(evalStack, this[_symbols.HEAP], runtime.program, {
      debugBefore: function debugBefore(opcode) {
        return _opcodes.APPEND_OPCODES.debugBefore(_this, opcode);
      },
      debugAfter: function debugAfter(state) {
        _opcodes.APPEND_OPCODES.debugAfter(_this, state);
      }
    }, evalStack[_symbols.REGISTERS]);
    this.destructor = {};

    this[_symbols.DESTROYABLE_STACK].push(this.destructor);
  }

  var _proto = VM.prototype; // Fetch a value from a register onto the stack

  _proto.fetch = function fetch(register) {
    var value = this.fetchValue(register);
    this.stack.push(value);
  } // Load a value from the stack into a register
  ;

  _proto.load = function load(register) {
    var value = this.stack.pop();
    this.loadValue(register, value);
  };

  _proto.fetchValue = function fetchValue(register) {
    if ((0, _vm.isLowLevelRegister)(register)) {
      return this[_symbols.INNER_VM].fetchRegister(register);
    }

    switch (register) {
      case _vm.$s0:
        return this.s0;

      case _vm.$s1:
        return this.s1;

      case _vm.$t0:
        return this.t0;

      case _vm.$t1:
        return this.t1;

      case _vm.$v0:
        return this.v0;
    }
  } // Load a value into a register
  ;

  _proto.loadValue = function loadValue(register, value) {
    if ((0, _vm.isLowLevelRegister)(register)) {
      this[_symbols.INNER_VM].loadRegister(register, value);
    }

    switch (register) {
      case _vm.$s0:
        this.s0 = value;
        break;

      case _vm.$s1:
        this.s1 = value;
        break;

      case _vm.$t0:
        this.t0 = value;
        break;

      case _vm.$t1:
        this.t1 = value;
        break;

      case _vm.$v0:
        this.v0 = value;
        break;
    }
  }
  /**
   * Migrated to Inner
   */
  // Start a new frame and save $ra and $fp on the stack
  ;

  _proto.pushFrame = function pushFrame() {
    this[_symbols.INNER_VM].pushFrame();
  } // Restore $ra, $sp and $fp
  ;

  _proto.popFrame = function popFrame() {
    this[_symbols.INNER_VM].popFrame();
  } // Jump to an address in `program`
  ;

  _proto["goto"] = function goto(offset) {
    this[_symbols.INNER_VM]["goto"](offset);
  } // Save $pc into $ra, then jump to a new address in `program` (jal in MIPS)
  ;

  _proto.call = function call(handle) {
    this[_symbols.INNER_VM].call(handle);
  } // Put a specific `program` address in $ra
  ;

  _proto.returnTo = function returnTo(offset) {
    this[_symbols.INNER_VM].returnTo(offset);
  } // Return to the `program` address stored in $ra
  ;

  _proto["return"] = function _return() {
    this[_symbols.INNER_VM]["return"]();
  };

  VM.initial = function initial(runtime, context, _ref2) {
    var handle = _ref2.handle,
        self = _ref2.self,
        dynamicScope = _ref2.dynamicScope,
        treeBuilder = _ref2.treeBuilder,
        numSymbols = _ref2.numSymbols,
        owner = _ref2.owner;

    var scope = _scope.PartialScopeImpl.root(self, numSymbols, owner);

    var state = vmState(runtime.program.heap.getaddr(handle), scope, dynamicScope);
    var vm = initVM(context)(runtime, state, treeBuilder);
    vm.pushUpdating();
    return vm;
  };

  VM.empty = function empty(runtime, _ref3, context) {
    var handle = _ref3.handle,
        treeBuilder = _ref3.treeBuilder,
        dynamicScope = _ref3.dynamicScope,
        owner = _ref3.owner;
    var vm = initVM(context)(runtime, vmState(runtime.program.heap.getaddr(handle), _scope.PartialScopeImpl.root(_reference.UNDEFINED_REFERENCE, 0, owner), dynamicScope), treeBuilder);
    vm.pushUpdating();
    return vm;
  };

  _proto.compile = function compile(block) {
    var handle = (0, _util.unwrapHandle)(block.compile(this.context));
    return handle;
  };

  _proto.captureState = function captureState(args, pc) {
    if (pc === void 0) {
      pc = this[_symbols.INNER_VM].fetchRegister(_vm.$pc);
    }

    return {
      pc: pc,
      scope: this.scope(),
      dynamicScope: this.dynamicScope(),
      stack: this.stack.capture(args)
    };
  };

  _proto.capture = function capture(args, pc) {
    if (pc === void 0) {
      pc = this[_symbols.INNER_VM].fetchRegister(_vm.$pc);
    }

    return new _update.ResumableVMStateImpl(this.captureState(args, pc), this.resume);
  };

  _proto.beginCacheGroup = function beginCacheGroup(name) {
    var opcodes = this.updating();
    var guard = new _vm2.JumpIfNotModifiedOpcode();
    opcodes.push(guard);
    opcodes.push(new _vm2.BeginTrackFrameOpcode(name));

    this[_symbols.STACKS].cache.push(guard);

    (0, _validator.beginTrackFrame)(name);
  };

  _proto.commitCacheGroup = function commitCacheGroup() {
    var opcodes = this.updating();

    var guard = this[_symbols.STACKS].cache.pop();

    var tag = (0, _validator.endTrackFrame)();
    opcodes.push(new _vm2.EndTrackFrameOpcode(guard));
    guard.finalize(tag, opcodes.length);
  };

  _proto.enter = function enter(args) {
    var updating = [];
    var state = this.capture(args);
    var block = this.elements().pushUpdatableBlock();
    var tryOpcode = new _update.TryOpcode(state, this.runtime, block, updating);
    this.didEnter(tryOpcode);
  };

  _proto.enterItem = function enterItem(_ref4) {
    var key = _ref4.key,
        value = _ref4.value,
        memo = _ref4.memo;
    var stack = this.stack;
    var valueRef = (0, _reference.createIteratorItemRef)(value);
    var memoRef = (0, _reference.createIteratorItemRef)(memo);
    stack.push(valueRef);
    stack.push(memoRef);
    var state = this.capture(2);
    var block = this.elements().pushUpdatableBlock();
    var opcode = new _update.ListItemOpcode(state, this.runtime, block, key, memoRef, valueRef);
    this.didEnter(opcode);
    return opcode;
  };

  _proto.registerItem = function registerItem(opcode) {
    this.listBlock().initializeChild(opcode);
  };

  _proto.enterList = function enterList(iterableRef, offset) {
    var updating = [];

    var addr = this[_symbols.INNER_VM].target(offset);

    var state = this.capture(0, addr);
    var list = this.elements().pushBlockList(updating);
    var opcode = new _update.ListBlockOpcode(state, this.runtime, list, updating, iterableRef);

    this[_symbols.STACKS].list.push(opcode);

    this.didEnter(opcode);
  };

  _proto.didEnter = function didEnter(opcode) {
    this.associateDestroyable(opcode);

    this[_symbols.DESTROYABLE_STACK].push(opcode);

    this.updateWith(opcode);
    this.pushUpdating(opcode.children);
  };

  _proto.exit = function exit() {
    this[_symbols.DESTROYABLE_STACK].pop();

    this.elements().popBlock();
    this.popUpdating();
  };

  _proto.exitList = function exitList() {
    this.exit();

    this[_symbols.STACKS].list.pop();
  };

  _proto.pushUpdating = function pushUpdating(list) {
    if (list === void 0) {
      list = [];
    }

    this[_symbols.STACKS].updating.push(list);
  };

  _proto.popUpdating = function popUpdating() {
    return this[_symbols.STACKS].updating.pop();
  };

  _proto.updateWith = function updateWith(opcode) {
    this.updating().push(opcode);
  };

  _proto.listBlock = function listBlock() {
    return this[_symbols.STACKS].list.current;
  };

  _proto.associateDestroyable = function associateDestroyable(child) {
    var parent = this[_symbols.DESTROYABLE_STACK].current;
    (0, _destroyable.associateDestroyableChild)(parent, child);
  };

  _proto.tryUpdating = function tryUpdating() {
    return this[_symbols.STACKS].updating.current;
  };

  _proto.updating = function updating() {
    return this[_symbols.STACKS].updating.current;
  };

  _proto.elements = function elements() {
    return this.elementStack;
  };

  _proto.scope = function scope() {
    return this[_symbols.STACKS].scope.current;
  };

  _proto.dynamicScope = function dynamicScope() {
    return this[_symbols.STACKS].dynamicScope.current;
  };

  _proto.pushChildScope = function pushChildScope() {
    this[_symbols.STACKS].scope.push(this.scope().child());
  };

  _proto.pushDynamicScope = function pushDynamicScope() {
    var child = this.dynamicScope().child();

    this[_symbols.STACKS].dynamicScope.push(child);

    return child;
  };

  _proto.pushRootScope = function pushRootScope(size, owner) {
    var scope = _scope.PartialScopeImpl.sized(size, owner);

    this[_symbols.STACKS].scope.push(scope);

    return scope;
  };

  _proto.pushScope = function pushScope(scope) {
    this[_symbols.STACKS].scope.push(scope);
  };

  _proto.popScope = function popScope() {
    this[_symbols.STACKS].scope.pop();
  };

  _proto.popDynamicScope = function popDynamicScope() {
    this[_symbols.STACKS].dynamicScope.pop();
  } /// SCOPE HELPERS
  ;

  _proto.getOwner = function getOwner() {
    return this.scope().owner;
  };

  _proto.getSelf = function getSelf() {
    return this.scope().getSelf();
  };

  _proto.referenceForSymbol = function referenceForSymbol(symbol) {
    return this.scope().getSymbol(symbol);
  } /// EXECUTION
  ;

  _proto.execute = function execute(initialize) {
    if (_env.DEBUG) {
      var hasErrored = true;

      try {
        var value = this._execute(initialize); // using a boolean here to avoid breaking ergonomics of "pause on uncaught exceptions"
        // which would happen with a `catch` + `throw`


        hasErrored = false;
        return value;
      } finally {
        if (hasErrored) {
          // If any existing blocks are open, due to an error or something like
          // that, we need to close them all and clean things up properly.
          var elements = this.elements();

          while (elements.hasBlocks) {
            elements.popBlock();
          } // eslint-disable-next-line no-console


          console.error("\n\nError occurred:\n\n" + (0, _validator.resetTracking)() + "\n\n");
        }
      }
    } else {
      return this._execute(initialize);
    }
  };

  _proto._execute = function _execute(initialize) {
    if (false
    /* LOCAL_SHOULD_LOG */
    ) {
        _util.LOCAL_LOGGER.log("EXECUTING FROM " + this[_symbols.INNER_VM].fetchRegister(_vm.$pc));
      }

    if (initialize) initialize(this);
    var result;

    while (true) {
      result = this.next();
      if (result.done) break;
    }

    return result.value;
  };

  _proto.next = function next() {
    var env = this.env,
        elementStack = this.elementStack;

    var opcode = this[_symbols.INNER_VM].nextStatement();

    var result;

    if (opcode !== null) {
      this[_symbols.INNER_VM].evaluateOuter(opcode, this);

      result = {
        done: false,
        value: null
      };
    } else {
      // Unload the stack
      this.stack.reset();
      result = {
        done: true,
        value: new _renderResult.default(env, this.popUpdating(), elementStack.popBlock(), this.destructor)
      };
    }

    return result;
  };

  _proto.bindDynamicScope = function bindDynamicScope(names) {
    var scope = this.dynamicScope();

    for (var i = names.length - 1; i >= 0; i--) {
      var name = names[i];
      scope.set(name, this.stack.pop());
    }
  };

  _createClass(VM, [{
    key: "stack",
    get: function get() {
      return this[_symbols.INNER_VM].stack;
    }
    /* Registers */

  }, {
    key: "pc",
    get: function get() {
      return this[_symbols.INNER_VM].fetchRegister(_vm.$pc);
    }
  }, {
    key: "program",
    get: function get() {
      return this.runtime.program;
    }
  }, {
    key: "env",
    get: function get() {
      return this.runtime.env;
    }
  }]);

  return VM;
}();

exports.default = VM;
_a = _symbols.STACKS, _b = _symbols.DESTROYABLE_STACK;

function vmState(pc, scope, dynamicScope) {
  return {
    pc: pc,
    scope: scope,
    dynamicScope: dynamicScope,
    stack: []
  };
}

function initVM(context) {
  return function (runtime, state, builder) {
    return new VM(runtime, state, builder, context);
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
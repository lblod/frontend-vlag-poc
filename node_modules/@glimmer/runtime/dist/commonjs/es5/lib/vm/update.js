"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ListBlockOpcode = exports.ListItemOpcode = exports.TryOpcode = exports.BlockOpcode = exports.ResumableVMStateImpl = exports.default = void 0;

var _env = require("@glimmer/env");

var _reference = require("@glimmer/reference");

var _destroyable = require("@glimmer/destroyable");

var _util = require("@glimmer/util");

var _validator = require("@glimmer/validator");

var _bounds = require("../bounds");

var _elementBuilder = require("./element-builder");

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var UpdatingVMImpl = /*#__PURE__*/function () {
  function UpdatingVMImpl(env, _ref) {
    var _ref$alwaysRevalidate = _ref.alwaysRevalidate,
        alwaysRevalidate = _ref$alwaysRevalidate === void 0 ? false : _ref$alwaysRevalidate;
    this.frameStack = new _util.Stack();
    this.env = env;
    this.dom = env.getDOM();
    this.alwaysRevalidate = alwaysRevalidate;
  }

  var _proto = UpdatingVMImpl.prototype;

  _proto.execute = function execute(opcodes, handler) {
    var _this = this;

    if (_env.DEBUG) {
      var hasErrored = true;

      try {
        (0, _validator.runInTrackingTransaction)(function () {
          return _this._execute(opcodes, handler);
        }, '- While rendering:'); // using a boolean here to avoid breaking ergonomics of "pause on uncaught exceptions"
        // which would happen with a `catch` + `throw`

        hasErrored = false;
      } finally {
        if (hasErrored) {
          // eslint-disable-next-line no-console
          console.error("\n\nError occurred:\n\n" + (0, _validator.resetTracking)() + "\n\n");
        }
      }
    } else {
      this._execute(opcodes, handler);
    }
  };

  _proto._execute = function _execute(opcodes, handler) {
    var frameStack = this.frameStack;
    this["try"](opcodes, handler);

    while (true) {
      if (frameStack.isEmpty()) break;
      var opcode = this.frame.nextStatement();

      if (opcode === undefined) {
        frameStack.pop();
        continue;
      }

      opcode.evaluate(this);
    }
  };

  _proto["goto"] = function goto(index) {
    this.frame["goto"](index);
  };

  _proto["try"] = function _try(ops, handler) {
    this.frameStack.push(new UpdatingVMFrame(ops, handler));
  };

  _proto["throw"] = function _throw() {
    this.frame.handleException();
    this.frameStack.pop();
  };

  _createClass(UpdatingVMImpl, [{
    key: "frame",
    get: function get() {
      return this.frameStack.current;
    }
  }]);

  return UpdatingVMImpl;
}();

exports.default = UpdatingVMImpl;

var ResumableVMStateImpl = /*#__PURE__*/function () {
  function ResumableVMStateImpl(state, resumeCallback) {
    this.state = state;
    this.resumeCallback = resumeCallback;
  }

  var _proto2 = ResumableVMStateImpl.prototype;

  _proto2.resume = function resume(runtime, builder) {
    return this.resumeCallback(runtime, this.state, builder);
  };

  return ResumableVMStateImpl;
}();

exports.ResumableVMStateImpl = ResumableVMStateImpl;

var BlockOpcode = /*#__PURE__*/function () {
  function BlockOpcode(state, runtime, bounds, children) {
    this.state = state;
    this.runtime = runtime;
    this.children = children;
    this.bounds = bounds;
  }

  var _proto3 = BlockOpcode.prototype;

  _proto3.parentElement = function parentElement() {
    return this.bounds.parentElement();
  };

  _proto3.firstNode = function firstNode() {
    return this.bounds.firstNode();
  };

  _proto3.lastNode = function lastNode() {
    return this.bounds.lastNode();
  };

  _proto3.evaluate = function evaluate(vm) {
    vm["try"](this.children, null);
  };

  return BlockOpcode;
}();

exports.BlockOpcode = BlockOpcode;

var TryOpcode = /*#__PURE__*/function (_BlockOpcode) {
  _inheritsLoose(TryOpcode, _BlockOpcode);

  function TryOpcode() {
    var _this2;

    _this2 = _BlockOpcode.apply(this, arguments) || this;
    _this2.type = 'try';
    return _this2;
  }

  var _proto4 = TryOpcode.prototype;

  _proto4.evaluate = function evaluate(vm) {
    vm["try"](this.children, this);
  };

  _proto4.handleException = function handleException() {
    var _this3 = this;

    var state = this.state,
        bounds = this.bounds,
        runtime = this.runtime;
    (0, _destroyable.destroyChildren)(this);

    var elementStack = _elementBuilder.NewElementBuilder.resume(runtime.env, bounds);

    var vm = state.resume(runtime, elementStack);
    var updating = [];
    var children = this.children = [];
    var result = vm.execute(function (vm) {
      vm.pushUpdating(updating);
      vm.updateWith(_this3);
      vm.pushUpdating(children);
    });
    (0, _destroyable.associateDestroyableChild)(this, result.drop);
  };

  return TryOpcode;
}(BlockOpcode);

exports.TryOpcode = TryOpcode;

var ListItemOpcode = /*#__PURE__*/function (_TryOpcode) {
  _inheritsLoose(ListItemOpcode, _TryOpcode);

  function ListItemOpcode(state, runtime, bounds, key, memo, value) {
    var _this4;

    _this4 = _TryOpcode.call(this, state, runtime, bounds, []) || this;
    _this4.key = key;
    _this4.memo = memo;
    _this4.value = value;
    _this4.retained = false;
    _this4.index = -1;
    return _this4;
  }

  var _proto5 = ListItemOpcode.prototype;

  _proto5.updateReferences = function updateReferences(item) {
    this.retained = true;
    (0, _reference.updateRef)(this.value, item.value);
    (0, _reference.updateRef)(this.memo, item.memo);
  };

  _proto5.shouldRemove = function shouldRemove() {
    return !this.retained;
  };

  _proto5.reset = function reset() {
    this.retained = false;
  };

  return ListItemOpcode;
}(TryOpcode);

exports.ListItemOpcode = ListItemOpcode;

var ListBlockOpcode = /*#__PURE__*/function (_BlockOpcode2) {
  _inheritsLoose(ListBlockOpcode, _BlockOpcode2);

  function ListBlockOpcode(state, runtime, bounds, children, iterableRef) {
    var _this5;

    _this5 = _BlockOpcode2.call(this, state, runtime, bounds, children) || this;
    _this5.iterableRef = iterableRef;
    _this5.type = 'list-block';
    _this5.opcodeMap = new Map();
    _this5.marker = null;
    _this5.lastIterator = (0, _reference.valueForRef)(iterableRef);
    return _this5;
  }

  var _proto6 = ListBlockOpcode.prototype;

  _proto6.initializeChild = function initializeChild(opcode) {
    opcode.index = this.children.length - 1;
    this.opcodeMap.set(opcode.key, opcode);
  };

  _proto6.evaluate = function evaluate(vm) {
    var iterator = (0, _reference.valueForRef)(this.iterableRef);

    if (this.lastIterator !== iterator) {
      var bounds = this.bounds;
      var dom = vm.dom;
      var marker = this.marker = dom.createComment('');
      dom.insertAfter(bounds.parentElement(), marker, bounds.lastNode());
      this.sync(iterator);
      this.parentElement().removeChild(marker);
      this.marker = null;
      this.lastIterator = iterator;
    } // Run now-updated updating opcodes


    _BlockOpcode2.prototype.evaluate.call(this, vm);
  };

  _proto6.sync = function sync(iterator) {
    var itemMap = this.opcodeMap,
        children = this.children;
    var currentOpcodeIndex = 0;
    var seenIndex = 0;
    this.children = this.bounds.boundList = [];

    while (true) {
      var item = iterator.next();
      if (item === null) break;
      var opcode = children[currentOpcodeIndex];
      var key = item.key; // Items that have already been found and moved will already be retained,
      // we can continue until we find the next unretained item

      while (opcode !== undefined && opcode.retained === true) {
        opcode = children[++currentOpcodeIndex];
      }

      if (opcode !== undefined && opcode.key === key) {
        this.retainItem(opcode, item);
        currentOpcodeIndex++;
      } else if (itemMap.has(key)) {
        var itemOpcode = itemMap.get(key); // The item opcode was seen already, so we should move it.

        if (itemOpcode.index < seenIndex) {
          this.moveItem(itemOpcode, item, opcode);
        } else {
          // Update the seen index, we are going to be moving this item around
          // so any other items that come before it will likely need to move as
          // well.
          seenIndex = itemOpcode.index;
          var seenUnretained = false; // iterate through all of the opcodes between the current position and
          // the position of the item's opcode, and determine if they are all
          // retained.

          for (var i = currentOpcodeIndex + 1; i < seenIndex; i++) {
            if (children[i].retained === false) {
              seenUnretained = true;
              break;
            }
          } // If we have seen only retained opcodes between this and the matching
          // opcode, it means that all the opcodes in between have been moved
          // already, and we can safely retain this item's opcode.


          if (seenUnretained === false) {
            this.retainItem(itemOpcode, item);
            currentOpcodeIndex = seenIndex + 1;
          } else {
            this.moveItem(itemOpcode, item, opcode);
            currentOpcodeIndex++;
          }
        }
      } else {
        this.insertItem(item, opcode);
      }
    }

    for (var _i = 0; _i < children.length; _i++) {
      var _opcode = children[_i];

      if (_opcode.retained === false) {
        this.deleteItem(_opcode);
      } else {
        _opcode.reset();
      }
    }
  };

  _proto6.retainItem = function retainItem(opcode, item) {
    if (false
    /* LOCAL_DEBUG */
    ) {
        (0, _util.logStep)('list-updates', ['retain', item.key]);
      }

    var children = this.children;
    (0, _reference.updateRef)(opcode.memo, item.memo);
    (0, _reference.updateRef)(opcode.value, item.value);
    opcode.retained = true;
    opcode.index = children.length;
    children.push(opcode);
  };

  _proto6.insertItem = function insertItem(item, before) {
    var _this6 = this;

    if (false
    /* LOCAL_DEBUG */
    ) {
        (0, _util.logStep)('list-updates', ['insert', item.key]);
      }

    var opcodeMap = this.opcodeMap,
        bounds = this.bounds,
        state = this.state,
        runtime = this.runtime,
        children = this.children;
    var key = item.key;
    var nextSibling = before === undefined ? this.marker : before.firstNode();

    var elementStack = _elementBuilder.NewElementBuilder.forInitialRender(runtime.env, {
      element: bounds.parentElement(),
      nextSibling: nextSibling
    });

    var vm = state.resume(runtime, elementStack);
    vm.execute(function (vm) {
      vm.pushUpdating();
      var opcode = vm.enterItem(item);
      opcode.index = children.length;
      children.push(opcode);
      opcodeMap.set(key, opcode);
      (0, _destroyable.associateDestroyableChild)(_this6, opcode);
    });
  };

  _proto6.moveItem = function moveItem(opcode, item, before) {
    var children = this.children;
    (0, _reference.updateRef)(opcode.memo, item.memo);
    (0, _reference.updateRef)(opcode.value, item.value);
    opcode.retained = true;
    var currentSibling, nextSibling;

    if (before === undefined) {
      (0, _bounds.move)(opcode, this.marker);
    } else {
      currentSibling = opcode.lastNode().nextSibling;
      nextSibling = before.firstNode(); // Items are moved throughout the algorithm, so there are cases where the
      // the items already happen to be siblings (e.g. an item in between was
      // moved before this move happened). Check to see if they are siblings
      // first before doing the move.

      if (currentSibling !== nextSibling) {
        (0, _bounds.move)(opcode, nextSibling);
      }
    }

    opcode.index = children.length;
    children.push(opcode);

    if (false
    /* LOCAL_DEBUG */
    ) {
        var type = currentSibling && currentSibling === nextSibling ? 'move-retain' : 'move';
        (0, _util.logStep)('list-updates', [type, item.key]);
      }
  };

  _proto6.deleteItem = function deleteItem(opcode) {
    if (false
    /* LOCAL_DEBUG */
    ) {
        (0, _util.logStep)('list-updates', ['delete', opcode.key]);
      }

    (0, _destroyable.destroy)(opcode);
    (0, _bounds.clear)(opcode);
    this.opcodeMap["delete"](opcode.key);
  };

  return ListBlockOpcode;
}(BlockOpcode);

exports.ListBlockOpcode = ListBlockOpcode;

var UpdatingVMFrame = /*#__PURE__*/function () {
  function UpdatingVMFrame(ops, exceptionHandler) {
    this.ops = ops;
    this.exceptionHandler = exceptionHandler;
    this.current = 0;
  }

  var _proto7 = UpdatingVMFrame.prototype;

  _proto7["goto"] = function goto(index) {
    this.current = index;
  };

  _proto7.nextStatement = function nextStatement() {
    return this.ops[this.current++];
  };

  _proto7.handleException = function handleException() {
    if (this.exceptionHandler) {
      this.exceptionHandler.handleException();
    }
  };

  return UpdatingVMFrame;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clientBuilder = clientBuilder;
exports.LiveBlockList = exports.UpdatableBlockImpl = exports.RemoteLiveBlock = exports.SimpleLiveBlock = exports.NewElementBuilder = exports.CURSOR_STACK = exports.Fragment = void 0;

var _util = require("@glimmer/util");

var _bounds2 = require("../bounds");

var _destroyable = require("@glimmer/destroyable");

var _dynamic = require("./attributes/dynamic");

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var _a;

var First = /*#__PURE__*/function () {
  function First(node) {
    this.node = node;
  }

  var _proto = First.prototype;

  _proto.firstNode = function firstNode() {
    return this.node;
  };

  return First;
}();

var Last = /*#__PURE__*/function () {
  function Last(node) {
    this.node = node;
  }

  var _proto2 = Last.prototype;

  _proto2.lastNode = function lastNode() {
    return this.node;
  };

  return Last;
}();

var Fragment = /*#__PURE__*/function () {
  function Fragment(bounds) {
    this.bounds = bounds;
  }

  var _proto3 = Fragment.prototype;

  _proto3.parentElement = function parentElement() {
    return this.bounds.parentElement();
  };

  _proto3.firstNode = function firstNode() {
    return this.bounds.firstNode();
  };

  _proto3.lastNode = function lastNode() {
    return this.bounds.lastNode();
  };

  return Fragment;
}();

exports.Fragment = Fragment;
var CURSOR_STACK = (0, _util.symbol)('CURSOR_STACK');
exports.CURSOR_STACK = CURSOR_STACK;

var NewElementBuilder = /*#__PURE__*/function () {
  function NewElementBuilder(env, parentNode, nextSibling) {
    this.constructing = null;
    this.operations = null;
    this[_a] = new _util.Stack();
    this.modifierStack = new _util.Stack();
    this.blockStack = new _util.Stack();
    this.pushElement(parentNode, nextSibling);
    this.env = env;
    this.dom = env.getAppendOperations();
    this.updateOperations = env.getDOM();
  }

  NewElementBuilder.forInitialRender = function forInitialRender(env, cursor) {
    return new this(env, cursor.element, cursor.nextSibling).initialize();
  };

  NewElementBuilder.resume = function resume(env, block) {
    var parentNode = block.parentElement();
    var nextSibling = block.reset(env);
    var stack = new this(env, parentNode, nextSibling).initialize();
    stack.pushLiveBlock(block);
    return stack;
  };

  var _proto4 = NewElementBuilder.prototype;

  _proto4.initialize = function initialize() {
    this.pushSimpleBlock();
    return this;
  };

  _proto4.debugBlocks = function debugBlocks() {
    return this.blockStack.toArray();
  };

  _proto4.block = function block() {
    return this.blockStack.current;
  };

  _proto4.popElement = function popElement() {
    this[CURSOR_STACK].pop();
    this[CURSOR_STACK].current;
  };

  _proto4.pushSimpleBlock = function pushSimpleBlock() {
    return this.pushLiveBlock(new SimpleLiveBlock(this.element));
  };

  _proto4.pushUpdatableBlock = function pushUpdatableBlock() {
    return this.pushLiveBlock(new UpdatableBlockImpl(this.element));
  };

  _proto4.pushBlockList = function pushBlockList(list) {
    return this.pushLiveBlock(new LiveBlockList(this.element, list));
  };

  _proto4.pushLiveBlock = function pushLiveBlock(block, isRemote) {
    if (isRemote === void 0) {
      isRemote = false;
    }

    var current = this.blockStack.current;

    if (current !== null) {
      if (!isRemote) {
        current.didAppendBounds(block);
      }
    }

    this.__openBlock();

    this.blockStack.push(block);
    return block;
  };

  _proto4.popBlock = function popBlock() {
    this.block().finalize(this);

    this.__closeBlock();

    return this.blockStack.pop();
  };

  _proto4.__openBlock = function __openBlock() {};

  _proto4.__closeBlock = function __closeBlock() {} // todo return seems unused
  ;

  _proto4.openElement = function openElement(tag) {
    var element = this.__openElement(tag);

    this.constructing = element;
    return element;
  };

  _proto4.__openElement = function __openElement(tag) {
    return this.dom.createElement(tag, this.element);
  };

  _proto4.flushElement = function flushElement(modifiers) {
    var parent = this.element;
    var element = this.constructing;

    this.__flushElement(parent, element);

    this.constructing = null;
    this.operations = null;
    this.pushModifiers(modifiers);
    this.pushElement(element, null);
    this.didOpenElement(element);
  };

  _proto4.__flushElement = function __flushElement(parent, constructing) {
    this.dom.insertBefore(parent, constructing, this.nextSibling);
  };

  _proto4.closeElement = function closeElement() {
    this.willCloseElement();
    this.popElement();
    return this.popModifiers();
  };

  _proto4.pushRemoteElement = function pushRemoteElement(element, guid, insertBefore) {
    return this.__pushRemoteElement(element, guid, insertBefore);
  };

  _proto4.__pushRemoteElement = function __pushRemoteElement(element, _guid, insertBefore) {
    this.pushElement(element, insertBefore);

    if (insertBefore === undefined) {
      while (element.lastChild) {
        element.removeChild(element.lastChild);
      }
    }

    var block = new RemoteLiveBlock(element);
    return this.pushLiveBlock(block, true);
  };

  _proto4.popRemoteElement = function popRemoteElement() {
    this.popBlock();
    this.popElement();
  };

  _proto4.pushElement = function pushElement(element, nextSibling) {
    if (nextSibling === void 0) {
      nextSibling = null;
    }

    this[CURSOR_STACK].push(new _bounds2.CursorImpl(element, nextSibling));
  };

  _proto4.pushModifiers = function pushModifiers(modifiers) {
    this.modifierStack.push(modifiers);
  };

  _proto4.popModifiers = function popModifiers() {
    return this.modifierStack.pop();
  };

  _proto4.didAppendBounds = function didAppendBounds(bounds) {
    this.block().didAppendBounds(bounds);
    return bounds;
  };

  _proto4.didAppendNode = function didAppendNode(node) {
    this.block().didAppendNode(node);
    return node;
  };

  _proto4.didOpenElement = function didOpenElement(element) {
    this.block().openElement(element);
    return element;
  };

  _proto4.willCloseElement = function willCloseElement() {
    this.block().closeElement();
  };

  _proto4.appendText = function appendText(string) {
    return this.didAppendNode(this.__appendText(string));
  };

  _proto4.__appendText = function __appendText(text) {
    var dom = this.dom,
        element = this.element,
        nextSibling = this.nextSibling;
    var node = dom.createTextNode(text);
    dom.insertBefore(element, node, nextSibling);
    return node;
  };

  _proto4.__appendNode = function __appendNode(node) {
    this.dom.insertBefore(this.element, node, this.nextSibling);
    return node;
  };

  _proto4.__appendFragment = function __appendFragment(fragment) {
    var first = fragment.firstChild;

    if (first) {
      var ret = new _bounds2.ConcreteBounds(this.element, first, fragment.lastChild);
      this.dom.insertBefore(this.element, fragment, this.nextSibling);
      return ret;
    } else {
      return new _bounds2.SingleNodeBounds(this.element, this.__appendComment(''));
    }
  };

  _proto4.__appendHTML = function __appendHTML(html) {
    return this.dom.insertHTMLBefore(this.element, this.nextSibling, html);
  };

  _proto4.appendDynamicHTML = function appendDynamicHTML(value) {
    var bounds = this.trustedContent(value);
    this.didAppendBounds(bounds);
  };

  _proto4.appendDynamicText = function appendDynamicText(value) {
    var node = this.untrustedContent(value);
    this.didAppendNode(node);
    return node;
  };

  _proto4.appendDynamicFragment = function appendDynamicFragment(value) {
    var bounds = this.__appendFragment(value);

    this.didAppendBounds(bounds);
  };

  _proto4.appendDynamicNode = function appendDynamicNode(value) {
    var node = this.__appendNode(value);

    var bounds = new _bounds2.SingleNodeBounds(this.element, node);
    this.didAppendBounds(bounds);
  };

  _proto4.trustedContent = function trustedContent(value) {
    return this.__appendHTML(value);
  };

  _proto4.untrustedContent = function untrustedContent(value) {
    return this.__appendText(value);
  };

  _proto4.appendComment = function appendComment(string) {
    return this.didAppendNode(this.__appendComment(string));
  };

  _proto4.__appendComment = function __appendComment(string) {
    var dom = this.dom,
        element = this.element,
        nextSibling = this.nextSibling;
    var node = dom.createComment(string);
    dom.insertBefore(element, node, nextSibling);
    return node;
  };

  _proto4.__setAttribute = function __setAttribute(name, value, namespace) {
    this.dom.setAttribute(this.constructing, name, value, namespace);
  };

  _proto4.__setProperty = function __setProperty(name, value) {
    this.constructing[name] = value;
  };

  _proto4.setStaticAttribute = function setStaticAttribute(name, value, namespace) {
    this.__setAttribute(name, value, namespace);
  };

  _proto4.setDynamicAttribute = function setDynamicAttribute(name, value, trusting, namespace) {
    var element = this.constructing;
    var attribute = (0, _dynamic.dynamicAttribute)(element, name, namespace, trusting);
    attribute.set(this, value, this.env);
    return attribute;
  };

  _createClass(NewElementBuilder, [{
    key: "element",
    get: function get() {
      return this[CURSOR_STACK].current.element;
    }
  }, {
    key: "nextSibling",
    get: function get() {
      return this[CURSOR_STACK].current.nextSibling;
    }
  }, {
    key: "hasBlocks",
    get: function get() {
      return this.blockStack.size > 0;
    }
  }]);

  return NewElementBuilder;
}();

exports.NewElementBuilder = NewElementBuilder;
_a = CURSOR_STACK;

var SimpleLiveBlock = /*#__PURE__*/function () {
  function SimpleLiveBlock(parent) {
    this.parent = parent;
    this.first = null;
    this.last = null;
    this.nesting = 0;
  }

  var _proto5 = SimpleLiveBlock.prototype;

  _proto5.parentElement = function parentElement() {
    return this.parent;
  };

  _proto5.firstNode = function firstNode() {
    var first = this.first;
    return first.firstNode();
  };

  _proto5.lastNode = function lastNode() {
    var last = this.last;
    return last.lastNode();
  };

  _proto5.openElement = function openElement(element) {
    this.didAppendNode(element);
    this.nesting++;
  };

  _proto5.closeElement = function closeElement() {
    this.nesting--;
  };

  _proto5.didAppendNode = function didAppendNode(node) {
    if (this.nesting !== 0) return;

    if (!this.first) {
      this.first = new First(node);
    }

    this.last = new Last(node);
  };

  _proto5.didAppendBounds = function didAppendBounds(bounds) {
    if (this.nesting !== 0) return;

    if (!this.first) {
      this.first = bounds;
    }

    this.last = bounds;
  };

  _proto5.finalize = function finalize(stack) {
    if (this.first === null) {
      stack.appendComment('');
    }
  };

  return SimpleLiveBlock;
}();

exports.SimpleLiveBlock = SimpleLiveBlock;

var RemoteLiveBlock = /*#__PURE__*/function (_SimpleLiveBlock) {
  _inheritsLoose(RemoteLiveBlock, _SimpleLiveBlock);

  function RemoteLiveBlock(parent) {
    var _this;

    _this = _SimpleLiveBlock.call(this, parent) || this;
    (0, _destroyable.registerDestructor)(_assertThisInitialized(_this), function () {
      // In general, you only need to clear the root of a hierarchy, and should never
      // need to clear any child nodes. This is an important constraint that gives us
      // a strong guarantee that clearing a subtree is a single DOM operation.
      //
      // Because remote blocks are not normally physically nested inside of the tree
      // that they are logically nested inside, we manually clear remote blocks when
      // a logical parent is cleared.
      //
      // HOWEVER, it is currently possible for a remote block to be physically nested
      // inside of the block it is logically contained inside of. This happens when
      // the remote block is appended to the end of the application's entire element.
      //
      // The problem with that scenario is that Glimmer believes that it owns more of
      // the DOM than it actually does. The code is attempting to write past the end
      // of the Glimmer-managed root, but Glimmer isn't aware of that.
      //
      // The correct solution to that problem is for Glimmer to be aware of the end
      // of the bounds that it owns, and once we make that change, this check could
      // be removed.
      //
      // For now, a more targeted fix is to check whether the node was already removed
      // and avoid clearing the node if it was. In most cases this shouldn't happen,
      // so this might hide bugs where the code clears nested nodes unnecessarily,
      // so we should eventually try to do the correct fix.
      if (_this.parentElement() === _this.firstNode().parentNode) {
        (0, _bounds2.clear)(_assertThisInitialized(_this));
      }
    });
    return _this;
  }

  return RemoteLiveBlock;
}(SimpleLiveBlock);

exports.RemoteLiveBlock = RemoteLiveBlock;

var UpdatableBlockImpl = /*#__PURE__*/function (_SimpleLiveBlock2) {
  _inheritsLoose(UpdatableBlockImpl, _SimpleLiveBlock2);

  function UpdatableBlockImpl() {
    return _SimpleLiveBlock2.apply(this, arguments) || this;
  }

  var _proto6 = UpdatableBlockImpl.prototype;

  _proto6.reset = function reset() {
    (0, _destroyable.destroy)(this);
    var nextSibling = (0, _bounds2.clear)(this);
    this.first = null;
    this.last = null;
    this.nesting = 0;
    return nextSibling;
  };

  return UpdatableBlockImpl;
}(SimpleLiveBlock); // FIXME: All the noops in here indicate a modelling problem


exports.UpdatableBlockImpl = UpdatableBlockImpl;

var LiveBlockList = /*#__PURE__*/function () {
  function LiveBlockList(parent, boundList) {
    this.parent = parent;
    this.boundList = boundList;
    this.parent = parent;
    this.boundList = boundList;
  }

  var _proto7 = LiveBlockList.prototype;

  _proto7.parentElement = function parentElement() {
    return this.parent;
  };

  _proto7.firstNode = function firstNode() {
    var head = this.boundList[0];
    return head.firstNode();
  };

  _proto7.lastNode = function lastNode() {
    var boundList = this.boundList;
    var tail = boundList[boundList.length - 1];
    return tail.lastNode();
  };

  _proto7.openElement = function openElement(_element) {
    false && (0, _util.assert)(false, 'Cannot openElement directly inside a block list');
  };

  _proto7.closeElement = function closeElement() {
    false && (0, _util.assert)(false, 'Cannot closeElement directly inside a block list');
  };

  _proto7.didAppendNode = function didAppendNode(_node) {
    false && (0, _util.assert)(false, 'Cannot create a new node directly inside a block list');
  };

  _proto7.didAppendBounds = function didAppendBounds(_bounds) {};

  _proto7.finalize = function finalize(_stack) {
    false && (0, _util.assert)(this.boundList.length > 0, 'boundsList cannot be empty');
  };

  return LiveBlockList;
}();

exports.LiveBlockList = LiveBlockList;

function clientBuilder(env, cursor) {
  return NewElementBuilder.forInitialRender(env, cursor);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
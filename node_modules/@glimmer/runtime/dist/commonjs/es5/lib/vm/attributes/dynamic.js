"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dynamicAttribute = dynamicAttribute;
exports.OptionSelectedDynamicAttribute = exports.InputValueDynamicAttribute = exports.SafeDynamicAttribute = exports.SafeDynamicProperty = exports.DefaultDynamicProperty = exports.SimpleDynamicAttribute = exports.DynamicAttribute = void 0;

var _globalContext = require("@glimmer/global-context");

var _normalize = require("../../dom/normalize");

var _props = require("../../dom/props");

var _sanitizedValues = require("../../dom/sanitized-values");

var _env2 = require("@glimmer/env");

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function dynamicAttribute(element, attr, namespace, isTrusting) {
  if (isTrusting === void 0) {
    isTrusting = false;
  }

  var tagName = element.tagName,
      namespaceURI = element.namespaceURI;
  var attribute = {
    element: element,
    name: attr,
    namespace: namespace
  };

  if (_env2.DEBUG && attr === 'style' && !isTrusting) {
    return new DebugStyleAttributeManager(attribute);
  }

  if (namespaceURI === "http://www.w3.org/2000/svg"
  /* SVG */
  ) {
      return buildDynamicAttribute(tagName, attr, attribute);
    }

  var _normalizeProperty = (0, _props.normalizeProperty)(element, attr),
      type = _normalizeProperty.type,
      normalized = _normalizeProperty.normalized;

  if (type === 'attr') {
    return buildDynamicAttribute(tagName, normalized, attribute);
  } else {
    return buildDynamicProperty(tagName, normalized, attribute);
  }
}

function buildDynamicAttribute(tagName, name, attribute) {
  if ((0, _sanitizedValues.requiresSanitization)(tagName, name)) {
    return new SafeDynamicAttribute(attribute);
  } else {
    return new SimpleDynamicAttribute(attribute);
  }
}

function buildDynamicProperty(tagName, name, attribute) {
  if ((0, _sanitizedValues.requiresSanitization)(tagName, name)) {
    return new SafeDynamicProperty(name, attribute);
  }

  if (isUserInputValue(tagName, name)) {
    return new InputValueDynamicAttribute(name, attribute);
  }

  if (isOptionSelected(tagName, name)) {
    return new OptionSelectedDynamicAttribute(name, attribute);
  }

  return new DefaultDynamicProperty(name, attribute);
}

var DynamicAttribute = function DynamicAttribute(attribute) {
  this.attribute = attribute;
};

exports.DynamicAttribute = DynamicAttribute;

var SimpleDynamicAttribute = /*#__PURE__*/function (_DynamicAttribute) {
  _inheritsLoose(SimpleDynamicAttribute, _DynamicAttribute);

  function SimpleDynamicAttribute() {
    return _DynamicAttribute.apply(this, arguments) || this;
  }

  var _proto = SimpleDynamicAttribute.prototype;

  _proto.set = function set(dom, value, _env) {
    var normalizedValue = normalizeValue(value);

    if (normalizedValue !== null) {
      var _this$attribute = this.attribute,
          name = _this$attribute.name,
          namespace = _this$attribute.namespace;

      dom.__setAttribute(name, normalizedValue, namespace);
    }
  };

  _proto.update = function update(value, _env) {
    var normalizedValue = normalizeValue(value);
    var _this$attribute2 = this.attribute,
        element = _this$attribute2.element,
        name = _this$attribute2.name;

    if (normalizedValue === null) {
      element.removeAttribute(name);
    } else {
      element.setAttribute(name, normalizedValue);
    }
  };

  return SimpleDynamicAttribute;
}(DynamicAttribute);

exports.SimpleDynamicAttribute = SimpleDynamicAttribute;

var DefaultDynamicProperty = /*#__PURE__*/function (_DynamicAttribute2) {
  _inheritsLoose(DefaultDynamicProperty, _DynamicAttribute2);

  function DefaultDynamicProperty(normalizedName, attribute) {
    var _this;

    _this = _DynamicAttribute2.call(this, attribute) || this;
    _this.normalizedName = normalizedName;
    return _this;
  }

  var _proto2 = DefaultDynamicProperty.prototype;

  _proto2.set = function set(dom, value, _env) {
    if (value !== null && value !== undefined) {
      this.value = value;

      dom.__setProperty(this.normalizedName, value);
    }
  };

  _proto2.update = function update(value, _env) {
    var element = this.attribute.element;

    if (this.value !== value) {
      element[this.normalizedName] = this.value = value;

      if (value === null || value === undefined) {
        this.removeAttribute();
      }
    }
  };

  _proto2.removeAttribute = function removeAttribute() {
    // TODO this sucks but to preserve properties first and to meet current
    // semantics we must do this.
    var _this$attribute3 = this.attribute,
        element = _this$attribute3.element,
        namespace = _this$attribute3.namespace;

    if (namespace) {
      element.removeAttributeNS(namespace, this.normalizedName);
    } else {
      element.removeAttribute(this.normalizedName);
    }
  };

  return DefaultDynamicProperty;
}(DynamicAttribute);

exports.DefaultDynamicProperty = DefaultDynamicProperty;

var SafeDynamicProperty = /*#__PURE__*/function (_DefaultDynamicProper) {
  _inheritsLoose(SafeDynamicProperty, _DefaultDynamicProper);

  function SafeDynamicProperty() {
    return _DefaultDynamicProper.apply(this, arguments) || this;
  }

  var _proto3 = SafeDynamicProperty.prototype;

  _proto3.set = function set(dom, value, env) {
    var _this$attribute4 = this.attribute,
        element = _this$attribute4.element,
        name = _this$attribute4.name;
    var sanitized = (0, _sanitizedValues.sanitizeAttributeValue)(element, name, value);

    _DefaultDynamicProper.prototype.set.call(this, dom, sanitized, env);
  };

  _proto3.update = function update(value, env) {
    var _this$attribute5 = this.attribute,
        element = _this$attribute5.element,
        name = _this$attribute5.name;
    var sanitized = (0, _sanitizedValues.sanitizeAttributeValue)(element, name, value);

    _DefaultDynamicProper.prototype.update.call(this, sanitized, env);
  };

  return SafeDynamicProperty;
}(DefaultDynamicProperty);

exports.SafeDynamicProperty = SafeDynamicProperty;

var SafeDynamicAttribute = /*#__PURE__*/function (_SimpleDynamicAttribu) {
  _inheritsLoose(SafeDynamicAttribute, _SimpleDynamicAttribu);

  function SafeDynamicAttribute() {
    return _SimpleDynamicAttribu.apply(this, arguments) || this;
  }

  var _proto4 = SafeDynamicAttribute.prototype;

  _proto4.set = function set(dom, value, env) {
    var _this$attribute6 = this.attribute,
        element = _this$attribute6.element,
        name = _this$attribute6.name;
    var sanitized = (0, _sanitizedValues.sanitizeAttributeValue)(element, name, value);

    _SimpleDynamicAttribu.prototype.set.call(this, dom, sanitized, env);
  };

  _proto4.update = function update(value, env) {
    var _this$attribute7 = this.attribute,
        element = _this$attribute7.element,
        name = _this$attribute7.name;
    var sanitized = (0, _sanitizedValues.sanitizeAttributeValue)(element, name, value);

    _SimpleDynamicAttribu.prototype.update.call(this, sanitized, env);
  };

  return SafeDynamicAttribute;
}(SimpleDynamicAttribute);

exports.SafeDynamicAttribute = SafeDynamicAttribute;

var InputValueDynamicAttribute = /*#__PURE__*/function (_DefaultDynamicProper2) {
  _inheritsLoose(InputValueDynamicAttribute, _DefaultDynamicProper2);

  function InputValueDynamicAttribute() {
    return _DefaultDynamicProper2.apply(this, arguments) || this;
  }

  var _proto5 = InputValueDynamicAttribute.prototype;

  _proto5.set = function set(dom, value) {
    dom.__setProperty('value', (0, _normalize.normalizeStringValue)(value));
  };

  _proto5.update = function update(value) {
    var input = this.attribute.element;
    var currentValue = input.value;
    var normalizedValue = (0, _normalize.normalizeStringValue)(value);

    if (currentValue !== normalizedValue) {
      input.value = normalizedValue;
    }
  };

  return InputValueDynamicAttribute;
}(DefaultDynamicProperty);

exports.InputValueDynamicAttribute = InputValueDynamicAttribute;

var OptionSelectedDynamicAttribute = /*#__PURE__*/function (_DefaultDynamicProper3) {
  _inheritsLoose(OptionSelectedDynamicAttribute, _DefaultDynamicProper3);

  function OptionSelectedDynamicAttribute() {
    return _DefaultDynamicProper3.apply(this, arguments) || this;
  }

  var _proto6 = OptionSelectedDynamicAttribute.prototype;

  _proto6.set = function set(dom, value) {
    if (value !== null && value !== undefined && value !== false) {
      dom.__setProperty('selected', true);
    }
  };

  _proto6.update = function update(value) {
    var option = this.attribute.element;

    if (value) {
      option.selected = true;
    } else {
      option.selected = false;
    }
  };

  return OptionSelectedDynamicAttribute;
}(DefaultDynamicProperty);

exports.OptionSelectedDynamicAttribute = OptionSelectedDynamicAttribute;

function isOptionSelected(tagName, attribute) {
  return tagName === 'OPTION' && attribute === 'selected';
}

function isUserInputValue(tagName, attribute) {
  return (tagName === 'INPUT' || tagName === 'TEXTAREA') && attribute === 'value';
}

function normalizeValue(value) {
  if (value === false || value === undefined || value === null || typeof value.toString === 'undefined') {
    return null;
  }

  if (value === true) {
    return '';
  } // onclick function etc in SSR


  if (typeof value === 'function') {
    return null;
  }

  return String(value);
}

var DebugStyleAttributeManager;

if (_env2.DEBUG) {
  DebugStyleAttributeManager = /*#__PURE__*/function (_SimpleDynamicAttribu2) {
    _inheritsLoose(DebugStyleAttributeManager, _SimpleDynamicAttribu2);

    function DebugStyleAttributeManager() {
      return _SimpleDynamicAttribu2.apply(this, arguments) || this;
    }

    var _proto7 = DebugStyleAttributeManager.prototype;

    _proto7.set = function set(dom, value, env) {
      (0, _globalContext.warnIfStyleNotTrusted)(value);

      _SimpleDynamicAttribu2.prototype.set.call(this, dom, value, env);
    };

    _proto7.update = function update(value, env) {
      (0, _globalContext.warnIfStyleNotTrusted)(value);

      _SimpleDynamicAttribu2.prototype.update.call(this, value, env);
    };

    return DebugStyleAttributeManager;
  }(SimpleDynamicAttribute);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
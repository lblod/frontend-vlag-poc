"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isWhitespace = isWhitespace;
exports.DOMTreeConstruction = exports.default = exports.DOMChangesImpl = exports.DOM = void 0;

var _svgInnerHtmlFix = require("../compat/svg-inner-html-fix");

var _textNodeMergingFix = require("../compat/text-node-merging-fix");

var _operations = require("./operations");

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

['b', 'big', 'blockquote', 'body', 'br', 'center', 'code', 'dd', 'div', 'dl', 'dt', 'em', 'embed', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'hr', 'i', 'img', 'li', 'listing', 'main', 'meta', 'nobr', 'ol', 'p', 'pre', 'ruby', 's', 'small', 'span', 'strong', 'strike', 'sub', 'sup', 'table', 'tt', 'u', 'ul', 'var'].forEach(function (tag) {
  return _operations.BLACKLIST_TABLE[tag] = 1;
});
var WHITESPACE = /[\t-\r \xA0\u1680\u180E\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]/;
var doc = typeof document === 'undefined' ? null : document;

function isWhitespace(string) {
  return WHITESPACE.test(string);
}

var DOM;
exports.DOM = DOM;

(function (DOM) {
  var TreeConstruction = /*#__PURE__*/function (_DOMOperations) {
    _inheritsLoose(TreeConstruction, _DOMOperations);

    function TreeConstruction() {
      return _DOMOperations.apply(this, arguments) || this;
    }

    var _proto = TreeConstruction.prototype;

    _proto.createElementNS = function createElementNS(namespace, tag) {
      return this.document.createElementNS(namespace, tag);
    };

    _proto.setAttribute = function setAttribute(element, name, value, namespace) {
      if (namespace === void 0) {
        namespace = null;
      }

      if (namespace) {
        element.setAttributeNS(namespace, name, value);
      } else {
        element.setAttribute(name, value);
      }
    };

    return TreeConstruction;
  }(_operations.DOMOperations);

  DOM.TreeConstruction = TreeConstruction;
  var appliedTreeConstruction = TreeConstruction;
  appliedTreeConstruction = (0, _textNodeMergingFix.applyTextNodeMergingFix)(doc, appliedTreeConstruction);
  appliedTreeConstruction = (0, _svgInnerHtmlFix.applySVGInnerHTMLFix)(doc, appliedTreeConstruction, "http://www.w3.org/2000/svg"
  /* SVG */
  );
  DOM.DOMTreeConstruction = appliedTreeConstruction;
})(DOM || (exports.DOM = DOM = {}));

var DOMChangesImpl = /*#__PURE__*/function (_DOMOperations2) {
  _inheritsLoose(DOMChangesImpl, _DOMOperations2);

  function DOMChangesImpl(document) {
    var _this;

    _this = _DOMOperations2.call(this, document) || this;
    _this.document = document;
    _this.namespace = null;
    return _this;
  }

  var _proto2 = DOMChangesImpl.prototype;

  _proto2.setAttribute = function setAttribute(element, name, value) {
    element.setAttribute(name, value);
  };

  _proto2.removeAttribute = function removeAttribute(element, name) {
    element.removeAttribute(name);
  };

  _proto2.insertAfter = function insertAfter(element, node, reference) {
    this.insertBefore(element, node, reference.nextSibling);
  };

  return DOMChangesImpl;
}(_operations.DOMOperations);

exports.DOMChangesImpl = DOMChangesImpl;
var helper = DOMChangesImpl;
helper = (0, _textNodeMergingFix.applyTextNodeMergingFix)(doc, helper);
helper = (0, _svgInnerHtmlFix.applySVGInnerHTMLFix)(doc, helper, "http://www.w3.org/2000/svg"
/* SVG */
);
var _default = helper;
exports.default = _default;
var DOMTreeConstruction = DOM.DOMTreeConstruction;
exports.DOMTreeConstruction = DOMTreeConstruction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
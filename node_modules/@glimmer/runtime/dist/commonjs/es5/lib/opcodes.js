"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.APPEND_OPCODES = exports.AppendOpcodes = void 0;

var _reference = require("@glimmer/reference");

var _util = require("@glimmer/util");

var _vm = require("@glimmer/vm");

var _scope = require("./scope");

var _symbols = require("./symbols");

var _elementBuilder = require("./vm/element-builder");

var AppendOpcodes = /*#__PURE__*/function () {
  function AppendOpcodes() {
    this.evaluateOpcode = (0, _util.fillNulls)(104
    /* Size */
    ).slice();
  }

  var _proto = AppendOpcodes.prototype;

  _proto.add = function add(name, evaluate, kind) {
    if (kind === void 0) {
      kind = 'syscall';
    }

    this.evaluateOpcode[name] = {
      syscall: kind !== 'machine',
      evaluate: evaluate
    };
  };

  _proto.debugBefore = function debugBefore(vm, opcode) {
    var params = undefined;
    var opName = undefined;

    if (false
    /* LOCAL_SHOULD_LOG */
    ) {
        var pos = vm[_symbols.INNER_VM].fetchRegister(_vm.$pc) - opcode.size;
        var _ref = [];
        opName = _ref[0];
        params = _ref[1]; // console.log(`${typePos(vm['pc'])}.`);

        _util.LOCAL_LOGGER.log(pos + ". ");

        var debugParams = [];

        for (var prop in params) {
          debugParams.push(prop, '=', params[prop]);
        }

        _util.LOCAL_LOGGER.log.apply(_util.LOCAL_LOGGER, debugParams);
      }

    var sp;

    if (false
    /* LOCAL_DEBUG */
    ) {
        sp = vm.fetchValue(_vm.$sp);
      }

    return {
      sp: sp,
      pc: vm.fetchValue(_vm.$pc),
      name: opName,
      params: params,
      type: opcode.type,
      isMachine: opcode.isMachine,
      size: opcode.size,
      state: undefined
    };
  };

  _proto.debugAfter = function debugAfter(vm, pre) {
    var sp = pre.sp,
        type = pre.type,
        isMachine = pre.isMachine,
        pc = pre.pc;

    if (false
    /* LOCAL_DEBUG */
    ) {
        var meta = type;
        var actualChange = vm.fetchValue(_vm.$sp) - sp;

        if (meta && meta.check && typeof meta.stackChange === 'number' && meta.stackChange !== actualChange) {
          throw new Error("Error in " + pre.name + ":\n\n" + pc + ". " + "\n\nStack changed by " + actualChange + ", expected " + meta.stackChange);
        }

        if (false
        /* LOCAL_SHOULD_LOG */
        ) {
            _util.LOCAL_LOGGER.log('%c -> pc: %d, ra: %d, fp: %d, sp: %d, s0: %O, s1: %O, t0: %O, t1: %O, v0: %O', 'color: orange', vm[_symbols.INNER_VM].registers[_vm.$pc], vm[_symbols.INNER_VM].registers[_vm.$ra], vm[_symbols.INNER_VM].registers[_vm.$fp], vm[_symbols.INNER_VM].registers[_vm.$sp], vm['s0'], vm['s1'], vm['t0'], vm['t1'], vm['v0']);

            _util.LOCAL_LOGGER.log('%c -> eval stack', 'color: red', vm.stack.toArray());

            _util.LOCAL_LOGGER.log('%c -> block stack', 'color: magenta', vm.elements().debugBlocks());

            _util.LOCAL_LOGGER.log('%c -> destructor stack', 'color: violet', vm[_symbols.DESTROYABLE_STACK].toArray());

            if (vm[_symbols.STACKS].scope.current === null) {
              _util.LOCAL_LOGGER.log('%c -> scope', 'color: green', 'null');
            } else {
              _util.LOCAL_LOGGER.log('%c -> scope', 'color: green', vm.scope().slots.map(function (s) {
                return (0, _scope.isScopeReference)(s) ? (0, _reference.valueForRef)(s) : s;
              }));
            }

            _util.LOCAL_LOGGER.log('%c -> elements', 'color: blue', vm.elements()[_elementBuilder.CURSOR_STACK].current.element);

            _util.LOCAL_LOGGER.log('%c -> constructing', 'color: aqua', vm.elements()['constructing']);
          }
      }
  };

  _proto.evaluate = function evaluate(vm, opcode, type) {
    var operation = this.evaluateOpcode[type];

    if (operation.syscall) {
      false && (0, _util.assert)(!opcode.isMachine, "BUG: Mismatch between operation.syscall (" + operation.syscall + ") and opcode.isMachine (" + opcode.isMachine + ") for " + opcode.type);
      operation.evaluate(vm, opcode);
    } else {
      false && (0, _util.assert)(opcode.isMachine, "BUG: Mismatch between operation.syscall (" + operation.syscall + ") and opcode.isMachine (" + opcode.isMachine + ") for " + opcode.type);
      operation.evaluate(vm[_symbols.INNER_VM], opcode);
    }
  };

  return AppendOpcodes;
}();

exports.AppendOpcodes = AppendOpcodes;
var APPEND_OPCODES = new AppendOpcodes();
exports.APPEND_OPCODES = APPEND_OPCODES;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
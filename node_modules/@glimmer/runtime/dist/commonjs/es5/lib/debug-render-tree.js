"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Ref = void 0;

var _env = require("@glimmer/env");

var _util = require("@glimmer/util");

var _arguments = require("./vm/arguments");

var GUID = 0;

var Ref = /*#__PURE__*/function () {
  function Ref(value) {
    this.id = GUID++;
    this.value = value;
  }

  var _proto = Ref.prototype;

  _proto.get = function get() {
    return this.value;
  };

  _proto.release = function release() {
    if (_env.DEBUG && this.value === null) {
      throw new Error('BUG: double release?');
    }

    this.value = null;
  };

  _proto.toString = function toString() {
    var label = "Ref " + this.id;

    if (this.value === null) {
      return label + " (released)";
    } else {
      try {
        return label + ": " + this.value;
      } catch (_a) {
        return label;
      }
    }
  };

  return Ref;
}();

exports.Ref = Ref;

var DebugRenderTreeImpl = /*#__PURE__*/function () {
  function DebugRenderTreeImpl() {
    this.stack = new _util.Stack();
    this.refs = new WeakMap();
    this.roots = new Set();
    this.nodes = new WeakMap();
  }

  var _proto2 = DebugRenderTreeImpl.prototype;

  _proto2.begin = function begin() {
    this.reset();
  };

  _proto2.create = function create(state, node) {
    var internalNode = (0, _util.assign)({}, node, {
      bounds: null,
      refs: new Set()
    });
    this.nodes.set(state, internalNode);
    this.appendChild(internalNode, state);
    this.enter(state);
  };

  _proto2.update = function update(state) {
    this.enter(state);
  };

  _proto2.didRender = function didRender(state, bounds) {
    if (_env.DEBUG && this.stack.current !== state) {
      throw new Error("BUG: expecting " + this.stack.current + ", got " + state);
    }

    this.nodeFor(state).bounds = bounds;
    this.exit();
  };

  _proto2.willDestroy = function willDestroy(state) {
    this.refs.get(state).release();
  };

  _proto2.commit = function commit() {
    this.reset();
  };

  _proto2.capture = function capture() {
    return this.captureRefs(this.roots);
  };

  _proto2.reset = function reset() {
    if (this.stack.size !== 0) {
      // We probably encountered an error during the rendering loop. This will
      // likely trigger undefined behavior and memory leaks as the error left
      // things in an inconsistent state. It is recommended that the user
      // refresh the page.
      // TODO: We could warn here? But this happens all the time in our tests?
      // Clean up the root reference to prevent errors from happening if we
      // attempt to capture the render tree (Ember Inspector may do this)
      var root = this.stack.toArray()[0];
      var ref = this.refs.get(root);

      if (ref !== undefined) {
        this.roots["delete"](ref);
      }

      while (!this.stack.isEmpty()) {
        this.stack.pop();
      }
    }
  };

  _proto2.enter = function enter(state) {
    this.stack.push(state);
  };

  _proto2.exit = function exit() {
    if (_env.DEBUG && this.stack.size === 0) {
      throw new Error('BUG: unbalanced pop');
    }

    this.stack.pop();
  };

  _proto2.nodeFor = function nodeFor(state) {
    return this.nodes.get(state);
  };

  _proto2.appendChild = function appendChild(node, state) {
    if (_env.DEBUG && this.refs.has(state)) {
      throw new Error('BUG: child already appended');
    }

    var parent = this.stack.current;
    var ref = new Ref(state);
    this.refs.set(state, ref);

    if (parent) {
      var parentNode = this.nodeFor(parent);
      parentNode.refs.add(ref);
      node.parent = parentNode;
    } else {
      this.roots.add(ref);
    }
  };

  _proto2.captureRefs = function captureRefs(refs) {
    var _this = this;

    var captured = [];
    refs.forEach(function (ref) {
      var state = ref.get();

      if (state) {
        captured.push(_this.captureNode("render-node:" + ref.id, state));
      } else {
        refs["delete"](ref);
      }
    });
    return captured;
  };

  _proto2.captureNode = function captureNode(id, state) {
    var node = this.nodeFor(state);
    var type = node.type,
        name = node.name,
        args = node.args,
        instance = node.instance,
        refs = node.refs;
    var template = this.captureTemplate(node);
    var bounds = this.captureBounds(node);
    var children = this.captureRefs(refs);
    return {
      id: id,
      type: type,
      name: name,
      args: (0, _arguments.reifyArgs)(args),
      instance: instance,
      template: template,
      bounds: bounds,
      children: children
    };
  };

  _proto2.captureTemplate = function captureTemplate(_ref) {
    var template = _ref.template;
    return template || null;
  };

  _proto2.captureBounds = function captureBounds(node) {
    var bounds = node.bounds;
    var parentElement = bounds.parentElement();
    var firstNode = bounds.firstNode();
    var lastNode = bounds.lastNode();
    return {
      parentElement: parentElement,
      firstNode: firstNode,
      lastNode: lastNode
    };
  };

  return DebugRenderTreeImpl;
}();

exports.default = DebugRenderTreeImpl;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
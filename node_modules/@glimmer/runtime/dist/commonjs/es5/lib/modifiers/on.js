"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.OnModifierState = void 0;

var _destroyable = require("@glimmer/destroyable");

var _env = require("@glimmer/env");

var _manager = require("@glimmer/manager");

var _reference = require("@glimmer/reference");

var _runtime = require("@glimmer/runtime");

var _validator = require("@glimmer/validator");

var _util = require("@glimmer/util");

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var untouchableContext = (0, _util.buildUntouchableThis)('`on` modifier');
/*
  Internet Explorer 11 does not support `once` and also does not support
  passing `eventOptions`. In some situations it then throws a weird script
  error, like:

  ```
  Could not complete the operation due to error 80020101
  ```

  This flag determines, whether `{ once: true }` and thus also event options in
  general are supported.
*/

var SUPPORTS_EVENT_OPTIONS = function () {
  try {
    var div = document.createElement('div');
    var counter = 0;
    div.addEventListener('click', function () {
      return counter++;
    }, {
      once: true
    });
    var event;

    if (typeof Event === 'function') {
      event = new Event('click');
    } else {
      event = document.createEvent('Event');
      event.initEvent('click', true, true);
    }

    div.dispatchEvent(event);
    div.dispatchEvent(event);
    return counter === 1;
  } catch (error) {
    return false;
  }
}();

var OnModifierState = /*#__PURE__*/function () {
  function OnModifierState(element, args) {
    this.tag = (0, _validator.createUpdatableTag)();
    this.shouldUpdate = true;
    this.element = element;
    this.args = args;
  }

  var _proto = OnModifierState.prototype;

  _proto.updateFromArgs = function updateFromArgs() {
    var args = this.args;

    var _reifyNamed = (0, _runtime.reifyNamed)(args.named),
        once = _reifyNamed.once,
        passive = _reifyNamed.passive,
        capture = _reifyNamed.capture;

    if (once !== this.once) {
      this.once = once;
      this.shouldUpdate = true;
    }

    if (passive !== this.passive) {
      this.passive = passive;
      this.shouldUpdate = true;
    }

    if (capture !== this.capture) {
      this.capture = capture;
      this.shouldUpdate = true;
    }

    var options;

    if (once || passive || capture) {
      options = this.options = {
        once: once,
        passive: passive,
        capture: capture
      };
    } else {
      this.options = undefined;
    }

    if (_env.DEBUG && (args.positional[0] === undefined || typeof (0, _reference.valueForRef)(args.positional[0]) !== 'string')) {
      throw new Error('You must pass a valid DOM event name as the first argument to the `on` modifier');
    }

    var eventName = (0, _reference.valueForRef)(args.positional[0]);

    if (eventName !== this.eventName) {
      this.eventName = eventName;
      this.shouldUpdate = true;
    }

    var userProvidedCallbackReference = args.positional[1];

    if (_env.DEBUG) {
      if (args.positional[1] === undefined) {
        throw new Error("You must pass a function as the second argument to the `on` modifier.");
      }

      var value = (0, _reference.valueForRef)(userProvidedCallbackReference);

      if (typeof value !== 'function') {
        throw new Error("You must pass a function as the second argument to the `on` modifier; you passed " + (value === null ? 'null' : typeof value) + ". While rendering:\n\n" + userProvidedCallbackReference.debugLabel);
      }
    }

    var userProvidedCallback = (0, _reference.valueForRef)(userProvidedCallbackReference);

    if (userProvidedCallback !== this.userProvidedCallback) {
      this.userProvidedCallback = userProvidedCallback;
      this.shouldUpdate = true;
    }

    if (_env.DEBUG && args.positional.length !== 2) {
      throw new Error("You can only pass two positional arguments (event name and callback) to the `on` modifier, but you provided " + args.positional.length + ". Consider using the `fn` helper to provide additional arguments to the `on` callback.");
    }

    var needsCustomCallback = SUPPORTS_EVENT_OPTIONS === false && once ||
    /* needs manual once implementation */
    _env.DEBUG && passive;
    /* needs passive enforcement */

    if (this.shouldUpdate) {
      if (needsCustomCallback) {
        var callback = this.callback = function (event) {
          if (_env.DEBUG && passive) {
            event.preventDefault = function () {
              throw new Error("You marked this listener as 'passive', meaning that you must not call 'event.preventDefault()': \n\n" + userProvidedCallback);
            };
          }

          if (!SUPPORTS_EVENT_OPTIONS && once) {
            removeEventListener(this, eventName, callback, options);
          }

          return userProvidedCallback.call(untouchableContext, event);
        };
      } else if (_env.DEBUG) {
        // prevent the callback from being bound to the element
        this.callback = userProvidedCallback.bind(untouchableContext);
      } else {
        this.callback = userProvidedCallback;
      }
    }
  };

  return OnModifierState;
}();

exports.OnModifierState = OnModifierState;
var adds = 0;
var removes = 0;

function removeEventListener(element, eventName, callback, options) {
  removes++;

  if (SUPPORTS_EVENT_OPTIONS) {
    // when options are supported, use them across the board
    element.removeEventListener(eventName, callback, options);
  } else if (options !== undefined && options.capture) {
    // used only in the following case:
    //
    // `{ once: true | false, passive: true | false, capture: true }
    //
    // `once` is handled via a custom callback that removes after first
    // invocation so we only care about capture here as a boolean
    element.removeEventListener(eventName, callback, true);
  } else {
    // used only in the following cases:
    //
    // * where there is no options
    // * `{ once: true | false, passive: true | false, capture: false }
    element.removeEventListener(eventName, callback);
  }
}

function addEventListener(element, eventName, callback, options) {
  adds++;

  if (SUPPORTS_EVENT_OPTIONS) {
    // when options are supported, use them across the board
    element.addEventListener(eventName, callback, options);
  } else if (options !== undefined && options.capture) {
    // used only in the following case:
    //
    // `{ once: true | false, passive: true | false, capture: true }
    //
    // `once` is handled via a custom callback that removes after first
    // invocation so we only care about capture here as a boolean
    element.addEventListener(eventName, callback, true);
  } else {
    // used only in the following cases:
    //
    // * where there is no options
    // * `{ once: true | false, passive: true | false, capture: false }
    element.addEventListener(eventName, callback);
  }
}
/**
  The `{{on}}` modifier lets you easily add event listeners (it uses
  [EventTarget.addEventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)
  internally).

  For example, if you'd like to run a function on your component when a `<button>`
  in the components template is clicked you might do something like:

  ```app/components/like-post.hbs
  <button {{on 'click' this.saveLike}}>Like this post!</button>
  ```

  ```app/components/like-post.js
  import Component from '@glimmer/component';
  import { action } from '@ember/object';

  export default class LikePostComponent extends Component {
    saveLike = () => {
      // someone likes your post!
      // better send a request off to your server...
    }
  }
  ```

  ### Arguments

  `{{on}}` accepts two positional arguments, and a few named arguments.

  The positional arguments are:

  - `event` -- the name to use when calling `addEventListener`
  - `callback` -- the function to be passed to `addEventListener`

  The named arguments are:

  - capture -- a `true` value indicates that events of this type will be dispatched
    to the registered listener before being dispatched to any EventTarget beneath it
    in the DOM tree.
  - once -- indicates that the listener should be invoked at most once after being
    added. If true, the listener would be automatically removed when invoked.
  - passive -- if `true`, indicates that the function specified by listener will never
    call preventDefault(). If a passive listener does call preventDefault(), the user
    agent will do nothing other than generate a console warning. See
    [Improving scrolling performance with passive listeners](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Improving_scrolling_performance_with_passive_listeners)
    to learn more.

  The callback function passed to `{{on}}` will receive any arguments that are passed
  to the event handler. Most commonly this would be the `event` itself.

  If you would like to pass additional arguments to the function you should use
  the `{{fn}}` helper.

  For example, in our example case above if you'd like to pass in the post that
  was being liked when the button is clicked you could do something like:

  ```app/components/like-post.hbs
  <button {{on 'click' (fn this.saveLike @post)}}>Like this post!</button>
  ```

  In this case, the `saveLike` function will receive two arguments: the click event
  and the value of `@post`.

  ### Function Context

  In the example above, we used an arrow function to ensure that `likePost` is
  properly bound to the `items-list`, but let's explore what happens if we
  left out the arrow function:

  ```app/components/like-post.js
  import Component from '@glimmer/component';

  export default class LikePostComponent extends Component {
    saveLike() {
      // ...snip...
    }
  }
  ```

  In this example, when the button is clicked `saveLike` will be invoked,
  it will **not** have access to the component instance. In other
  words, it will have no `this` context, so please make sure your functions
  are bound (via an arrow function or other means) before passing into `on`!

  @method on
  @public
*/


var OnModifierManager = /*#__PURE__*/function () {
  function OnModifierManager() {
    this.SUPPORTS_EVENT_OPTIONS = SUPPORTS_EVENT_OPTIONS;
  }

  var _proto2 = OnModifierManager.prototype;

  _proto2.getDebugName = function getDebugName() {
    return 'on';
  };

  _proto2.create = function create(_owner, element, _state, args) {
    return new OnModifierState(element, args);
  };

  _proto2.getTag = function getTag(state) {
    if (state === null) {
      return null;
    }

    return state.tag;
  };

  _proto2.install = function install(state) {
    if (state === null) {
      return;
    }

    state.updateFromArgs();
    var element = state.element,
        eventName = state.eventName,
        callback = state.callback,
        options = state.options;
    addEventListener(element, eventName, callback, options);
    (0, _destroyable.registerDestructor)(state, function () {
      return removeEventListener(element, eventName, callback, options);
    });
    state.shouldUpdate = false;
  };

  _proto2.update = function update(state) {
    if (state === null) {
      return;
    } // stash prior state for el.removeEventListener


    var element = state.element,
        eventName = state.eventName,
        callback = state.callback,
        options = state.options;
    state.updateFromArgs();

    if (!state.shouldUpdate) {
      return;
    } // use prior state values for removal


    removeEventListener(element, eventName, callback, options); // read updated values from the state object

    addEventListener(state.element, state.eventName, state.callback, state.options);
    state.shouldUpdate = false;
  };

  _proto2.getDestroyable = function getDestroyable(state) {
    return state;
  };

  _createClass(OnModifierManager, [{
    key: "counters",
    get: function get() {
      return {
        adds: adds,
        removes: removes
      };
    }
  }]);

  return OnModifierManager;
}();

var _default = (0, _manager.setInternalModifierManager)(new OnModifierManager(), {});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
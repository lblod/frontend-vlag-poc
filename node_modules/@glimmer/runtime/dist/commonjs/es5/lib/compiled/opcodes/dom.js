"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UpdateDynamicAttributeOpcode = exports.UpdateDynamicModifierOpcode = exports.UpdateModifierOpcode = void 0;

var _reference = require("@glimmer/reference");

var _validator = require("@glimmer/validator");

var _vm = require("@glimmer/vm");

var _opcodes = require("../../opcodes");

var _vm2 = require("./vm");

var _symbols = require("../../symbols");

var _util = require("@glimmer/util");

var _curriedValue = require("../../curried-value");

var _env = require("@glimmer/env");

var _destroyable2 = require("@glimmer/destroyable");

_opcodes.APPEND_OPCODES.add(41
/* Text */
, function (vm, _ref) {
  var text = _ref.op1;
  vm.elements().appendText(vm[_symbols.CONSTANTS].getValue(text));
});

_opcodes.APPEND_OPCODES.add(42
/* Comment */
, function (vm, _ref2) {
  var text = _ref2.op1;
  vm.elements().appendComment(vm[_symbols.CONSTANTS].getValue(text));
});

_opcodes.APPEND_OPCODES.add(48
/* OpenElement */
, function (vm, _ref3) {
  var tag = _ref3.op1;
  vm.elements().openElement(vm[_symbols.CONSTANTS].getValue(tag));
});

_opcodes.APPEND_OPCODES.add(49
/* OpenDynamicElement */
, function (vm) {
  var tagName = (0, _reference.valueForRef)(vm.stack.pop());
  vm.elements().openElement(tagName);
});

_opcodes.APPEND_OPCODES.add(50
/* PushRemoteElement */
, function (vm) {
  var elementRef = vm.stack.pop();
  var insertBeforeRef = vm.stack.pop();
  var guidRef = vm.stack.pop();
  var element = (0, _reference.valueForRef)(elementRef);
  var insertBefore = (0, _reference.valueForRef)(insertBeforeRef);
  var guid = (0, _reference.valueForRef)(guidRef);

  if (!(0, _reference.isConstRef)(elementRef)) {
    vm.updateWith(new _vm2.Assert(elementRef));
  }

  if (insertBefore !== undefined && !(0, _reference.isConstRef)(insertBeforeRef)) {
    vm.updateWith(new _vm2.Assert(insertBeforeRef));
  }

  var block = vm.elements().pushRemoteElement(element, guid, insertBefore);
  if (block) vm.associateDestroyable(block);
});

_opcodes.APPEND_OPCODES.add(56
/* PopRemoteElement */
, function (vm) {
  vm.elements().popRemoteElement();
});

_opcodes.APPEND_OPCODES.add(54
/* FlushElement */
, function (vm) {
  var operations = vm.fetchValue(_vm.$t0);
  var modifiers = null;

  if (operations) {
    modifiers = operations.flush(vm);
    vm.loadValue(_vm.$t0, null);
  }

  vm.elements().flushElement(modifiers);
});

_opcodes.APPEND_OPCODES.add(55
/* CloseElement */
, function (vm) {
  var modifiers = vm.elements().closeElement();

  if (modifiers) {
    modifiers.forEach(function (modifier) {
      vm.env.scheduleInstallModifier(modifier);
      var manager = modifier.manager,
          state = modifier.state;
      var d = manager.getDestroyable(state);

      if (d) {
        vm.associateDestroyable(d);
      }
    });
  }
});

_opcodes.APPEND_OPCODES.add(57
/* Modifier */
, function (vm, _ref4) {
  var handle = _ref4.op1;

  if (vm.env.isInteractive === false) {
    return;
  }

  var owner = vm.getOwner();
  var args = vm.stack.pop();

  var definition = vm[_symbols.CONSTANTS].getValue(handle);

  var manager = definition.manager;

  var _vm$elements = vm.elements(),
      constructing = _vm$elements.constructing;

  var state = manager.create(owner, constructing, definition.state, args.capture());
  var instance = {
    manager: manager,
    state: state,
    definition: definition
  };
  var operations = vm.fetchValue(_vm.$t0);
  operations.addModifier(instance);
  var tag = manager.getTag(state);

  if (tag !== null) {
    (0, _validator.consumeTag)(tag);
    return vm.updateWith(new UpdateModifierOpcode(tag, instance));
  }
});

_opcodes.APPEND_OPCODES.add(108
/* DynamicModifier */
, function (vm) {
  if (vm.env.isInteractive === false) {
    return;
  }

  var stack = vm.stack,
      constants = vm[_symbols.CONSTANTS];
  var ref = stack.pop();
  var args = stack.pop().capture();

  var _vm$elements2 = vm.elements(),
      constructing = _vm$elements2.constructing;

  var initialOwner = vm.getOwner();
  var instanceRef = (0, _reference.createComputeRef)(function () {
    var value = (0, _reference.valueForRef)(ref);
    var owner;

    if (!(0, _util.isObject)(value)) {
      return;
    }

    var hostDefinition;

    if ((0, _curriedValue.isCurriedType)(value, 2
    /* Modifier */
    )) {
      var _resolveCurriedValue = (0, _curriedValue.resolveCurriedValue)(value),
          resolvedDefinition = _resolveCurriedValue.definition,
          curriedOwner = _resolveCurriedValue.owner,
          positional = _resolveCurriedValue.positional,
          named = _resolveCurriedValue.named;

      hostDefinition = resolvedDefinition;
      owner = curriedOwner;

      if (positional !== undefined) {
        args.positional = positional.concat(args.positional);
      }

      if (named !== undefined) {
        args.named = _util.assign.apply(void 0, [{}].concat(named, [args.named]));
      }
    } else {
      hostDefinition = value;
      owner = initialOwner;
    }

    var handle = constants.modifier(hostDefinition, null, true);

    if (_env.DEBUG && handle === null) {
      throw new Error("Expected a dynamic modifier definition, but received an object or function that did not have a modifier manager associated with it. The dynamic invocation was `{{" + ref.debugLabel + "}}`, and the incorrect definition is the value at the path `" + ref.debugLabel + "`, which was: " + (0, _util.debugToString)(hostDefinition));
    }

    var definition = constants.getValue(handle);
    var manager = definition.manager;
    var state = manager.create(owner, constructing, definition.state, args);
    return {
      manager: manager,
      state: state,
      definition: definition
    };
  });
  var instance = (0, _reference.valueForRef)(instanceRef);
  var tag = null;

  if (instance !== undefined) {
    var operations = vm.fetchValue(_vm.$t0);
    operations.addModifier(instance);
    tag = instance.manager.getTag(instance.state);

    if (tag !== null) {
      (0, _validator.consumeTag)(tag);
    }
  }

  if (!(0, _reference.isConstRef)(ref) || tag) {
    return vm.updateWith(new UpdateDynamicModifierOpcode(tag, instance, instanceRef));
  }
});

var UpdateModifierOpcode = /*#__PURE__*/function () {
  function UpdateModifierOpcode(tag, modifier) {
    this.tag = tag;
    this.modifier = modifier;
    this.lastUpdated = (0, _validator.valueForTag)(tag);
  }

  var _proto = UpdateModifierOpcode.prototype;

  _proto.evaluate = function evaluate(vm) {
    var modifier = this.modifier,
        tag = this.tag,
        lastUpdated = this.lastUpdated;
    (0, _validator.consumeTag)(tag);

    if (!(0, _validator.validateTag)(tag, lastUpdated)) {
      vm.env.scheduleUpdateModifier(modifier);
      this.lastUpdated = (0, _validator.valueForTag)(tag);
    }
  };

  return UpdateModifierOpcode;
}();

exports.UpdateModifierOpcode = UpdateModifierOpcode;

var UpdateDynamicModifierOpcode = /*#__PURE__*/function () {
  function UpdateDynamicModifierOpcode(tag, instance, instanceRef) {
    this.tag = tag;
    this.instance = instance;
    this.instanceRef = instanceRef;
    this.lastUpdated = (0, _validator.valueForTag)(tag !== null && tag !== void 0 ? tag : _validator.CURRENT_TAG);
  }

  var _proto2 = UpdateDynamicModifierOpcode.prototype;

  _proto2.evaluate = function evaluate(vm) {
    var tag = this.tag,
        lastUpdated = this.lastUpdated,
        instance = this.instance,
        instanceRef = this.instanceRef;
    var newInstance = (0, _reference.valueForRef)(instanceRef);

    if (newInstance !== instance) {
      if (instance !== undefined) {
        var destroyable = instance.manager.getDestroyable(instance.state);

        if (destroyable !== null) {
          (0, _destroyable2.destroy)(destroyable);
        }
      }

      if (newInstance !== undefined) {
        var manager = newInstance.manager,
            state = newInstance.state;

        var _destroyable = manager.getDestroyable(state);

        if (_destroyable !== null) {
          (0, _destroyable2.associateDestroyableChild)(this, _destroyable);
        }

        tag = manager.getTag(state);

        if (tag !== null) {
          this.lastUpdated = (0, _validator.valueForTag)(tag);
        }

        this.tag = tag;
        vm.env.scheduleInstallModifier(newInstance);
      }

      this.instance = newInstance;
    } else if (tag !== null && !(0, _validator.validateTag)(tag, lastUpdated)) {
      vm.env.scheduleUpdateModifier(instance);
      this.lastUpdated = (0, _validator.valueForTag)(tag);
    }

    if (tag !== null) {
      (0, _validator.consumeTag)(tag);
    }
  };

  return UpdateDynamicModifierOpcode;
}();

exports.UpdateDynamicModifierOpcode = UpdateDynamicModifierOpcode;

_opcodes.APPEND_OPCODES.add(51
/* StaticAttr */
, function (vm, _ref5) {
  var _name = _ref5.op1,
      _value = _ref5.op2,
      _namespace = _ref5.op3;

  var name = vm[_symbols.CONSTANTS].getValue(_name);

  var value = vm[_symbols.CONSTANTS].getValue(_value);

  var namespace = _namespace ? vm[_symbols.CONSTANTS].getValue(_namespace) : null;
  vm.elements().setStaticAttribute(name, value, namespace);
});

_opcodes.APPEND_OPCODES.add(52
/* DynamicAttr */
, function (vm, _ref6) {
  var _name = _ref6.op1,
      _trusting = _ref6.op2,
      _namespace = _ref6.op3;

  var name = vm[_symbols.CONSTANTS].getValue(_name);

  var trusting = vm[_symbols.CONSTANTS].getValue(_trusting);

  var reference = vm.stack.pop();
  var value = (0, _reference.valueForRef)(reference);
  var namespace = _namespace ? vm[_symbols.CONSTANTS].getValue(_namespace) : null;
  var attribute = vm.elements().setDynamicAttribute(name, value, trusting, namespace);

  if (!(0, _reference.isConstRef)(reference)) {
    vm.updateWith(new UpdateDynamicAttributeOpcode(reference, attribute, vm.env));
  }
});

var UpdateDynamicAttributeOpcode = /*#__PURE__*/function () {
  function UpdateDynamicAttributeOpcode(reference, attribute, env) {
    var initialized = false;
    this.updateRef = (0, _reference.createComputeRef)(function () {
      var value = (0, _reference.valueForRef)(reference);

      if (initialized === true) {
        attribute.update(value, env);
      } else {
        initialized = true;
      }
    });
    (0, _reference.valueForRef)(this.updateRef);
  }

  var _proto3 = UpdateDynamicAttributeOpcode.prototype;

  _proto3.evaluate = function evaluate() {
    (0, _reference.valueForRef)(this.updateRef);
  };

  return UpdateDynamicAttributeOpcode;
}();

exports.UpdateDynamicAttributeOpcode = UpdateDynamicAttributeOpcode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";

var _reference = require("@glimmer/reference");

var _vm = require("@glimmer/vm");

var _opcodes = require("../../opcodes");

var _concat = require("../expressions/concat");

var _destroyable = require("@glimmer/destroyable");

var _util = require("@glimmer/util");

var _globalContext = require("@glimmer/global-context");

var _symbols = require("../../symbols");

var _env = require("@glimmer/env");

var _curryValue = _interopRequireDefault(require("../../references/curry-value"));

var _curriedValue = require("../../curried-value");

var _arguments = require("../../vm/arguments");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_opcodes.APPEND_OPCODES.add(77
/* Curry */
, function (vm, _ref) {
  var type = _ref.op1,
      _isStrict = _ref.op2;
  var stack = vm.stack;
  var definition = stack.pop();
  var capturedArgs = stack.pop();
  var owner = vm.getOwner();
  var resolver = vm.runtime.resolver;
  var isStrict = false;

  if (_env.DEBUG) {
    // strict check only happens in DEBUG builds, no reason to load it otherwise
    isStrict = vm[_symbols.CONSTANTS].getValue((0, _util.decodeHandle)(_isStrict));
  }

  vm.loadValue(_vm.$v0, (0, _curryValue.default)(type, definition, owner, capturedArgs, resolver, isStrict));
});

_opcodes.APPEND_OPCODES.add(107
/* DynamicHelper */
, function (vm) {
  var stack = vm.stack;
  var ref = stack.pop();
  var args = stack.pop().capture();
  var helperRef;
  var initialOwner = vm.getOwner();
  var helperInstanceRef = (0, _reference.createComputeRef)(function () {
    if (helperRef !== undefined) {
      (0, _destroyable.destroy)(helperRef);
    }

    var definition = (0, _reference.valueForRef)(ref);

    if ((0, _curriedValue.isCurriedType)(definition, 1
    /* Helper */
    )) {
      var _resolveCurriedValue = (0, _curriedValue.resolveCurriedValue)(definition),
          resolvedDef = _resolveCurriedValue.definition,
          owner = _resolveCurriedValue.owner,
          positional = _resolveCurriedValue.positional,
          named = _resolveCurriedValue.named;

      var helper = resolveHelper(vm[_symbols.CONSTANTS], resolvedDef, ref);

      if (named !== undefined) {
        args.named = _util.assign.apply(void 0, [{}].concat(named, [args.named]));
      }

      if (positional !== undefined) {
        args.positional = positional.concat(args.positional);
      }

      helperRef = helper(args, owner);
      (0, _destroyable.associateDestroyableChild)(helperInstanceRef, helperRef);
    } else if ((0, _util.isObject)(definition)) {
      var _helper = resolveHelper(vm[_symbols.CONSTANTS], definition, ref);

      helperRef = _helper(args, initialOwner);

      if ((0, _destroyable._hasDestroyableChildren)(helperRef)) {
        (0, _destroyable.associateDestroyableChild)(helperInstanceRef, helperRef);
      }
    } else {
      helperRef = _reference.UNDEFINED_REFERENCE;
    }
  });
  var helperValueRef = (0, _reference.createComputeRef)(function () {
    (0, _reference.valueForRef)(helperInstanceRef);
    return (0, _reference.valueForRef)(helperRef);
  });
  vm.associateDestroyable(helperInstanceRef);
  vm.loadValue(_vm.$v0, helperValueRef);
});

function resolveHelper(constants, definition, ref) {
  var handle = constants.helper(definition, null, true);

  if (_env.DEBUG && handle === null) {
    throw new Error("Expected a dynamic helper definition, but received an object or function that did not have a helper manager associated with it. The dynamic invocation was `{{" + ref.debugLabel + "}}` or `(" + ref.debugLabel + ")`, and the incorrect definition is the value at the path `" + ref.debugLabel + "`, which was: " + (0, _util.debugToString)(definition));
  }

  return constants.getValue(handle);
}

_opcodes.APPEND_OPCODES.add(16
/* Helper */
, function (vm, _ref2) {
  var handle = _ref2.op1;
  var stack = vm.stack;

  var helper = vm[_symbols.CONSTANTS].getValue(handle);

  var args = stack.pop();
  var value = helper(args.capture(), vm.getOwner(), vm.dynamicScope());

  if ((0, _destroyable._hasDestroyableChildren)(value)) {
    vm.associateDestroyable(value);
  }

  vm.loadValue(_vm.$v0, value);
});

_opcodes.APPEND_OPCODES.add(21
/* GetVariable */
, function (vm, _ref3) {
  var symbol = _ref3.op1;
  var expr = vm.referenceForSymbol(symbol);
  vm.stack.push(expr);
});

_opcodes.APPEND_OPCODES.add(19
/* SetVariable */
, function (vm, _ref4) {
  var symbol = _ref4.op1;
  var expr = vm.stack.pop();
  vm.scope().bindSymbol(symbol, expr);
});

_opcodes.APPEND_OPCODES.add(20
/* SetBlock */
, function (vm, _ref5) {
  var symbol = _ref5.op1;
  var handle = vm.stack.pop();
  var scope = vm.stack.pop();
  var table = vm.stack.pop();
  vm.scope().bindBlock(symbol, [handle, scope, table]);
});

_opcodes.APPEND_OPCODES.add(102
/* ResolveMaybeLocal */
, function (vm, _ref6) {
  var _name = _ref6.op1;

  var name = vm[_symbols.CONSTANTS].getValue(_name);

  var locals = vm.scope().getPartialMap();
  var ref = locals[name];

  if (ref === undefined) {
    ref = (0, _reference.childRefFor)(vm.getSelf(), name);
  }

  vm.stack.push(ref);
});

_opcodes.APPEND_OPCODES.add(37
/* RootScope */
, function (vm, _ref7) {
  var symbols = _ref7.op1;
  vm.pushRootScope(symbols, vm.getOwner());
});

_opcodes.APPEND_OPCODES.add(22
/* GetProperty */
, function (vm, _ref8) {
  var _key = _ref8.op1;

  var key = vm[_symbols.CONSTANTS].getValue(_key);

  var expr = vm.stack.pop();
  vm.stack.push((0, _reference.childRefFor)(expr, key));
});

_opcodes.APPEND_OPCODES.add(23
/* GetBlock */
, function (vm, _ref9) {
  var _block = _ref9.op1;
  var stack = vm.stack;
  var block = vm.scope().getBlock(_block);
  stack.push(block);
});

_opcodes.APPEND_OPCODES.add(24
/* SpreadBlock */
, function (vm) {
  var stack = vm.stack;
  var block = stack.pop();

  if (block && !isUndefinedReference(block)) {
    var handleOrCompilable = block[0],
        scope = block[1],
        table = block[2];
    stack.push(table);
    stack.push(scope);
    stack.push(handleOrCompilable);
  } else {
    stack.push(null);
    stack.push(null);
    stack.push(null);
  }
});

function isUndefinedReference(input) {
  false && (0, _util.assert)(Array.isArray(input) || input === _reference.UNDEFINED_REFERENCE, 'a reference other than UNDEFINED_REFERENCE is illegal here');
  return input === _reference.UNDEFINED_REFERENCE;
}

_opcodes.APPEND_OPCODES.add(25
/* HasBlock */
, function (vm) {
  var stack = vm.stack;
  var block = stack.pop();

  if (block && !isUndefinedReference(block)) {
    stack.push(_reference.TRUE_REFERENCE);
  } else {
    stack.push(_reference.FALSE_REFERENCE);
  }
});

_opcodes.APPEND_OPCODES.add(26
/* HasBlockParams */
, function (vm) {
  // FIXME(mmun): should only need to push the symbol table
  var block = vm.stack.pop();
  var scope = vm.stack.pop();
  var table = vm.stack.pop();
  var hasBlockParams = table && table.parameters.length;
  vm.stack.push(hasBlockParams ? _reference.TRUE_REFERENCE : _reference.FALSE_REFERENCE);
});

_opcodes.APPEND_OPCODES.add(27
/* Concat */
, function (vm, _ref10) {
  var count = _ref10.op1;
  var out = new Array(count);

  for (var i = count; i > 0; i--) {
    var offset = i - 1;
    out[offset] = vm.stack.pop();
  }

  vm.stack.push((0, _concat.createConcatRef)(out));
});

_opcodes.APPEND_OPCODES.add(109
/* IfInline */
, function (vm) {
  var condition = vm.stack.pop();
  var truthy = vm.stack.pop();
  var falsy = vm.stack.pop();
  vm.stack.push((0, _reference.createComputeRef)(function () {
    if ((0, _globalContext.toBool)((0, _reference.valueForRef)(condition)) === true) {
      return (0, _reference.valueForRef)(truthy);
    } else {
      return (0, _reference.valueForRef)(falsy);
    }
  }));
});

_opcodes.APPEND_OPCODES.add(110
/* Not */
, function (vm) {
  var ref = vm.stack.pop();
  vm.stack.push((0, _reference.createComputeRef)(function () {
    return !(0, _globalContext.toBool)((0, _reference.valueForRef)(ref));
  }));
});

_opcodes.APPEND_OPCODES.add(111
/* GetDynamicVar */
, function (vm) {
  var scope = vm.dynamicScope();
  var stack = vm.stack;
  var nameRef = stack.pop();
  stack.push((0, _reference.createComputeRef)(function () {
    var name = String((0, _reference.valueForRef)(nameRef));
    return (0, _reference.valueForRef)(scope.get(name));
  }));
});

_opcodes.APPEND_OPCODES.add(112
/* Log */
, function (vm) {
  var _vm$stack$pop$capture = vm.stack.pop().capture(),
      positional = _vm$stack$pop$capture.positional;

  vm.loadValue(_vm.$v0, (0, _reference.createComputeRef)(function () {
    var _console; // eslint-disable-next-line no-console


    (_console = console).log.apply(_console, (0, _arguments.reifyPositional)(positional));
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
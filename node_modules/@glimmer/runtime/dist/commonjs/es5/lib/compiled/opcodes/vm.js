"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EndTrackFrameOpcode = exports.BeginTrackFrameOpcode = exports.JumpIfNotModifiedOpcode = exports.AssertFilter = exports.Assert = void 0;

var _globalContext = require("@glimmer/global-context");

var _reference = require("@glimmer/reference");

var _validator = require("@glimmer/validator");

var _util = require("@glimmer/util");

var _assert = require("./assert");

var _opcodes = require("../../opcodes");

var _symbols = require("../../symbols");

_opcodes.APPEND_OPCODES.add(39
/* ChildScope */
, function (vm) {
  return vm.pushChildScope();
});

_opcodes.APPEND_OPCODES.add(40
/* PopScope */
, function (vm) {
  return vm.popScope();
});

_opcodes.APPEND_OPCODES.add(59
/* PushDynamicScope */
, function (vm) {
  return vm.pushDynamicScope();
});

_opcodes.APPEND_OPCODES.add(60
/* PopDynamicScope */
, function (vm) {
  return vm.popDynamicScope();
});

_opcodes.APPEND_OPCODES.add(28
/* Constant */
, function (vm, _ref) {
  var other = _ref.op1;
  vm.stack.push(vm[_symbols.CONSTANTS].getValue((0, _util.decodeHandle)(other)));
});

_opcodes.APPEND_OPCODES.add(29
/* ConstantReference */
, function (vm, _ref2) {
  var other = _ref2.op1;
  vm.stack.push((0, _reference.createConstRef)(vm[_symbols.CONSTANTS].getValue((0, _util.decodeHandle)(other)), false));
});

_opcodes.APPEND_OPCODES.add(30
/* Primitive */
, function (vm, _ref3) {
  var primitive = _ref3.op1;
  var stack = vm.stack;

  if ((0, _util.isHandle)(primitive)) {
    // it is a handle which does not already exist on the stack
    var value = vm[_symbols.CONSTANTS].getValue((0, _util.decodeHandle)(primitive));

    stack.push(value);
  } else {
    // is already an encoded immediate or primitive handle
    stack.push((0, _util.decodeImmediate)(primitive));
  }
});

_opcodes.APPEND_OPCODES.add(31
/* PrimitiveReference */
, function (vm) {
  var stack = vm.stack;
  var value = stack.pop();
  var ref;

  if (value === undefined) {
    ref = _reference.UNDEFINED_REFERENCE;
  } else if (value === null) {
    ref = _reference.NULL_REFERENCE;
  } else if (value === true) {
    ref = _reference.TRUE_REFERENCE;
  } else if (value === false) {
    ref = _reference.FALSE_REFERENCE;
  } else {
    ref = (0, _reference.createPrimitiveRef)(value);
  }

  stack.push(ref);
});

_opcodes.APPEND_OPCODES.add(33
/* Dup */
, function (vm, _ref4) {
  var register = _ref4.op1,
      offset = _ref4.op2;
  var position = vm.fetchValue(register) - offset;
  vm.stack.dup(position);
});

_opcodes.APPEND_OPCODES.add(34
/* Pop */
, function (vm, _ref5) {
  var count = _ref5.op1;
  vm.stack.pop(count);
});

_opcodes.APPEND_OPCODES.add(35
/* Load */
, function (vm, _ref6) {
  var register = _ref6.op1;
  vm.load(register);
});

_opcodes.APPEND_OPCODES.add(36
/* Fetch */
, function (vm, _ref7) {
  var register = _ref7.op1;
  vm.fetch(register);
});

_opcodes.APPEND_OPCODES.add(58
/* BindDynamicScope */
, function (vm, _ref8) {
  var _names = _ref8.op1;

  var names = vm[_symbols.CONSTANTS].getArray(_names);

  vm.bindDynamicScope(names);
});

_opcodes.APPEND_OPCODES.add(69
/* Enter */
, function (vm, _ref9) {
  var args = _ref9.op1;
  vm.enter(args);
});

_opcodes.APPEND_OPCODES.add(70
/* Exit */
, function (vm) {
  vm.exit();
});

_opcodes.APPEND_OPCODES.add(63
/* PushSymbolTable */
, function (vm, _ref10) {
  var _table = _ref10.op1;
  var stack = vm.stack;
  stack.push(vm[_symbols.CONSTANTS].getValue(_table));
});

_opcodes.APPEND_OPCODES.add(62
/* PushBlockScope */
, function (vm) {
  var stack = vm.stack;
  stack.push(vm.scope());
});

_opcodes.APPEND_OPCODES.add(61
/* CompileBlock */
, function (vm) {
  var stack = vm.stack;
  var block = stack.pop();

  if (block) {
    stack.push(vm.compile(block));
  } else {
    stack.push(null);
  }
});

_opcodes.APPEND_OPCODES.add(64
/* InvokeYield */
, function (vm) {
  var stack = vm.stack;
  var handle = stack.pop();
  var scope = stack.pop();
  var table = stack.pop();
  false && (0, _util.assert)(table === null || table && typeof table === 'object' && Array.isArray(table.parameters), (0, _assert.stackAssert)('Option<BlockSymbolTable>', table));
  var args = stack.pop();

  if (table === null) {
    // To balance the pop{Frame,Scope}
    vm.pushFrame();
    vm.pushScope(scope !== null && scope !== void 0 ? scope : vm.scope());
    return;
  }

  var invokingScope = scope; // If necessary, create a child scope

  {
    var locals = table.parameters;
    var localsCount = locals.length;

    if (localsCount > 0) {
      invokingScope = invokingScope.child();

      for (var i = 0; i < localsCount; i++) {
        invokingScope.bindSymbol(locals[i], args.at(i));
      }
    }
  }
  vm.pushFrame();
  vm.pushScope(invokingScope);
  vm.call(handle);
});

_opcodes.APPEND_OPCODES.add(65
/* JumpIf */
, function (vm, _ref11) {
  var target = _ref11.op1;
  var reference = vm.stack.pop();
  var value = Boolean((0, _reference.valueForRef)(reference));

  if ((0, _reference.isConstRef)(reference)) {
    if (value === true) {
      vm["goto"](target);
    }
  } else {
    if (value === true) {
      vm["goto"](target);
    }

    vm.updateWith(new Assert(reference));
  }
});

_opcodes.APPEND_OPCODES.add(66
/* JumpUnless */
, function (vm, _ref12) {
  var target = _ref12.op1;
  var reference = vm.stack.pop();
  var value = Boolean((0, _reference.valueForRef)(reference));

  if ((0, _reference.isConstRef)(reference)) {
    if (value === false) {
      vm["goto"](target);
    }
  } else {
    if (value === false) {
      vm["goto"](target);
    }

    vm.updateWith(new Assert(reference));
  }
});

_opcodes.APPEND_OPCODES.add(67
/* JumpEq */
, function (vm, _ref13) {
  var target = _ref13.op1,
      comparison = _ref13.op2;
  var other = vm.stack.peek();

  if (other === comparison) {
    vm["goto"](target);
  }
});

_opcodes.APPEND_OPCODES.add(68
/* AssertSame */
, function (vm) {
  var reference = vm.stack.peek();

  if ((0, _reference.isConstRef)(reference) === false) {
    vm.updateWith(new Assert(reference));
  }
});

_opcodes.APPEND_OPCODES.add(71
/* ToBoolean */
, function (vm) {
  var stack = vm.stack;
  var valueRef = stack.pop();
  stack.push((0, _reference.createComputeRef)(function () {
    return (0, _globalContext.toBool)((0, _reference.valueForRef)(valueRef));
  }));
});

var Assert = /*#__PURE__*/function () {
  function Assert(ref) {
    this.ref = ref;
    this.last = (0, _reference.valueForRef)(ref);
  }

  var _proto = Assert.prototype;

  _proto.evaluate = function evaluate(vm) {
    var last = this.last,
        ref = this.ref;
    var current = (0, _reference.valueForRef)(ref);

    if (last !== current) {
      vm["throw"]();
    }
  };

  return Assert;
}();

exports.Assert = Assert;

var AssertFilter = /*#__PURE__*/function () {
  function AssertFilter(ref, filter) {
    this.ref = ref;
    this.filter = filter;
    this.last = filter((0, _reference.valueForRef)(ref));
  }

  var _proto2 = AssertFilter.prototype;

  _proto2.evaluate = function evaluate(vm) {
    var last = this.last,
        ref = this.ref,
        filter = this.filter;
    var current = filter((0, _reference.valueForRef)(ref));

    if (last !== current) {
      vm["throw"]();
    }
  };

  return AssertFilter;
}();

exports.AssertFilter = AssertFilter;

var JumpIfNotModifiedOpcode = /*#__PURE__*/function () {
  function JumpIfNotModifiedOpcode() {
    this.tag = _validator.CONSTANT_TAG;
    this.lastRevision = _validator.INITIAL;
  }

  var _proto3 = JumpIfNotModifiedOpcode.prototype;

  _proto3.finalize = function finalize(tag, target) {
    this.target = target;
    this.didModify(tag);
  };

  _proto3.evaluate = function evaluate(vm) {
    var tag = this.tag,
        target = this.target,
        lastRevision = this.lastRevision;

    if (!vm.alwaysRevalidate && (0, _validator.validateTag)(tag, lastRevision)) {
      (0, _validator.consumeTag)(tag);
      vm["goto"](target);
    }
  };

  _proto3.didModify = function didModify(tag) {
    this.tag = tag;
    this.lastRevision = (0, _validator.valueForTag)(this.tag);
    (0, _validator.consumeTag)(tag);
  };

  return JumpIfNotModifiedOpcode;
}();

exports.JumpIfNotModifiedOpcode = JumpIfNotModifiedOpcode;

var BeginTrackFrameOpcode = /*#__PURE__*/function () {
  function BeginTrackFrameOpcode(debugLabel) {
    this.debugLabel = debugLabel;
  }

  var _proto4 = BeginTrackFrameOpcode.prototype;

  _proto4.evaluate = function evaluate() {
    (0, _validator.beginTrackFrame)(this.debugLabel);
  };

  return BeginTrackFrameOpcode;
}();

exports.BeginTrackFrameOpcode = BeginTrackFrameOpcode;

var EndTrackFrameOpcode = /*#__PURE__*/function () {
  function EndTrackFrameOpcode(target) {
    this.target = target;
  }

  var _proto5 = EndTrackFrameOpcode.prototype;

  _proto5.evaluate = function evaluate() {
    var tag = (0, _validator.endTrackFrame)();
    this.target.didModify(tag);
  };

  return EndTrackFrameOpcode;
}();

exports.EndTrackFrameOpcode = EndTrackFrameOpcode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderSync = renderSync;
exports.renderMain = renderMain;
exports.renderComponent = renderComponent;

var _reference = require("@glimmer/reference");

var _util = require("@glimmer/util");

var _symbols = require("./symbols");

var _append = _interopRequireDefault(require("./vm/append"));

var _scope = require("./scope");

var _environment = require("./environment");

var _env = require("@glimmer/env");

var _validator = require("@glimmer/validator");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TemplateIteratorImpl = /*#__PURE__*/function () {
  function TemplateIteratorImpl(vm) {
    this.vm = vm;
  }

  var _proto = TemplateIteratorImpl.prototype;

  _proto.next = function next() {
    return this.vm.next();
  };

  _proto.sync = function sync() {
    var _this = this;

    if (_env.DEBUG) {
      return (0, _validator.runInTrackingTransaction)(function () {
        return _this.vm.execute();
      }, '- While rendering:');
    } else {
      return this.vm.execute();
    }
  };

  return TemplateIteratorImpl;
}();

function renderSync(env, iterator) {
  var result;
  (0, _environment.inTransaction)(env, function () {
    return result = iterator.sync();
  });
  return result;
}

function renderMain(runtime, context, owner, self, treeBuilder, layout, dynamicScope) {
  if (dynamicScope === void 0) {
    dynamicScope = new _scope.DynamicScopeImpl();
  }

  var handle = (0, _util.unwrapHandle)(layout.compile(context));
  var numSymbols = layout.symbolTable.symbols.length;

  var vm = _append.default.initial(runtime, context, {
    self: self,
    dynamicScope: dynamicScope,
    treeBuilder: treeBuilder,
    handle: handle,
    numSymbols: numSymbols,
    owner: owner
  });

  return new TemplateIteratorImpl(vm);
}

function renderInvocation(vm, context, owner, definition, args) {
  // Get a list of tuples of argument names and references, like
  // [['title', reference], ['name', reference]]
  var argList = Object.keys(args).map(function (key) {
    return [key, args[key]];
  });
  var blockNames = ['main', 'else', 'attrs']; // Prefix argument names with `@` symbol

  var argNames = argList.map(function (_ref) {
    var name = _ref[0];
    return "@" + name;
  });

  var reified = vm[_symbols.CONSTANTS].component(definition, owner);

  vm.pushFrame(); // Push blocks on to the stack, three stack values per block

  for (var i = 0; i < 3 * blockNames.length; i++) {
    vm.stack.push(null);
  }

  vm.stack.push(null); // For each argument, push its backing reference on to the stack

  argList.forEach(function (_ref2) {
    var reference = _ref2[1];
    vm.stack.push(reference);
  }); // Configure VM based on blocks and args just pushed on to the stack.

  vm[_symbols.ARGS].setup(vm.stack, argNames, blockNames, 0, true);

  var compilable = reified.compilable;
  var layoutHandle = (0, _util.unwrapHandle)(compilable.compile(context));
  var invocation = {
    handle: layoutHandle,
    symbolTable: compilable.symbolTable
  }; // Needed for the Op.Main opcode: arguments, component invocation object, and
  // component definition.

  vm.stack.push(vm[_symbols.ARGS]);
  vm.stack.push(invocation);
  vm.stack.push(reified);
  return new TemplateIteratorImpl(vm);
}

function renderComponent(runtime, treeBuilder, context, owner, definition, args, dynamicScope) {
  if (args === void 0) {
    args = {};
  }

  if (dynamicScope === void 0) {
    dynamicScope = new _scope.DynamicScopeImpl();
  }

  var vm = _append.default.empty(runtime, {
    treeBuilder: treeBuilder,
    handle: context.stdlib.main,
    dynamicScope: dynamicScope,
    owner: owner
  }, context);

  return renderInvocation(vm, context, owner, definition, recordToReference(args));
}

function recordToReference(record) {
  var root = (0, _reference.createConstRef)(record, 'args');
  return Object.keys(record).reduce(function (acc, key) {
    acc[key] = (0, _reference.childRefFor)(root, key);
    return acc;
  }, {});
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
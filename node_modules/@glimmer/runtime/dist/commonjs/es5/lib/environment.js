"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runtimeContext = runtimeContext;
exports.inTransaction = inTransaction;
exports.default = exports.EnvironmentImpl = exports.TRANSACTION = void 0;

var _env = require("@glimmer/env");

var _util = require("@glimmer/util");

var _validator = require("@glimmer/validator");

var _helper = require("./dom/helper");

var _program = require("@glimmer/program");

var _debugRenderTree = _interopRequireDefault(require("./debug-render-tree"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var _a;

var TRANSACTION = (0, _util.symbol)('TRANSACTION');
exports.TRANSACTION = TRANSACTION;

var TransactionImpl = /*#__PURE__*/function () {
  function TransactionImpl() {
    this.scheduledInstallModifiers = [];
    this.scheduledUpdateModifiers = [];
    this.createdComponents = [];
    this.updatedComponents = [];
  }

  var _proto = TransactionImpl.prototype;

  _proto.didCreate = function didCreate(component) {
    this.createdComponents.push(component);
  };

  _proto.didUpdate = function didUpdate(component) {
    this.updatedComponents.push(component);
  };

  _proto.scheduleInstallModifier = function scheduleInstallModifier(modifier) {
    this.scheduledInstallModifiers.push(modifier);
  };

  _proto.scheduleUpdateModifier = function scheduleUpdateModifier(modifier) {
    this.scheduledUpdateModifiers.push(modifier);
  };

  _proto.commit = function commit() {
    var createdComponents = this.createdComponents,
        updatedComponents = this.updatedComponents;

    for (var i = 0; i < createdComponents.length; i++) {
      var _createdComponents$i = createdComponents[i],
          _manager = _createdComponents$i.manager,
          _state = _createdComponents$i.state;

      _manager.didCreate(_state);
    }

    for (var _i = 0; _i < updatedComponents.length; _i++) {
      var _updatedComponents$_i = updatedComponents[_i],
          _manager2 = _updatedComponents$_i.manager,
          _state2 = _updatedComponents$_i.state;

      _manager2.didUpdate(_state2);
    }

    var scheduledInstallModifiers = this.scheduledInstallModifiers,
        scheduledUpdateModifiers = this.scheduledUpdateModifiers; // Prevent a transpilation issue we guard against in Ember, the
    // throw-if-closure-required issue

    var manager, state;

    for (var _i2 = 0; _i2 < scheduledInstallModifiers.length; _i2++) {
      var modifier = scheduledInstallModifiers[_i2];
      manager = modifier.manager;
      state = modifier.state;
      var modifierTag = manager.getTag(state);

      if (modifierTag !== null) {
        var tag = (0, _validator.track)( // eslint-disable-next-line no-loop-func
        function () {
          return manager.install(state);
        }, _env.DEBUG && "- While rendering:\n  (instance of a `" + (modifier.definition.resolvedName || manager.getDebugName(modifier.definition.state)) + "` modifier)");
        (0, _validator.updateTag)(modifierTag, tag);
      } else {
        manager.install(state);
      }
    }

    for (var _i3 = 0; _i3 < scheduledUpdateModifiers.length; _i3++) {
      var _modifier = scheduledUpdateModifiers[_i3];
      manager = _modifier.manager;
      state = _modifier.state;

      var _modifierTag = manager.getTag(state);

      if (_modifierTag !== null) {
        var _tag = (0, _validator.track)( // eslint-disable-next-line no-loop-func
        function () {
          return manager.update(state);
        }, _env.DEBUG && "- While rendering:\n  (instance of a `" + (_modifier.definition.resolvedName || manager.getDebugName(_modifier.definition.state)) + "` modifier)");

        (0, _validator.updateTag)(_modifierTag, _tag);
      } else {
        manager.update(state);
      }
    }
  };

  return TransactionImpl;
}();

var EnvironmentImpl = /*#__PURE__*/function () {
  function EnvironmentImpl(options, delegate) {
    this.delegate = delegate;
    this[_a] = null; // Delegate methods and values

    this.isInteractive = this.delegate.isInteractive;
    this.debugRenderTree = this.delegate.enableDebugTooling ? new _debugRenderTree.default() : undefined;

    if (options.appendOperations) {
      this.appendOperations = options.appendOperations;
      this.updateOperations = options.updateOperations;
    } else if (options.document) {
      this.appendOperations = new _helper.DOMTreeConstruction(options.document);
      this.updateOperations = new _helper.DOMChangesImpl(options.document);
    } else if (_env.DEBUG) {
      throw new Error('you must pass document or appendOperations to a new runtime');
    }
  }

  var _proto2 = EnvironmentImpl.prototype;

  _proto2.getAppendOperations = function getAppendOperations() {
    return this.appendOperations;
  };

  _proto2.getDOM = function getDOM() {
    return this.updateOperations;
  };

  _proto2.begin = function begin() {
    var _b;

    false && (0, _util.assert)(!this[TRANSACTION], 'A glimmer transaction was begun, but one already exists. You may have a nested transaction, possibly caused by an earlier runtime exception while rendering. Please check your console for the stack trace of any prior exceptions.');
    (_b = this.debugRenderTree) === null || _b === void 0 ? void 0 : _b.begin();
    this[TRANSACTION] = new TransactionImpl();
  };

  _proto2.didCreate = function didCreate(component) {
    this.transaction.didCreate(component);
  };

  _proto2.didUpdate = function didUpdate(component) {
    this.transaction.didUpdate(component);
  };

  _proto2.scheduleInstallModifier = function scheduleInstallModifier(modifier) {
    if (this.isInteractive) {
      this.transaction.scheduleInstallModifier(modifier);
    }
  };

  _proto2.scheduleUpdateModifier = function scheduleUpdateModifier(modifier) {
    if (this.isInteractive) {
      this.transaction.scheduleUpdateModifier(modifier);
    }
  };

  _proto2.commit = function commit() {
    var _b;

    var transaction = this.transaction;
    this[TRANSACTION] = null;
    transaction.commit();
    (_b = this.debugRenderTree) === null || _b === void 0 ? void 0 : _b.commit();
    this.delegate.onTransactionCommit();
  };

  _createClass(EnvironmentImpl, [{
    key: "transaction",
    get: function get() {
      return this[TRANSACTION];
    }
  }]);

  return EnvironmentImpl;
}();

exports.EnvironmentImpl = EnvironmentImpl;
_a = TRANSACTION;

function runtimeContext(options, delegate, artifacts, resolver) {
  return {
    env: new EnvironmentImpl(options, delegate),
    program: new _program.RuntimeProgramImpl(artifacts.constants, artifacts.heap),
    resolver: resolver
  };
}

function inTransaction(env, cb) {
  if (!env[TRANSACTION]) {
    env.begin();

    try {
      cb();
    } finally {
      env.commit();
    }
  } else {
    cb();
  }
}

var _default = EnvironmentImpl;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
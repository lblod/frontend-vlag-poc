import { UpdatingOpcode } from '@glimmer/interfaces';
import { Reference } from '@glimmer/reference';
import { Tag } from '@glimmer/validator';
import { UpdatingVM } from '../../vm';
export declare class Assert implements UpdatingOpcode {
    private ref;
    private last;
    constructor(ref: Reference);
    evaluate(vm: UpdatingVM): void;
}
export declare class AssertFilter<T, U> implements UpdatingOpcode {
    private ref;
    private filter;
    private last;
    constructor(ref: Reference<T>, filter: (from: T) => U);
    evaluate(vm: UpdatingVM): void;
}
export declare class JumpIfNotModifiedOpcode implements UpdatingOpcode {
    private tag;
    private lastRevision;
    private target?;
    finalize(tag: Tag, target: number): void;
    evaluate(vm: UpdatingVM): void;
    didModify(tag: Tag): void;
}
export declare class BeginTrackFrameOpcode implements UpdatingOpcode {
    private debugLabel?;
    constructor(debugLabel?: string | undefined);
    evaluate(): void;
}
export declare class EndTrackFrameOpcode implements UpdatingOpcode {
    private target;
    constructor(target: JumpIfNotModifiedOpcode);
    evaluate(): void;
}
//# sourceMappingURL=vm.d.ts.map
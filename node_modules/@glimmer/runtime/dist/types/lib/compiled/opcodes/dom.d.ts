import { Reference } from '@glimmer/reference';
import { Tag } from '@glimmer/validator';
import { ModifierInstance, Environment, UpdatingVM, UpdatingOpcode } from '@glimmer/interfaces';
import { DynamicAttribute } from '../../vm/attributes/dynamic';
export declare class UpdateModifierOpcode implements UpdatingOpcode {
    private tag;
    private modifier;
    private lastUpdated;
    constructor(tag: Tag, modifier: ModifierInstance);
    evaluate(vm: UpdatingVM): void;
}
export declare class UpdateDynamicModifierOpcode implements UpdatingOpcode {
    private tag;
    private instance;
    private instanceRef;
    private lastUpdated;
    constructor(tag: Tag | null, instance: ModifierInstance | undefined, instanceRef: Reference<ModifierInstance | undefined>);
    evaluate(vm: UpdatingVM): void;
}
export declare class UpdateDynamicAttributeOpcode implements UpdatingOpcode {
    private updateRef;
    constructor(reference: Reference<unknown>, attribute: DynamicAttribute, env: Environment);
    evaluate(): void;
}
//# sourceMappingURL=dom.d.ts.map
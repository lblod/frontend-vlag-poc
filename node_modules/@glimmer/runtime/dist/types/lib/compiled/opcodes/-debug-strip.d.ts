import { Checker } from '@glimmer/debug';
import { CompilableBlock, ComponentDefinition, InternalComponentManager, ElementOperations, Invocation, Scope, Helper, CapturedArguments, Option, ScopeBlock, CompilableProgram, ComponentInstance } from '@glimmer/interfaces';
import { Reference, OpaqueIterator } from '@glimmer/reference';
import { Tag } from '@glimmer/validator';
import { VMArgumentsImpl } from '../../vm/arguments';
import { ComponentElementOperations } from './component';
export declare const CheckTag: Checker<Tag>;
export declare const CheckOperations: Checker<Option<ComponentElementOperations>>;
export declare const CheckReference: Checker<Reference>;
export declare const CheckIterator: Checker<OpaqueIterator>;
export declare const CheckArguments: Checker<VMArgumentsImpl>;
export declare const CheckHelper: Checker<Helper>;
export declare class UndefinedReferenceChecker implements Checker<Reference> {
    type: Reference;
    validate(value: unknown): value is Reference;
    expected(): string;
}
export declare const CheckUndefinedReference: UndefinedReferenceChecker;
export declare const CheckCapturedArguments: Checker<CapturedArguments>;
export declare const CheckScope: Checker<Scope>;
export declare const CheckComponentManager: Checker<InternalComponentManager<unknown>>;
export declare const CheckComponentInstance: Checker<ComponentInstance>;
export declare const CheckCurriedComponentDefinition: Checker<object | Function>;
export declare const CheckInvocation: Checker<Invocation>;
export declare const CheckElementOperations: Checker<ElementOperations>;
export declare const CheckFinishedComponentInstance: Checker<ComponentInstance>;
export declare const CheckCompilableBlock: Checker<CompilableBlock>;
export declare const CheckCompilableProgram: Checker<CompilableProgram>;
export declare const CheckScopeBlock: Checker<ScopeBlock>;
export declare const CheckComponentDefinition: Checker<ComponentDefinition>;
//# sourceMappingURL=-debug-strip.d.ts.map
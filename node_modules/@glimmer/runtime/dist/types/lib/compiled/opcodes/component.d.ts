import { Bounds, ComponentDefinition, InternalComponentCapability, ComponentDefinitionState, ComponentInstanceState, InternalComponentManager, Dict, DynamicScope, ElementOperations, Option, ProgramSymbolTable, ScopeSlot, WithUpdateHook, ModifierInstance, ComponentInstanceWithCreate, UpdatingOpcode } from '@glimmer/interfaces';
import { Reference } from '@glimmer/reference';
import { UpdatingVM } from '../../vm';
import { InternalVM } from '../../vm/append';
/**
 * The VM creates a new ComponentInstance data structure for every component
 * invocation it encounters.
 *
 * Similar to how a ComponentDefinition contains state about all components of a
 * particular type, a ComponentInstance contains state specific to a particular
 * instance of a component type. It also contains a pointer back to its
 * component type's ComponentDefinition.
 */
export interface InitialComponentInstance {
    definition: ComponentDefinition;
    manager: Option<InternalComponentManager>;
    capabilities: Option<InternalComponentCapability>;
    state: null;
    handle: Option<number>;
    table: Option<ProgramSymbolTable>;
    lookup: Option<Dict<ScopeSlot>>;
}
export interface PopulatedComponentInstance {
    definition: ComponentDefinition;
    manager: InternalComponentManager;
    capabilities: InternalComponentCapability;
    state: null;
    handle: number;
    table: Option<ProgramSymbolTable>;
    lookup: Option<Dict<ScopeSlot>>;
}
export interface PartialComponentDefinition {
    state: Option<ComponentDefinitionState>;
    manager: InternalComponentManager;
}
export declare class ComponentElementOperations implements ElementOperations {
    private attributes;
    private classes;
    private modifiers;
    setAttribute(name: string, value: Reference<unknown>, trusting: boolean, namespace: Option<string>): void;
    setStaticAttribute(name: string, value: string, namespace: Option<string>): void;
    addModifier(modifier: ModifierInstance): void;
    flush(vm: InternalVM): ModifierInstance[];
}
export declare class UpdateComponentOpcode implements UpdatingOpcode {
    private component;
    private manager;
    private dynamicScope;
    constructor(component: ComponentInstanceState, manager: WithUpdateHook, dynamicScope: Option<DynamicScope>);
    evaluate(_vm: UpdatingVM): void;
}
export declare class DidUpdateLayoutOpcode implements UpdatingOpcode {
    private component;
    private bounds;
    constructor(component: ComponentInstanceWithCreate, bounds: Bounds);
    evaluate(vm: UpdatingVM): void;
}
//# sourceMappingURL=component.d.ts.map
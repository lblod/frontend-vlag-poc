import { Bounds, CapturedRenderNode, DebugRenderTree, Option, RenderNode } from '@glimmer/interfaces';
export declare class Ref<T extends object> {
    readonly id: number;
    private value;
    constructor(value: T);
    get(): Option<T>;
    release(): void;
    toString(): String;
}
export default class DebugRenderTreeImpl<TBucket extends object> implements DebugRenderTree<TBucket> {
    private stack;
    private refs;
    private roots;
    private nodes;
    begin(): void;
    create(state: TBucket, node: RenderNode): void;
    update(state: TBucket): void;
    didRender(state: TBucket, bounds: Bounds): void;
    willDestroy(state: TBucket): void;
    commit(): void;
    capture(): CapturedRenderNode[];
    private reset;
    private enter;
    private exit;
    private nodeFor;
    private appendChild;
    private captureRefs;
    private captureNode;
    private captureTemplate;
    private captureBounds;
}
//# sourceMappingURL=debug-render-tree.d.ts.map
define('@glimmer/runtime', ['exports', '@glimmer/reference', '@glimmer/util', '@glimmer/vm', '@glimmer/destroyable', '@glimmer/global-context', '@glimmer/env', '@glimmer/validator', '@glimmer/manager', '@glimmer/program', '@glimmer/owner', '@glimmer/runtime'], function (exports, reference, util, vm, destroyable, globalContext, env, validator, manager, program, owner, runtime) { 'use strict';

  var DynamicScopeImpl = /*#__PURE__*/function () {
    function DynamicScopeImpl(bucket) {
      if (bucket) {
        this.bucket = util.assign({}, bucket);
      } else {
        this.bucket = {};
      }
    }

    var _proto = DynamicScopeImpl.prototype;

    _proto.get = function get(key) {
      return this.bucket[key];
    };

    _proto.set = function set(key, reference) {
      return this.bucket[key] = reference;
    };

    _proto.child = function child() {
      return new DynamicScopeImpl(this.bucket);
    };

    return DynamicScopeImpl;
  }();
  var PartialScopeImpl = /*#__PURE__*/function () {
    function PartialScopeImpl( // the 0th slot is `self`
    slots, owner, callerScope, // named arguments and blocks passed to a layout that uses eval
    evalScope, // locals in scope when the partial was invoked
    partialMap) {
      this.slots = slots;
      this.owner = owner;
      this.callerScope = callerScope;
      this.evalScope = evalScope;
      this.partialMap = partialMap;
    }

    PartialScopeImpl.root = function root(self, size, owner) {
      if (size === void 0) {
        size = 0;
      }

      var refs = new Array(size + 1);

      for (var i = 0; i <= size; i++) {
        refs[i] = reference.UNDEFINED_REFERENCE;
      }

      return new PartialScopeImpl(refs, owner, null, null, null).init({
        self: self
      });
    };

    PartialScopeImpl.sized = function sized(size, owner) {
      if (size === void 0) {
        size = 0;
      }

      var refs = new Array(size + 1);

      for (var i = 0; i <= size; i++) {
        refs[i] = reference.UNDEFINED_REFERENCE;
      }

      return new PartialScopeImpl(refs, owner, null, null, null);
    };

    var _proto2 = PartialScopeImpl.prototype;

    _proto2.init = function init(_ref) {
      var self = _ref.self;
      this.slots[0] = self;
      return this;
    };

    _proto2.getSelf = function getSelf() {
      return this.get(0);
    };

    _proto2.getSymbol = function getSymbol(symbol) {
      return this.get(symbol);
    };

    _proto2.getBlock = function getBlock(symbol) {
      var block = this.get(symbol);
      return block === reference.UNDEFINED_REFERENCE ? null : block;
    };

    _proto2.getEvalScope = function getEvalScope() {
      return this.evalScope;
    };

    _proto2.getPartialMap = function getPartialMap() {
      return this.partialMap;
    };

    _proto2.bind = function bind(symbol, value) {
      this.set(symbol, value);
    };

    _proto2.bindSelf = function bindSelf(self) {
      this.set(0, self);
    };

    _proto2.bindSymbol = function bindSymbol(symbol, value) {
      this.set(symbol, value);
    };

    _proto2.bindBlock = function bindBlock(symbol, value) {
      this.set(symbol, value);
    };

    _proto2.bindEvalScope = function bindEvalScope(map) {
      this.evalScope = map;
    };

    _proto2.bindPartialMap = function bindPartialMap(map) {
      this.partialMap = map;
    };

    _proto2.bindCallerScope = function bindCallerScope(scope) {
      this.callerScope = scope;
    };

    _proto2.getCallerScope = function getCallerScope() {
      return this.callerScope;
    };

    _proto2.child = function child() {
      return new PartialScopeImpl(this.slots.slice(), this.owner, this.callerScope, this.evalScope, this.partialMap);
    };

    _proto2.get = function get(index) {
      if (index >= this.slots.length) {
        throw new RangeError("BUG: cannot get $" + index + " from scope; length=" + this.slots.length);
      }

      return this.slots[index];
    };

    _proto2.set = function set(index, value) {
      if (index >= this.slots.length) {
        throw new RangeError("BUG: cannot get $" + index + " from scope; length=" + this.slots.length);
      }

      this.slots[index] = value;
    };

    return PartialScopeImpl;
  }();

  // the VM in other classes, but are not intended to be a part of
  // Glimmer's API.

  var INNER_VM = util.symbol('INNER_VM');
  var DESTROYABLE_STACK = util.symbol('DESTROYABLE_STACK');
  var STACKS = util.symbol('STACKS');
  var REGISTERS = util.symbol('REGISTERS');
  var HEAP = util.symbol('HEAP');
  var CONSTANTS = util.symbol('CONSTANTS');
  var ARGS = util.symbol('ARGS');
  var PC = util.symbol('PC');

  var CursorImpl = function CursorImpl(element, nextSibling) {
    this.element = element;
    this.nextSibling = nextSibling;
  };
  var ConcreteBounds = /*#__PURE__*/function () {
    function ConcreteBounds(parentNode, first, last) {
      this.parentNode = parentNode;
      this.first = first;
      this.last = last;
    }

    var _proto = ConcreteBounds.prototype;

    _proto.parentElement = function parentElement() {
      return this.parentNode;
    };

    _proto.firstNode = function firstNode() {
      return this.first;
    };

    _proto.lastNode = function lastNode() {
      return this.last;
    };

    return ConcreteBounds;
  }();
  var SingleNodeBounds = /*#__PURE__*/function () {
    function SingleNodeBounds(parentNode, node) {
      this.parentNode = parentNode;
      this.node = node;
    }

    var _proto2 = SingleNodeBounds.prototype;

    _proto2.parentElement = function parentElement() {
      return this.parentNode;
    };

    _proto2.firstNode = function firstNode() {
      return this.node;
    };

    _proto2.lastNode = function lastNode() {
      return this.node;
    };

    return SingleNodeBounds;
  }();
  function move(bounds, reference) {
    var parent = bounds.parentElement();
    var first = bounds.firstNode();
    var last = bounds.lastNode();
    var current = first;

    while (true) {
      var next = current.nextSibling;
      parent.insertBefore(current, reference);

      if (current === last) {
        return next;
      }

      current = next;
    }
  }
  function clear(bounds) {
    var parent = bounds.parentElement();
    var first = bounds.firstNode();
    var last = bounds.lastNode();
    var current = first;

    while (true) {
      var next = current.nextSibling;
      parent.removeChild(current);

      if (current === last) {
        return next;
      }

      current = next;
    }
  }

  function normalizeStringValue(value) {
    if (isEmpty(value)) {
      return '';
    }

    return String(value);
  }
  function shouldCoerce(value) {
    return isString(value) || isEmpty(value) || typeof value === 'boolean' || typeof value === 'number';
  }
  function isEmpty(value) {
    return value === null || value === undefined || typeof value.toString !== 'function';
  }
  function isSafeString(value) {
    return typeof value === 'object' && value !== null && typeof value.toHTML === 'function';
  }
  function isNode(value) {
    return typeof value === 'object' && value !== null && typeof value.nodeType === 'number';
  }
  function isFragment(value) {
    return isNode(value) && value.nodeType === 11;
  }
  function isString(value) {
    return typeof value === 'string';
  }

  /*
   * @method normalizeProperty
   * @param element {HTMLElement}
   * @param slotName {String}
   * @returns {Object} { name, type }
   */
  function normalizeProperty(element, slotName) {
    var type, normalized;

    if (slotName in element) {
      normalized = slotName;
      type = 'prop';
    } else {
      var lower = slotName.toLowerCase();

      if (lower in element) {
        type = 'prop';
        normalized = lower;
      } else {
        type = 'attr';
        normalized = slotName;
      }
    }

    if (type === 'prop' && (normalized.toLowerCase() === 'style' || preferAttr(element.tagName, normalized))) {
      type = 'attr';
    }

    return {
      normalized: normalized,
      type: type
    };
  }
  // * browser bug
  // * strange spec outlier

  var ATTR_OVERRIDES = {
    INPUT: {
      form: true,
      // Chrome 46.0.2464.0: 'autocorrect' in document.createElement('input') === false
      // Safari 8.0.7: 'autocorrect' in document.createElement('input') === false
      // Mobile Safari (iOS 8.4 simulator): 'autocorrect' in document.createElement('input') === true
      autocorrect: true,
      // Chrome 54.0.2840.98: 'list' in document.createElement('input') === true
      // Safari 9.1.3: 'list' in document.createElement('input') === false
      list: true
    },
    // element.form is actually a legitimate readOnly property, that is to be
    // mutated, but must be mutated by setAttribute...
    SELECT: {
      form: true
    },
    OPTION: {
      form: true
    },
    TEXTAREA: {
      form: true
    },
    LABEL: {
      form: true
    },
    FIELDSET: {
      form: true
    },
    LEGEND: {
      form: true
    },
    OBJECT: {
      form: true
    },
    OUTPUT: {
      form: true
    },
    BUTTON: {
      form: true
    }
  };

  function preferAttr(tagName, propName) {
    var tag = ATTR_OVERRIDES[tagName.toUpperCase()];
    return tag && tag[propName.toLowerCase()] || false;
  }

  var badProtocols = ['javascript:', 'vbscript:'];
  var badTags = ['A', 'BODY', 'LINK', 'IMG', 'IFRAME', 'BASE', 'FORM'];
  var badTagsForDataURI = ['EMBED'];
  var badAttributes = ['href', 'src', 'background', 'action'];
  var badAttributesForDataURI = ['src'];

  function has(array, item) {
    return array.indexOf(item) !== -1;
  }

  function checkURI(tagName, attribute) {
    return (tagName === null || has(badTags, tagName)) && has(badAttributes, attribute);
  }

  function checkDataURI(tagName, attribute) {
    if (tagName === null) return false;
    return has(badTagsForDataURI, tagName) && has(badAttributesForDataURI, attribute);
  }

  function requiresSanitization(tagName, attribute) {
    return checkURI(tagName, attribute) || checkDataURI(tagName, attribute);
  }
  var protocolForUrl;

  if (typeof URL === 'object' && URL !== null && // this is super annoying, TS thinks that URL **must** be a function so `URL.parse` check
  // thinks it is `never` without this `as unknown as any`
  typeof URL.parse === 'function') {
    // In Ember-land the `fastboot` package sets the `URL` global to `require('url')`
    // ultimately, this should be changed (so that we can either rely on the natural `URL` global
    // that exists) but for now we have to detect the specific `FastBoot` case first
    //
    // a future version of `fastboot` will detect if this legacy URL setup is required (by
    // inspecting Ember version) and if new enough, it will avoid shadowing the `URL` global
    // constructor with `require('url')`.
    var nodeURL = URL;

    protocolForUrl = function protocolForUrl(url) {
      var protocol = null;

      if (typeof url === 'string') {
        protocol = nodeURL.parse(url).protocol;
      }

      return protocol === null ? ':' : protocol;
    };
  } else if (typeof URL === 'function') {
    protocolForUrl = function protocolForUrl(_url) {
      try {
        var url = new URL(_url);
        return url.protocol;
      } catch (error) {
        // any non-fully qualified url string will trigger an error (because there is no
        // baseURI that we can provide; in that case we **know** that the protocol is
        // "safe" because it isn't specifically one of the `badProtocols` listed above
        // (and those protocols can never be the default baseURI)
        return ':';
      }
    };
  } else {
    // fallback for IE11 support
    var parsingNode = document.createElement('a');

    protocolForUrl = function protocolForUrl(url) {
      parsingNode.href = url;
      return parsingNode.protocol;
    };
  }

  function sanitizeAttributeValue(element, attribute, value) {
    var tagName = null;

    if (value === null || value === undefined) {
      return value;
    }

    if (isSafeString(value)) {
      return value.toHTML();
    }

    if (!element) {
      tagName = null;
    } else {
      tagName = element.tagName.toUpperCase();
    }

    var str = normalizeStringValue(value);

    if (checkURI(tagName, attribute)) {
      var protocol = protocolForUrl(str);

      if (has(badProtocols, protocol)) {
        return "unsafe:" + str;
      }
    }

    if (checkDataURI(tagName, attribute)) {
      return "unsafe:" + str;
    }

    return str;
  }

  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }
  function dynamicAttribute(element, attr, namespace, isTrusting) {
    if (isTrusting === void 0) {
      isTrusting = false;
    }

    var tagName = element.tagName,
        namespaceURI = element.namespaceURI;
    var attribute = {
      element: element,
      name: attr,
      namespace: namespace
    };

    if (env.DEBUG && attr === 'style' && !isTrusting) {
      return new DebugStyleAttributeManager(attribute);
    }

    if (namespaceURI === "http://www.w3.org/2000/svg"
    /* SVG */
    ) {
        return buildDynamicAttribute(tagName, attr, attribute);
      }

    var _normalizeProperty = normalizeProperty(element, attr),
        type = _normalizeProperty.type,
        normalized = _normalizeProperty.normalized;

    if (type === 'attr') {
      return buildDynamicAttribute(tagName, normalized, attribute);
    } else {
      return buildDynamicProperty(tagName, normalized, attribute);
    }
  }

  function buildDynamicAttribute(tagName, name, attribute) {
    if (requiresSanitization(tagName, name)) {
      return new SafeDynamicAttribute(attribute);
    } else {
      return new SimpleDynamicAttribute(attribute);
    }
  }

  function buildDynamicProperty(tagName, name, attribute) {
    if (requiresSanitization(tagName, name)) {
      return new SafeDynamicProperty(name, attribute);
    }

    if (isUserInputValue(tagName, name)) {
      return new InputValueDynamicAttribute(name, attribute);
    }

    if (isOptionSelected(tagName, name)) {
      return new OptionSelectedDynamicAttribute(name, attribute);
    }

    return new DefaultDynamicProperty(name, attribute);
  }

  var DynamicAttribute = function DynamicAttribute(attribute) {
    this.attribute = attribute;
  };
  var SimpleDynamicAttribute = /*#__PURE__*/function (_DynamicAttribute) {
    _inheritsLoose(SimpleDynamicAttribute, _DynamicAttribute);

    function SimpleDynamicAttribute() {
      return _DynamicAttribute.apply(this, arguments) || this;
    }

    var _proto = SimpleDynamicAttribute.prototype;

    _proto.set = function set(dom, value, _env) {
      var normalizedValue = normalizeValue(value);

      if (normalizedValue !== null) {
        var _this$attribute = this.attribute,
            name = _this$attribute.name,
            namespace = _this$attribute.namespace;

        dom.__setAttribute(name, normalizedValue, namespace);
      }
    };

    _proto.update = function update(value, _env) {
      var normalizedValue = normalizeValue(value);
      var _this$attribute2 = this.attribute,
          element = _this$attribute2.element,
          name = _this$attribute2.name;

      if (normalizedValue === null) {
        element.removeAttribute(name);
      } else {
        element.setAttribute(name, normalizedValue);
      }
    };

    return SimpleDynamicAttribute;
  }(DynamicAttribute);
  var DefaultDynamicProperty = /*#__PURE__*/function (_DynamicAttribute2) {
    _inheritsLoose(DefaultDynamicProperty, _DynamicAttribute2);

    function DefaultDynamicProperty(normalizedName, attribute) {
      var _this;

      _this = _DynamicAttribute2.call(this, attribute) || this;
      _this.normalizedName = normalizedName;
      return _this;
    }

    var _proto2 = DefaultDynamicProperty.prototype;

    _proto2.set = function set(dom, value, _env) {
      if (value !== null && value !== undefined) {
        this.value = value;

        dom.__setProperty(this.normalizedName, value);
      }
    };

    _proto2.update = function update(value, _env) {
      var element = this.attribute.element;

      if (this.value !== value) {
        element[this.normalizedName] = this.value = value;

        if (value === null || value === undefined) {
          this.removeAttribute();
        }
      }
    };

    _proto2.removeAttribute = function removeAttribute() {
      // TODO this sucks but to preserve properties first and to meet current
      // semantics we must do this.
      var _this$attribute3 = this.attribute,
          element = _this$attribute3.element,
          namespace = _this$attribute3.namespace;

      if (namespace) {
        element.removeAttributeNS(namespace, this.normalizedName);
      } else {
        element.removeAttribute(this.normalizedName);
      }
    };

    return DefaultDynamicProperty;
  }(DynamicAttribute);
  var SafeDynamicProperty = /*#__PURE__*/function (_DefaultDynamicProper) {
    _inheritsLoose(SafeDynamicProperty, _DefaultDynamicProper);

    function SafeDynamicProperty() {
      return _DefaultDynamicProper.apply(this, arguments) || this;
    }

    var _proto3 = SafeDynamicProperty.prototype;

    _proto3.set = function set(dom, value, env) {
      var _this$attribute4 = this.attribute,
          element = _this$attribute4.element,
          name = _this$attribute4.name;
      var sanitized = sanitizeAttributeValue(element, name, value);

      _DefaultDynamicProper.prototype.set.call(this, dom, sanitized, env);
    };

    _proto3.update = function update(value, env) {
      var _this$attribute5 = this.attribute,
          element = _this$attribute5.element,
          name = _this$attribute5.name;
      var sanitized = sanitizeAttributeValue(element, name, value);

      _DefaultDynamicProper.prototype.update.call(this, sanitized, env);
    };

    return SafeDynamicProperty;
  }(DefaultDynamicProperty);
  var SafeDynamicAttribute = /*#__PURE__*/function (_SimpleDynamicAttribu) {
    _inheritsLoose(SafeDynamicAttribute, _SimpleDynamicAttribu);

    function SafeDynamicAttribute() {
      return _SimpleDynamicAttribu.apply(this, arguments) || this;
    }

    var _proto4 = SafeDynamicAttribute.prototype;

    _proto4.set = function set(dom, value, env) {
      var _this$attribute6 = this.attribute,
          element = _this$attribute6.element,
          name = _this$attribute6.name;
      var sanitized = sanitizeAttributeValue(element, name, value);

      _SimpleDynamicAttribu.prototype.set.call(this, dom, sanitized, env);
    };

    _proto4.update = function update(value, env) {
      var _this$attribute7 = this.attribute,
          element = _this$attribute7.element,
          name = _this$attribute7.name;
      var sanitized = sanitizeAttributeValue(element, name, value);

      _SimpleDynamicAttribu.prototype.update.call(this, sanitized, env);
    };

    return SafeDynamicAttribute;
  }(SimpleDynamicAttribute);
  var InputValueDynamicAttribute = /*#__PURE__*/function (_DefaultDynamicProper2) {
    _inheritsLoose(InputValueDynamicAttribute, _DefaultDynamicProper2);

    function InputValueDynamicAttribute() {
      return _DefaultDynamicProper2.apply(this, arguments) || this;
    }

    var _proto5 = InputValueDynamicAttribute.prototype;

    _proto5.set = function set(dom, value) {
      dom.__setProperty('value', normalizeStringValue(value));
    };

    _proto5.update = function update(value) {
      var input = this.attribute.element;
      var currentValue = input.value;
      var normalizedValue = normalizeStringValue(value);

      if (currentValue !== normalizedValue) {
        input.value = normalizedValue;
      }
    };

    return InputValueDynamicAttribute;
  }(DefaultDynamicProperty);
  var OptionSelectedDynamicAttribute = /*#__PURE__*/function (_DefaultDynamicProper3) {
    _inheritsLoose(OptionSelectedDynamicAttribute, _DefaultDynamicProper3);

    function OptionSelectedDynamicAttribute() {
      return _DefaultDynamicProper3.apply(this, arguments) || this;
    }

    var _proto6 = OptionSelectedDynamicAttribute.prototype;

    _proto6.set = function set(dom, value) {
      if (value !== null && value !== undefined && value !== false) {
        dom.__setProperty('selected', true);
      }
    };

    _proto6.update = function update(value) {
      var option = this.attribute.element;

      if (value) {
        option.selected = true;
      } else {
        option.selected = false;
      }
    };

    return OptionSelectedDynamicAttribute;
  }(DefaultDynamicProperty);

  function isOptionSelected(tagName, attribute) {
    return tagName === 'OPTION' && attribute === 'selected';
  }

  function isUserInputValue(tagName, attribute) {
    return (tagName === 'INPUT' || tagName === 'TEXTAREA') && attribute === 'value';
  }

  function normalizeValue(value) {
    if (value === false || value === undefined || value === null || typeof value.toString === 'undefined') {
      return null;
    }

    if (value === true) {
      return '';
    } // onclick function etc in SSR


    if (typeof value === 'function') {
      return null;
    }

    return String(value);
  }

  var DebugStyleAttributeManager;

  if (env.DEBUG) {
    DebugStyleAttributeManager = /*#__PURE__*/function (_SimpleDynamicAttribu2) {
      _inheritsLoose(DebugStyleAttributeManager, _SimpleDynamicAttribu2);

      function DebugStyleAttributeManager() {
        return _SimpleDynamicAttribu2.apply(this, arguments) || this;
      }

      var _proto7 = DebugStyleAttributeManager.prototype;

      _proto7.set = function set(dom, value, env) {
        globalContext.warnIfStyleNotTrusted(value);

        _SimpleDynamicAttribu2.prototype.set.call(this, dom, value, env);
      };

      _proto7.update = function update(value, env) {
        globalContext.warnIfStyleNotTrusted(value);

        _SimpleDynamicAttribu2.prototype.update.call(this, value, env);
      };

      return DebugStyleAttributeManager;
    }(SimpleDynamicAttribute);
  }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _inheritsLoose$1(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var _a;

  var First = /*#__PURE__*/function () {
    function First(node) {
      this.node = node;
    }

    var _proto = First.prototype;

    _proto.firstNode = function firstNode() {
      return this.node;
    };

    return First;
  }();

  var Last = /*#__PURE__*/function () {
    function Last(node) {
      this.node = node;
    }

    var _proto2 = Last.prototype;

    _proto2.lastNode = function lastNode() {
      return this.node;
    };

    return Last;
  }();
  var CURSOR_STACK = util.symbol('CURSOR_STACK');
  var NewElementBuilder = /*#__PURE__*/function () {
    function NewElementBuilder(env, parentNode, nextSibling) {
      this.constructing = null;
      this.operations = null;
      this[_a] = new util.Stack();
      this.modifierStack = new util.Stack();
      this.blockStack = new util.Stack();
      this.pushElement(parentNode, nextSibling);
      this.env = env;
      this.dom = env.getAppendOperations();
      this.updateOperations = env.getDOM();
    }

    NewElementBuilder.forInitialRender = function forInitialRender(env, cursor) {
      return new this(env, cursor.element, cursor.nextSibling).initialize();
    };

    NewElementBuilder.resume = function resume(env, block) {
      var parentNode = block.parentElement();
      var nextSibling = block.reset(env);
      var stack = new this(env, parentNode, nextSibling).initialize();
      stack.pushLiveBlock(block);
      return stack;
    };

    var _proto4 = NewElementBuilder.prototype;

    _proto4.initialize = function initialize() {
      this.pushSimpleBlock();
      return this;
    };

    _proto4.debugBlocks = function debugBlocks() {
      return this.blockStack.toArray();
    };

    _proto4.block = function block() {
      return this.blockStack.current;
    };

    _proto4.popElement = function popElement() {
      this[CURSOR_STACK].pop();
      this[CURSOR_STACK].current;
    };

    _proto4.pushSimpleBlock = function pushSimpleBlock() {
      return this.pushLiveBlock(new SimpleLiveBlock(this.element));
    };

    _proto4.pushUpdatableBlock = function pushUpdatableBlock() {
      return this.pushLiveBlock(new UpdatableBlockImpl(this.element));
    };

    _proto4.pushBlockList = function pushBlockList(list) {
      return this.pushLiveBlock(new LiveBlockList(this.element, list));
    };

    _proto4.pushLiveBlock = function pushLiveBlock(block, isRemote) {
      if (isRemote === void 0) {
        isRemote = false;
      }

      var current = this.blockStack.current;

      if (current !== null) {
        if (!isRemote) {
          current.didAppendBounds(block);
        }
      }

      this.__openBlock();

      this.blockStack.push(block);
      return block;
    };

    _proto4.popBlock = function popBlock() {
      this.block().finalize(this);

      this.__closeBlock();

      return this.blockStack.pop();
    };

    _proto4.__openBlock = function __openBlock() {};

    _proto4.__closeBlock = function __closeBlock() {} // todo return seems unused
    ;

    _proto4.openElement = function openElement(tag) {
      var element = this.__openElement(tag);

      this.constructing = element;
      return element;
    };

    _proto4.__openElement = function __openElement(tag) {
      return this.dom.createElement(tag, this.element);
    };

    _proto4.flushElement = function flushElement(modifiers) {
      var parent = this.element;
      var element = this.constructing;

      this.__flushElement(parent, element);

      this.constructing = null;
      this.operations = null;
      this.pushModifiers(modifiers);
      this.pushElement(element, null);
      this.didOpenElement(element);
    };

    _proto4.__flushElement = function __flushElement(parent, constructing) {
      this.dom.insertBefore(parent, constructing, this.nextSibling);
    };

    _proto4.closeElement = function closeElement() {
      this.willCloseElement();
      this.popElement();
      return this.popModifiers();
    };

    _proto4.pushRemoteElement = function pushRemoteElement(element, guid, insertBefore) {
      return this.__pushRemoteElement(element, guid, insertBefore);
    };

    _proto4.__pushRemoteElement = function __pushRemoteElement(element, _guid, insertBefore) {
      this.pushElement(element, insertBefore);

      if (insertBefore === undefined) {
        while (element.lastChild) {
          element.removeChild(element.lastChild);
        }
      }

      var block = new RemoteLiveBlock(element);
      return this.pushLiveBlock(block, true);
    };

    _proto4.popRemoteElement = function popRemoteElement() {
      this.popBlock();
      this.popElement();
    };

    _proto4.pushElement = function pushElement(element, nextSibling) {
      if (nextSibling === void 0) {
        nextSibling = null;
      }

      this[CURSOR_STACK].push(new CursorImpl(element, nextSibling));
    };

    _proto4.pushModifiers = function pushModifiers(modifiers) {
      this.modifierStack.push(modifiers);
    };

    _proto4.popModifiers = function popModifiers() {
      return this.modifierStack.pop();
    };

    _proto4.didAppendBounds = function didAppendBounds(bounds) {
      this.block().didAppendBounds(bounds);
      return bounds;
    };

    _proto4.didAppendNode = function didAppendNode(node) {
      this.block().didAppendNode(node);
      return node;
    };

    _proto4.didOpenElement = function didOpenElement(element) {
      this.block().openElement(element);
      return element;
    };

    _proto4.willCloseElement = function willCloseElement() {
      this.block().closeElement();
    };

    _proto4.appendText = function appendText(string) {
      return this.didAppendNode(this.__appendText(string));
    };

    _proto4.__appendText = function __appendText(text) {
      var dom = this.dom,
          element = this.element,
          nextSibling = this.nextSibling;
      var node = dom.createTextNode(text);
      dom.insertBefore(element, node, nextSibling);
      return node;
    };

    _proto4.__appendNode = function __appendNode(node) {
      this.dom.insertBefore(this.element, node, this.nextSibling);
      return node;
    };

    _proto4.__appendFragment = function __appendFragment(fragment) {
      var first = fragment.firstChild;

      if (first) {
        var ret = new ConcreteBounds(this.element, first, fragment.lastChild);
        this.dom.insertBefore(this.element, fragment, this.nextSibling);
        return ret;
      } else {
        return new SingleNodeBounds(this.element, this.__appendComment(''));
      }
    };

    _proto4.__appendHTML = function __appendHTML(html) {
      return this.dom.insertHTMLBefore(this.element, this.nextSibling, html);
    };

    _proto4.appendDynamicHTML = function appendDynamicHTML(value) {
      var bounds = this.trustedContent(value);
      this.didAppendBounds(bounds);
    };

    _proto4.appendDynamicText = function appendDynamicText(value) {
      var node = this.untrustedContent(value);
      this.didAppendNode(node);
      return node;
    };

    _proto4.appendDynamicFragment = function appendDynamicFragment(value) {
      var bounds = this.__appendFragment(value);

      this.didAppendBounds(bounds);
    };

    _proto4.appendDynamicNode = function appendDynamicNode(value) {
      var node = this.__appendNode(value);

      var bounds = new SingleNodeBounds(this.element, node);
      this.didAppendBounds(bounds);
    };

    _proto4.trustedContent = function trustedContent(value) {
      return this.__appendHTML(value);
    };

    _proto4.untrustedContent = function untrustedContent(value) {
      return this.__appendText(value);
    };

    _proto4.appendComment = function appendComment(string) {
      return this.didAppendNode(this.__appendComment(string));
    };

    _proto4.__appendComment = function __appendComment(string) {
      var dom = this.dom,
          element = this.element,
          nextSibling = this.nextSibling;
      var node = dom.createComment(string);
      dom.insertBefore(element, node, nextSibling);
      return node;
    };

    _proto4.__setAttribute = function __setAttribute(name, value, namespace) {
      this.dom.setAttribute(this.constructing, name, value, namespace);
    };

    _proto4.__setProperty = function __setProperty(name, value) {
      this.constructing[name] = value;
    };

    _proto4.setStaticAttribute = function setStaticAttribute(name, value, namespace) {
      this.__setAttribute(name, value, namespace);
    };

    _proto4.setDynamicAttribute = function setDynamicAttribute(name, value, trusting, namespace) {
      var element = this.constructing;
      var attribute = dynamicAttribute(element, name, namespace, trusting);
      attribute.set(this, value, this.env);
      return attribute;
    };

    _createClass(NewElementBuilder, [{
      key: "element",
      get: function get() {
        return this[CURSOR_STACK].current.element;
      }
    }, {
      key: "nextSibling",
      get: function get() {
        return this[CURSOR_STACK].current.nextSibling;
      }
    }, {
      key: "hasBlocks",
      get: function get() {
        return this.blockStack.size > 0;
      }
    }]);

    return NewElementBuilder;
  }();
  _a = CURSOR_STACK;
  var SimpleLiveBlock = /*#__PURE__*/function () {
    function SimpleLiveBlock(parent) {
      this.parent = parent;
      this.first = null;
      this.last = null;
      this.nesting = 0;
    }

    var _proto5 = SimpleLiveBlock.prototype;

    _proto5.parentElement = function parentElement() {
      return this.parent;
    };

    _proto5.firstNode = function firstNode() {
      var first = this.first;
      return first.firstNode();
    };

    _proto5.lastNode = function lastNode() {
      var last = this.last;
      return last.lastNode();
    };

    _proto5.openElement = function openElement(element) {
      this.didAppendNode(element);
      this.nesting++;
    };

    _proto5.closeElement = function closeElement() {
      this.nesting--;
    };

    _proto5.didAppendNode = function didAppendNode(node) {
      if (this.nesting !== 0) return;

      if (!this.first) {
        this.first = new First(node);
      }

      this.last = new Last(node);
    };

    _proto5.didAppendBounds = function didAppendBounds(bounds) {
      if (this.nesting !== 0) return;

      if (!this.first) {
        this.first = bounds;
      }

      this.last = bounds;
    };

    _proto5.finalize = function finalize(stack) {
      if (this.first === null) {
        stack.appendComment('');
      }
    };

    return SimpleLiveBlock;
  }();
  var RemoteLiveBlock = /*#__PURE__*/function (_SimpleLiveBlock) {
    _inheritsLoose$1(RemoteLiveBlock, _SimpleLiveBlock);

    function RemoteLiveBlock(parent) {
      var _this;

      _this = _SimpleLiveBlock.call(this, parent) || this;
      destroyable.registerDestructor(_assertThisInitialized(_this), function () {
        // In general, you only need to clear the root of a hierarchy, and should never
        // need to clear any child nodes. This is an important constraint that gives us
        // a strong guarantee that clearing a subtree is a single DOM operation.
        //
        // Because remote blocks are not normally physically nested inside of the tree
        // that they are logically nested inside, we manually clear remote blocks when
        // a logical parent is cleared.
        //
        // HOWEVER, it is currently possible for a remote block to be physically nested
        // inside of the block it is logically contained inside of. This happens when
        // the remote block is appended to the end of the application's entire element.
        //
        // The problem with that scenario is that Glimmer believes that it owns more of
        // the DOM than it actually does. The code is attempting to write past the end
        // of the Glimmer-managed root, but Glimmer isn't aware of that.
        //
        // The correct solution to that problem is for Glimmer to be aware of the end
        // of the bounds that it owns, and once we make that change, this check could
        // be removed.
        //
        // For now, a more targeted fix is to check whether the node was already removed
        // and avoid clearing the node if it was. In most cases this shouldn't happen,
        // so this might hide bugs where the code clears nested nodes unnecessarily,
        // so we should eventually try to do the correct fix.
        if (_this.parentElement() === _this.firstNode().parentNode) {
          clear(_assertThisInitialized(_this));
        }
      });
      return _this;
    }

    return RemoteLiveBlock;
  }(SimpleLiveBlock);
  var UpdatableBlockImpl = /*#__PURE__*/function (_SimpleLiveBlock2) {
    _inheritsLoose$1(UpdatableBlockImpl, _SimpleLiveBlock2);

    function UpdatableBlockImpl() {
      return _SimpleLiveBlock2.apply(this, arguments) || this;
    }

    var _proto6 = UpdatableBlockImpl.prototype;

    _proto6.reset = function reset() {
      destroyable.destroy(this);
      var nextSibling = clear(this);
      this.first = null;
      this.last = null;
      this.nesting = 0;
      return nextSibling;
    };

    return UpdatableBlockImpl;
  }(SimpleLiveBlock); // FIXME: All the noops in here indicate a modelling problem

  var LiveBlockList = /*#__PURE__*/function () {
    function LiveBlockList(parent, boundList) {
      this.parent = parent;
      this.boundList = boundList;
      this.parent = parent;
      this.boundList = boundList;
    }

    var _proto7 = LiveBlockList.prototype;

    _proto7.parentElement = function parentElement() {
      return this.parent;
    };

    _proto7.firstNode = function firstNode() {
      var head = this.boundList[0];
      return head.firstNode();
    };

    _proto7.lastNode = function lastNode() {
      var boundList = this.boundList;
      var tail = boundList[boundList.length - 1];
      return tail.lastNode();
    };

    _proto7.openElement = function openElement(_element) {
    };

    _proto7.closeElement = function closeElement() {
    };

    _proto7.didAppendNode = function didAppendNode(_node) {
    };

    _proto7.didAppendBounds = function didAppendBounds(_bounds) {};

    _proto7.finalize = function finalize(_stack) {
    };

    return LiveBlockList;
  }();
  function clientBuilder(env, cursor) {
    return NewElementBuilder.forInitialRender(env, cursor);
  }

  var AppendOpcodes = /*#__PURE__*/function () {
    function AppendOpcodes() {
      this.evaluateOpcode = util.fillNulls(104
      /* Size */
      ).slice();
    }

    var _proto = AppendOpcodes.prototype;

    _proto.add = function add(name, evaluate, kind) {
      if (kind === void 0) {
        kind = 'syscall';
      }

      this.evaluateOpcode[name] = {
        syscall: kind !== 'machine',
        evaluate: evaluate
      };
    };

    _proto.debugBefore = function debugBefore(vm$1, opcode) {
      var params = undefined;
      var opName = undefined;

      var sp;

      return {
        sp: sp,
        pc: vm$1.fetchValue(vm.$pc),
        name: opName,
        params: params,
        type: opcode.type,
        isMachine: opcode.isMachine,
        size: opcode.size,
        state: undefined
      };
    };

    _proto.debugAfter = function debugAfter(vm$1, pre) {
      var sp = pre.sp,
          type = pre.type,
          isMachine = pre.isMachine,
          pc = pre.pc;
    };

    _proto.evaluate = function evaluate(vm, opcode, type) {
      var operation = this.evaluateOpcode[type];

      if (operation.syscall) {
        operation.evaluate(vm, opcode);
      } else {
        operation.evaluate(vm[INNER_VM], opcode);
      }
    };

    return AppendOpcodes;
  }();
  var APPEND_OPCODES = new AppendOpcodes();

  function createConcatRef(partsRefs) {
    return reference.createComputeRef(function () {
      var parts = new Array();

      for (var i = 0; i < partsRefs.length; i++) {
        var value = reference.valueForRef(partsRefs[i]);

        if (value !== null && value !== undefined) {
          parts[i] = castToString(value);
        }
      }

      if (parts.length > 0) {
        return parts.join('');
      }

      return null;
    });
  }

  function castToString(value) {
    if (typeof value.toString !== 'function') {
      return '';
    }

    return String(value);
  }

  var TYPE = util.symbol('TYPE');
  var INNER = util.symbol('INNER');
  var OWNER = util.symbol('OWNER');
  var ARGS$1 = util.symbol('ARGS');
  var RESOLVED = util.symbol('RESOLVED');
  var CURRIED_VALUES = new util._WeakSet();
  function isCurriedValue(value) {
    return CURRIED_VALUES.has(value);
  }
  function isCurriedType(value, type) {
    return isCurriedValue(value) && value[TYPE] === type;
  }
  var CurriedValue =
  /** @internal */
  function CurriedValue(type, inner, owner, args, resolved) {
    if (resolved === void 0) {
      resolved = false;
    }

    CURRIED_VALUES.add(this);
    this[TYPE] = type;
    this[INNER] = inner;
    this[OWNER] = owner;
    this[ARGS$1] = args;
    this[RESOLVED] = resolved;
  };
  function resolveCurriedValue(curriedValue) {
    var currentWrapper = curriedValue;
    var positional;
    var named;
    var definition, owner, resolved;

    while (true) {
      var _currentWrapper = currentWrapper,
          curriedArgs = _currentWrapper[ARGS$1],
          inner = _currentWrapper[INNER];

      if (curriedArgs !== null) {
        var curriedNamed = curriedArgs.named,
            curriedPositional = curriedArgs.positional;

        if (curriedPositional.length > 0) {
          positional = positional === undefined ? curriedPositional : curriedPositional.concat(positional);
        }

        if (named === undefined) {
          named = [];
        }

        named.unshift(curriedNamed);
      }

      if (!isCurriedValue(inner)) {
        // Save off the owner that this helper was curried with. Later on,
        // we'll fetch the value of this register and set it as the owner on the
        // new root scope.
        definition = inner;
        owner = currentWrapper[OWNER];
        resolved = currentWrapper[RESOLVED];
        break;
      }

      currentWrapper = inner;
    }

    return {
      definition: definition,
      owner: owner,
      resolved: resolved,
      positional: positional,
      named: named
    };
  }
  function curry(type, spec, owner, args, resolved) {
    if (resolved === void 0) {
      resolved = false;
    }

    return new CurriedValue(type, spec, owner, args, resolved);
  }

  function createCurryRef(type, inner, owner, args, resolver, isStrict) {
    var lastValue, curriedDefinition;
    return reference.createComputeRef(function () {
      var value = reference.valueForRef(inner);

      if (value === lastValue) {
        return curriedDefinition;
      }

      if (isCurriedType(value, type)) {
        curriedDefinition = args ? curry(type, value, owner, args) : args;
      } else if (type === 0
      /* Component */
      && typeof value === 'string' && value) {
        // Only components should enter this path, as helpers and modifiers do not
        // support string based resolution
        if (env.DEBUG) {
          if (isStrict) {
            throw new Error("Attempted to resolve a dynamic component with a string definition, `" + value + "` in a strict mode template. In strict mode, using strings to resolve component definitions is prohibited. You can instead import the component definition and use it directly.");
          }

          var resolvedDefinition = resolver.lookupComponent(value, owner);

          if (!resolvedDefinition) {
            throw new Error("Attempted to resolve `" + value + "`, which was expected to be a component, but nothing was found.");
          }
        }

        curriedDefinition = curry(type, value, owner, args);
      } else if (util.isObject(value)) {
        curriedDefinition = curry(type, value, owner, args);
      } else {
        curriedDefinition = null;
      }

      lastValue = value;
      return curriedDefinition;
    });
  }

  function _defineProperties$1(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass$1(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$1(Constructor.prototype, protoProps); if (staticProps) _defineProperties$1(Constructor, staticProps); return Constructor; }
  /*
    The calling convention is:

    * 0-N block arguments at the bottom
    * 0-N positional arguments next (left-to-right)
    * 0-N named arguments next
  */

  var VMArgumentsImpl = /*#__PURE__*/function () {
    function VMArgumentsImpl() {
      this.stack = null;
      this.positional = new PositionalArgumentsImpl();
      this.named = new NamedArgumentsImpl();
      this.blocks = new BlockArgumentsImpl();
    }

    var _proto = VMArgumentsImpl.prototype;

    _proto.empty = function empty(stack) {
      var base = stack[REGISTERS][vm.$sp] + 1;
      this.named.empty(stack, base);
      this.positional.empty(stack, base);
      this.blocks.empty(stack, base);
      return this;
    };

    _proto.setup = function setup(stack, names, blockNames, positionalCount, atNames) {
      this.stack = stack;
      /*
             | ... | blocks      | positional  | named |
             | ... | b0    b1    | p0 p1 p2 p3 | n0 n1 |
       index | ... | 4/5/6 7/8/9 | 10 11 12 13 | 14 15 |
                     ^             ^             ^  ^
                   bbase         pbase       nbase  sp
      */

      var named = this.named;
      var namedCount = names.length;
      var namedBase = stack[REGISTERS][vm.$sp] - namedCount + 1;
      named.setup(stack, namedBase, namedCount, names, atNames);
      var positional = this.positional;
      var positionalBase = namedBase - positionalCount;
      positional.setup(stack, positionalBase, positionalCount);
      var blocks = this.blocks;
      var blocksCount = blockNames.length;
      var blocksBase = positionalBase - blocksCount * 3;
      blocks.setup(stack, blocksBase, blocksCount, blockNames);
    };

    _proto.at = function at(pos) {
      return this.positional.at(pos);
    };

    _proto.realloc = function realloc(offset) {
      var stack = this.stack;

      if (offset > 0 && stack !== null) {
        var positional = this.positional,
            named = this.named;
        var newBase = positional.base + offset;
        var length = positional.length + named.length;

        for (var i = length - 1; i >= 0; i--) {
          stack.copy(i + positional.base, i + newBase);
        }

        positional.base += offset;
        named.base += offset;
        stack[REGISTERS][vm.$sp] += offset;
      }
    };

    _proto.capture = function capture() {
      var positional = this.positional.length === 0 ? EMPTY_POSITIONAL : this.positional.capture();
      var named = this.named.length === 0 ? EMPTY_NAMED : this.named.capture();
      return {
        named: named,
        positional: positional
      };
    };

    _proto.clear = function clear() {
      var stack = this.stack,
          length = this.length;
      if (length > 0 && stack !== null) stack.pop(length);
    };

    _createClass$1(VMArgumentsImpl, [{
      key: "base",
      get: function get() {
        return this.blocks.base;
      }
    }, {
      key: "length",
      get: function get() {
        return this.positional.length + this.named.length + this.blocks.length * 3;
      }
    }]);

    return VMArgumentsImpl;
  }();
  var EMPTY_REFERENCES = util.emptyArray();
  var PositionalArgumentsImpl = /*#__PURE__*/function () {
    function PositionalArgumentsImpl() {
      this.base = 0;
      this.length = 0;
      this.stack = null;
      this._references = null;
    }

    var _proto2 = PositionalArgumentsImpl.prototype;

    _proto2.empty = function empty(stack, base) {
      this.stack = stack;
      this.base = base;
      this.length = 0;
      this._references = EMPTY_REFERENCES;
    };

    _proto2.setup = function setup(stack, base, length) {
      this.stack = stack;
      this.base = base;
      this.length = length;

      if (length === 0) {
        this._references = EMPTY_REFERENCES;
      } else {
        this._references = null;
      }
    };

    _proto2.at = function at(position) {
      var base = this.base,
          length = this.length,
          stack = this.stack;

      if (position < 0 || position >= length) {
        return reference.UNDEFINED_REFERENCE;
      }

      return stack.get(position, base);
    };

    _proto2.capture = function capture() {
      return this.references;
    };

    _proto2.prepend = function prepend(other) {
      var additions = other.length;

      if (additions > 0) {
        var base = this.base,
            length = this.length,
            stack = this.stack;
        this.base = base = base - additions;
        this.length = length + additions;

        for (var i = 0; i < additions; i++) {
          stack.set(other[i], i, base);
        }

        this._references = null;
      }
    };

    _createClass$1(PositionalArgumentsImpl, [{
      key: "references",
      get: function get() {
        var references = this._references;

        if (!references) {
          var stack = this.stack,
              base = this.base,
              length = this.length;
          references = this._references = stack.slice(base, base + length);
        }

        return references;
      }
    }]);

    return PositionalArgumentsImpl;
  }();
  var NamedArgumentsImpl = /*#__PURE__*/function () {
    function NamedArgumentsImpl() {
      this.base = 0;
      this.length = 0;
      this._references = null;
      this._names = util.EMPTY_STRING_ARRAY;
      this._atNames = util.EMPTY_STRING_ARRAY;
    }

    var _proto3 = NamedArgumentsImpl.prototype;

    _proto3.empty = function empty(stack, base) {
      this.stack = stack;
      this.base = base;
      this.length = 0;
      this._references = EMPTY_REFERENCES;
      this._names = util.EMPTY_STRING_ARRAY;
      this._atNames = util.EMPTY_STRING_ARRAY;
    };

    _proto3.setup = function setup(stack, base, length, names, atNames) {
      this.stack = stack;
      this.base = base;
      this.length = length;

      if (length === 0) {
        this._references = EMPTY_REFERENCES;
        this._names = util.EMPTY_STRING_ARRAY;
        this._atNames = util.EMPTY_STRING_ARRAY;
      } else {
        this._references = null;

        if (atNames) {
          this._names = null;
          this._atNames = names;
        } else {
          this._names = names;
          this._atNames = null;
        }
      }
    };

    _proto3.has = function has(name) {
      return this.names.indexOf(name) !== -1;
    };

    _proto3.get = function get(name, atNames) {
      if (atNames === void 0) {
        atNames = false;
      }

      var base = this.base,
          stack = this.stack;
      var names = atNames ? this.atNames : this.names;
      var idx = names.indexOf(name);

      if (idx === -1) {
        return reference.UNDEFINED_REFERENCE;
      }

      var ref = stack.get(idx, base);

      if (env.DEBUG) {
        return reference.createDebugAliasRef(atNames ? name : "@" + name, ref);
      } else {
        return ref;
      }
    };

    _proto3.capture = function capture() {
      var names = this.names,
          references = this.references;
      var map = util.dict();

      for (var i = 0; i < names.length; i++) {
        var name = names[i];

        if (env.DEBUG) {
          map[name] = reference.createDebugAliasRef("@" + name, references[i]);
        } else {
          map[name] = references[i];
        }
      }

      return map;
    };

    _proto3.merge = function merge(other) {
      var keys = Object.keys(other);

      if (keys.length > 0) {
        var names = this.names,
            length = this.length,
            stack = this.stack;
        var newNames = names.slice();

        for (var i = 0; i < keys.length; i++) {
          var name = keys[i];
          var idx = newNames.indexOf(name);

          if (idx === -1) {
            length = newNames.push(name);
            stack.push(other[name]);
          }
        }

        this.length = length;
        this._references = null;
        this._names = newNames;
        this._atNames = null;
      }
    };

    _proto3.toSyntheticName = function toSyntheticName(name) {
      return name.slice(1);
    };

    _proto3.toAtName = function toAtName(name) {
      return "@" + name;
    };

    _createClass$1(NamedArgumentsImpl, [{
      key: "names",
      get: function get() {
        var names = this._names;

        if (!names) {
          names = this._names = this._atNames.map(this.toSyntheticName);
        }

        return names;
      }
    }, {
      key: "atNames",
      get: function get() {
        var atNames = this._atNames;

        if (!atNames) {
          atNames = this._atNames = this._names.map(this.toAtName);
        }

        return atNames;
      }
    }, {
      key: "references",
      get: function get() {
        var references = this._references;

        if (!references) {
          var base = this.base,
              length = this.length,
              stack = this.stack;
          references = this._references = stack.slice(base, base + length);
        }

        return references;
      }
    }]);

    return NamedArgumentsImpl;
  }();

  function toSymbolName(name) {
    return "&" + name;
  }

  var EMPTY_BLOCK_VALUES = util.emptyArray();
  var BlockArgumentsImpl = /*#__PURE__*/function () {
    function BlockArgumentsImpl() {
      this.internalValues = null;
      this._symbolNames = null;
      this.internalTag = null;
      this.names = util.EMPTY_STRING_ARRAY;
      this.length = 0;
      this.base = 0;
    }

    var _proto4 = BlockArgumentsImpl.prototype;

    _proto4.empty = function empty(stack, base) {
      this.stack = stack;
      this.names = util.EMPTY_STRING_ARRAY;
      this.base = base;
      this.length = 0;
      this._symbolNames = null;
      this.internalTag = validator.CONSTANT_TAG;
      this.internalValues = EMPTY_BLOCK_VALUES;
    };

    _proto4.setup = function setup(stack, base, length, names) {
      this.stack = stack;
      this.names = names;
      this.base = base;
      this.length = length;
      this._symbolNames = null;

      if (length === 0) {
        this.internalTag = validator.CONSTANT_TAG;
        this.internalValues = EMPTY_BLOCK_VALUES;
      } else {
        this.internalTag = null;
        this.internalValues = null;
      }
    };

    _proto4.has = function has(name) {
      return this.names.indexOf(name) !== -1;
    };

    _proto4.get = function get(name) {
      var idx = this.names.indexOf(name);

      if (idx === -1) {
        return null;
      }

      var base = this.base,
          stack = this.stack;
      var table = stack.get(idx * 3, base);
      var scope = stack.get(idx * 3 + 1, base);
      var handle = stack.get(idx * 3 + 2, base);
      return handle === null ? null : [handle, scope, table];
    };

    _proto4.capture = function capture() {
      return new CapturedBlockArgumentsImpl(this.names, this.values);
    };

    _createClass$1(BlockArgumentsImpl, [{
      key: "values",
      get: function get() {
        var values = this.internalValues;

        if (!values) {
          var base = this.base,
              length = this.length,
              stack = this.stack;
          values = this.internalValues = stack.slice(base, base + length * 3);
        }

        return values;
      }
    }, {
      key: "symbolNames",
      get: function get() {
        var symbolNames = this._symbolNames;

        if (symbolNames === null) {
          symbolNames = this._symbolNames = this.names.map(toSymbolName);
        }

        return symbolNames;
      }
    }]);

    return BlockArgumentsImpl;
  }();

  var CapturedBlockArgumentsImpl = /*#__PURE__*/function () {
    function CapturedBlockArgumentsImpl(names, values) {
      this.names = names;
      this.values = values;
      this.length = names.length;
    }

    var _proto5 = CapturedBlockArgumentsImpl.prototype;

    _proto5.has = function has(name) {
      return this.names.indexOf(name) !== -1;
    };

    _proto5.get = function get(name) {
      var idx = this.names.indexOf(name);
      if (idx === -1) return null;
      return [this.values[idx * 3 + 2], this.values[idx * 3 + 1], this.values[idx * 3]];
    };

    return CapturedBlockArgumentsImpl;
  }();

  function createCapturedArgs(named, positional) {
    return {
      named: named,
      positional: positional
    };
  }
  function reifyNamed(named) {
    var reified = util.dict();

    for (var key in named) {
      reified[key] = reference.valueForRef(named[key]);
    }

    return reified;
  }
  function reifyPositional(positional) {
    return positional.map(reference.valueForRef);
  }
  function reifyArgs(args) {
    return {
      named: reifyNamed(args.named),
      positional: reifyPositional(args.positional)
    };
  }
  var EMPTY_NAMED = Object.freeze(Object.create(null));
  var EMPTY_POSITIONAL = EMPTY_REFERENCES;
  var EMPTY_ARGS = createCapturedArgs(EMPTY_NAMED, EMPTY_POSITIONAL);

  APPEND_OPCODES.add(77
  /* Curry */
  , function (vm$1, _ref) {
    var type = _ref.op1,
        _isStrict = _ref.op2;
    var stack = vm$1.stack;
    var definition = stack.pop();
    var capturedArgs = stack.pop();
    var owner = vm$1.getOwner();
    var resolver = vm$1.runtime.resolver;
    var isStrict = false;

    if (env.DEBUG) {
      // strict check only happens in DEBUG builds, no reason to load it otherwise
      isStrict = vm$1[CONSTANTS].getValue(util.decodeHandle(_isStrict));
    }

    vm$1.loadValue(vm.$v0, createCurryRef(type, definition, owner, capturedArgs, resolver, isStrict));
  });
  APPEND_OPCODES.add(107
  /* DynamicHelper */
  , function (vm$1) {
    var stack = vm$1.stack;
    var ref = stack.pop();
    var args = stack.pop().capture();
    var helperRef;
    var initialOwner = vm$1.getOwner();
    var helperInstanceRef = reference.createComputeRef(function () {
      if (helperRef !== undefined) {
        destroyable.destroy(helperRef);
      }

      var definition = reference.valueForRef(ref);

      if (isCurriedType(definition, 1
      /* Helper */
      )) {
        var _resolveCurriedValue = resolveCurriedValue(definition),
            resolvedDef = _resolveCurriedValue.definition,
            owner = _resolveCurriedValue.owner,
            positional = _resolveCurriedValue.positional,
            named = _resolveCurriedValue.named;

        var helper = resolveHelper(vm$1[CONSTANTS], resolvedDef, ref);

        if (named !== undefined) {
          args.named = util.assign.apply(void 0, [{}].concat(named, [args.named]));
        }

        if (positional !== undefined) {
          args.positional = positional.concat(args.positional);
        }

        helperRef = helper(args, owner);
        destroyable.associateDestroyableChild(helperInstanceRef, helperRef);
      } else if (util.isObject(definition)) {
        var _helper = resolveHelper(vm$1[CONSTANTS], definition, ref);

        helperRef = _helper(args, initialOwner);

        if (destroyable._hasDestroyableChildren(helperRef)) {
          destroyable.associateDestroyableChild(helperInstanceRef, helperRef);
        }
      } else {
        helperRef = reference.UNDEFINED_REFERENCE;
      }
    });
    var helperValueRef = reference.createComputeRef(function () {
      reference.valueForRef(helperInstanceRef);
      return reference.valueForRef(helperRef);
    });
    vm$1.associateDestroyable(helperInstanceRef);
    vm$1.loadValue(vm.$v0, helperValueRef);
  });

  function resolveHelper(constants, definition, ref) {
    var handle = constants.helper(definition, null, true);

    if (env.DEBUG && handle === null) {
      throw new Error("Expected a dynamic helper definition, but received an object or function that did not have a helper manager associated with it. The dynamic invocation was `{{" + ref.debugLabel + "}}` or `(" + ref.debugLabel + ")`, and the incorrect definition is the value at the path `" + ref.debugLabel + "`, which was: " + util.debugToString(definition));
    }

    return constants.getValue(handle);
  }

  APPEND_OPCODES.add(16
  /* Helper */
  , function (vm$1, _ref2) {
    var handle = _ref2.op1;
    var stack = vm$1.stack;
    var helper = vm$1[CONSTANTS].getValue(handle);
    var args = stack.pop();
    var value = helper(args.capture(), vm$1.getOwner(), vm$1.dynamicScope());

    if (destroyable._hasDestroyableChildren(value)) {
      vm$1.associateDestroyable(value);
    }

    vm$1.loadValue(vm.$v0, value);
  });
  APPEND_OPCODES.add(21
  /* GetVariable */
  , function (vm, _ref3) {
    var symbol = _ref3.op1;
    var expr = vm.referenceForSymbol(symbol);
    vm.stack.push(expr);
  });
  APPEND_OPCODES.add(19
  /* SetVariable */
  , function (vm, _ref4) {
    var symbol = _ref4.op1;
    var expr = vm.stack.pop();
    vm.scope().bindSymbol(symbol, expr);
  });
  APPEND_OPCODES.add(20
  /* SetBlock */
  , function (vm, _ref5) {
    var symbol = _ref5.op1;
    var handle = vm.stack.pop();
    var scope = vm.stack.pop();
    var table = vm.stack.pop();
    vm.scope().bindBlock(symbol, [handle, scope, table]);
  });
  APPEND_OPCODES.add(102
  /* ResolveMaybeLocal */
  , function (vm, _ref6) {
    var _name = _ref6.op1;
    var name = vm[CONSTANTS].getValue(_name);
    var locals = vm.scope().getPartialMap();
    var ref = locals[name];

    if (ref === undefined) {
      ref = reference.childRefFor(vm.getSelf(), name);
    }

    vm.stack.push(ref);
  });
  APPEND_OPCODES.add(37
  /* RootScope */
  , function (vm, _ref7) {
    var symbols = _ref7.op1;
    vm.pushRootScope(symbols, vm.getOwner());
  });
  APPEND_OPCODES.add(22
  /* GetProperty */
  , function (vm, _ref8) {
    var _key = _ref8.op1;
    var key = vm[CONSTANTS].getValue(_key);
    var expr = vm.stack.pop();
    vm.stack.push(reference.childRefFor(expr, key));
  });
  APPEND_OPCODES.add(23
  /* GetBlock */
  , function (vm, _ref9) {
    var _block = _ref9.op1;
    var stack = vm.stack;
    var block = vm.scope().getBlock(_block);
    stack.push(block);
  });
  APPEND_OPCODES.add(24
  /* SpreadBlock */
  , function (vm) {
    var stack = vm.stack;
    var block = stack.pop();

    if (block && !isUndefinedReference(block)) {
      var handleOrCompilable = block[0],
          scope = block[1],
          table = block[2];
      stack.push(table);
      stack.push(scope);
      stack.push(handleOrCompilable);
    } else {
      stack.push(null);
      stack.push(null);
      stack.push(null);
    }
  });

  function isUndefinedReference(input) {
    return input === reference.UNDEFINED_REFERENCE;
  }

  APPEND_OPCODES.add(25
  /* HasBlock */
  , function (vm) {
    var stack = vm.stack;
    var block = stack.pop();

    if (block && !isUndefinedReference(block)) {
      stack.push(reference.TRUE_REFERENCE);
    } else {
      stack.push(reference.FALSE_REFERENCE);
    }
  });
  APPEND_OPCODES.add(26
  /* HasBlockParams */
  , function (vm) {
    // FIXME(mmun): should only need to push the symbol table
    var block = vm.stack.pop();
    var scope = vm.stack.pop();
    var table = vm.stack.pop();
    var hasBlockParams = table && table.parameters.length;
    vm.stack.push(hasBlockParams ? reference.TRUE_REFERENCE : reference.FALSE_REFERENCE);
  });
  APPEND_OPCODES.add(27
  /* Concat */
  , function (vm, _ref10) {
    var count = _ref10.op1;
    var out = new Array(count);

    for (var i = count; i > 0; i--) {
      var offset = i - 1;
      out[offset] = vm.stack.pop();
    }

    vm.stack.push(createConcatRef(out));
  });
  APPEND_OPCODES.add(109
  /* IfInline */
  , function (vm) {
    var condition = vm.stack.pop();
    var truthy = vm.stack.pop();
    var falsy = vm.stack.pop();
    vm.stack.push(reference.createComputeRef(function () {
      if (globalContext.toBool(reference.valueForRef(condition)) === true) {
        return reference.valueForRef(truthy);
      } else {
        return reference.valueForRef(falsy);
      }
    }));
  });
  APPEND_OPCODES.add(110
  /* Not */
  , function (vm) {
    var ref = vm.stack.pop();
    vm.stack.push(reference.createComputeRef(function () {
      return !globalContext.toBool(reference.valueForRef(ref));
    }));
  });
  APPEND_OPCODES.add(111
  /* GetDynamicVar */
  , function (vm) {
    var scope = vm.dynamicScope();
    var stack = vm.stack;
    var nameRef = stack.pop();
    stack.push(reference.createComputeRef(function () {
      var name = String(reference.valueForRef(nameRef));
      return reference.valueForRef(scope.get(name));
    }));
  });
  APPEND_OPCODES.add(112
  /* Log */
  , function (vm$1) {
    var _vm$stack$pop$capture = vm$1.stack.pop().capture(),
        positional = _vm$stack$pop$capture.positional;

    vm$1.loadValue(vm.$v0, reference.createComputeRef(function () {
      var _console;

      // eslint-disable-next-line no-console
      (_console = console).log.apply(_console, reifyPositional(positional));
    }));
  });

  function resolveComponent(resolver, constants, name, owner) {
    var definition = resolver.lookupComponent(name, owner);

    if (env.DEBUG && !definition) {
      throw new Error("Attempted to resolve `" + name + "`, which was expected to be a component, but nothing was found.");
    }

    return constants.resolvedComponent(definition, name);
  }

  /** @internal */
  function hasCustomDebugRenderTreeLifecycle(manager) {
    return 'getDebugCustomRenderTree' in manager;
  }

  function createClassListRef(list) {
    return reference.createComputeRef(function () {
      var ret = [];

      for (var i = 0; i < list.length; i++) {
        var ref = list[i];
        var value = normalizeStringValue(typeof ref === 'string' ? ref : reference.valueForRef(list[i]));
        if (value) ret.push(value);
      }

      return ret.length === 0 ? null : ret.join(' ');
    });
  }

  APPEND_OPCODES.add(39
  /* ChildScope */
  , function (vm) {
    return vm.pushChildScope();
  });
  APPEND_OPCODES.add(40
  /* PopScope */
  , function (vm) {
    return vm.popScope();
  });
  APPEND_OPCODES.add(59
  /* PushDynamicScope */
  , function (vm) {
    return vm.pushDynamicScope();
  });
  APPEND_OPCODES.add(60
  /* PopDynamicScope */
  , function (vm) {
    return vm.popDynamicScope();
  });
  APPEND_OPCODES.add(28
  /* Constant */
  , function (vm, _ref) {
    var other = _ref.op1;
    vm.stack.push(vm[CONSTANTS].getValue(util.decodeHandle(other)));
  });
  APPEND_OPCODES.add(29
  /* ConstantReference */
  , function (vm, _ref2) {
    var other = _ref2.op1;
    vm.stack.push(reference.createConstRef(vm[CONSTANTS].getValue(util.decodeHandle(other)), false));
  });
  APPEND_OPCODES.add(30
  /* Primitive */
  , function (vm, _ref3) {
    var primitive = _ref3.op1;
    var stack = vm.stack;

    if (util.isHandle(primitive)) {
      // it is a handle which does not already exist on the stack
      var value = vm[CONSTANTS].getValue(util.decodeHandle(primitive));
      stack.push(value);
    } else {
      // is already an encoded immediate or primitive handle
      stack.push(util.decodeImmediate(primitive));
    }
  });
  APPEND_OPCODES.add(31
  /* PrimitiveReference */
  , function (vm) {
    var stack = vm.stack;
    var value = stack.pop();
    var ref;

    if (value === undefined) {
      ref = reference.UNDEFINED_REFERENCE;
    } else if (value === null) {
      ref = reference.NULL_REFERENCE;
    } else if (value === true) {
      ref = reference.TRUE_REFERENCE;
    } else if (value === false) {
      ref = reference.FALSE_REFERENCE;
    } else {
      ref = reference.createPrimitiveRef(value);
    }

    stack.push(ref);
  });
  APPEND_OPCODES.add(33
  /* Dup */
  , function (vm, _ref4) {
    var register = _ref4.op1,
        offset = _ref4.op2;
    var position = vm.fetchValue(register) - offset;
    vm.stack.dup(position);
  });
  APPEND_OPCODES.add(34
  /* Pop */
  , function (vm, _ref5) {
    var count = _ref5.op1;
    vm.stack.pop(count);
  });
  APPEND_OPCODES.add(35
  /* Load */
  , function (vm, _ref6) {
    var register = _ref6.op1;
    vm.load(register);
  });
  APPEND_OPCODES.add(36
  /* Fetch */
  , function (vm, _ref7) {
    var register = _ref7.op1;
    vm.fetch(register);
  });
  APPEND_OPCODES.add(58
  /* BindDynamicScope */
  , function (vm, _ref8) {
    var _names = _ref8.op1;
    var names = vm[CONSTANTS].getArray(_names);
    vm.bindDynamicScope(names);
  });
  APPEND_OPCODES.add(69
  /* Enter */
  , function (vm, _ref9) {
    var args = _ref9.op1;
    vm.enter(args);
  });
  APPEND_OPCODES.add(70
  /* Exit */
  , function (vm) {
    vm.exit();
  });
  APPEND_OPCODES.add(63
  /* PushSymbolTable */
  , function (vm, _ref10) {
    var _table = _ref10.op1;
    var stack = vm.stack;
    stack.push(vm[CONSTANTS].getValue(_table));
  });
  APPEND_OPCODES.add(62
  /* PushBlockScope */
  , function (vm) {
    var stack = vm.stack;
    stack.push(vm.scope());
  });
  APPEND_OPCODES.add(61
  /* CompileBlock */
  , function (vm) {
    var stack = vm.stack;
    var block = stack.pop();

    if (block) {
      stack.push(vm.compile(block));
    } else {
      stack.push(null);
    }
  });
  APPEND_OPCODES.add(64
  /* InvokeYield */
  , function (vm) {
    var stack = vm.stack;
    var handle = stack.pop();
    var scope = stack.pop();
    var table = stack.pop();
    var args = stack.pop();

    if (table === null) {
      // To balance the pop{Frame,Scope}
      vm.pushFrame();
      vm.pushScope(scope !== null && scope !== void 0 ? scope : vm.scope());
      return;
    }

    var invokingScope = scope; // If necessary, create a child scope

    {
      var locals = table.parameters;
      var localsCount = locals.length;

      if (localsCount > 0) {
        invokingScope = invokingScope.child();

        for (var i = 0; i < localsCount; i++) {
          invokingScope.bindSymbol(locals[i], args.at(i));
        }
      }
    }
    vm.pushFrame();
    vm.pushScope(invokingScope);
    vm.call(handle);
  });
  APPEND_OPCODES.add(65
  /* JumpIf */
  , function (vm, _ref11) {
    var target = _ref11.op1;
    var reference$1 = vm.stack.pop();
    var value = Boolean(reference.valueForRef(reference$1));

    if (reference.isConstRef(reference$1)) {
      if (value === true) {
        vm["goto"](target);
      }
    } else {
      if (value === true) {
        vm["goto"](target);
      }

      vm.updateWith(new Assert(reference$1));
    }
  });
  APPEND_OPCODES.add(66
  /* JumpUnless */
  , function (vm, _ref12) {
    var target = _ref12.op1;
    var reference$1 = vm.stack.pop();
    var value = Boolean(reference.valueForRef(reference$1));

    if (reference.isConstRef(reference$1)) {
      if (value === false) {
        vm["goto"](target);
      }
    } else {
      if (value === false) {
        vm["goto"](target);
      }

      vm.updateWith(new Assert(reference$1));
    }
  });
  APPEND_OPCODES.add(67
  /* JumpEq */
  , function (vm, _ref13) {
    var target = _ref13.op1,
        comparison = _ref13.op2;
    var other = vm.stack.peek();

    if (other === comparison) {
      vm["goto"](target);
    }
  });
  APPEND_OPCODES.add(68
  /* AssertSame */
  , function (vm) {
    var reference$1 = vm.stack.peek();

    if (reference.isConstRef(reference$1) === false) {
      vm.updateWith(new Assert(reference$1));
    }
  });
  APPEND_OPCODES.add(71
  /* ToBoolean */
  , function (vm) {
    var stack = vm.stack;
    var valueRef = stack.pop();
    stack.push(reference.createComputeRef(function () {
      return globalContext.toBool(reference.valueForRef(valueRef));
    }));
  });
  var Assert = /*#__PURE__*/function () {
    function Assert(ref) {
      this.ref = ref;
      this.last = reference.valueForRef(ref);
    }

    var _proto = Assert.prototype;

    _proto.evaluate = function evaluate(vm) {
      var last = this.last,
          ref = this.ref;
      var current = reference.valueForRef(ref);

      if (last !== current) {
        vm["throw"]();
      }
    };

    return Assert;
  }();
  var AssertFilter = /*#__PURE__*/function () {
    function AssertFilter(ref, filter) {
      this.ref = ref;
      this.filter = filter;
      this.last = filter(reference.valueForRef(ref));
    }

    var _proto2 = AssertFilter.prototype;

    _proto2.evaluate = function evaluate(vm) {
      var last = this.last,
          ref = this.ref,
          filter = this.filter;
      var current = filter(reference.valueForRef(ref));

      if (last !== current) {
        vm["throw"]();
      }
    };

    return AssertFilter;
  }();
  var JumpIfNotModifiedOpcode = /*#__PURE__*/function () {
    function JumpIfNotModifiedOpcode() {
      this.tag = validator.CONSTANT_TAG;
      this.lastRevision = validator.INITIAL;
    }

    var _proto3 = JumpIfNotModifiedOpcode.prototype;

    _proto3.finalize = function finalize(tag, target) {
      this.target = target;
      this.didModify(tag);
    };

    _proto3.evaluate = function evaluate(vm) {
      var tag = this.tag,
          target = this.target,
          lastRevision = this.lastRevision;

      if (!vm.alwaysRevalidate && validator.validateTag(tag, lastRevision)) {
        validator.consumeTag(tag);
        vm["goto"](target);
      }
    };

    _proto3.didModify = function didModify(tag) {
      this.tag = tag;
      this.lastRevision = validator.valueForTag(this.tag);
      validator.consumeTag(tag);
    };

    return JumpIfNotModifiedOpcode;
  }();
  var BeginTrackFrameOpcode = /*#__PURE__*/function () {
    function BeginTrackFrameOpcode(debugLabel) {
      this.debugLabel = debugLabel;
    }

    var _proto4 = BeginTrackFrameOpcode.prototype;

    _proto4.evaluate = function evaluate() {
      validator.beginTrackFrame(this.debugLabel);
    };

    return BeginTrackFrameOpcode;
  }();
  var EndTrackFrameOpcode = /*#__PURE__*/function () {
    function EndTrackFrameOpcode(target) {
      this.target = target;
    }

    var _proto5 = EndTrackFrameOpcode.prototype;

    _proto5.evaluate = function evaluate() {
      var tag = validator.endTrackFrame();
      this.target.didModify(tag);
    };

    return EndTrackFrameOpcode;
  }();

  APPEND_OPCODES.add(41
  /* Text */
  , function (vm, _ref) {
    var text = _ref.op1;
    vm.elements().appendText(vm[CONSTANTS].getValue(text));
  });
  APPEND_OPCODES.add(42
  /* Comment */
  , function (vm, _ref2) {
    var text = _ref2.op1;
    vm.elements().appendComment(vm[CONSTANTS].getValue(text));
  });
  APPEND_OPCODES.add(48
  /* OpenElement */
  , function (vm, _ref3) {
    var tag = _ref3.op1;
    vm.elements().openElement(vm[CONSTANTS].getValue(tag));
  });
  APPEND_OPCODES.add(49
  /* OpenDynamicElement */
  , function (vm) {
    var tagName = reference.valueForRef(vm.stack.pop());
    vm.elements().openElement(tagName);
  });
  APPEND_OPCODES.add(50
  /* PushRemoteElement */
  , function (vm) {
    var elementRef = vm.stack.pop();
    var insertBeforeRef = vm.stack.pop();
    var guidRef = vm.stack.pop();
    var element = reference.valueForRef(elementRef);
    var insertBefore = reference.valueForRef(insertBeforeRef);
    var guid = reference.valueForRef(guidRef);

    if (!reference.isConstRef(elementRef)) {
      vm.updateWith(new Assert(elementRef));
    }

    if (insertBefore !== undefined && !reference.isConstRef(insertBeforeRef)) {
      vm.updateWith(new Assert(insertBeforeRef));
    }

    var block = vm.elements().pushRemoteElement(element, guid, insertBefore);
    if (block) vm.associateDestroyable(block);
  });
  APPEND_OPCODES.add(56
  /* PopRemoteElement */
  , function (vm) {
    vm.elements().popRemoteElement();
  });
  APPEND_OPCODES.add(54
  /* FlushElement */
  , function (vm$1) {
    var operations = vm$1.fetchValue(vm.$t0);
    var modifiers = null;

    if (operations) {
      modifiers = operations.flush(vm$1);
      vm$1.loadValue(vm.$t0, null);
    }

    vm$1.elements().flushElement(modifiers);
  });
  APPEND_OPCODES.add(55
  /* CloseElement */
  , function (vm) {
    var modifiers = vm.elements().closeElement();

    if (modifiers) {
      modifiers.forEach(function (modifier) {
        vm.env.scheduleInstallModifier(modifier);
        var manager = modifier.manager,
            state = modifier.state;
        var d = manager.getDestroyable(state);

        if (d) {
          vm.associateDestroyable(d);
        }
      });
    }
  });
  APPEND_OPCODES.add(57
  /* Modifier */
  , function (vm$1, _ref4) {
    var handle = _ref4.op1;

    if (vm$1.env.isInteractive === false) {
      return;
    }

    var owner = vm$1.getOwner();
    var args = vm$1.stack.pop();
    var definition = vm$1[CONSTANTS].getValue(handle);
    var manager = definition.manager;

    var _vm$elements = vm$1.elements(),
        constructing = _vm$elements.constructing;

    var state = manager.create(owner, constructing, definition.state, args.capture());
    var instance = {
      manager: manager,
      state: state,
      definition: definition
    };
    var operations = vm$1.fetchValue(vm.$t0);
    operations.addModifier(instance);
    var tag = manager.getTag(state);

    if (tag !== null) {
      validator.consumeTag(tag);
      return vm$1.updateWith(new UpdateModifierOpcode(tag, instance));
    }
  });
  APPEND_OPCODES.add(108
  /* DynamicModifier */
  , function (vm$1) {
    if (vm$1.env.isInteractive === false) {
      return;
    }

    var stack = vm$1.stack,
        constants = vm$1[CONSTANTS];
    var ref = stack.pop();
    var args = stack.pop().capture();

    var _vm$elements2 = vm$1.elements(),
        constructing = _vm$elements2.constructing;

    var initialOwner = vm$1.getOwner();
    var instanceRef = reference.createComputeRef(function () {
      var value = reference.valueForRef(ref);
      var owner;

      if (!util.isObject(value)) {
        return;
      }

      var hostDefinition;

      if (isCurriedType(value, 2
      /* Modifier */
      )) {
        var _resolveCurriedValue = resolveCurriedValue(value),
            resolvedDefinition = _resolveCurriedValue.definition,
            curriedOwner = _resolveCurriedValue.owner,
            positional = _resolveCurriedValue.positional,
            named = _resolveCurriedValue.named;

        hostDefinition = resolvedDefinition;
        owner = curriedOwner;

        if (positional !== undefined) {
          args.positional = positional.concat(args.positional);
        }

        if (named !== undefined) {
          args.named = util.assign.apply(void 0, [{}].concat(named, [args.named]));
        }
      } else {
        hostDefinition = value;
        owner = initialOwner;
      }

      var handle = constants.modifier(hostDefinition, null, true);

      if (env.DEBUG && handle === null) {
        throw new Error("Expected a dynamic modifier definition, but received an object or function that did not have a modifier manager associated with it. The dynamic invocation was `{{" + ref.debugLabel + "}}`, and the incorrect definition is the value at the path `" + ref.debugLabel + "`, which was: " + util.debugToString(hostDefinition));
      }

      var definition = constants.getValue(handle);
      var manager = definition.manager;
      var state = manager.create(owner, constructing, definition.state, args);
      return {
        manager: manager,
        state: state,
        definition: definition
      };
    });
    var instance = reference.valueForRef(instanceRef);
    var tag = null;

    if (instance !== undefined) {
      var operations = vm$1.fetchValue(vm.$t0);
      operations.addModifier(instance);
      tag = instance.manager.getTag(instance.state);

      if (tag !== null) {
        validator.consumeTag(tag);
      }
    }

    if (!reference.isConstRef(ref) || tag) {
      return vm$1.updateWith(new UpdateDynamicModifierOpcode(tag, instance, instanceRef));
    }
  });
  var UpdateModifierOpcode = /*#__PURE__*/function () {
    function UpdateModifierOpcode(tag, modifier) {
      this.tag = tag;
      this.modifier = modifier;
      this.lastUpdated = validator.valueForTag(tag);
    }

    var _proto = UpdateModifierOpcode.prototype;

    _proto.evaluate = function evaluate(vm) {
      var modifier = this.modifier,
          tag = this.tag,
          lastUpdated = this.lastUpdated;
      validator.consumeTag(tag);

      if (!validator.validateTag(tag, lastUpdated)) {
        vm.env.scheduleUpdateModifier(modifier);
        this.lastUpdated = validator.valueForTag(tag);
      }
    };

    return UpdateModifierOpcode;
  }();
  var UpdateDynamicModifierOpcode = /*#__PURE__*/function () {
    function UpdateDynamicModifierOpcode(tag, instance, instanceRef) {
      this.tag = tag;
      this.instance = instance;
      this.instanceRef = instanceRef;
      this.lastUpdated = validator.valueForTag(tag !== null && tag !== void 0 ? tag : validator.CURRENT_TAG);
    }

    var _proto2 = UpdateDynamicModifierOpcode.prototype;

    _proto2.evaluate = function evaluate(vm) {
      var tag = this.tag,
          lastUpdated = this.lastUpdated,
          instance = this.instance,
          instanceRef = this.instanceRef;
      var newInstance = reference.valueForRef(instanceRef);

      if (newInstance !== instance) {
        if (instance !== undefined) {
          var destroyable$1 = instance.manager.getDestroyable(instance.state);

          if (destroyable$1 !== null) {
            destroyable.destroy(destroyable$1);
          }
        }

        if (newInstance !== undefined) {
          var manager = newInstance.manager,
              state = newInstance.state;

          var _destroyable = manager.getDestroyable(state);

          if (_destroyable !== null) {
            destroyable.associateDestroyableChild(this, _destroyable);
          }

          tag = manager.getTag(state);

          if (tag !== null) {
            this.lastUpdated = validator.valueForTag(tag);
          }

          this.tag = tag;
          vm.env.scheduleInstallModifier(newInstance);
        }

        this.instance = newInstance;
      } else if (tag !== null && !validator.validateTag(tag, lastUpdated)) {
        vm.env.scheduleUpdateModifier(instance);
        this.lastUpdated = validator.valueForTag(tag);
      }

      if (tag !== null) {
        validator.consumeTag(tag);
      }
    };

    return UpdateDynamicModifierOpcode;
  }();
  APPEND_OPCODES.add(51
  /* StaticAttr */
  , function (vm, _ref5) {
    var _name = _ref5.op1,
        _value = _ref5.op2,
        _namespace = _ref5.op3;
    var name = vm[CONSTANTS].getValue(_name);
    var value = vm[CONSTANTS].getValue(_value);
    var namespace = _namespace ? vm[CONSTANTS].getValue(_namespace) : null;
    vm.elements().setStaticAttribute(name, value, namespace);
  });
  APPEND_OPCODES.add(52
  /* DynamicAttr */
  , function (vm, _ref6) {
    var _name = _ref6.op1,
        _trusting = _ref6.op2,
        _namespace = _ref6.op3;
    var name = vm[CONSTANTS].getValue(_name);
    var trusting = vm[CONSTANTS].getValue(_trusting);
    var reference$1 = vm.stack.pop();
    var value = reference.valueForRef(reference$1);
    var namespace = _namespace ? vm[CONSTANTS].getValue(_namespace) : null;
    var attribute = vm.elements().setDynamicAttribute(name, value, trusting, namespace);

    if (!reference.isConstRef(reference$1)) {
      vm.updateWith(new UpdateDynamicAttributeOpcode(reference$1, attribute, vm.env));
    }
  });
  var UpdateDynamicAttributeOpcode = /*#__PURE__*/function () {
    function UpdateDynamicAttributeOpcode(reference$1, attribute, env) {
      var initialized = false;
      this.updateRef = reference.createComputeRef(function () {
        var value = reference.valueForRef(reference$1);

        if (initialized === true) {
          attribute.update(value, env);
        } else {
          initialized = true;
        }
      });
      reference.valueForRef(this.updateRef);
    }

    var _proto3 = UpdateDynamicAttributeOpcode.prototype;

    _proto3.evaluate = function evaluate() {
      reference.valueForRef(this.updateRef);
    };

    return UpdateDynamicAttributeOpcode;
  }();

  APPEND_OPCODES.add(78
  /* PushComponentDefinition */
  , function (vm, _ref) {
    var handle = _ref.op1;
    var definition = vm[CONSTANTS].getValue(handle);
    var manager = definition.manager,
        capabilities = definition.capabilities;
    var instance = {
      definition: definition,
      manager: manager,
      capabilities: capabilities,
      state: null,
      handle: null,
      table: null,
      lookup: null
    };
    vm.stack.push(instance);
  });
  APPEND_OPCODES.add(80
  /* ResolveDynamicComponent */
  , function (vm$1, _ref2) {
    var _isStrict = _ref2.op1;
    var stack = vm$1.stack;
    var component = reference.valueForRef(stack.pop());
    var constants = vm$1[CONSTANTS];
    var owner = vm$1.getOwner();
    var isStrict = constants.getValue(_isStrict);
    vm$1.loadValue(vm.$t1, null); // Clear the temp register

    var definition;

    if (typeof component === 'string') {
      if (env.DEBUG && isStrict) {
        throw new Error("Attempted to resolve a dynamic component with a string definition, `" + component + "` in a strict mode template. In strict mode, using strings to resolve component definitions is prohibited. You can instead import the component definition and use it directly.");
      }

      var resolvedDefinition = resolveComponent(vm$1.runtime.resolver, constants, component, owner);
      definition = resolvedDefinition;
    } else if (isCurriedValue(component)) {
      definition = component;
    } else {
      definition = constants.component(component, owner);
    }

    stack.push(definition);
  });
  APPEND_OPCODES.add(81
  /* ResolveCurriedComponent */
  , function (vm) {
    var stack = vm.stack;
    var ref = stack.pop();
    var value = reference.valueForRef(ref);
    var constants = vm[CONSTANTS];
    var definition;

    if (env.DEBUG && !(typeof value === 'function' || typeof value === 'object' && value !== null)) {
      throw new Error("Expected a component definition, but received " + value + ". You may have accidentally done <" + ref.debugLabel + ">, where \"" + ref.debugLabel + "\" was a string instead of a curried component definition. You must either use the component definition directly, or use the {{component}} helper to create a curried component definition when invoking dynamically.");
    }

    if (isCurriedValue(value)) {
      definition = value;
    } else {
      definition = constants.component(value, vm.getOwner(), true);

      if (env.DEBUG && definition === null) {
        throw new Error("Expected a dynamic component definition, but received an object or function that did not have a component manager associated with it. The dynamic invocation was `<" + ref.debugLabel + ">` or `{{" + ref.debugLabel + "}}`, and the incorrect definition is the value at the path `" + ref.debugLabel + "`, which was: " + util.debugToString(value));
      }
    }

    stack.push(definition);
  });
  APPEND_OPCODES.add(79
  /* PushDynamicComponentInstance */
  , function (vm) {
    var stack = vm.stack;
    var definition = stack.pop();
    var capabilities, manager;

    if (isCurriedValue(definition)) {
      manager = capabilities = null;
    } else {
      manager = definition.manager;
      capabilities = definition.capabilities;
    }

    stack.push({
      definition: definition,
      capabilities: capabilities,
      manager: manager,
      state: null,
      handle: null,
      table: null
    });
  });
  APPEND_OPCODES.add(82
  /* PushArgs */
  , function (vm, _ref3) {
    var _names = _ref3.op1,
        _blockNames = _ref3.op2,
        flags = _ref3.op3;
    var stack = vm.stack;
    var names = vm[CONSTANTS].getArray(_names);
    var positionalCount = flags >> 4;
    var atNames = flags & 8;
    var blockNames = flags & 7 ? vm[CONSTANTS].getArray(_blockNames) : util.EMPTY_STRING_ARRAY;
    vm[ARGS].setup(stack, names, blockNames, positionalCount, !!atNames);
    stack.push(vm[ARGS]);
  });
  APPEND_OPCODES.add(83
  /* PushEmptyArgs */
  , function (vm) {
    var stack = vm.stack;
    stack.push(vm[ARGS].empty(stack));
  });
  APPEND_OPCODES.add(86
  /* CaptureArgs */
  , function (vm) {
    var stack = vm.stack;
    var args = stack.pop();
    var capturedArgs = args.capture();
    stack.push(capturedArgs);
  });
  APPEND_OPCODES.add(85
  /* PrepareArgs */
  , function (vm$1, _ref4) {
    var _state = _ref4.op1;
    var stack = vm$1.stack;
    var instance = vm$1.fetchValue(_state);
    var args = stack.pop();
    var definition = instance.definition;

    if (isCurriedType(definition, 0
    /* Component */
    )) {
      var constants = vm$1[CONSTANTS];

      var _resolveCurriedValue = resolveCurriedValue(definition),
          resolvedDefinition = _resolveCurriedValue.definition,
          owner = _resolveCurriedValue.owner,
          resolved = _resolveCurriedValue.resolved,
          positional = _resolveCurriedValue.positional,
          named = _resolveCurriedValue.named;

      if (resolved === true) {
        definition = resolvedDefinition;
      } else if (typeof resolvedDefinition === 'string') {
        var resolvedValue = vm$1.runtime.resolver.lookupComponent(resolvedDefinition, owner);
        definition = constants.resolvedComponent(resolvedValue, resolvedDefinition);
      } else {
        definition = constants.component(resolvedDefinition, owner);
      }

      if (named !== undefined) {
        args.named.merge(util.assign.apply(void 0, [{}].concat(named)));
      }

      if (positional !== undefined) {
        args.realloc(positional.length);
        args.positional.prepend(positional);
      }

      var _definition = definition,
          _manager = _definition.manager;
      instance.definition = definition;
      instance.manager = _manager;
      instance.capabilities = definition.capabilities; // Save off the owner that this component was curried with. Later on,
      // we'll fetch the value of this register and set it as the owner on the
      // new root scope.

      vm$1.loadValue(vm.$t1, owner);
    }

    var _definition2 = definition,
        manager$1 = _definition2.manager,
        state = _definition2.state;
    var capabilities = instance.capabilities;

    if (!manager.managerHasCapability(manager$1, capabilities, 4
    /* PrepareArgs */
    )) {
      stack.push(args);
      return;
    }

    var blocks = args.blocks.values;
    var blockNames = args.blocks.names;
    var preparedArgs = manager$1.prepareArgs(state, args);

    if (preparedArgs) {
      args.clear();

      for (var i = 0; i < blocks.length; i++) {
        stack.push(blocks[i]);
      }

      var _positional = preparedArgs.positional,
          _named = preparedArgs.named;
      var positionalCount = _positional.length;

      for (var _i = 0; _i < positionalCount; _i++) {
        stack.push(_positional[_i]);
      }

      var names = Object.keys(_named);

      for (var _i2 = 0; _i2 < names.length; _i2++) {
        stack.push(_named[names[_i2]]);
      }

      args.setup(stack, names, blockNames, positionalCount, false);
    }

    stack.push(args);
  });
  APPEND_OPCODES.add(87
  /* CreateComponent */
  , function (vm, _ref5) {
    var flags = _ref5.op1,
        _state = _ref5.op2;
    var instance = vm.fetchValue(_state);
    var definition = instance.definition,
        manager$1 = instance.manager,
        capabilities = instance.capabilities;

    if (!manager.managerHasCapability(manager$1, capabilities, 512
    /* CreateInstance */
    )) {
      // TODO: Closure and Main components are always invoked dynamically, so this
      // opcode may run even if this capability is not enabled. In the future we
      // should handle this in a better way.
      return;
    }

    var dynamicScope = null;

    if (manager.managerHasCapability(manager$1, capabilities, 64
    /* DynamicScope */
    )) {
      dynamicScope = vm.dynamicScope();
    }

    var hasDefaultBlock = flags & 1;
    var args = null;

    if (manager.managerHasCapability(manager$1, capabilities, 8
    /* CreateArgs */
    )) {
      args = vm.stack.peek();
    }

    var self = null;

    if (manager.managerHasCapability(manager$1, capabilities, 128
    /* CreateCaller */
    )) {
      self = vm.getSelf();
    }

    var state = manager$1.create(vm.getOwner(), definition.state, args, vm.env, dynamicScope, self, !!hasDefaultBlock); // We want to reuse the `state` POJO here, because we know that the opcodes
    // only transition at exactly one place.

    instance.state = state;

    if (manager.managerHasCapability(manager$1, capabilities, 256
    /* UpdateHook */
    )) {
      vm.updateWith(new UpdateComponentOpcode(state, manager$1, dynamicScope));
    }
  });
  APPEND_OPCODES.add(88
  /* RegisterComponentDestructor */
  , function (vm, _ref6) {
    var _state = _ref6.op1;

    var _vm$fetchValue = vm.fetchValue(_state),
        manager$1 = _vm$fetchValue.manager,
        state = _vm$fetchValue.state,
        capabilities = _vm$fetchValue.capabilities;

    var d = manager$1.getDestroyable(state);

    if (env.DEBUG && !manager.managerHasCapability(manager$1, capabilities, 2048
    /* WillDestroy */
    ) && d !== null && typeof 'willDestroy' in d) {
      throw new Error('BUG: Destructor has willDestroy, but the willDestroy capability was not enabled for this component. Pre-destruction hooks must be explicitly opted into');
    }

    if (d) vm.associateDestroyable(d);
  });
  APPEND_OPCODES.add(97
  /* BeginComponentTransaction */
  , function (vm, _ref7) {
    var _state = _ref7.op1;

    var _a;

    var name;

    if (env.DEBUG) {
      var _vm$fetchValue2 = vm.fetchValue(_state),
          definition = _vm$fetchValue2.definition,
          manager = _vm$fetchValue2.manager;

      name = (_a = definition.resolvedName) !== null && _a !== void 0 ? _a : manager.getDebugName(definition.state);
    }

    vm.beginCacheGroup(name);
    vm.elements().pushSimpleBlock();
  });
  APPEND_OPCODES.add(89
  /* PutComponentOperations */
  , function (vm$1) {
    vm$1.loadValue(vm.$t0, new ComponentElementOperations());
  });
  APPEND_OPCODES.add(53
  /* ComponentAttr */
  , function (vm$1, _ref8) {
    var _name = _ref8.op1,
        _trusting = _ref8.op2,
        _namespace = _ref8.op3;
    var name = vm$1[CONSTANTS].getValue(_name);
    var trusting = vm$1[CONSTANTS].getValue(_trusting);
    var reference = vm$1.stack.pop();
    var namespace = _namespace ? vm$1[CONSTANTS].getValue(_namespace) : null;
    vm$1.fetchValue(vm.$t0).setAttribute(name, reference, trusting, namespace);
  });
  APPEND_OPCODES.add(105
  /* StaticComponentAttr */
  , function (vm$1, _ref9) {
    var _name = _ref9.op1,
        _value = _ref9.op2,
        _namespace = _ref9.op3;
    var name = vm$1[CONSTANTS].getValue(_name);
    var value = vm$1[CONSTANTS].getValue(_value);
    var namespace = _namespace ? vm$1[CONSTANTS].getValue(_namespace) : null;
    vm$1.fetchValue(vm.$t0).setStaticAttribute(name, value, namespace);
  });
  var ComponentElementOperations = /*#__PURE__*/function () {
    function ComponentElementOperations() {
      this.attributes = util.dict();
      this.classes = [];
      this.modifiers = [];
    }

    var _proto = ComponentElementOperations.prototype;

    _proto.setAttribute = function setAttribute(name, value, trusting, namespace) {
      var deferred = {
        value: value,
        namespace: namespace,
        trusting: trusting
      };

      if (name === 'class') {
        this.classes.push(value);
      }

      this.attributes[name] = deferred;
    };

    _proto.setStaticAttribute = function setStaticAttribute(name, value, namespace) {
      var deferred = {
        value: value,
        namespace: namespace
      };

      if (name === 'class') {
        this.classes.push(value);
      }

      this.attributes[name] = deferred;
    };

    _proto.addModifier = function addModifier(modifier) {
      this.modifiers.push(modifier);
    };

    _proto.flush = function flush(vm) {
      var type;
      var attributes = this.attributes;

      for (var name in this.attributes) {
        if (name === 'type') {
          type = attributes[name];
          continue;
        }

        var attr = this.attributes[name];

        if (name === 'class') {
          setDeferredAttr(vm, 'class', mergeClasses(this.classes), attr.namespace, attr.trusting);
        } else {
          setDeferredAttr(vm, name, attr.value, attr.namespace, attr.trusting);
        }
      }

      if (type !== undefined) {
        setDeferredAttr(vm, 'type', type.value, type.namespace, type.trusting);
      }

      return this.modifiers;
    };

    return ComponentElementOperations;
  }();

  function mergeClasses(classes) {
    if (classes.length === 0) {
      return '';
    }

    if (classes.length === 1) {
      return classes[0];
    }

    if (allStringClasses(classes)) {
      return classes.join(' ');
    }

    return createClassListRef(classes);
  }

  function allStringClasses(classes) {
    for (var i = 0; i < classes.length; i++) {
      if (typeof classes[i] !== 'string') {
        return false;
      }
    }

    return true;
  }

  function setDeferredAttr(vm, name, value, namespace, trusting) {
    if (trusting === void 0) {
      trusting = false;
    }

    if (typeof value === 'string') {
      vm.elements().setStaticAttribute(name, value, namespace);
    } else {
      var attribute = vm.elements().setDynamicAttribute(name, reference.valueForRef(value), trusting, namespace);

      if (!reference.isConstRef(value)) {
        vm.updateWith(new UpdateDynamicAttributeOpcode(value, attribute, vm.env));
      }
    }
  }

  APPEND_OPCODES.add(99
  /* DidCreateElement */
  , function (vm$1, _ref10) {
    var _state = _ref10.op1;

    var _vm$fetchValue3 = vm$1.fetchValue(_state),
        definition = _vm$fetchValue3.definition,
        state = _vm$fetchValue3.state;

    var manager = definition.manager;
    var operations = vm$1.fetchValue(vm.$t0);
    manager.didCreateElement(state, vm$1.elements().constructing, operations);
  });
  APPEND_OPCODES.add(90
  /* GetComponentSelf */
  , function (vm, _ref11) {
    var _state = _ref11.op1,
        _names = _ref11.op2;

    var _a;

    var instance = vm.fetchValue(_state);
    var definition = instance.definition,
        state = instance.state;
    var manager$1 = definition.manager;
    var selfRef = manager$1.getSelf(state);

    if (vm.env.debugRenderTree !== undefined) {
      var _instance = vm.fetchValue(_state);

      var _definition3 = _instance.definition,
          _manager2 = _instance.manager;
      var args;

      if (vm.stack.peek() === vm[ARGS]) {
        args = vm[ARGS].capture();
      } else {
        var names = vm[CONSTANTS].getArray(_names);
        vm[ARGS].setup(vm.stack, names, [], 0, true);
        args = vm[ARGS].capture();
      }

      var moduleName;
      var compilable = _definition3.compilable;

      if (compilable === null) {
        compilable = _manager2.getDynamicLayout(state, vm.runtime.resolver);

        if (compilable !== null) {
          moduleName = compilable.moduleName;
        } else {
          moduleName = '__default__.hbs';
        }
      } else {
        moduleName = compilable.moduleName;
      } // For tearing down the debugRenderTree


      vm.associateDestroyable(_instance);

      if (hasCustomDebugRenderTreeLifecycle(_manager2)) {
        var nodes = _manager2.getDebugCustomRenderTree(_instance.definition.state, _instance.state, args, moduleName);

        nodes.forEach(function (node) {
          var bucket = node.bucket;
          vm.env.debugRenderTree.create(bucket, node);
          destroyable.registerDestructor(_instance, function () {
            var _a;

            (_a = vm.env.debugRenderTree) === null || _a === void 0 ? void 0 : _a.willDestroy(bucket);
          });
          vm.updateWith(new DebugRenderTreeUpdateOpcode(bucket));
        });
      } else {
        var name = (_a = _definition3.resolvedName) !== null && _a !== void 0 ? _a : _manager2.getDebugName(_definition3.state);
        vm.env.debugRenderTree.create(_instance, {
          type: 'component',
          name: name,
          args: args,
          template: moduleName,
          instance: reference.valueForRef(selfRef)
        });
        vm.associateDestroyable(_instance);
        destroyable.registerDestructor(_instance, function () {
          var _a;

          (_a = vm.env.debugRenderTree) === null || _a === void 0 ? void 0 : _a.willDestroy(_instance);
        });
        vm.updateWith(new DebugRenderTreeUpdateOpcode(_instance));
      }
    }

    vm.stack.push(selfRef);
  });
  APPEND_OPCODES.add(91
  /* GetComponentTagName */
  , function (vm, _ref12) {
    var _state = _ref12.op1;

    var _vm$fetchValue4 = vm.fetchValue(_state),
        definition = _vm$fetchValue4.definition,
        state = _vm$fetchValue4.state;

    var manager = definition.manager;
    var tagName = manager.getTagName(state); // User provided value from JS, so we don't bother to encode

    vm.stack.push(tagName);
  }); // Dynamic Invocation Only

  APPEND_OPCODES.add(92
  /* GetComponentLayout */
  , function (vm, _ref13) {
    var _state = _ref13.op1;
    var instance = vm.fetchValue(_state);
    var manager$1 = instance.manager,
        definition = instance.definition;
    var stack = vm.stack;
    var compilable = definition.compilable;

    if (compilable === null) {
      var capabilities = instance.capabilities;
      compilable = manager$1.getDynamicLayout(instance.state, vm.runtime.resolver);

      if (compilable === null) {
        if (manager.managerHasCapability(manager$1, capabilities, 1024
        /* Wrapped */
        )) {
          compilable = util.unwrapTemplate(vm[CONSTANTS].defaultTemplate).asWrappedLayout();
        } else {
          compilable = util.unwrapTemplate(vm[CONSTANTS].defaultTemplate).asLayout();
        }
      }
    }

    var handle = compilable.compile(vm.context);
    stack.push(compilable.symbolTable);
    stack.push(handle);
  });
  APPEND_OPCODES.add(75
  /* Main */
  , function (vm, _ref14) {
    var register = _ref14.op1;
    var definition = vm.stack.pop();
    var invocation = vm.stack.pop();
    var manager = definition.manager,
        capabilities = definition.capabilities;
    var state = {
      definition: definition,
      manager: manager,
      capabilities: capabilities,
      state: null,
      handle: invocation.handle,
      table: invocation.symbolTable,
      lookup: null
    };
    vm.loadValue(register, state);
  });
  APPEND_OPCODES.add(95
  /* PopulateLayout */
  , function (vm, _ref15) {
    var _state = _ref15.op1;
    var stack = vm.stack; // In DEBUG handles could be ErrHandle objects

    var handle = stack.pop();
    var table = stack.pop();
    var state = vm.fetchValue(_state);
    state.handle = handle;
    state.table = table;
  });
  APPEND_OPCODES.add(38
  /* VirtualRootScope */
  , function (vm$1, _ref16) {
    var _state = _ref16.op1;

    var _vm$fetchValue5 = vm$1.fetchValue(_state),
        table = _vm$fetchValue5.table,
        manager$1 = _vm$fetchValue5.manager,
        capabilities = _vm$fetchValue5.capabilities,
        state = _vm$fetchValue5.state;

    var owner;

    if (manager.managerHasCapability(manager$1, capabilities, 4096
    /* HasSubOwner */
    )) {
      owner = manager$1.getOwner(state);
      vm$1.loadValue(vm.$t1, null); // Clear the temp register
    } else {
      // Check the temp register to see if an owner was resolved from currying
      owner = vm$1.fetchValue(vm.$t1);

      if (owner === null) {
        // If an owner wasn't found, default to using the current owner. This
        // will happen for normal dynamic component invocation,
        // e.g. <SomeClassicEmberComponent/>
        owner = vm$1.getOwner();
      } else {
        // Else the owner was found, so clear the temp register. This will happen
        // if we are loading a curried component, e.g. <@someCurriedComponent/>
        vm$1.loadValue(vm.$t1, null);
      }
    }

    vm$1.pushRootScope(table.symbols.length + 1, owner);
  });
  APPEND_OPCODES.add(94
  /* SetupForEval */
  , function (vm, _ref17) {
    var _state = _ref17.op1;
    var state = vm.fetchValue(_state);

    if (state.table.hasEval) {
      var lookup = state.lookup = util.dict();
      vm.scope().bindEvalScope(lookup);
    }
  });
  APPEND_OPCODES.add(17
  /* SetNamedVariables */
  , function (vm, _ref18) {
    var _state = _ref18.op1;
    var state = vm.fetchValue(_state);
    var scope = vm.scope();
    var args = vm.stack.peek();
    var callerNames = args.named.atNames;

    for (var i = callerNames.length - 1; i >= 0; i--) {
      var atName = callerNames[i];
      var symbol = state.table.symbols.indexOf(callerNames[i]);
      var value = args.named.get(atName, true);
      if (symbol !== -1) scope.bindSymbol(symbol + 1, value);
      if (state.lookup) state.lookup[atName] = value;
    }
  });

  function bindBlock(symbolName, blockName, state, blocks, vm) {
    var symbol = state.table.symbols.indexOf(symbolName);
    var block = blocks.get(blockName);
    if (symbol !== -1) vm.scope().bindBlock(symbol + 1, block);
    if (state.lookup) state.lookup[symbolName] = block;
  }

  APPEND_OPCODES.add(18
  /* SetBlocks */
  , function (vm, _ref19) {
    var _state = _ref19.op1;
    var state = vm.fetchValue(_state);

    var _vm$stack$peek = vm.stack.peek(),
        blocks = _vm$stack$peek.blocks;

    for (var i = 0; i < blocks.names.length; i++) {
      bindBlock(blocks.symbolNames[i], blocks.names[i], state, blocks, vm);
    }
  }); // Dynamic Invocation Only

  APPEND_OPCODES.add(96
  /* InvokeComponentLayout */
  , function (vm, _ref20) {
    var _state = _ref20.op1;
    var state = vm.fetchValue(_state);
    vm.call(state.handle);
  });
  APPEND_OPCODES.add(100
  /* DidRenderLayout */
  , function (vm, _ref21) {
    var _state = _ref21.op1;
    var instance = vm.fetchValue(_state);
    var manager$1 = instance.manager,
        state = instance.state,
        capabilities = instance.capabilities;
    var bounds = vm.elements().popBlock();

    if (vm.env.debugRenderTree !== undefined) {
      if (hasCustomDebugRenderTreeLifecycle(manager$1)) {
        var nodes = manager$1.getDebugCustomRenderTree(instance.definition.state, state, EMPTY_ARGS);
        nodes.reverse().forEach(function (node) {
          var bucket = node.bucket;
          vm.env.debugRenderTree.didRender(bucket, bounds);
          vm.updateWith(new DebugRenderTreeDidRenderOpcode(bucket, bounds));
        });
      } else {
        vm.env.debugRenderTree.didRender(instance, bounds);
        vm.updateWith(new DebugRenderTreeDidRenderOpcode(instance, bounds));
      }
    }

    if (manager.managerHasCapability(manager$1, capabilities, 512
    /* CreateInstance */
    )) {
      var mgr = manager$1;
      mgr.didRenderLayout(state, bounds);
      vm.env.didCreate(instance);
      vm.updateWith(new DidUpdateLayoutOpcode(instance, bounds));
    }
  });
  APPEND_OPCODES.add(98
  /* CommitComponentTransaction */
  , function (vm) {
    vm.commitCacheGroup();
  });
  var UpdateComponentOpcode = /*#__PURE__*/function () {
    function UpdateComponentOpcode(component, manager, dynamicScope) {
      this.component = component;
      this.manager = manager;
      this.dynamicScope = dynamicScope;
    }

    var _proto2 = UpdateComponentOpcode.prototype;

    _proto2.evaluate = function evaluate(_vm) {
      var component = this.component,
          manager = this.manager,
          dynamicScope = this.dynamicScope;
      manager.update(component, dynamicScope);
    };

    return UpdateComponentOpcode;
  }();
  var DidUpdateLayoutOpcode = /*#__PURE__*/function () {
    function DidUpdateLayoutOpcode(component, bounds) {
      this.component = component;
      this.bounds = bounds;
    }

    var _proto3 = DidUpdateLayoutOpcode.prototype;

    _proto3.evaluate = function evaluate(vm) {
      var component = this.component,
          bounds = this.bounds;
      var manager = component.manager,
          state = component.state;
      manager.didUpdateLayout(state, bounds);
      vm.env.didUpdate(component);
    };

    return DidUpdateLayoutOpcode;
  }();

  var DebugRenderTreeUpdateOpcode = /*#__PURE__*/function () {
    function DebugRenderTreeUpdateOpcode(bucket) {
      this.bucket = bucket;
    }

    var _proto4 = DebugRenderTreeUpdateOpcode.prototype;

    _proto4.evaluate = function evaluate(vm) {
      var _a;

      (_a = vm.env.debugRenderTree) === null || _a === void 0 ? void 0 : _a.update(this.bucket);
    };

    return DebugRenderTreeUpdateOpcode;
  }();

  var DebugRenderTreeDidRenderOpcode = /*#__PURE__*/function () {
    function DebugRenderTreeDidRenderOpcode(bucket, bounds) {
      this.bucket = bucket;
      this.bounds = bounds;
    }

    var _proto5 = DebugRenderTreeDidRenderOpcode.prototype;

    _proto5.evaluate = function evaluate(vm) {
      var _a;

      (_a = vm.env.debugRenderTree) === null || _a === void 0 ? void 0 : _a.didRender(this.bucket, this.bounds);
    };

    return DebugRenderTreeDidRenderOpcode;
  }();

  var DynamicTextContent = /*#__PURE__*/function () {
    function DynamicTextContent(node, reference, lastValue) {
      this.node = node;
      this.reference = reference;
      this.lastValue = lastValue;
    }

    var _proto = DynamicTextContent.prototype;

    _proto.evaluate = function evaluate() {
      var value = reference.valueForRef(this.reference);
      var lastValue = this.lastValue;
      if (value === lastValue) return;
      var normalized;

      if (isEmpty(value)) {
        normalized = '';
      } else if (isString(value)) {
        normalized = value;
      } else {
        normalized = String(value);
      }

      if (normalized !== lastValue) {
        var textNode = this.node;
        textNode.nodeValue = this.lastValue = normalized;
      }
    };

    return DynamicTextContent;
  }();

  function toContentType(value) {
    if (shouldCoerce(value)) {
      return 2
      /* String */
      ;
    } else if (isCurriedType(value, 0
    /* Component */
    ) || manager.hasInternalComponentManager(value)) {
      return 0
      /* Component */
      ;
    } else if (isCurriedType(value, 1
    /* Helper */
    ) || manager.hasInternalHelperManager(value)) {
      return 1
      /* Helper */
      ;
    } else if (isSafeString(value)) {
      return 4
      /* SafeString */
      ;
    } else if (isFragment(value)) {
      return 5
      /* Fragment */
      ;
    } else if (isNode(value)) {
      return 6
      /* Node */
      ;
    } else {
        return 2
        /* String */
        ;
      }
  }

  function toDynamicContentType(value) {
    if (!util.isObject(value)) {
      return 2
      /* String */
      ;
    }

    if (isCurriedType(value, 0
    /* Component */
    ) || manager.hasInternalComponentManager(value)) {
      return 0
      /* Component */
      ;
    } else {
      if (env.DEBUG && !isCurriedType(value, 1
      /* Helper */
      ) && !manager.hasInternalHelperManager(value)) {
        throw new Error("Attempted use a dynamic value as a component or helper, but that value did not have an associated component or helper manager. The value was: " + value);
      }

      return 1
      /* Helper */
      ;
    }
  }

  APPEND_OPCODES.add(76
  /* ContentType */
  , function (vm) {
    var reference$1 = vm.stack.peek();
    vm.stack.push(toContentType(reference.valueForRef(reference$1)));

    if (!reference.isConstRef(reference$1)) {
      vm.updateWith(new AssertFilter(reference$1, toContentType));
    }
  });
  APPEND_OPCODES.add(106
  /* DynamicContentType */
  , function (vm) {
    var reference$1 = vm.stack.peek();
    vm.stack.push(toDynamicContentType(reference.valueForRef(reference$1)));

    if (!reference.isConstRef(reference$1)) {
      vm.updateWith(new AssertFilter(reference$1, toDynamicContentType));
    }
  });
  APPEND_OPCODES.add(43
  /* AppendHTML */
  , function (vm) {
    var reference$1 = vm.stack.pop();
    var rawValue = reference.valueForRef(reference$1);
    var value = isEmpty(rawValue) ? '' : String(rawValue);
    vm.elements().appendDynamicHTML(value);
  });
  APPEND_OPCODES.add(44
  /* AppendSafeHTML */
  , function (vm) {
    var reference$1 = vm.stack.pop();
    var rawValue = reference.valueForRef(reference$1).toHTML();
    var value = isEmpty(rawValue) ? '' : rawValue;
    vm.elements().appendDynamicHTML(value);
  });
  APPEND_OPCODES.add(47
  /* AppendText */
  , function (vm) {
    var reference$1 = vm.stack.pop();
    var rawValue = reference.valueForRef(reference$1);
    var value = isEmpty(rawValue) ? '' : String(rawValue);
    var node = vm.elements().appendDynamicText(value);

    if (!reference.isConstRef(reference$1)) {
      vm.updateWith(new DynamicTextContent(node, reference$1, value));
    }
  });
  APPEND_OPCODES.add(45
  /* AppendDocumentFragment */
  , function (vm) {
    var reference$1 = vm.stack.pop();
    var value = reference.valueForRef(reference$1);
    vm.elements().appendDynamicFragment(value);
  });
  APPEND_OPCODES.add(46
  /* AppendNode */
  , function (vm) {
    var reference$1 = vm.stack.pop();
    var value = reference.valueForRef(reference$1);
    vm.elements().appendDynamicNode(value);
  });

  function debugCallback(context, get) {
    // eslint-disable-next-line no-console
    console.info('Use `context`, and `get(<path>)` to debug this template.'); // for example...
    // eslint-disable-next-line no-unused-expressions

    context === get('this'); // eslint-disable-next-line no-debugger

    debugger;
  }

  var callback = debugCallback; // For testing purposes

  function setDebuggerCallback(cb) {
    callback = cb;
  }
  function resetDebuggerCallback() {
    callback = debugCallback;
  }

  var ScopeInspector = /*#__PURE__*/function () {
    function ScopeInspector(scope, symbols, evalInfo) {
      this.scope = scope;
      this.locals = util.dict();

      for (var i = 0; i < evalInfo.length; i++) {
        var slot = evalInfo[i];
        var name = symbols[slot - 1];
        var ref = scope.getSymbol(slot);
        this.locals[name] = ref;
      }
    }

    var _proto = ScopeInspector.prototype;

    _proto.get = function get(path) {
      var scope = this.scope,
          locals = this.locals;
      var parts = path.split('.');

      var _path$split = path.split('.'),
          head = _path$split[0],
          tail = _path$split.slice(1);

      var evalScope = scope.getEvalScope();
      var ref;

      if (head === 'this') {
        ref = scope.getSelf();
      } else if (locals[head]) {
        ref = locals[head];
      } else if (head.indexOf('@') === 0 && evalScope[head]) {
        ref = evalScope[head];
      } else {
        ref = this.scope.getSelf();
        tail = parts;
      }

      return tail.reduce(function (r, part) {
        return reference.childRefFor(r, part);
      }, ref);
    };

    return ScopeInspector;
  }();

  APPEND_OPCODES.add(103
  /* Debugger */
  , function (vm, _ref) {
    var _symbols = _ref.op1,
        _evalInfo = _ref.op2;
    var symbols = vm[CONSTANTS].getArray(_symbols);
    var evalInfo = vm[CONSTANTS].getArray(util.decodeHandle(_evalInfo));
    var inspector = new ScopeInspector(vm.scope(), symbols, evalInfo);
    callback(reference.valueForRef(vm.getSelf()), function (path) {
      return reference.valueForRef(inspector.get(path));
    });
  });

  APPEND_OPCODES.add(72
  /* EnterList */
  , function (vm, _ref) {
    var relativeStart = _ref.op1,
        elseTarget = _ref.op2;
    var stack = vm.stack;
    var listRef = stack.pop();
    var keyRef = stack.pop();
    var keyValue = reference.valueForRef(keyRef);
    var key = keyValue === null ? '@identity' : String(keyValue);
    var iteratorRef = reference.createIteratorRef(listRef, key);
    var iterator = reference.valueForRef(iteratorRef);
    vm.updateWith(new AssertFilter(iteratorRef, function (iterator) {
      return iterator.isEmpty();
    }));

    if (iterator.isEmpty() === true) {
      // TODO: Fix this offset, should be accurate
      vm["goto"](elseTarget + 1);
    } else {
      vm.enterList(iteratorRef, relativeStart);
      vm.stack.push(iterator);
    }
  });
  APPEND_OPCODES.add(73
  /* ExitList */
  , function (vm) {
    vm.exitList();
  });
  APPEND_OPCODES.add(74
  /* Iterate */
  , function (vm, _ref2) {
    var breaks = _ref2.op1;
    var stack = vm.stack;
    var iterator = stack.peek();
    var item = iterator.next();

    if (item !== null) {
      vm.registerItem(vm.enterItem(item));
    } else {
      vm["goto"](breaks);
    }
  });

  var CAPABILITIES = {
    dynamicLayout: false,
    dynamicTag: false,
    prepareArgs: false,
    createArgs: false,
    attributeHook: false,
    elementHook: false,
    createCaller: false,
    dynamicScope: false,
    updateHook: false,
    createInstance: false,
    wrapped: false,
    willDestroy: false,
    hasSubOwner: false
  };
  var TemplateOnlyComponentManager = /*#__PURE__*/function () {
    function TemplateOnlyComponentManager() {}

    var _proto = TemplateOnlyComponentManager.prototype;

    _proto.getCapabilities = function getCapabilities() {
      return CAPABILITIES;
    };

    _proto.getDebugName = function getDebugName(_ref) {
      var name = _ref.name;
      return name;
    };

    _proto.getSelf = function getSelf() {
      return reference.NULL_REFERENCE;
    };

    _proto.getDestroyable = function getDestroyable() {
      return null;
    };

    return TemplateOnlyComponentManager;
  }();
  var TEMPLATE_ONLY_COMPONENT_MANAGER = new TemplateOnlyComponentManager(); // This is only exported for types, don't use this class directly

  var TemplateOnlyComponentDefinition = /*#__PURE__*/function () {
    function TemplateOnlyComponentDefinition(moduleName, name) {
      if (moduleName === void 0) {
        moduleName = '@glimmer/component/template-only';
      }

      if (name === void 0) {
        name = '(unknown template-only component)';
      }

      this.moduleName = moduleName;
      this.name = name;
    }

    var _proto2 = TemplateOnlyComponentDefinition.prototype;

    _proto2.toString = function toString() {
      return this.moduleName;
    };

    return TemplateOnlyComponentDefinition;
  }();
  manager.setInternalComponentManager(TEMPLATE_ONLY_COMPONENT_MANAGER, TemplateOnlyComponentDefinition.prototype);
  /**
    This utility function is used to declare a given component has no backing class. When the rendering engine detects this it
    is able to perform a number of optimizations. Templates that are associated with `templateOnly()` will be rendered _as is_
    without adding a wrapping `<div>` (or any of the other element customization behaviors of [@ember/component](/ember/release/classes/Component)).
    Specifically, this means that the template will be rendered as "outer HTML".

    In general, this method will be used by build time tooling and would not be directly written in an application. However,
    at times it may be useful to use directly to leverage the "outer HTML" semantics mentioned above. For example, if an addon would like
    to use these semantics for its templates but cannot be certain it will only be consumed by applications that have enabled the
    `template-only-glimmer-components` optional feature.

    @example

    ```js
    import { templateOnlyComponent } from '@glimmer/runtime';

    export default templateOnlyComponent();
    ```

    @public
    @method templateOnly
    @param {String} moduleName the module name that the template only component represents, this will be used for debugging purposes
    @category EMBER_GLIMMER_SET_COMPONENT_TEMPLATE
  */

  function templateOnlyComponent(moduleName, name) {
    return new TemplateOnlyComponentDefinition(moduleName, name);
  }

  var SVG_INTEGRATION_POINTS = {
    foreignObject: 1,
    desc: 1,
    title: 1
  }; // http://www.w3.org/TR/html/syntax.html#adjust-svg-attributes
  // TODO: Adjust SVG attributes
  // http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign
  // TODO: Adjust SVG elements
  // http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign

  var BLACKLIST_TABLE = Object.create(null);
  var DOMOperations = /*#__PURE__*/function () {
    function DOMOperations(document) {
      this.document = document;
      this.setupUselessElement();
    } // split into separate method so that NodeDOMTreeConstruction
    // can override it.


    var _proto = DOMOperations.prototype;

    _proto.setupUselessElement = function setupUselessElement() {
      this.uselessElement = this.document.createElement('div');
    };

    _proto.createElement = function createElement(tag, context) {
      var isElementInSVGNamespace, isHTMLIntegrationPoint;

      if (context) {
        isElementInSVGNamespace = context.namespaceURI === "http://www.w3.org/2000/svg"
        /* SVG */
        || tag === 'svg';
        isHTMLIntegrationPoint = !!SVG_INTEGRATION_POINTS[context.tagName];
      } else {
        isElementInSVGNamespace = tag === 'svg';
        isHTMLIntegrationPoint = false;
      }

      if (isElementInSVGNamespace && !isHTMLIntegrationPoint) {
        // FIXME: This does not properly handle <font> with color, face, or
        // size attributes, which is also disallowed by the spec. We should fix
        // this.
        if (BLACKLIST_TABLE[tag]) {
          throw new Error("Cannot create a " + tag + " inside an SVG context");
        }

        return this.document.createElementNS("http://www.w3.org/2000/svg"
        /* SVG */
        , tag);
      } else {
        return this.document.createElement(tag);
      }
    };

    _proto.insertBefore = function insertBefore(parent, node, reference) {
      parent.insertBefore(node, reference);
    };

    _proto.insertHTMLBefore = function insertHTMLBefore(parent, nextSibling, html) {
      if (html === '') {
        var comment = this.createComment('');
        parent.insertBefore(comment, nextSibling);
        return new ConcreteBounds(parent, comment, comment);
      }

      var prev = nextSibling ? nextSibling.previousSibling : parent.lastChild;
      var last;

      if (nextSibling === null) {
        parent.insertAdjacentHTML("beforeend"
        /* beforeend */
        , html);
        last = parent.lastChild;
      } else if (nextSibling instanceof HTMLElement) {
        nextSibling.insertAdjacentHTML('beforebegin', html);
        last = nextSibling.previousSibling;
      } else {
        // Non-element nodes do not support insertAdjacentHTML, so add an
        // element and call it on that element. Then remove the element.
        //
        // This also protects Edge, IE and Firefox w/o the inspector open
        // from merging adjacent text nodes. See ./compat/text-node-merging-fix.ts
        var uselessElement = this.uselessElement;
        parent.insertBefore(uselessElement, nextSibling);
        uselessElement.insertAdjacentHTML("beforebegin"
        /* beforebegin */
        , html);
        last = uselessElement.previousSibling;
        parent.removeChild(uselessElement);
      }

      var first = prev ? prev.nextSibling : parent.firstChild;
      return new ConcreteBounds(parent, first, last);
    };

    _proto.createTextNode = function createTextNode(text) {
      return this.document.createTextNode(text);
    };

    _proto.createComment = function createComment(data) {
      return this.document.createComment(data);
    };

    return DOMOperations;
  }();
  function moveNodesBefore(source, target, nextSibling) {
    var first = source.firstChild;
    var last = first;
    var current = first;

    while (current) {
      var next = current.nextSibling;
      target.insertBefore(current, nextSibling);
      last = current;
      current = next;
    }

    return new ConcreteBounds(target, first, last);
  }

  function _inheritsLoose$2(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }
  var SVG_NAMESPACE = "http://www.w3.org/2000/svg"
  /* SVG */
  ; // Patch:    insertAdjacentHTML on SVG Fix
  // Browsers: Safari, IE, Edge, Firefox ~33-34
  // Reason:   insertAdjacentHTML does not exist on SVG elements in Safari. It is
  //           present but throws an exception on IE and Edge. Old versions of
  //           Firefox create nodes in the incorrect namespace.
  // Fix:      Since IE and Edge silently fail to create SVG nodes using
  //           innerHTML, and because Firefox may create nodes in the incorrect
  //           namespace using innerHTML on SVG elements, an HTML-string wrapping
  //           approach is used. A pre/post SVG tag is added to the string, then
  //           that whole string is added to a div. The created nodes are plucked
  //           out and applied to the target location on DOM.

  function applySVGInnerHTMLFix(document, DOMClass, svgNamespace) {
    if (!document) return DOMClass;

    if (!shouldApplyFix(document, svgNamespace)) {
      return DOMClass;
    }

    var div = document.createElement('div');
    return /*#__PURE__*/function (_DOMClass) {
      _inheritsLoose$2(DOMChangesWithSVGInnerHTMLFix, _DOMClass);

      function DOMChangesWithSVGInnerHTMLFix() {
        return _DOMClass.apply(this, arguments) || this;
      }

      var _proto = DOMChangesWithSVGInnerHTMLFix.prototype;

      _proto.insertHTMLBefore = function insertHTMLBefore(parent, nextSibling, html) {
        if (html === '') {
          return _DOMClass.prototype.insertHTMLBefore.call(this, parent, nextSibling, html);
        }

        if (parent.namespaceURI !== svgNamespace) {
          return _DOMClass.prototype.insertHTMLBefore.call(this, parent, nextSibling, html);
        }

        return fixSVG(parent, div, html, nextSibling);
      };

      return DOMChangesWithSVGInnerHTMLFix;
    }(DOMClass);
  }

  function fixSVG(parent, div, html, reference) {
    var source; // This is important, because descendants of the <foreignObject> integration
    // point are parsed in the HTML namespace

    if (parent.tagName.toUpperCase() === 'FOREIGNOBJECT') {
      // IE, Edge: also do not correctly support using `innerHTML` on SVG
      // namespaced elements. So here a wrapper is used.
      var wrappedHtml = '<svg><foreignObject>' + html + '</foreignObject></svg>';
      util.clearElement(div);
      div.insertAdjacentHTML("afterbegin"
      /* afterbegin */
      , wrappedHtml);
      source = div.firstChild.firstChild;
    } else {
      // IE, Edge: also do not correctly support using `innerHTML` on SVG
      // namespaced elements. So here a wrapper is used.
      var _wrappedHtml = '<svg>' + html + '</svg>';

      util.clearElement(div);
      div.insertAdjacentHTML("afterbegin"
      /* afterbegin */
      , _wrappedHtml);
      source = div.firstChild;
    }

    return moveNodesBefore(source, parent, reference);
  }

  function shouldApplyFix(document, svgNamespace) {
    var svg = document.createElementNS(svgNamespace, 'svg');

    try {
      svg.insertAdjacentHTML("beforeend"
      /* beforeend */
      , '<circle></circle>');
    } catch (e) {// IE, Edge: Will throw, insertAdjacentHTML is unsupported on SVG
      // Safari: Will throw, insertAdjacentHTML is not present on SVG
    } finally {
      // FF: Old versions will create a node in the wrong namespace
      if (svg.childNodes.length === 1 && svg.firstChild.namespaceURI === SVG_NAMESPACE) {
        // The test worked as expected, no fix required
        return false;
      }

      return true;
    }
  }

  function _inheritsLoose$3(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

  // Patch:    Adjacent text node merging fix
  // Browsers: IE, Edge, Firefox w/o inspector open
  // Reason:   These browsers will merge adjacent text nodes. For example given
  //           <div>Hello</div> with div.insertAdjacentHTML(' world') browsers
  //           with proper behavior will populate div.childNodes with two items.
  //           These browsers will populate it with one merged node instead.
  // Fix:      Add these nodes to a wrapper element, then iterate the childNodes
  //           of that wrapper and move the nodes to their target location. Note
  //           that potential SVG bugs will have been handled before this fix.
  //           Note that this fix must only apply to the previous text node, as
  //           the base implementation of `insertHTMLBefore` already handles
  //           following text nodes correctly.
  function applyTextNodeMergingFix(document, DOMClass) {
    if (!document) return DOMClass;

    if (!shouldApplyFix$1(document)) {
      return DOMClass;
    }

    return /*#__PURE__*/function (_DOMClass) {
      _inheritsLoose$3(DOMChangesWithTextNodeMergingFix, _DOMClass);

      function DOMChangesWithTextNodeMergingFix(document) {
        var _this;

        _this = _DOMClass.call(this, document) || this;
        _this.uselessComment = document.createComment('');
        return _this;
      }

      var _proto = DOMChangesWithTextNodeMergingFix.prototype;

      _proto.insertHTMLBefore = function insertHTMLBefore(parent, nextSibling, html) {
        if (html === '') {
          return _DOMClass.prototype.insertHTMLBefore.call(this, parent, nextSibling, html);
        }

        var didSetUselessComment = false;
        var nextPrevious = nextSibling ? nextSibling.previousSibling : parent.lastChild;

        if (nextPrevious && nextPrevious instanceof Text) {
          didSetUselessComment = true;
          parent.insertBefore(this.uselessComment, nextSibling);
        }

        var bounds = _DOMClass.prototype.insertHTMLBefore.call(this, parent, nextSibling, html);

        if (didSetUselessComment) {
          parent.removeChild(this.uselessComment);
        }

        return bounds;
      };

      return DOMChangesWithTextNodeMergingFix;
    }(DOMClass);
  }

  function shouldApplyFix$1(document) {
    var mergingTextDiv = document.createElement('div');
    mergingTextDiv.appendChild(document.createTextNode('first'));
    mergingTextDiv.insertAdjacentHTML("beforeend"
    /* beforeend */
    , 'second');

    if (mergingTextDiv.childNodes.length === 2) {
      // It worked as expected, no fix required
      return false;
    }

    return true;
  }

  function _inheritsLoose$4(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }
  ['b', 'big', 'blockquote', 'body', 'br', 'center', 'code', 'dd', 'div', 'dl', 'dt', 'em', 'embed', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'hr', 'i', 'img', 'li', 'listing', 'main', 'meta', 'nobr', 'ol', 'p', 'pre', 'ruby', 's', 'small', 'span', 'strong', 'strike', 'sub', 'sup', 'table', 'tt', 'u', 'ul', 'var'].forEach(function (tag) {
    return BLACKLIST_TABLE[tag] = 1;
  });
  var WHITESPACE = /[\t-\r \xA0\u1680\u180E\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]/;
  var doc = typeof document === 'undefined' ? null : document;
  function isWhitespace(string) {
    return WHITESPACE.test(string);
  }
  var DOM;

  (function (DOM) {
    var TreeConstruction = /*#__PURE__*/function (_DOMOperations) {
      _inheritsLoose$4(TreeConstruction, _DOMOperations);

      function TreeConstruction() {
        return _DOMOperations.apply(this, arguments) || this;
      }

      var _proto = TreeConstruction.prototype;

      _proto.createElementNS = function createElementNS(namespace, tag) {
        return this.document.createElementNS(namespace, tag);
      };

      _proto.setAttribute = function setAttribute(element, name, value, namespace) {
        if (namespace === void 0) {
          namespace = null;
        }

        if (namespace) {
          element.setAttributeNS(namespace, name, value);
        } else {
          element.setAttribute(name, value);
        }
      };

      return TreeConstruction;
    }(DOMOperations);

    DOM.TreeConstruction = TreeConstruction;
    var appliedTreeConstruction = TreeConstruction;
    appliedTreeConstruction = applyTextNodeMergingFix(doc, appliedTreeConstruction);
    appliedTreeConstruction = applySVGInnerHTMLFix(doc, appliedTreeConstruction, "http://www.w3.org/2000/svg"
    /* SVG */
    );
    DOM.DOMTreeConstruction = appliedTreeConstruction;
  })(DOM || (DOM = {}));

  var DOMChangesImpl = /*#__PURE__*/function (_DOMOperations2) {
    _inheritsLoose$4(DOMChangesImpl, _DOMOperations2);

    function DOMChangesImpl(document) {
      var _this;

      _this = _DOMOperations2.call(this, document) || this;
      _this.document = document;
      _this.namespace = null;
      return _this;
    }

    var _proto2 = DOMChangesImpl.prototype;

    _proto2.setAttribute = function setAttribute(element, name, value) {
      element.setAttribute(name, value);
    };

    _proto2.removeAttribute = function removeAttribute(element, name) {
      element.removeAttribute(name);
    };

    _proto2.insertAfter = function insertAfter(element, node, reference) {
      this.insertBefore(element, node, reference.nextSibling);
    };

    return DOMChangesImpl;
  }(DOMOperations);
  var helper = DOMChangesImpl;
  helper = applyTextNodeMergingFix(doc, helper);
  helper = applySVGInnerHTMLFix(doc, helper, "http://www.w3.org/2000/svg"
  /* SVG */
  );
  var helper$1 = helper;
  var DOMTreeConstruction = DOM.DOMTreeConstruction;

  var GUID = 0;
  var Ref = /*#__PURE__*/function () {
    function Ref(value) {
      this.id = GUID++;
      this.value = value;
    }

    var _proto = Ref.prototype;

    _proto.get = function get() {
      return this.value;
    };

    _proto.release = function release() {
      if (env.DEBUG && this.value === null) {
        throw new Error('BUG: double release?');
      }

      this.value = null;
    };

    _proto.toString = function toString() {
      var label = "Ref " + this.id;

      if (this.value === null) {
        return label + " (released)";
      } else {
        try {
          return label + ": " + this.value;
        } catch (_a) {
          return label;
        }
      }
    };

    return Ref;
  }();

  var DebugRenderTreeImpl = /*#__PURE__*/function () {
    function DebugRenderTreeImpl() {
      this.stack = new util.Stack();
      this.refs = new WeakMap();
      this.roots = new Set();
      this.nodes = new WeakMap();
    }

    var _proto2 = DebugRenderTreeImpl.prototype;

    _proto2.begin = function begin() {
      this.reset();
    };

    _proto2.create = function create(state, node) {
      var internalNode = util.assign({}, node, {
        bounds: null,
        refs: new Set()
      });
      this.nodes.set(state, internalNode);
      this.appendChild(internalNode, state);
      this.enter(state);
    };

    _proto2.update = function update(state) {
      this.enter(state);
    };

    _proto2.didRender = function didRender(state, bounds) {
      if (env.DEBUG && this.stack.current !== state) {
        throw new Error("BUG: expecting " + this.stack.current + ", got " + state);
      }

      this.nodeFor(state).bounds = bounds;
      this.exit();
    };

    _proto2.willDestroy = function willDestroy(state) {
      this.refs.get(state).release();
    };

    _proto2.commit = function commit() {
      this.reset();
    };

    _proto2.capture = function capture() {
      return this.captureRefs(this.roots);
    };

    _proto2.reset = function reset() {
      if (this.stack.size !== 0) {
        // We probably encountered an error during the rendering loop. This will
        // likely trigger undefined behavior and memory leaks as the error left
        // things in an inconsistent state. It is recommended that the user
        // refresh the page.
        // TODO: We could warn here? But this happens all the time in our tests?
        // Clean up the root reference to prevent errors from happening if we
        // attempt to capture the render tree (Ember Inspector may do this)
        var root = this.stack.toArray()[0];
        var ref = this.refs.get(root);

        if (ref !== undefined) {
          this.roots["delete"](ref);
        }

        while (!this.stack.isEmpty()) {
          this.stack.pop();
        }
      }
    };

    _proto2.enter = function enter(state) {
      this.stack.push(state);
    };

    _proto2.exit = function exit() {
      if (env.DEBUG && this.stack.size === 0) {
        throw new Error('BUG: unbalanced pop');
      }

      this.stack.pop();
    };

    _proto2.nodeFor = function nodeFor(state) {
      return this.nodes.get(state);
    };

    _proto2.appendChild = function appendChild(node, state) {
      if (env.DEBUG && this.refs.has(state)) {
        throw new Error('BUG: child already appended');
      }

      var parent = this.stack.current;
      var ref = new Ref(state);
      this.refs.set(state, ref);

      if (parent) {
        var parentNode = this.nodeFor(parent);
        parentNode.refs.add(ref);
        node.parent = parentNode;
      } else {
        this.roots.add(ref);
      }
    };

    _proto2.captureRefs = function captureRefs(refs) {
      var _this = this;

      var captured = [];
      refs.forEach(function (ref) {
        var state = ref.get();

        if (state) {
          captured.push(_this.captureNode("render-node:" + ref.id, state));
        } else {
          refs["delete"](ref);
        }
      });
      return captured;
    };

    _proto2.captureNode = function captureNode(id, state) {
      var node = this.nodeFor(state);
      var type = node.type,
          name = node.name,
          args = node.args,
          instance = node.instance,
          refs = node.refs;
      var template = this.captureTemplate(node);
      var bounds = this.captureBounds(node);
      var children = this.captureRefs(refs);
      return {
        id: id,
        type: type,
        name: name,
        args: reifyArgs(args),
        instance: instance,
        template: template,
        bounds: bounds,
        children: children
      };
    };

    _proto2.captureTemplate = function captureTemplate(_ref) {
      var template = _ref.template;
      return template || null;
    };

    _proto2.captureBounds = function captureBounds(node) {
      var bounds = node.bounds;
      var parentElement = bounds.parentElement();
      var firstNode = bounds.firstNode();
      var lastNode = bounds.lastNode();
      return {
        parentElement: parentElement,
        firstNode: firstNode,
        lastNode: lastNode
      };
    };

    return DebugRenderTreeImpl;
  }();

  function _defineProperties$2(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass$2(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$2(Constructor.prototype, protoProps); if (staticProps) _defineProperties$2(Constructor, staticProps); return Constructor; }

  var _a$1;
  var TRANSACTION = util.symbol('TRANSACTION');

  var TransactionImpl = /*#__PURE__*/function () {
    function TransactionImpl() {
      this.scheduledInstallModifiers = [];
      this.scheduledUpdateModifiers = [];
      this.createdComponents = [];
      this.updatedComponents = [];
    }

    var _proto = TransactionImpl.prototype;

    _proto.didCreate = function didCreate(component) {
      this.createdComponents.push(component);
    };

    _proto.didUpdate = function didUpdate(component) {
      this.updatedComponents.push(component);
    };

    _proto.scheduleInstallModifier = function scheduleInstallModifier(modifier) {
      this.scheduledInstallModifiers.push(modifier);
    };

    _proto.scheduleUpdateModifier = function scheduleUpdateModifier(modifier) {
      this.scheduledUpdateModifiers.push(modifier);
    };

    _proto.commit = function commit() {
      var createdComponents = this.createdComponents,
          updatedComponents = this.updatedComponents;

      for (var i = 0; i < createdComponents.length; i++) {
        var _createdComponents$i = createdComponents[i],
            _manager = _createdComponents$i.manager,
            _state = _createdComponents$i.state;

        _manager.didCreate(_state);
      }

      for (var _i = 0; _i < updatedComponents.length; _i++) {
        var _updatedComponents$_i = updatedComponents[_i],
            _manager2 = _updatedComponents$_i.manager,
            _state2 = _updatedComponents$_i.state;

        _manager2.didUpdate(_state2);
      }

      var scheduledInstallModifiers = this.scheduledInstallModifiers,
          scheduledUpdateModifiers = this.scheduledUpdateModifiers; // Prevent a transpilation issue we guard against in Ember, the
      // throw-if-closure-required issue

      var manager, state;

      for (var _i2 = 0; _i2 < scheduledInstallModifiers.length; _i2++) {
        var modifier = scheduledInstallModifiers[_i2];
        manager = modifier.manager;
        state = modifier.state;
        var modifierTag = manager.getTag(state);

        if (modifierTag !== null) {
          var tag = validator.track( // eslint-disable-next-line no-loop-func
          function () {
            return manager.install(state);
          }, env.DEBUG && "- While rendering:\n  (instance of a `" + (modifier.definition.resolvedName || manager.getDebugName(modifier.definition.state)) + "` modifier)");
          validator.updateTag(modifierTag, tag);
        } else {
          manager.install(state);
        }
      }

      for (var _i3 = 0; _i3 < scheduledUpdateModifiers.length; _i3++) {
        var _modifier = scheduledUpdateModifiers[_i3];
        manager = _modifier.manager;
        state = _modifier.state;

        var _modifierTag = manager.getTag(state);

        if (_modifierTag !== null) {
          var _tag = validator.track( // eslint-disable-next-line no-loop-func
          function () {
            return manager.update(state);
          }, env.DEBUG && "- While rendering:\n  (instance of a `" + (_modifier.definition.resolvedName || manager.getDebugName(_modifier.definition.state)) + "` modifier)");

          validator.updateTag(_modifierTag, _tag);
        } else {
          manager.update(state);
        }
      }
    };

    return TransactionImpl;
  }();

  var EnvironmentImpl = /*#__PURE__*/function () {
    function EnvironmentImpl(options, delegate) {
      this.delegate = delegate;
      this[_a$1] = null; // Delegate methods and values

      this.isInteractive = this.delegate.isInteractive;
      this.debugRenderTree = this.delegate.enableDebugTooling ? new DebugRenderTreeImpl() : undefined;

      if (options.appendOperations) {
        this.appendOperations = options.appendOperations;
        this.updateOperations = options.updateOperations;
      } else if (options.document) {
        this.appendOperations = new DOMTreeConstruction(options.document);
        this.updateOperations = new DOMChangesImpl(options.document);
      } else if (env.DEBUG) {
        throw new Error('you must pass document or appendOperations to a new runtime');
      }
    }

    var _proto2 = EnvironmentImpl.prototype;

    _proto2.getAppendOperations = function getAppendOperations() {
      return this.appendOperations;
    };

    _proto2.getDOM = function getDOM() {
      return this.updateOperations;
    };

    _proto2.begin = function begin() {
      var _b;
      (_b = this.debugRenderTree) === null || _b === void 0 ? void 0 : _b.begin();
      this[TRANSACTION] = new TransactionImpl();
    };

    _proto2.didCreate = function didCreate(component) {
      this.transaction.didCreate(component);
    };

    _proto2.didUpdate = function didUpdate(component) {
      this.transaction.didUpdate(component);
    };

    _proto2.scheduleInstallModifier = function scheduleInstallModifier(modifier) {
      if (this.isInteractive) {
        this.transaction.scheduleInstallModifier(modifier);
      }
    };

    _proto2.scheduleUpdateModifier = function scheduleUpdateModifier(modifier) {
      if (this.isInteractive) {
        this.transaction.scheduleUpdateModifier(modifier);
      }
    };

    _proto2.commit = function commit() {
      var _b;

      var transaction = this.transaction;
      this[TRANSACTION] = null;
      transaction.commit();
      (_b = this.debugRenderTree) === null || _b === void 0 ? void 0 : _b.commit();
      this.delegate.onTransactionCommit();
    };

    _createClass$2(EnvironmentImpl, [{
      key: "transaction",
      get: function get() {
        return this[TRANSACTION];
      }
    }]);

    return EnvironmentImpl;
  }();
  _a$1 = TRANSACTION;
  function runtimeContext(options, delegate, artifacts, resolver) {
    return {
      env: new EnvironmentImpl(options, delegate),
      program: new program.RuntimeProgramImpl(artifacts.constants, artifacts.heap),
      resolver: resolver
    };
  }
  function inTransaction(env, cb) {
    if (!env[TRANSACTION]) {
      env.begin();

      try {
        cb();
      } finally {
        env.commit();
      }
    } else {
      cb();
    }
  }

  function initializeRegistersWithSP(sp) {
    return [0, -1, sp, 0];
  }

  var LowLevelVM = /*#__PURE__*/function () {
    function LowLevelVM(stack, heap, program, externs, registers) {
      this.stack = stack;
      this.heap = heap;
      this.program = program;
      this.externs = externs;
      this.registers = registers;
      this.currentOpSize = 0;
    }

    var _proto = LowLevelVM.prototype;

    _proto.fetchRegister = function fetchRegister(register) {
      return this.registers[register];
    };

    _proto.loadRegister = function loadRegister(register, value) {
      this.registers[register] = value;
    };

    _proto.setPc = function setPc(pc) {
      this.registers[vm.$pc] = pc;
    } // Start a new frame and save $ra and $fp on the stack
    ;

    _proto.pushFrame = function pushFrame() {
      this.stack.push(this.registers[vm.$ra]);
      this.stack.push(this.registers[vm.$fp]);
      this.registers[vm.$fp] = this.registers[vm.$sp] - 1;
    } // Restore $ra, $sp and $fp
    ;

    _proto.popFrame = function popFrame() {
      this.registers[vm.$sp] = this.registers[vm.$fp] - 1;
      this.registers[vm.$ra] = this.stack.get(0);
      this.registers[vm.$fp] = this.stack.get(1);
    };

    _proto.pushSmallFrame = function pushSmallFrame() {
      this.stack.push(this.registers[vm.$ra]);
    };

    _proto.popSmallFrame = function popSmallFrame() {
      this.registers[vm.$ra] = this.stack.pop();
    } // Jump to an address in `program`
    ;

    _proto["goto"] = function goto(offset) {
      this.setPc(this.target(offset));
    };

    _proto.target = function target(offset) {
      return this.registers[vm.$pc] + offset - this.currentOpSize;
    } // Save $pc into $ra, then jump to a new address in `program` (jal in MIPS)
    ;

    _proto.call = function call(handle) {
      this.registers[vm.$ra] = this.registers[vm.$pc];
      this.setPc(this.heap.getaddr(handle));
    } // Put a specific `program` address in $ra
    ;

    _proto.returnTo = function returnTo(offset) {
      this.registers[vm.$ra] = this.target(offset);
    } // Return to the `program` address stored in $ra
    ;

    _proto["return"] = function _return() {
      this.setPc(this.registers[vm.$ra]);
    };

    _proto.nextStatement = function nextStatement() {
      var registers = this.registers,
          program = this.program;
      var pc = registers[vm.$pc];

      if (pc === -1) {
        return null;
      } // We have to save off the current operations size so that
      // when we do a jump we can calculate the correct offset
      // to where we are going. We can't simply ask for the size
      // in a jump because we have have already incremented the
      // program counter to the next instruction prior to executing.


      var opcode = program.opcode(pc);
      var operationSize = this.currentOpSize = opcode.size;
      this.registers[vm.$pc] += operationSize;
      return opcode;
    };

    _proto.evaluateOuter = function evaluateOuter(opcode, vm) {
      {
        this.evaluateInner(opcode, vm);
      }
    };

    _proto.evaluateInner = function evaluateInner(opcode, vm) {
      if (opcode.isMachine) {
        this.evaluateMachine(opcode);
      } else {
        this.evaluateSyscall(opcode, vm);
      }
    };

    _proto.evaluateMachine = function evaluateMachine(opcode) {
      switch (opcode.type) {
        case 0
        /* PushFrame */
        :
          return this.pushFrame();

        case 1
        /* PopFrame */
        :
          return this.popFrame();

        case 3
        /* InvokeStatic */
        :
          return this.call(opcode.op1);

        case 2
        /* InvokeVirtual */
        :
          return this.call(this.stack.pop());

        case 4
        /* Jump */
        :
          return this["goto"](opcode.op1);

        case 5
        /* Return */
        :
          return this["return"]();

        case 6
        /* ReturnTo */
        :
          return this.returnTo(opcode.op1);
      }
    };

    _proto.evaluateSyscall = function evaluateSyscall(opcode, vm) {
      APPEND_OPCODES.evaluate(vm, opcode, opcode.type);
    };

    return LowLevelVM;
  }();

  function _inheritsLoose$5(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

  function _defineProperties$3(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass$3(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$3(Constructor.prototype, protoProps); if (staticProps) _defineProperties$3(Constructor, staticProps); return Constructor; }

  var UpdatingVMImpl = /*#__PURE__*/function () {
    function UpdatingVMImpl(env, _ref) {
      var _ref$alwaysRevalidate = _ref.alwaysRevalidate,
          alwaysRevalidate = _ref$alwaysRevalidate === void 0 ? false : _ref$alwaysRevalidate;
      this.frameStack = new util.Stack();
      this.env = env;
      this.dom = env.getDOM();
      this.alwaysRevalidate = alwaysRevalidate;
    }

    var _proto = UpdatingVMImpl.prototype;

    _proto.execute = function execute(opcodes, handler) {
      var _this = this;

      if (env.DEBUG) {
        var hasErrored = true;

        try {
          validator.runInTrackingTransaction(function () {
            return _this._execute(opcodes, handler);
          }, '- While rendering:'); // using a boolean here to avoid breaking ergonomics of "pause on uncaught exceptions"
          // which would happen with a `catch` + `throw`

          hasErrored = false;
        } finally {
          if (hasErrored) {
            // eslint-disable-next-line no-console
            console.error("\n\nError occurred:\n\n" + validator.resetTracking() + "\n\n");
          }
        }
      } else {
        this._execute(opcodes, handler);
      }
    };

    _proto._execute = function _execute(opcodes, handler) {
      var frameStack = this.frameStack;
      this["try"](opcodes, handler);

      while (true) {
        if (frameStack.isEmpty()) break;
        var opcode = this.frame.nextStatement();

        if (opcode === undefined) {
          frameStack.pop();
          continue;
        }

        opcode.evaluate(this);
      }
    };

    _proto["goto"] = function goto(index) {
      this.frame["goto"](index);
    };

    _proto["try"] = function _try(ops, handler) {
      this.frameStack.push(new UpdatingVMFrame(ops, handler));
    };

    _proto["throw"] = function _throw() {
      this.frame.handleException();
      this.frameStack.pop();
    };

    _createClass$3(UpdatingVMImpl, [{
      key: "frame",
      get: function get() {
        return this.frameStack.current;
      }
    }]);

    return UpdatingVMImpl;
  }();
  var ResumableVMStateImpl = /*#__PURE__*/function () {
    function ResumableVMStateImpl(state, resumeCallback) {
      this.state = state;
      this.resumeCallback = resumeCallback;
    }

    var _proto2 = ResumableVMStateImpl.prototype;

    _proto2.resume = function resume(runtime, builder) {
      return this.resumeCallback(runtime, this.state, builder);
    };

    return ResumableVMStateImpl;
  }();
  var BlockOpcode = /*#__PURE__*/function () {
    function BlockOpcode(state, runtime, bounds, children) {
      this.state = state;
      this.runtime = runtime;
      this.children = children;
      this.bounds = bounds;
    }

    var _proto3 = BlockOpcode.prototype;

    _proto3.parentElement = function parentElement() {
      return this.bounds.parentElement();
    };

    _proto3.firstNode = function firstNode() {
      return this.bounds.firstNode();
    };

    _proto3.lastNode = function lastNode() {
      return this.bounds.lastNode();
    };

    _proto3.evaluate = function evaluate(vm) {
      vm["try"](this.children, null);
    };

    return BlockOpcode;
  }();
  var TryOpcode = /*#__PURE__*/function (_BlockOpcode) {
    _inheritsLoose$5(TryOpcode, _BlockOpcode);

    function TryOpcode() {
      var _this2;

      _this2 = _BlockOpcode.apply(this, arguments) || this;
      _this2.type = 'try';
      return _this2;
    }

    var _proto4 = TryOpcode.prototype;

    _proto4.evaluate = function evaluate(vm) {
      vm["try"](this.children, this);
    };

    _proto4.handleException = function handleException() {
      var _this3 = this;

      var state = this.state,
          bounds = this.bounds,
          runtime = this.runtime;
      destroyable.destroyChildren(this);
      var elementStack = NewElementBuilder.resume(runtime.env, bounds);
      var vm = state.resume(runtime, elementStack);
      var updating = [];
      var children = this.children = [];
      var result = vm.execute(function (vm) {
        vm.pushUpdating(updating);
        vm.updateWith(_this3);
        vm.pushUpdating(children);
      });
      destroyable.associateDestroyableChild(this, result.drop);
    };

    return TryOpcode;
  }(BlockOpcode);
  var ListItemOpcode = /*#__PURE__*/function (_TryOpcode) {
    _inheritsLoose$5(ListItemOpcode, _TryOpcode);

    function ListItemOpcode(state, runtime, bounds, key, memo, value) {
      var _this4;

      _this4 = _TryOpcode.call(this, state, runtime, bounds, []) || this;
      _this4.key = key;
      _this4.memo = memo;
      _this4.value = value;
      _this4.retained = false;
      _this4.index = -1;
      return _this4;
    }

    var _proto5 = ListItemOpcode.prototype;

    _proto5.updateReferences = function updateReferences(item) {
      this.retained = true;
      reference.updateRef(this.value, item.value);
      reference.updateRef(this.memo, item.memo);
    };

    _proto5.shouldRemove = function shouldRemove() {
      return !this.retained;
    };

    _proto5.reset = function reset() {
      this.retained = false;
    };

    return ListItemOpcode;
  }(TryOpcode);
  var ListBlockOpcode = /*#__PURE__*/function (_BlockOpcode2) {
    _inheritsLoose$5(ListBlockOpcode, _BlockOpcode2);

    function ListBlockOpcode(state, runtime, bounds, children, iterableRef) {
      var _this5;

      _this5 = _BlockOpcode2.call(this, state, runtime, bounds, children) || this;
      _this5.iterableRef = iterableRef;
      _this5.type = 'list-block';
      _this5.opcodeMap = new Map();
      _this5.marker = null;
      _this5.lastIterator = reference.valueForRef(iterableRef);
      return _this5;
    }

    var _proto6 = ListBlockOpcode.prototype;

    _proto6.initializeChild = function initializeChild(opcode) {
      opcode.index = this.children.length - 1;
      this.opcodeMap.set(opcode.key, opcode);
    };

    _proto6.evaluate = function evaluate(vm) {
      var iterator = reference.valueForRef(this.iterableRef);

      if (this.lastIterator !== iterator) {
        var bounds = this.bounds;
        var dom = vm.dom;
        var marker = this.marker = dom.createComment('');
        dom.insertAfter(bounds.parentElement(), marker, bounds.lastNode());
        this.sync(iterator);
        this.parentElement().removeChild(marker);
        this.marker = null;
        this.lastIterator = iterator;
      } // Run now-updated updating opcodes


      _BlockOpcode2.prototype.evaluate.call(this, vm);
    };

    _proto6.sync = function sync(iterator) {
      var itemMap = this.opcodeMap,
          children = this.children;
      var currentOpcodeIndex = 0;
      var seenIndex = 0;
      this.children = this.bounds.boundList = [];

      while (true) {
        var item = iterator.next();
        if (item === null) break;
        var opcode = children[currentOpcodeIndex];
        var key = item.key; // Items that have already been found and moved will already be retained,
        // we can continue until we find the next unretained item

        while (opcode !== undefined && opcode.retained === true) {
          opcode = children[++currentOpcodeIndex];
        }

        if (opcode !== undefined && opcode.key === key) {
          this.retainItem(opcode, item);
          currentOpcodeIndex++;
        } else if (itemMap.has(key)) {
          var itemOpcode = itemMap.get(key); // The item opcode was seen already, so we should move it.

          if (itemOpcode.index < seenIndex) {
            this.moveItem(itemOpcode, item, opcode);
          } else {
            // Update the seen index, we are going to be moving this item around
            // so any other items that come before it will likely need to move as
            // well.
            seenIndex = itemOpcode.index;
            var seenUnretained = false; // iterate through all of the opcodes between the current position and
            // the position of the item's opcode, and determine if they are all
            // retained.

            for (var i = currentOpcodeIndex + 1; i < seenIndex; i++) {
              if (children[i].retained === false) {
                seenUnretained = true;
                break;
              }
            } // If we have seen only retained opcodes between this and the matching
            // opcode, it means that all the opcodes in between have been moved
            // already, and we can safely retain this item's opcode.


            if (seenUnretained === false) {
              this.retainItem(itemOpcode, item);
              currentOpcodeIndex = seenIndex + 1;
            } else {
              this.moveItem(itemOpcode, item, opcode);
              currentOpcodeIndex++;
            }
          }
        } else {
          this.insertItem(item, opcode);
        }
      }

      for (var _i = 0; _i < children.length; _i++) {
        var _opcode = children[_i];

        if (_opcode.retained === false) {
          this.deleteItem(_opcode);
        } else {
          _opcode.reset();
        }
      }
    };

    _proto6.retainItem = function retainItem(opcode, item) {

      var children = this.children;
      reference.updateRef(opcode.memo, item.memo);
      reference.updateRef(opcode.value, item.value);
      opcode.retained = true;
      opcode.index = children.length;
      children.push(opcode);
    };

    _proto6.insertItem = function insertItem(item, before) {
      var _this6 = this;

      var opcodeMap = this.opcodeMap,
          bounds = this.bounds,
          state = this.state,
          runtime = this.runtime,
          children = this.children;
      var key = item.key;
      var nextSibling = before === undefined ? this.marker : before.firstNode();
      var elementStack = NewElementBuilder.forInitialRender(runtime.env, {
        element: bounds.parentElement(),
        nextSibling: nextSibling
      });
      var vm = state.resume(runtime, elementStack);
      vm.execute(function (vm) {
        vm.pushUpdating();
        var opcode = vm.enterItem(item);
        opcode.index = children.length;
        children.push(opcode);
        opcodeMap.set(key, opcode);
        destroyable.associateDestroyableChild(_this6, opcode);
      });
    };

    _proto6.moveItem = function moveItem(opcode, item, before) {
      var children = this.children;
      reference.updateRef(opcode.memo, item.memo);
      reference.updateRef(opcode.value, item.value);
      opcode.retained = true;
      var currentSibling, nextSibling;

      if (before === undefined) {
        move(opcode, this.marker);
      } else {
        currentSibling = opcode.lastNode().nextSibling;
        nextSibling = before.firstNode(); // Items are moved throughout the algorithm, so there are cases where the
        // the items already happen to be siblings (e.g. an item in between was
        // moved before this move happened). Check to see if they are siblings
        // first before doing the move.

        if (currentSibling !== nextSibling) {
          move(opcode, nextSibling);
        }
      }

      opcode.index = children.length;
      children.push(opcode);
    };

    _proto6.deleteItem = function deleteItem(opcode) {

      destroyable.destroy(opcode);
      clear(opcode);
      this.opcodeMap["delete"](opcode.key);
    };

    return ListBlockOpcode;
  }(BlockOpcode);

  var UpdatingVMFrame = /*#__PURE__*/function () {
    function UpdatingVMFrame(ops, exceptionHandler) {
      this.ops = ops;
      this.exceptionHandler = exceptionHandler;
      this.current = 0;
    }

    var _proto7 = UpdatingVMFrame.prototype;

    _proto7["goto"] = function goto(index) {
      this.current = index;
    };

    _proto7.nextStatement = function nextStatement() {
      return this.ops[this.current++];
    };

    _proto7.handleException = function handleException() {
      if (this.exceptionHandler) {
        this.exceptionHandler.handleException();
      }
    };

    return UpdatingVMFrame;
  }();

  var RenderResultImpl = /*#__PURE__*/function () {
    function RenderResultImpl(env, updating, bounds, drop) {
      var _this = this;

      this.env = env;
      this.updating = updating;
      this.bounds = bounds;
      this.drop = drop;
      destroyable.associateDestroyableChild(this, drop);
      destroyable.registerDestructor(this, function () {
        return clear(_this.bounds);
      });
    }

    var _proto = RenderResultImpl.prototype;

    _proto.rerender = function rerender(_temp) {
      var _ref = _temp === void 0 ? {
        alwaysRevalidate: false
      } : _temp,
          _ref$alwaysRevalidate = _ref.alwaysRevalidate,
          alwaysRevalidate = _ref$alwaysRevalidate === void 0 ? false : _ref$alwaysRevalidate;

      var env = this.env,
          updating = this.updating;
      var vm = new UpdatingVMImpl(env, {
        alwaysRevalidate: alwaysRevalidate
      });
      vm.execute(updating, this);
    };

    _proto.parentElement = function parentElement() {
      return this.bounds.parentElement();
    };

    _proto.firstNode = function firstNode() {
      return this.bounds.firstNode();
    };

    _proto.lastNode = function lastNode() {
      return this.bounds.lastNode();
    };

    _proto.handleException = function handleException() {
      throw 'this should never happen';
    };

    return RenderResultImpl;
  }();

  var EvaluationStackImpl = /*#__PURE__*/function () {
    // fp -> sp
    function EvaluationStackImpl(stack, registers) {
      if (stack === void 0) {
        stack = [];
      }

      this.stack = stack;
      this[REGISTERS] = registers;
    }

    EvaluationStackImpl.restore = function restore(snapshot) {
      return new this(snapshot.slice(), initializeRegistersWithSP(snapshot.length - 1));
    };

    var _proto = EvaluationStackImpl.prototype;

    _proto.push = function push(value) {
      this.stack[++this[REGISTERS][vm.$sp]] = value;
    };

    _proto.dup = function dup(position) {
      if (position === void 0) {
        position = this[REGISTERS][vm.$sp];
      }

      this.stack[++this[REGISTERS][vm.$sp]] = this.stack[position];
    };

    _proto.copy = function copy(from, to) {
      this.stack[to] = this.stack[from];
    };

    _proto.pop = function pop(n) {
      if (n === void 0) {
        n = 1;
      }

      var top = this.stack[this[REGISTERS][vm.$sp]];
      this[REGISTERS][vm.$sp] -= n;
      return top;
    };

    _proto.peek = function peek(offset) {
      if (offset === void 0) {
        offset = 0;
      }

      return this.stack[this[REGISTERS][vm.$sp] - offset];
    };

    _proto.get = function get(offset, base) {
      if (base === void 0) {
        base = this[REGISTERS][vm.$fp];
      }

      return this.stack[base + offset];
    };

    _proto.set = function set(value, offset, base) {
      if (base === void 0) {
        base = this[REGISTERS][vm.$fp];
      }

      this.stack[base + offset] = value;
    };

    _proto.slice = function slice(start, end) {
      return this.stack.slice(start, end);
    };

    _proto.capture = function capture(items) {
      var end = this[REGISTERS][vm.$sp] + 1;
      var start = end - items;
      return this.stack.slice(start, end);
    };

    _proto.reset = function reset() {
      this.stack.length = 0;
    };

    _proto.toArray = function toArray() {
      return this.stack.slice(this[REGISTERS][vm.$fp], this[REGISTERS][vm.$sp] + 1);
    };

    return EvaluationStackImpl;
  }();

  function _defineProperties$4(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass$4(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$4(Constructor.prototype, protoProps); if (staticProps) _defineProperties$4(Constructor, staticProps); return Constructor; }

  var _a$2, _b;

  var Stacks = function Stacks() {
    this.scope = new util.Stack();
    this.dynamicScope = new util.Stack();
    this.updating = new util.Stack();
    this.cache = new util.Stack();
    this.list = new util.Stack();
  };

  var VM = /*#__PURE__*/function () {
    /**
     * End of migrated.
     */
    function VM(runtime, _ref, elementStack, context) {
      var _this = this;

      var pc = _ref.pc,
          scope = _ref.scope,
          dynamicScope = _ref.dynamicScope,
          stack = _ref.stack;
      this.runtime = runtime;
      this.elementStack = elementStack;
      this.context = context;
      this[_a$2] = new Stacks();
      this[_b] = new util.Stack();
      this.s0 = null;
      this.s1 = null;
      this.t0 = null;
      this.t1 = null;
      this.v0 = null;
      this.resume = initVM(this.context);

      if (env.DEBUG) {
        globalContext.assertGlobalContextWasSet();
      }

      var evalStack = EvaluationStackImpl.restore(stack);
      evalStack[REGISTERS][vm.$pc] = pc;
      evalStack[REGISTERS][vm.$sp] = stack.length - 1;
      evalStack[REGISTERS][vm.$fp] = -1;
      this[HEAP] = this.program.heap;
      this[CONSTANTS] = this.program.constants;
      this.elementStack = elementStack;
      this[STACKS].scope.push(scope);
      this[STACKS].dynamicScope.push(dynamicScope);
      this[ARGS] = new VMArgumentsImpl();
      this[INNER_VM] = new LowLevelVM(evalStack, this[HEAP], runtime.program, {
        debugBefore: function debugBefore(opcode) {
          return APPEND_OPCODES.debugBefore(_this, opcode);
        },
        debugAfter: function debugAfter(state) {
          APPEND_OPCODES.debugAfter(_this, state);
        }
      }, evalStack[REGISTERS]);
      this.destructor = {};
      this[DESTROYABLE_STACK].push(this.destructor);
    }

    var _proto = VM.prototype;

    // Fetch a value from a register onto the stack
    _proto.fetch = function fetch(register) {
      var value = this.fetchValue(register);
      this.stack.push(value);
    } // Load a value from the stack into a register
    ;

    _proto.load = function load(register) {
      var value = this.stack.pop();
      this.loadValue(register, value);
    };

    _proto.fetchValue = function fetchValue(register) {
      if (vm.isLowLevelRegister(register)) {
        return this[INNER_VM].fetchRegister(register);
      }

      switch (register) {
        case vm.$s0:
          return this.s0;

        case vm.$s1:
          return this.s1;

        case vm.$t0:
          return this.t0;

        case vm.$t1:
          return this.t1;

        case vm.$v0:
          return this.v0;
      }
    } // Load a value into a register
    ;

    _proto.loadValue = function loadValue(register, value) {
      if (vm.isLowLevelRegister(register)) {
        this[INNER_VM].loadRegister(register, value);
      }

      switch (register) {
        case vm.$s0:
          this.s0 = value;
          break;

        case vm.$s1:
          this.s1 = value;
          break;

        case vm.$t0:
          this.t0 = value;
          break;

        case vm.$t1:
          this.t1 = value;
          break;

        case vm.$v0:
          this.v0 = value;
          break;
      }
    }
    /**
     * Migrated to Inner
     */
    // Start a new frame and save $ra and $fp on the stack
    ;

    _proto.pushFrame = function pushFrame() {
      this[INNER_VM].pushFrame();
    } // Restore $ra, $sp and $fp
    ;

    _proto.popFrame = function popFrame() {
      this[INNER_VM].popFrame();
    } // Jump to an address in `program`
    ;

    _proto["goto"] = function goto(offset) {
      this[INNER_VM]["goto"](offset);
    } // Save $pc into $ra, then jump to a new address in `program` (jal in MIPS)
    ;

    _proto.call = function call(handle) {
      this[INNER_VM].call(handle);
    } // Put a specific `program` address in $ra
    ;

    _proto.returnTo = function returnTo(offset) {
      this[INNER_VM].returnTo(offset);
    } // Return to the `program` address stored in $ra
    ;

    _proto["return"] = function _return() {
      this[INNER_VM]["return"]();
    };

    VM.initial = function initial(runtime, context, _ref2) {
      var handle = _ref2.handle,
          self = _ref2.self,
          dynamicScope = _ref2.dynamicScope,
          treeBuilder = _ref2.treeBuilder,
          numSymbols = _ref2.numSymbols,
          owner = _ref2.owner;
      var scope = PartialScopeImpl.root(self, numSymbols, owner);
      var state = vmState(runtime.program.heap.getaddr(handle), scope, dynamicScope);
      var vm = initVM(context)(runtime, state, treeBuilder);
      vm.pushUpdating();
      return vm;
    };

    VM.empty = function empty(runtime, _ref3, context) {
      var handle = _ref3.handle,
          treeBuilder = _ref3.treeBuilder,
          dynamicScope = _ref3.dynamicScope,
          owner = _ref3.owner;
      var vm = initVM(context)(runtime, vmState(runtime.program.heap.getaddr(handle), PartialScopeImpl.root(reference.UNDEFINED_REFERENCE, 0, owner), dynamicScope), treeBuilder);
      vm.pushUpdating();
      return vm;
    };

    _proto.compile = function compile(block) {
      var handle = util.unwrapHandle(block.compile(this.context));
      return handle;
    };

    _proto.captureState = function captureState(args, pc) {
      if (pc === void 0) {
        pc = this[INNER_VM].fetchRegister(vm.$pc);
      }

      return {
        pc: pc,
        scope: this.scope(),
        dynamicScope: this.dynamicScope(),
        stack: this.stack.capture(args)
      };
    };

    _proto.capture = function capture(args, pc) {
      if (pc === void 0) {
        pc = this[INNER_VM].fetchRegister(vm.$pc);
      }

      return new ResumableVMStateImpl(this.captureState(args, pc), this.resume);
    };

    _proto.beginCacheGroup = function beginCacheGroup(name) {
      var opcodes = this.updating();
      var guard = new JumpIfNotModifiedOpcode();
      opcodes.push(guard);
      opcodes.push(new BeginTrackFrameOpcode(name));
      this[STACKS].cache.push(guard);
      validator.beginTrackFrame(name);
    };

    _proto.commitCacheGroup = function commitCacheGroup() {
      var opcodes = this.updating();
      var guard = this[STACKS].cache.pop();
      var tag = validator.endTrackFrame();
      opcodes.push(new EndTrackFrameOpcode(guard));
      guard.finalize(tag, opcodes.length);
    };

    _proto.enter = function enter(args) {
      var updating = [];
      var state = this.capture(args);
      var block = this.elements().pushUpdatableBlock();
      var tryOpcode = new TryOpcode(state, this.runtime, block, updating);
      this.didEnter(tryOpcode);
    };

    _proto.enterItem = function enterItem(_ref4) {
      var key = _ref4.key,
          value = _ref4.value,
          memo = _ref4.memo;
      var stack = this.stack;
      var valueRef = reference.createIteratorItemRef(value);
      var memoRef = reference.createIteratorItemRef(memo);
      stack.push(valueRef);
      stack.push(memoRef);
      var state = this.capture(2);
      var block = this.elements().pushUpdatableBlock();
      var opcode = new ListItemOpcode(state, this.runtime, block, key, memoRef, valueRef);
      this.didEnter(opcode);
      return opcode;
    };

    _proto.registerItem = function registerItem(opcode) {
      this.listBlock().initializeChild(opcode);
    };

    _proto.enterList = function enterList(iterableRef, offset) {
      var updating = [];
      var addr = this[INNER_VM].target(offset);
      var state = this.capture(0, addr);
      var list = this.elements().pushBlockList(updating);
      var opcode = new ListBlockOpcode(state, this.runtime, list, updating, iterableRef);
      this[STACKS].list.push(opcode);
      this.didEnter(opcode);
    };

    _proto.didEnter = function didEnter(opcode) {
      this.associateDestroyable(opcode);
      this[DESTROYABLE_STACK].push(opcode);
      this.updateWith(opcode);
      this.pushUpdating(opcode.children);
    };

    _proto.exit = function exit() {
      this[DESTROYABLE_STACK].pop();
      this.elements().popBlock();
      this.popUpdating();
    };

    _proto.exitList = function exitList() {
      this.exit();
      this[STACKS].list.pop();
    };

    _proto.pushUpdating = function pushUpdating(list) {
      if (list === void 0) {
        list = [];
      }

      this[STACKS].updating.push(list);
    };

    _proto.popUpdating = function popUpdating() {
      return this[STACKS].updating.pop();
    };

    _proto.updateWith = function updateWith(opcode) {
      this.updating().push(opcode);
    };

    _proto.listBlock = function listBlock() {
      return this[STACKS].list.current;
    };

    _proto.associateDestroyable = function associateDestroyable(child) {
      var parent = this[DESTROYABLE_STACK].current;
      destroyable.associateDestroyableChild(parent, child);
    };

    _proto.tryUpdating = function tryUpdating() {
      return this[STACKS].updating.current;
    };

    _proto.updating = function updating() {
      return this[STACKS].updating.current;
    };

    _proto.elements = function elements() {
      return this.elementStack;
    };

    _proto.scope = function scope() {
      return this[STACKS].scope.current;
    };

    _proto.dynamicScope = function dynamicScope() {
      return this[STACKS].dynamicScope.current;
    };

    _proto.pushChildScope = function pushChildScope() {
      this[STACKS].scope.push(this.scope().child());
    };

    _proto.pushDynamicScope = function pushDynamicScope() {
      var child = this.dynamicScope().child();
      this[STACKS].dynamicScope.push(child);
      return child;
    };

    _proto.pushRootScope = function pushRootScope(size, owner) {
      var scope = PartialScopeImpl.sized(size, owner);
      this[STACKS].scope.push(scope);
      return scope;
    };

    _proto.pushScope = function pushScope(scope) {
      this[STACKS].scope.push(scope);
    };

    _proto.popScope = function popScope() {
      this[STACKS].scope.pop();
    };

    _proto.popDynamicScope = function popDynamicScope() {
      this[STACKS].dynamicScope.pop();
    } /// SCOPE HELPERS
    ;

    _proto.getOwner = function getOwner() {
      return this.scope().owner;
    };

    _proto.getSelf = function getSelf() {
      return this.scope().getSelf();
    };

    _proto.referenceForSymbol = function referenceForSymbol(symbol) {
      return this.scope().getSymbol(symbol);
    } /// EXECUTION
    ;

    _proto.execute = function execute(initialize) {
      if (env.DEBUG) {
        var hasErrored = true;

        try {
          var value = this._execute(initialize); // using a boolean here to avoid breaking ergonomics of "pause on uncaught exceptions"
          // which would happen with a `catch` + `throw`


          hasErrored = false;
          return value;
        } finally {
          if (hasErrored) {
            // If any existing blocks are open, due to an error or something like
            // that, we need to close them all and clean things up properly.
            var elements = this.elements();

            while (elements.hasBlocks) {
              elements.popBlock();
            } // eslint-disable-next-line no-console


            console.error("\n\nError occurred:\n\n" + validator.resetTracking() + "\n\n");
          }
        }
      } else {
        return this._execute(initialize);
      }
    };

    _proto._execute = function _execute(initialize) {

      if (initialize) initialize(this);
      var result;

      while (true) {
        result = this.next();
        if (result.done) break;
      }

      return result.value;
    };

    _proto.next = function next() {
      var env = this.env,
          elementStack = this.elementStack;
      var opcode = this[INNER_VM].nextStatement();
      var result;

      if (opcode !== null) {
        this[INNER_VM].evaluateOuter(opcode, this);
        result = {
          done: false,
          value: null
        };
      } else {
        // Unload the stack
        this.stack.reset();
        result = {
          done: true,
          value: new RenderResultImpl(env, this.popUpdating(), elementStack.popBlock(), this.destructor)
        };
      }

      return result;
    };

    _proto.bindDynamicScope = function bindDynamicScope(names) {
      var scope = this.dynamicScope();

      for (var i = names.length - 1; i >= 0; i--) {
        var name = names[i];
        scope.set(name, this.stack.pop());
      }
    };

    _createClass$4(VM, [{
      key: "stack",
      get: function get() {
        return this[INNER_VM].stack;
      }
      /* Registers */

    }, {
      key: "pc",
      get: function get() {
        return this[INNER_VM].fetchRegister(vm.$pc);
      }
    }, {
      key: "program",
      get: function get() {
        return this.runtime.program;
      }
    }, {
      key: "env",
      get: function get() {
        return this.runtime.env;
      }
    }]);

    return VM;
  }();
  _a$2 = STACKS, _b = DESTROYABLE_STACK;

  function vmState(pc, scope, dynamicScope) {
    return {
      pc: pc,
      scope: scope,
      dynamicScope: dynamicScope,
      stack: []
    };
  }

  function initVM(context) {
    return function (runtime, state, builder) {
      return new VM(runtime, state, builder, context);
    };
  }

  var TemplateIteratorImpl = /*#__PURE__*/function () {
    function TemplateIteratorImpl(vm) {
      this.vm = vm;
    }

    var _proto = TemplateIteratorImpl.prototype;

    _proto.next = function next() {
      return this.vm.next();
    };

    _proto.sync = function sync() {
      var _this = this;

      if (env.DEBUG) {
        return validator.runInTrackingTransaction(function () {
          return _this.vm.execute();
        }, '- While rendering:');
      } else {
        return this.vm.execute();
      }
    };

    return TemplateIteratorImpl;
  }();

  function renderSync(env, iterator) {
    var result;
    inTransaction(env, function () {
      return result = iterator.sync();
    });
    return result;
  }
  function renderMain(runtime, context, owner, self, treeBuilder, layout, dynamicScope) {
    if (dynamicScope === void 0) {
      dynamicScope = new DynamicScopeImpl();
    }

    var handle = util.unwrapHandle(layout.compile(context));
    var numSymbols = layout.symbolTable.symbols.length;
    var vm = VM.initial(runtime, context, {
      self: self,
      dynamicScope: dynamicScope,
      treeBuilder: treeBuilder,
      handle: handle,
      numSymbols: numSymbols,
      owner: owner
    });
    return new TemplateIteratorImpl(vm);
  }

  function renderInvocation(vm, context, owner, definition, args) {
    // Get a list of tuples of argument names and references, like
    // [['title', reference], ['name', reference]]
    var argList = Object.keys(args).map(function (key) {
      return [key, args[key]];
    });
    var blockNames = ['main', 'else', 'attrs']; // Prefix argument names with `@` symbol

    var argNames = argList.map(function (_ref) {
      var name = _ref[0];
      return "@" + name;
    });
    var reified = vm[CONSTANTS].component(definition, owner);
    vm.pushFrame(); // Push blocks on to the stack, three stack values per block

    for (var i = 0; i < 3 * blockNames.length; i++) {
      vm.stack.push(null);
    }

    vm.stack.push(null); // For each argument, push its backing reference on to the stack

    argList.forEach(function (_ref2) {
      var reference = _ref2[1];
      vm.stack.push(reference);
    }); // Configure VM based on blocks and args just pushed on to the stack.

    vm[ARGS].setup(vm.stack, argNames, blockNames, 0, true);
    var compilable = reified.compilable;
    var layoutHandle = util.unwrapHandle(compilable.compile(context));
    var invocation = {
      handle: layoutHandle,
      symbolTable: compilable.symbolTable
    }; // Needed for the Op.Main opcode: arguments, component invocation object, and
    // component definition.

    vm.stack.push(vm[ARGS]);
    vm.stack.push(invocation);
    vm.stack.push(reified);
    return new TemplateIteratorImpl(vm);
  }

  function renderComponent(runtime, treeBuilder, context, owner, definition, args, dynamicScope) {
    if (args === void 0) {
      args = {};
    }

    if (dynamicScope === void 0) {
      dynamicScope = new DynamicScopeImpl();
    }

    var vm = VM.empty(runtime, {
      treeBuilder: treeBuilder,
      handle: context.stdlib.main,
      dynamicScope: dynamicScope,
      owner: owner
    }, context);
    return renderInvocation(vm, context, owner, definition, recordToReference(args));
  }

  function recordToReference(record) {
    var root = reference.createConstRef(record, 'args');
    return Object.keys(record).reduce(function (acc, key) {
      acc[key] = reference.childRefFor(root, key);
      return acc;
    }, {});
  }

  function _defineProperties$5(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass$5(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$5(Constructor.prototype, protoProps); if (staticProps) _defineProperties$5(Constructor, staticProps); return Constructor; }

  function _inheritsLoose$6(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }
  var SERIALIZATION_FIRST_NODE_STRING = '%+b:0%';
  function isSerializationFirstNode(node) {
    return node.nodeValue === SERIALIZATION_FIRST_NODE_STRING;
  }
  var RehydratingCursor = /*#__PURE__*/function (_CursorImpl) {
    _inheritsLoose$6(RehydratingCursor, _CursorImpl);

    function RehydratingCursor(element, nextSibling, startingBlockDepth) {
      var _this;

      _this = _CursorImpl.call(this, element, nextSibling) || this;
      _this.startingBlockDepth = startingBlockDepth;
      _this.candidate = null;
      _this.injectedOmittedNode = false;
      _this.openBlockDepth = startingBlockDepth - 1;
      return _this;
    }

    return RehydratingCursor;
  }(CursorImpl);
  var RehydrateBuilder = /*#__PURE__*/function (_NewElementBuilder) {
    _inheritsLoose$6(RehydrateBuilder, _NewElementBuilder);

    function RehydrateBuilder(env, parentNode, nextSibling) {
      var _this2;

      _this2 = _NewElementBuilder.call(this, env, parentNode, nextSibling) || this;
      _this2.unmatchedAttributes = null;
      _this2.blockDepth = 0;
      if (nextSibling) throw new Error('Rehydration with nextSibling not supported');
      var node = _this2.currentCursor.element.firstChild;

      while (node !== null) {
        if (isOpenBlock(node)) {
          break;
        }

        node = node.nextSibling;
      }
      _this2.candidate = node;
      var startingBlockOffset = getBlockDepth(node);

      if (startingBlockOffset !== 0) {
        // We are rehydrating from a partial tree and not the root component
        // We need to add an extra block before the first block to rehydrate correctly
        // The extra block is needed since the renderComponent API creates a synthetic component invocation which generates the extra block
        var newBlockDepth = startingBlockOffset - 1;

        var newCandidate = _this2.dom.createComment("%+b:" + newBlockDepth + "%");

        node.parentNode.insertBefore(newCandidate, _this2.candidate);
        var closingNode = node.nextSibling;

        while (closingNode !== null) {
          if (isCloseBlock(closingNode) && getBlockDepth(closingNode) === startingBlockOffset) {
            break;
          }

          closingNode = closingNode.nextSibling;
        }

        var newClosingBlock = _this2.dom.createComment("%-b:" + newBlockDepth + "%");

        node.parentNode.insertBefore(newClosingBlock, closingNode.nextSibling);
        _this2.candidate = newCandidate;
        _this2.startingBlockOffset = newBlockDepth;
      } else {
        _this2.startingBlockOffset = 0;
      }

      return _this2;
    }

    var _proto = RehydrateBuilder.prototype;

    _proto.disableRehydration = function disableRehydration(nextSibling) {
      var currentCursor = this.currentCursor; // rehydration will be disabled until we either:
      // * hit popElement (and return to using the parent elements cursor)
      // * hit closeBlock and the next sibling is a close block comment
      //   matching the expected openBlockDepth

      currentCursor.candidate = null;
      currentCursor.nextSibling = nextSibling;
    };

    _proto.enableRehydration = function enableRehydration(candidate) {
      var currentCursor = this.currentCursor;
      currentCursor.candidate = candidate;
      currentCursor.nextSibling = null;
    };

    _proto.pushElement = function pushElement(element, nextSibling) {
      if (nextSibling === void 0) {
        nextSibling = null;
      }

      var cursor = new RehydratingCursor(element, nextSibling, this.blockDepth || 0);
      /**
       * <div>   <---------------  currentCursor.element
       *   <!--%+b:1%--> <-------  would have been removed during openBlock
       *   <div> <---------------  currentCursor.candidate -> cursor.element
       *     <!--%+b:2%--> <-----  currentCursor.candidate.firstChild -> cursor.candidate
       *     Foo
       *     <!--%-b:2%-->
       *   </div>
       *   <!--%-b:1%-->  <------  becomes currentCursor.candidate
       */

      if (this.candidate !== null) {
        cursor.candidate = element.firstChild;
        this.candidate = element.nextSibling;
      }

      this[CURSOR_STACK].push(cursor);
    } // clears until the end of the current container
    // either the current open block or higher
    ;

    _proto.clearMismatch = function clearMismatch(candidate) {
      var current = candidate;
      var currentCursor = this.currentCursor;

      if (currentCursor !== null) {
        var openBlockDepth = currentCursor.openBlockDepth;

        if (openBlockDepth >= currentCursor.startingBlockDepth) {
          while (current) {
            if (isCloseBlock(current)) {
              var closeBlockDepth = getBlockDepthWithOffset(current, this.startingBlockOffset);

              if (openBlockDepth >= closeBlockDepth) {
                break;
              }
            }

            current = this.remove(current);
          }
        } else {
          while (current !== null) {
            current = this.remove(current);
          }
        } // current cursor parentNode should be openCandidate if element
        // or openCandidate.parentNode if comment


        this.disableRehydration(current);
      }
    };

    _proto.__openBlock = function __openBlock() {
      var currentCursor = this.currentCursor;
      if (currentCursor === null) return;
      var blockDepth = this.blockDepth;
      this.blockDepth++;
      var candidate = currentCursor.candidate;
      if (candidate === null) return;
      var tagName = currentCursor.element.tagName;

      if (isOpenBlock(candidate) && getBlockDepthWithOffset(candidate, this.startingBlockOffset) === blockDepth) {
        this.candidate = this.remove(candidate);
        currentCursor.openBlockDepth = blockDepth;
      } else if (tagName !== 'TITLE' && tagName !== 'SCRIPT' && tagName !== 'STYLE') {
        this.clearMismatch(candidate);
      }
    };

    _proto.__closeBlock = function __closeBlock() {
      var currentCursor = this.currentCursor;
      if (currentCursor === null) return; // openBlock is the last rehydrated open block

      var openBlockDepth = currentCursor.openBlockDepth; // this currently is the expected next open block depth

      this.blockDepth--;
      var candidate = currentCursor.candidate;
      var isRehydrating = false;

      if (candidate !== null) {
        isRehydrating = true; //assert(
        //  openBlockDepth === this.blockDepth,
        //  'when rehydrating, openBlockDepth should match this.blockDepth here'
        //);

        if (isCloseBlock(candidate) && getBlockDepthWithOffset(candidate, this.startingBlockOffset) === openBlockDepth) {
          var nextSibling = this.remove(candidate);
          this.candidate = nextSibling;
          currentCursor.openBlockDepth--;
        } else {
          // close the block and clear mismatch in parent container
          // we will be either at the end of the element
          // or at the end of our containing block
          this.clearMismatch(candidate);
          isRehydrating = false;
        }
      }

      if (isRehydrating === false) {
        // check if nextSibling matches our expected close block
        // if so, we remove the close block comment and
        // restore rehydration after clearMismatch disabled
        var _nextSibling = currentCursor.nextSibling;

        if (_nextSibling !== null && isCloseBlock(_nextSibling) && getBlockDepthWithOffset(_nextSibling, this.startingBlockOffset) === this.blockDepth) {
          // restore rehydration state
          var _candidate2 = this.remove(_nextSibling);

          this.enableRehydration(_candidate2);
          currentCursor.openBlockDepth--;
        }
      }
    };

    _proto.__appendNode = function __appendNode(node) {
      var candidate = this.candidate; // This code path is only used when inserting precisely one node. It needs more
      // comparison logic, but we can probably lean on the cases where this code path
      // is actually used.

      if (candidate) {
        return candidate;
      } else {
        return _NewElementBuilder.prototype.__appendNode.call(this, node);
      }
    };

    _proto.__appendHTML = function __appendHTML(html) {
      var candidateBounds = this.markerBounds();

      if (candidateBounds) {
        var first = candidateBounds.firstNode();
        var last = candidateBounds.lastNode();
        var newBounds = new ConcreteBounds(this.element, first.nextSibling, last.previousSibling);
        var possibleEmptyMarker = this.remove(first);
        this.remove(last);

        if (possibleEmptyMarker !== null && isEmpty$1(possibleEmptyMarker)) {
          this.candidate = this.remove(possibleEmptyMarker);

          if (this.candidate !== null) {
            this.clearMismatch(this.candidate);
          }
        }

        return newBounds;
      } else {
        return _NewElementBuilder.prototype.__appendHTML.call(this, html);
      }
    };

    _proto.remove = function remove(node) {
      var element = node.parentNode;
      var next = node.nextSibling;
      element.removeChild(node);
      return next;
    };

    _proto.markerBounds = function markerBounds() {
      var _candidate = this.candidate;

      if (_candidate && isMarker(_candidate)) {
        var first = _candidate;
        var last = first.nextSibling;

        while (last && !isMarker(last)) {
          last = last.nextSibling;
        }

        return new ConcreteBounds(this.element, first, last);
      } else {
        return null;
      }
    };

    _proto.__appendText = function __appendText(string) {
      var candidate = this.candidate;

      if (candidate) {
        if (isTextNode(candidate)) {
          if (candidate.nodeValue !== string) {
            candidate.nodeValue = string;
          }

          this.candidate = candidate.nextSibling;
          return candidate;
        } else if (isSeparator(candidate)) {
          this.candidate = this.remove(candidate);
          return this.__appendText(string);
        } else if (isEmpty$1(candidate) && string === '') {
          this.candidate = this.remove(candidate);
          return this.__appendText(string);
        } else {
          this.clearMismatch(candidate);
          return _NewElementBuilder.prototype.__appendText.call(this, string);
        }
      } else {
        return _NewElementBuilder.prototype.__appendText.call(this, string);
      }
    };

    _proto.__appendComment = function __appendComment(string) {
      var _candidate = this.candidate;

      if (_candidate && isComment(_candidate)) {
        if (_candidate.nodeValue !== string) {
          _candidate.nodeValue = string;
        }

        this.candidate = _candidate.nextSibling;
        return _candidate;
      } else if (_candidate) {
        this.clearMismatch(_candidate);
      }

      return _NewElementBuilder.prototype.__appendComment.call(this, string);
    };

    _proto.__openElement = function __openElement(tag) {
      var _candidate = this.candidate;

      if (_candidate && isElement(_candidate) && isSameNodeType(_candidate, tag)) {
        this.unmatchedAttributes = [].slice.call(_candidate.attributes);
        return _candidate;
      } else if (_candidate) {
        if (isElement(_candidate) && _candidate.tagName === 'TBODY') {
          this.pushElement(_candidate, null);
          this.currentCursor.injectedOmittedNode = true;
          return this.__openElement(tag);
        }

        this.clearMismatch(_candidate);
      }

      return _NewElementBuilder.prototype.__openElement.call(this, tag);
    };

    _proto.__setAttribute = function __setAttribute(name, value, namespace) {
      var unmatched = this.unmatchedAttributes;

      if (unmatched) {
        var attr = findByName(unmatched, name);

        if (attr) {
          if (attr.value !== value) {
            attr.value = value;
          }

          unmatched.splice(unmatched.indexOf(attr), 1);
          return;
        }
      }

      return _NewElementBuilder.prototype.__setAttribute.call(this, name, value, namespace);
    };

    _proto.__setProperty = function __setProperty(name, value) {
      var unmatched = this.unmatchedAttributes;

      if (unmatched) {
        var attr = findByName(unmatched, name);

        if (attr) {
          if (attr.value !== value) {
            attr.value = value;
          }

          unmatched.splice(unmatched.indexOf(attr), 1);
          return;
        }
      }

      return _NewElementBuilder.prototype.__setProperty.call(this, name, value);
    };

    _proto.__flushElement = function __flushElement(parent, constructing) {
      var unmatched = this.unmatchedAttributes;

      if (unmatched) {
        for (var i = 0; i < unmatched.length; i++) {
          this.constructing.removeAttribute(unmatched[i].name);
        }

        this.unmatchedAttributes = null;
      } else {
        _NewElementBuilder.prototype.__flushElement.call(this, parent, constructing);
      }
    };

    _proto.willCloseElement = function willCloseElement() {
      var candidate = this.candidate,
          currentCursor = this.currentCursor;

      if (candidate !== null) {
        this.clearMismatch(candidate);
      }

      if (currentCursor && currentCursor.injectedOmittedNode) {
        this.popElement();
      }

      _NewElementBuilder.prototype.willCloseElement.call(this);
    };

    _proto.getMarker = function getMarker(element, guid) {
      var marker = element.querySelector("script[glmr=\"" + guid + "\"]");

      if (marker) {
        return marker;
      }

      return null;
    };

    _proto.__pushRemoteElement = function __pushRemoteElement(element, cursorId, insertBefore) {
      var marker = this.getMarker(element, cursorId);

      if (insertBefore === undefined) {
        while (element.firstChild !== null && element.firstChild !== marker) {
          this.remove(element.firstChild);
        }

        insertBefore = null;
      }

      var cursor = new RehydratingCursor(element, null, this.blockDepth);
      this[CURSOR_STACK].push(cursor);

      if (marker === null) {
        this.disableRehydration(insertBefore);
      } else {
        this.candidate = this.remove(marker);
      }

      var block = new RemoteLiveBlock(element);
      return this.pushLiveBlock(block, true);
    };

    _proto.didAppendBounds = function didAppendBounds(bounds) {
      _NewElementBuilder.prototype.didAppendBounds.call(this, bounds);

      if (this.candidate) {
        var last = bounds.lastNode();
        this.candidate = last && last.nextSibling;
      }

      return bounds;
    };

    _createClass$5(RehydrateBuilder, [{
      key: "currentCursor",
      get: function get() {
        return this[CURSOR_STACK].current;
      }
    }, {
      key: "candidate",
      get: function get() {
        if (this.currentCursor) {
          return this.currentCursor.candidate;
        }

        return null;
      },
      set: function set(node) {
        var currentCursor = this.currentCursor;
        currentCursor.candidate = node;
      }
    }]);

    return RehydrateBuilder;
  }(NewElementBuilder);

  function isTextNode(node) {
    return node.nodeType === 3;
  }

  function isComment(node) {
    return node.nodeType === 8;
  }

  function isOpenBlock(node) {
    return node.nodeType === 8
    /* COMMENT_NODE */
    && node.nodeValue.lastIndexOf('%+b:', 0) === 0;
  }

  function isCloseBlock(node) {
    return node.nodeType === 8
    /* COMMENT_NODE */
    && node.nodeValue.lastIndexOf('%-b:', 0) === 0;
  }

  function getBlockDepth(node) {
    return parseInt(node.nodeValue.slice(4), 10);
  }

  function getBlockDepthWithOffset(node, offset) {
    return getBlockDepth(node) - offset;
  }

  function isElement(node) {
    return node.nodeType === 1;
  }

  function isMarker(node) {
    return node.nodeType === 8 && node.nodeValue === '%glmr%';
  }

  function isSeparator(node) {
    return node.nodeType === 8 && node.nodeValue === '%|%';
  }

  function isEmpty$1(node) {
    return node.nodeType === 8 && node.nodeValue === '% %';
  }

  function isSameNodeType(candidate, tag) {
    if (candidate.namespaceURI === "http://www.w3.org/2000/svg"
    /* SVG */
    ) {
        return candidate.tagName === tag;
      }

    return candidate.tagName === tag.toUpperCase();
  }

  function findByName(array, name) {
    for (var i = 0; i < array.length; i++) {
      var attr = array[i];
      if (attr.name === name) return attr;
    }

    return undefined;
  }

  function rehydrationBuilder(env, cursor) {
    return RehydrateBuilder.forInitialRender(env, cursor);
  }

  function _defineProperties$6(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass$6(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$6(Constructor.prototype, protoProps); if (staticProps) _defineProperties$6(Constructor, staticProps); return Constructor; }
  var ARGS_CACHES = env.DEBUG ? new WeakMap() : undefined;

  function getArgs(proxy) {
    return validator.getValue(env.DEBUG ? ARGS_CACHES.get(proxy) : proxy.argsCache);
  }

  var SimpleArgsProxy = /*#__PURE__*/function () {
    function SimpleArgsProxy(context, computeArgs) {
      if (computeArgs === void 0) {
        computeArgs = function computeArgs() {
          return EMPTY_ARGS;
        };
      }

      var argsCache = validator.createCache(function () {
        return computeArgs(context);
      });

      if (env.DEBUG) {
        ARGS_CACHES.set(this, argsCache);
        Object.freeze(this);
      } else {
        this.argsCache = argsCache;
      }
    }

    _createClass$6(SimpleArgsProxy, [{
      key: "named",
      get: function get() {
        return getArgs(this).named || EMPTY_NAMED;
      }
    }, {
      key: "positional",
      get: function get() {
        return getArgs(this).positional || EMPTY_POSITIONAL;
      }
    }]);

    return SimpleArgsProxy;
  }(); ////////////


  function invokeHelper(context, definition, computeArgs) {
    if (env.DEBUG && (typeof context !== 'object' || context === null)) {
      throw new Error("Expected a context object to be passed as the first parameter to invokeHelper, got " + context);
    }

    var owner$1 = owner.getOwner(context);
    var internalManager = manager.getInternalHelperManager(definition); // TODO: figure out why assert isn't using the TS assert thing

    if (env.DEBUG && !internalManager) {
      throw new Error("Expected a helper definition to be passed as the second parameter to invokeHelper, but no helper manager was found. The definition value that was passed was `" + util.debugToString(definition) + "`. Did you use setHelperManager to associate a helper manager with this value?");
    }

    if (env.DEBUG && typeof internalManager === 'function') {
      throw new Error('Found a helper manager, but it was an internal built-in helper manager. `invokeHelper` does not support internal helpers yet.');
    }

    var manager$1 = internalManager.getDelegateFor(owner$1);
    var args = new SimpleArgsProxy(context, computeArgs);
    var bucket = manager$1.createHelper(definition, args);
    var cache;

    if (manager.hasValue(manager$1)) {
      cache = validator.createCache(function () {
        if (env.DEBUG && (destroyable.isDestroying(cache) || destroyable.isDestroyed(cache))) {
          throw new Error("You attempted to get the value of a helper after the helper was destroyed, which is not allowed");
        }

        return manager$1.getValue(bucket);
      });
      destroyable.associateDestroyableChild(context, cache);
    } else {
      throw new Error('TODO: unreachable, to be implemented with hasScheduledEffect');
    }

    if (manager.hasDestroyable(manager$1)) {
      var destroyable$1 = manager$1.getDestroyable(bucket);
      destroyable.associateDestroyableChild(cache, destroyable$1);
    }

    return cache;
  }

  function internalHelper(helper) {
    return manager.setInternalHelperManager(helper, {});
  }

  var context = util.buildUntouchableThis('`fn` helper');
  /**
    The `fn` helper allows you to ensure a function that you are passing off
    to another component, helper, or modifier has access to arguments that are
    available in the template.

    For example, if you have an `each` helper looping over a number of items, you
    may need to pass a function that expects to receive the item as an argument
    to a component invoked within the loop. Here's how you could use the `fn`
    helper to pass both the function and its arguments together:

      ```app/templates/components/items-listing.hbs
    {{#each @items as |item|}}
      <DisplayItem @item=item @select={{fn this.handleSelected item}} />
    {{/each}}
    ```

    ```app/components/items-list.js
    import Component from '@glimmer/component';
    import { action } from '@ember/object';

    export default class ItemsList extends Component {
      handleSelected = (item) => {
        // ...snip...
      }
    }
    ```

    In this case the `display-item` component will receive a normal function
    that it can invoke. When it invokes the function, the `handleSelected`
    function will receive the `item` and any arguments passed, thanks to the
    `fn` helper.

    Let's take look at what that means in a couple circumstances:

    - When invoked as `this.args.select()` the `handleSelected` function will
      receive the `item` from the loop as its first and only argument.
    - When invoked as `this.args.select('foo')` the `handleSelected` function
      will receive the `item` from the loop as its first argument and the
      string `'foo'` as its second argument.

    In the example above, we used an arrow function to ensure that
    `handleSelected` is properly bound to the `items-list`, but let's explore what
    happens if we left out the arrow function:

    ```app/components/items-list.js
    import Component from '@glimmer/component';

    export default class ItemsList extends Component {
      handleSelected(item) {
        // ...snip...
      }
    }
    ```

    In this example, when `handleSelected` is invoked inside the `display-item`
    component, it will **not** have access to the component instance. In other
    words, it will have no `this` context, so please make sure your functions
    are bound (via an arrow function or other means) before passing into `fn`!

    See also [partial application](https://en.wikipedia.org/wiki/Partial_application).

    @method fn
    @public
  */

  var fn = internalHelper(function (_ref) {
    var positional = _ref.positional;
    var callbackRef = positional[0];
    if (env.DEBUG) assertCallbackIsFn(callbackRef);
    return reference.createComputeRef(function () {
      return function () {
        var _reifyPositional = runtime.reifyPositional(positional),
            fn = _reifyPositional[0],
            args = _reifyPositional.slice(1);

        if (env.DEBUG) assertCallbackIsFn(callbackRef);

        for (var _len = arguments.length, invocationArgs = new Array(_len), _key = 0; _key < _len; _key++) {
          invocationArgs[_key] = arguments[_key];
        }

        if (reference.isInvokableRef(callbackRef)) {
          var value = args.length > 0 ? args[0] : invocationArgs[0];
          return reference.updateRef(callbackRef, value);
        } else {
          return fn.call.apply(fn, [context].concat(args, invocationArgs));
        }
      };
    }, null, 'fn');
  });

  function assertCallbackIsFn(callbackRef) {
    if (!(callbackRef && (reference.isInvokableRef(callbackRef) || typeof reference.valueForRef(callbackRef) === 'function'))) {
      throw new Error("You must pass a function as the `fn` helper's first argument, you passed " + (callbackRef ? reference.valueForRef(callbackRef) : callbackRef) + ". While rendering:\n\n" + (callbackRef === null || callbackRef === void 0 ? void 0 : callbackRef.debugLabel));
    }
  }

  var wrapHashProxy;

  if (env.DEBUG) {
    wrapHashProxy = function wrapHashProxy(hash) {
      return new Proxy(hash, {
        set: function set(target, key, value) {
          globalContext.deprecate("You set the '" + String(key) + "' property on a {{hash}} object. Setting properties on objects generated by {{hash}} is deprecated. Please update to use an object created with a tracked property or getter, or with a custom helper.", false, {
            id: 'setting-on-hash'
          });
          target[key] = value;
          return true;
        }
      });
    };
  }
  /**
     Use the `{{hash}}` helper to create a hash to pass as an option to your
     components. This is specially useful for contextual components where you can
     just yield a hash:

     ```handlebars
     {{yield (hash
        name='Sarah'
        title=office
     )}}
     ```

     Would result in an object such as:

     ```js
     { name: 'Sarah', title: this.get('office') }
     ```

     Where the `title` is bound to updates of the `office` property.

     Note that the hash is an empty object with no prototype chain, therefore
     common methods like `toString` are not available in the resulting hash.
     If you need to use such a method, you can use the `call` or `apply`
     approach:

     ```js
     function toString(obj) {
       return Object.prototype.toString.apply(obj);
     }
     ```

     @method hash
     @param {Object} options
     @return {Object} Hash
     @public
   */


  var hash = internalHelper(function (_ref) {
    var named = _ref.named;
    var ref = reference.createComputeRef(function () {
      var hash = runtime.reifyNamed(named);

      if (env.DEBUG && util.HAS_NATIVE_PROXY) {
        hash = wrapHashProxy(hash);
      }

      return hash;
    }, null, 'hash'); // Setup the children so that templates can bypass getting the value of
    // the reference and treat children lazily

    var children = new Map();

    for (var name in named) {
      children.set(name, named[name]);
    }

    ref.children = children;
    return ref;
  });

  /**
     Use the `{{array}}` helper to create an array to pass as an option to your
     components.

     ```handlebars
     <MyComponent @people={{array
       'Tom Dale'
       'Yehuda Katz'
       this.myOtherPerson}}
     />
     ```
      or
     ```handlebars
     {{my-component people=(array
       'Tom Dale'
       'Yehuda Katz'
       this.myOtherPerson)
     }}
     ```

     Would result in an object such as:

     ```js
     ['Tom Dale', 'Yehuda Katz', this.get('myOtherPerson')]
     ```

     Where the 3rd item in the array is bound to updates of the `myOtherPerson` property.

     @method array
     @param {Array} options
     @return {Array} Array
     @public
   */

  var array = internalHelper(function (_ref) {
    var positional = _ref.positional;
    return reference.createComputeRef(function () {
      return runtime.reifyPositional(positional);
    }, null, 'array');
  });

  /**
    Dynamically look up a property on an object. The second argument to `{{get}}`
    should have a string value, although it can be bound.

    For example, these two usages are equivalent:

    ```app/components/developer-detail.js
    import Component from '@glimmer/component';
    import { tracked } from '@glimmer/tracking';

    export default class extends Component {
      @tracked developer = {
        name: "Sandi Metz",
        language: "Ruby"
      }
    }
    ```

    ```handlebars
    {{this.developer.name}}
    {{get this.developer "name"}}
    ```

    If there were several facts about a person, the `{{get}}` helper can dynamically
    pick one:

    ```app/templates/application.hbs
    <DeveloperDetail @factName="language" />
    ```

    ```handlebars
    {{get this.developer @factName}}
    ```

    For a more complex example, this template would allow the user to switch
    between showing the user's height and weight with a click:

    ```app/components/developer-detail.js
    import Component from '@glimmer/component';
    import { tracked } from '@glimmer/tracking';

    export default class extends Component {
      @tracked developer = {
        name: "Sandi Metz",
        language: "Ruby"
      }

      @tracked currentFact = 'name'

      showFact = (fact) => {
        this.currentFact = fact;
      }
    }
    ```

    ```app/components/developer-detail.js
    {{get this.developer this.currentFact}}

    <button {{on 'click' (fn this.showFact "name")}}>Show name</button>
    <button {{on 'click' (fn this.showFact "language")}}>Show language</button>
    ```

    The `{{get}}` helper can also respect mutable values itself. For example:

    ```app/components/developer-detail.js
    <Input @value={{mut (get this.person this.currentFact)}} />

    <button {{on 'click' (fn this.showFact "name")}}>Show name</button>
    <button {{on 'click' (fn this.showFact "language")}}>Show language</button>
    ```

    Would allow the user to swap what fact is being displayed, and also edit
    that fact via a two-way mutable binding.

    @public
    @method get
   */

  var get = internalHelper(function (_ref) {
    var positional = _ref.positional;

    var _a, _b;

    var sourceRef = (_a = positional[0]) !== null && _a !== void 0 ? _a : reference.UNDEFINED_REFERENCE;
    var pathRef = (_b = positional[1]) !== null && _b !== void 0 ? _b : reference.UNDEFINED_REFERENCE;
    return reference.createComputeRef(function () {
      var source = reference.valueForRef(sourceRef);

      if (util.isDict(source)) {
        return globalContext.getPath(source, String(reference.valueForRef(pathRef)));
      }
    }, function (value) {
      var source = reference.valueForRef(sourceRef);

      if (util.isDict(source)) {
        return globalContext.setPath(source, String(reference.valueForRef(pathRef)), value);
      }
    }, 'get');
  });

  var isEmpty$2 = function isEmpty(value) {
    return value === null || value === undefined || typeof value.toString !== 'function';
  };

  var normalizeTextValue = function normalizeTextValue(value) {
    if (isEmpty$2(value)) {
      return '';
    }

    return String(value);
  };
  /**
    Concatenates the given arguments into a string.

    Example:

    ```handlebars
    {{some-component name=(concat firstName " " lastName)}}

    {{! would pass name="<first name value> <last name value>" to the component}}
    ```

    or for angle bracket invocation, you actually don't need concat at all.

    ```handlebars
    <SomeComponent @name="{{firstName}} {{lastName}}" />
    ```

    @public
    @method concat
  */


  var concat = internalHelper(function (_ref) {
    var positional = _ref.positional;
    return reference.createComputeRef(function () {
      return runtime.reifyPositional(positional).map(normalizeTextValue).join('');
    }, null, 'concat');
  });

  function _defineProperties$7(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass$7(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$7(Constructor.prototype, protoProps); if (staticProps) _defineProperties$7(Constructor, staticProps); return Constructor; }
  var untouchableContext = util.buildUntouchableThis('`on` modifier');
  /*
    Internet Explorer 11 does not support `once` and also does not support
    passing `eventOptions`. In some situations it then throws a weird script
    error, like:

    ```
    Could not complete the operation due to error 80020101
    ```

    This flag determines, whether `{ once: true }` and thus also event options in
    general are supported.
  */

  var SUPPORTS_EVENT_OPTIONS = function () {
    try {
      var div = document.createElement('div');
      var counter = 0;
      div.addEventListener('click', function () {
        return counter++;
      }, {
        once: true
      });
      var event;

      if (typeof Event === 'function') {
        event = new Event('click');
      } else {
        event = document.createEvent('Event');
        event.initEvent('click', true, true);
      }

      div.dispatchEvent(event);
      div.dispatchEvent(event);
      return counter === 1;
    } catch (error) {
      return false;
    }
  }();

  var OnModifierState = /*#__PURE__*/function () {
    function OnModifierState(element, args) {
      this.tag = validator.createUpdatableTag();
      this.shouldUpdate = true;
      this.element = element;
      this.args = args;
    }

    var _proto = OnModifierState.prototype;

    _proto.updateFromArgs = function updateFromArgs() {
      var args = this.args;

      var _reifyNamed = runtime.reifyNamed(args.named),
          once = _reifyNamed.once,
          passive = _reifyNamed.passive,
          capture = _reifyNamed.capture;

      if (once !== this.once) {
        this.once = once;
        this.shouldUpdate = true;
      }

      if (passive !== this.passive) {
        this.passive = passive;
        this.shouldUpdate = true;
      }

      if (capture !== this.capture) {
        this.capture = capture;
        this.shouldUpdate = true;
      }

      var options;

      if (once || passive || capture) {
        options = this.options = {
          once: once,
          passive: passive,
          capture: capture
        };
      } else {
        this.options = undefined;
      }

      if (env.DEBUG && (args.positional[0] === undefined || typeof reference.valueForRef(args.positional[0]) !== 'string')) {
        throw new Error('You must pass a valid DOM event name as the first argument to the `on` modifier');
      }

      var eventName = reference.valueForRef(args.positional[0]);

      if (eventName !== this.eventName) {
        this.eventName = eventName;
        this.shouldUpdate = true;
      }

      var userProvidedCallbackReference = args.positional[1];

      if (env.DEBUG) {
        if (args.positional[1] === undefined) {
          throw new Error("You must pass a function as the second argument to the `on` modifier.");
        }

        var value = reference.valueForRef(userProvidedCallbackReference);

        if (typeof value !== 'function') {
          throw new Error("You must pass a function as the second argument to the `on` modifier; you passed " + (value === null ? 'null' : typeof value) + ". While rendering:\n\n" + userProvidedCallbackReference.debugLabel);
        }
      }

      var userProvidedCallback = reference.valueForRef(userProvidedCallbackReference);

      if (userProvidedCallback !== this.userProvidedCallback) {
        this.userProvidedCallback = userProvidedCallback;
        this.shouldUpdate = true;
      }

      if (env.DEBUG && args.positional.length !== 2) {
        throw new Error("You can only pass two positional arguments (event name and callback) to the `on` modifier, but you provided " + args.positional.length + ". Consider using the `fn` helper to provide additional arguments to the `on` callback.");
      }

      var needsCustomCallback = SUPPORTS_EVENT_OPTIONS === false && once ||
      /* needs manual once implementation */
      env.DEBUG && passive;
      /* needs passive enforcement */

      if (this.shouldUpdate) {
        if (needsCustomCallback) {
          var callback = this.callback = function (event) {
            if (env.DEBUG && passive) {
              event.preventDefault = function () {
                throw new Error("You marked this listener as 'passive', meaning that you must not call 'event.preventDefault()': \n\n" + userProvidedCallback);
              };
            }

            if (!SUPPORTS_EVENT_OPTIONS && once) {
              removeEventListener(this, eventName, callback, options);
            }

            return userProvidedCallback.call(untouchableContext, event);
          };
        } else if (env.DEBUG) {
          // prevent the callback from being bound to the element
          this.callback = userProvidedCallback.bind(untouchableContext);
        } else {
          this.callback = userProvidedCallback;
        }
      }
    };

    return OnModifierState;
  }();
  var adds = 0;
  var removes = 0;

  function removeEventListener(element, eventName, callback, options) {
    removes++;

    if (SUPPORTS_EVENT_OPTIONS) {
      // when options are supported, use them across the board
      element.removeEventListener(eventName, callback, options);
    } else if (options !== undefined && options.capture) {
      // used only in the following case:
      //
      // `{ once: true | false, passive: true | false, capture: true }
      //
      // `once` is handled via a custom callback that removes after first
      // invocation so we only care about capture here as a boolean
      element.removeEventListener(eventName, callback, true);
    } else {
      // used only in the following cases:
      //
      // * where there is no options
      // * `{ once: true | false, passive: true | false, capture: false }
      element.removeEventListener(eventName, callback);
    }
  }

  function addEventListener(element, eventName, callback, options) {
    adds++;

    if (SUPPORTS_EVENT_OPTIONS) {
      // when options are supported, use them across the board
      element.addEventListener(eventName, callback, options);
    } else if (options !== undefined && options.capture) {
      // used only in the following case:
      //
      // `{ once: true | false, passive: true | false, capture: true }
      //
      // `once` is handled via a custom callback that removes after first
      // invocation so we only care about capture here as a boolean
      element.addEventListener(eventName, callback, true);
    } else {
      // used only in the following cases:
      //
      // * where there is no options
      // * `{ once: true | false, passive: true | false, capture: false }
      element.addEventListener(eventName, callback);
    }
  }
  /**
    The `{{on}}` modifier lets you easily add event listeners (it uses
    [EventTarget.addEventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)
    internally).

    For example, if you'd like to run a function on your component when a `<button>`
    in the components template is clicked you might do something like:

    ```app/components/like-post.hbs
    <button {{on 'click' this.saveLike}}>Like this post!</button>
    ```

    ```app/components/like-post.js
    import Component from '@glimmer/component';
    import { action } from '@ember/object';

    export default class LikePostComponent extends Component {
      saveLike = () => {
        // someone likes your post!
        // better send a request off to your server...
      }
    }
    ```

    ### Arguments

    `{{on}}` accepts two positional arguments, and a few named arguments.

    The positional arguments are:

    - `event` -- the name to use when calling `addEventListener`
    - `callback` -- the function to be passed to `addEventListener`

    The named arguments are:

    - capture -- a `true` value indicates that events of this type will be dispatched
      to the registered listener before being dispatched to any EventTarget beneath it
      in the DOM tree.
    - once -- indicates that the listener should be invoked at most once after being
      added. If true, the listener would be automatically removed when invoked.
    - passive -- if `true`, indicates that the function specified by listener will never
      call preventDefault(). If a passive listener does call preventDefault(), the user
      agent will do nothing other than generate a console warning. See
      [Improving scrolling performance with passive listeners](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Improving_scrolling_performance_with_passive_listeners)
      to learn more.

    The callback function passed to `{{on}}` will receive any arguments that are passed
    to the event handler. Most commonly this would be the `event` itself.

    If you would like to pass additional arguments to the function you should use
    the `{{fn}}` helper.

    For example, in our example case above if you'd like to pass in the post that
    was being liked when the button is clicked you could do something like:

    ```app/components/like-post.hbs
    <button {{on 'click' (fn this.saveLike @post)}}>Like this post!</button>
    ```

    In this case, the `saveLike` function will receive two arguments: the click event
    and the value of `@post`.

    ### Function Context

    In the example above, we used an arrow function to ensure that `likePost` is
    properly bound to the `items-list`, but let's explore what happens if we
    left out the arrow function:

    ```app/components/like-post.js
    import Component from '@glimmer/component';

    export default class LikePostComponent extends Component {
      saveLike() {
        // ...snip...
      }
    }
    ```

    In this example, when the button is clicked `saveLike` will be invoked,
    it will **not** have access to the component instance. In other
    words, it will have no `this` context, so please make sure your functions
    are bound (via an arrow function or other means) before passing into `on`!

    @method on
    @public
  */


  var OnModifierManager = /*#__PURE__*/function () {
    function OnModifierManager() {
      this.SUPPORTS_EVENT_OPTIONS = SUPPORTS_EVENT_OPTIONS;
    }

    var _proto2 = OnModifierManager.prototype;

    _proto2.getDebugName = function getDebugName() {
      return 'on';
    };

    _proto2.create = function create(_owner, element, _state, args) {
      return new OnModifierState(element, args);
    };

    _proto2.getTag = function getTag(state) {
      if (state === null) {
        return null;
      }

      return state.tag;
    };

    _proto2.install = function install(state) {
      if (state === null) {
        return;
      }

      state.updateFromArgs();
      var element = state.element,
          eventName = state.eventName,
          callback = state.callback,
          options = state.options;
      addEventListener(element, eventName, callback, options);
      destroyable.registerDestructor(state, function () {
        return removeEventListener(element, eventName, callback, options);
      });
      state.shouldUpdate = false;
    };

    _proto2.update = function update(state) {
      if (state === null) {
        return;
      } // stash prior state for el.removeEventListener


      var element = state.element,
          eventName = state.eventName,
          callback = state.callback,
          options = state.options;
      state.updateFromArgs();

      if (!state.shouldUpdate) {
        return;
      } // use prior state values for removal


      removeEventListener(element, eventName, callback, options); // read updated values from the state object

      addEventListener(state.element, state.eventName, state.callback, state.options);
      state.shouldUpdate = false;
    };

    _proto2.getDestroyable = function getDestroyable(state) {
      return state;
    };

    _createClass$7(OnModifierManager, [{
      key: "counters",
      get: function get() {
        return {
          adds: adds,
          removes: removes
        };
      }
    }]);

    return OnModifierManager;
  }();

  var on = manager.setInternalModifierManager(new OnModifierManager(), {});

  Object.defineProperty(exports, 'destroy', {
    enumerable: true,
    get: function () {
      return destroyable.destroy;
    }
  });
  Object.defineProperty(exports, 'isDestroyed', {
    enumerable: true,
    get: function () {
      return destroyable.isDestroyed;
    }
  });
  Object.defineProperty(exports, 'isDestroying', {
    enumerable: true,
    get: function () {
      return destroyable.isDestroying;
    }
  });
  Object.defineProperty(exports, 'registerDestructor', {
    enumerable: true,
    get: function () {
      return destroyable.registerDestructor;
    }
  });
  exports.ConcreteBounds = ConcreteBounds;
  exports.CurriedValue = CurriedValue;
  exports.CursorImpl = CursorImpl;
  exports.DOMChanges = helper$1;
  exports.DOMTreeConstruction = DOMTreeConstruction;
  exports.DynamicAttribute = DynamicAttribute;
  exports.DynamicScopeImpl = DynamicScopeImpl;
  exports.EMPTY_ARGS = EMPTY_ARGS;
  exports.EMPTY_NAMED = EMPTY_NAMED;
  exports.EMPTY_POSITIONAL = EMPTY_POSITIONAL;
  exports.EnvironmentImpl = EnvironmentImpl;
  exports.IDOMChanges = DOMChangesImpl;
  exports.LowLevelVM = VM;
  exports.NewElementBuilder = NewElementBuilder;
  exports.PartialScopeImpl = PartialScopeImpl;
  exports.RehydrateBuilder = RehydrateBuilder;
  exports.RemoteLiveBlock = RemoteLiveBlock;
  exports.SERIALIZATION_FIRST_NODE_STRING = SERIALIZATION_FIRST_NODE_STRING;
  exports.SimpleDynamicAttribute = SimpleDynamicAttribute;
  exports.TEMPLATE_ONLY_COMPONENT_MANAGER = TEMPLATE_ONLY_COMPONENT_MANAGER;
  exports.TemplateOnlyComponent = TemplateOnlyComponentDefinition;
  exports.TemplateOnlyComponentManager = TemplateOnlyComponentManager;
  exports.UpdatableBlockImpl = UpdatableBlockImpl;
  exports.UpdatingVM = UpdatingVMImpl;
  exports.array = array;
  exports.clear = clear;
  exports.clientBuilder = clientBuilder;
  exports.concat = concat;
  exports.createCapturedArgs = createCapturedArgs;
  exports.curry = curry;
  exports.dynamicAttribute = dynamicAttribute;
  exports.fn = fn;
  exports.get = get;
  exports.hash = hash;
  exports.inTransaction = inTransaction;
  exports.invokeHelper = invokeHelper;
  exports.isSerializationFirstNode = isSerializationFirstNode;
  exports.isWhitespace = isWhitespace;
  exports.normalizeProperty = normalizeProperty;
  exports.on = on;
  exports.rehydrationBuilder = rehydrationBuilder;
  exports.reifyArgs = reifyArgs;
  exports.reifyNamed = reifyNamed;
  exports.reifyPositional = reifyPositional;
  exports.renderComponent = renderComponent;
  exports.renderMain = renderMain;
  exports.renderSync = renderSync;
  exports.resetDebuggerCallback = resetDebuggerCallback;
  exports.runtimeContext = runtimeContext;
  exports.setDebuggerCallback = setDebuggerCallback;
  exports.templateOnlyComponent = templateOnlyComponent;

  Object.defineProperty(exports, '__esModule', { value: true });

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

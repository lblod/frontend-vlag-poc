"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RuntimeOpImpl = void 0;

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var RuntimeOpImpl = /*#__PURE__*/function () {
  function RuntimeOpImpl(heap) {
    this.heap = heap;
    this.offset = 0;
  }

  _createClass(RuntimeOpImpl, [{
    key: "size",
    get: function get() {
      var rawType = this.heap.getbyaddr(this.offset);
      return ((rawType & 768
      /* OPERAND_LEN_MASK */
      ) >> 8
      /* ARG_SHIFT */
      ) + 1;
    }
  }, {
    key: "isMachine",
    get: function get() {
      var rawType = this.heap.getbyaddr(this.offset);
      return rawType & 1024
      /* MACHINE_MASK */
      ? 1 : 0;
    }
  }, {
    key: "type",
    get: function get() {
      return this.heap.getbyaddr(this.offset) & 255
      /* TYPE_MASK */
      ;
    }
  }, {
    key: "op1",
    get: function get() {
      return this.heap.getbyaddr(this.offset + 1);
    }
  }, {
    key: "op2",
    get: function get() {
      return this.heap.getbyaddr(this.offset + 2);
    }
  }, {
    key: "op3",
    get: function get() {
      return this.heap.getbyaddr(this.offset + 3);
    }
  }]);

  return RuntimeOpImpl;
}();

exports.RuntimeOpImpl = RuntimeOpImpl;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3Byb2dyYW0vbGliL29wY29kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLElBQU0sYUFBTixHQUFBLGFBQUEsWUFBQTtBQUVFLFdBQUEsYUFBQSxDQUFBLElBQUEsRUFBcUM7QUFBaEIsU0FBQSxJQUFBLEdBQUEsSUFBQTtBQURkLFNBQUEsTUFBQSxHQUFBLENBQUE7QUFDa0M7O0FBRjNDLEVBQUEsWUFBQSxDQUFBLGFBQUEsRUFBQSxDQUFBO0FBQUEsSUFBQSxHQUFBLEVBQUEsTUFBQTtBQUFBLElBQUEsR0FBQSxFQUFBLFNBQUEsR0FBQSxHQUlVO0FBQ04sVUFBSSxPQUFPLEdBQUcsS0FBQSxJQUFBLENBQUEsU0FBQSxDQUFvQixLQUFsQyxNQUFjLENBQWQ7QUFDQSxhQUFPLENBQUMsQ0FBQyxPQUFPLEdBQUE7QUFBQTtBQUFSLFdBQXVDO0FBQUE7QUFBeEMsVUFBUCxDQUFBO0FBQ0Q7QUFQSCxHQUFBLEVBQUE7QUFBQSxJQUFBLEdBQUEsRUFBQSxXQUFBO0FBQUEsSUFBQSxHQUFBLEVBQUEsU0FBQSxHQUFBLEdBU2U7QUFDWCxVQUFJLE9BQU8sR0FBRyxLQUFBLElBQUEsQ0FBQSxTQUFBLENBQW9CLEtBQWxDLE1BQWMsQ0FBZDtBQUNBLGFBQU8sT0FBTyxHQUFBO0FBQUE7QUFBUCxRQUFBLENBQUEsR0FBUCxDQUFBO0FBQ0Q7QUFaSCxHQUFBLEVBQUE7QUFBQSxJQUFBLEdBQUEsRUFBQSxNQUFBO0FBQUEsSUFBQSxHQUFBLEVBQUEsU0FBQSxHQUFBLEdBY1U7QUFDTixhQUFPLEtBQUEsSUFBQSxDQUFBLFNBQUEsQ0FBb0IsS0FBcEIsTUFBQSxJQUFnQztBQUFBO0FBQXZDO0FBQ0Q7QUFoQkgsR0FBQSxFQUFBO0FBQUEsSUFBQSxHQUFBLEVBQUEsS0FBQTtBQUFBLElBQUEsR0FBQSxFQUFBLFNBQUEsR0FBQSxHQWtCUztBQUNMLGFBQU8sS0FBQSxJQUFBLENBQUEsU0FBQSxDQUFvQixLQUFBLE1BQUEsR0FBM0IsQ0FBTyxDQUFQO0FBQ0Q7QUFwQkgsR0FBQSxFQUFBO0FBQUEsSUFBQSxHQUFBLEVBQUEsS0FBQTtBQUFBLElBQUEsR0FBQSxFQUFBLFNBQUEsR0FBQSxHQXNCUztBQUNMLGFBQU8sS0FBQSxJQUFBLENBQUEsU0FBQSxDQUFvQixLQUFBLE1BQUEsR0FBM0IsQ0FBTyxDQUFQO0FBQ0Q7QUF4QkgsR0FBQSxFQUFBO0FBQUEsSUFBQSxHQUFBLEVBQUEsS0FBQTtBQUFBLElBQUEsR0FBQSxFQUFBLFNBQUEsR0FBQSxHQTBCUztBQUNMLGFBQU8sS0FBQSxJQUFBLENBQUEsU0FBQSxDQUFvQixLQUFBLE1BQUEsR0FBM0IsQ0FBTyxDQUFQO0FBQ0Q7QUE1QkgsR0FBQSxDQUFBLENBQUE7O0FBQUEsU0FBQSxhQUFBO0FBQUEsQ0FBQSxFQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3Bjb2RlU2l6ZSwgUnVudGltZU9wLCBPcGNvZGVIZWFwIH0gZnJvbSAnQGdsaW1tZXIvaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBjbGFzcyBSdW50aW1lT3BJbXBsIGltcGxlbWVudHMgUnVudGltZU9wIHtcbiAgcHVibGljIG9mZnNldCA9IDA7XG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGhlYXA6IE9wY29kZUhlYXApIHt9XG5cbiAgZ2V0IHNpemUoKSB7XG4gICAgbGV0IHJhd1R5cGUgPSB0aGlzLmhlYXAuZ2V0YnlhZGRyKHRoaXMub2Zmc2V0KTtcbiAgICByZXR1cm4gKChyYXdUeXBlICYgT3Bjb2RlU2l6ZS5PUEVSQU5EX0xFTl9NQVNLKSA+PiBPcGNvZGVTaXplLkFSR19TSElGVCkgKyAxO1xuICB9XG5cbiAgZ2V0IGlzTWFjaGluZSgpOiAwIHwgMSB7XG4gICAgbGV0IHJhd1R5cGUgPSB0aGlzLmhlYXAuZ2V0YnlhZGRyKHRoaXMub2Zmc2V0KTtcbiAgICByZXR1cm4gcmF3VHlwZSAmIE9wY29kZVNpemUuTUFDSElORV9NQVNLID8gMSA6IDA7XG4gIH1cblxuICBnZXQgdHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5oZWFwLmdldGJ5YWRkcih0aGlzLm9mZnNldCkgJiBPcGNvZGVTaXplLlRZUEVfTUFTSztcbiAgfVxuXG4gIGdldCBvcDEoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGVhcC5nZXRieWFkZHIodGhpcy5vZmZzZXQgKyAxKTtcbiAgfVxuXG4gIGdldCBvcDIoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGVhcC5nZXRieWFkZHIodGhpcy5vZmZzZXQgKyAyKTtcbiAgfVxuXG4gIGdldCBvcDMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGVhcC5nZXRieWFkZHIodGhpcy5vZmZzZXQgKyAzKTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==
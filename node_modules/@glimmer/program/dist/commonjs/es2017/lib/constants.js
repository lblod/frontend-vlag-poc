"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConstantsImpl = exports.RuntimeConstantsImpl = exports.CompileTimeConstantImpl = void 0;

var _util = require("@glimmer/util");

var _manager = require("@glimmer/manager");

var _opcodeCompiler = require("@glimmer/opcode-compiler");

var _defaultTemplate = require("./util/default-template");

const WELL_KNOWN_EMPTY_ARRAY = Object.freeze([]);
const STARTER_CONSTANTS = (0, _util.constants)(WELL_KNOWN_EMPTY_ARRAY);
const WELL_KNOWN_EMPTY_ARRAY_POSITION = STARTER_CONSTANTS.indexOf(WELL_KNOWN_EMPTY_ARRAY);

class CompileTimeConstantImpl {
  constructor() {
    // `0` means NULL
    this.values = STARTER_CONSTANTS.slice();
    this.indexMap = new Map(this.values.map((value, index) => [value, index]));
  }

  value(value) {
    let indexMap = this.indexMap;
    let index = indexMap.get(value);

    if (index === undefined) {
      index = this.values.push(value) - 1;
      indexMap.set(value, index);
    }

    return index;
  }

  array(values) {
    if (values.length === 0) {
      return WELL_KNOWN_EMPTY_ARRAY_POSITION;
    }

    let handles = new Array(values.length);

    for (let i = 0; i < values.length; i++) {
      handles[i] = this.value(values[i]);
    }

    return this.value(handles);
  }

  toPool() {
    return this.values;
  }

}

exports.CompileTimeConstantImpl = CompileTimeConstantImpl;

class RuntimeConstantsImpl {
  constructor(pool) {
    this.values = pool;
  }

  getValue(handle) {
    return this.values[handle];
  }

  getArray(value) {
    let handles = this.getValue(value);
    let reified = new Array(handles.length);

    for (let i = 0; i < handles.length; i++) {
      let n = handles[i];
      reified[i] = this.getValue(n);
    }

    return reified;
  }

}

exports.RuntimeConstantsImpl = RuntimeConstantsImpl;

class ConstantsImpl extends CompileTimeConstantImpl {
  constructor() {
    super(...arguments);
    this.reifiedArrs = {
      [WELL_KNOWN_EMPTY_ARRAY_POSITION]: WELL_KNOWN_EMPTY_ARRAY
    };
    this.defaultTemplate = (0, _opcodeCompiler.templateFactory)(_defaultTemplate.DEFAULT_TEMPLATE)(); // Used for tests and debugging purposes, and to be able to analyze large apps
    // This is why it's enabled even in production

    this.helperDefinitionCount = 0;
    this.modifierDefinitionCount = 0;
    this.componentDefinitionCount = 0;
    this.helperDefinitionCache = new WeakMap();
    this.modifierDefinitionCache = new WeakMap();
    this.componentDefinitionCache = new WeakMap();
  }

  helper(definitionState, // TODO: Add a way to expose resolved name for debugging
  _resolvedName = null, isOptional) {
    let handle = this.helperDefinitionCache.get(definitionState);

    if (handle === undefined) {
      let managerOrHelper = (0, _manager.getInternalHelperManager)(definitionState, isOptional);

      if (managerOrHelper === null) {
        this.helperDefinitionCache.set(definitionState, null);
        return null;
      }

      false && (0, _util.assert)(managerOrHelper, 'BUG: expected manager or helper');
      let helper = typeof managerOrHelper === 'function' ? managerOrHelper : managerOrHelper.getHelper(definitionState);
      handle = this.value(helper);
      this.helperDefinitionCache.set(definitionState, handle);
      this.helperDefinitionCount++;
    }

    return handle;
  }

  modifier(definitionState, resolvedName = null, isOptional) {
    let handle = this.modifierDefinitionCache.get(definitionState);

    if (handle === undefined) {
      let manager = (0, _manager.getInternalModifierManager)(definitionState, isOptional);

      if (manager === null) {
        this.modifierDefinitionCache.set(definitionState, null);
        return null;
      }

      let definition = {
        resolvedName,
        manager,
        state: definitionState
      };
      handle = this.value(definition);
      this.modifierDefinitionCache.set(definitionState, handle);
      this.modifierDefinitionCount++;
    }

    return handle;
  }

  component(definitionState, owner, isOptional) {
    var _a;

    let definition = this.componentDefinitionCache.get(definitionState);

    if (definition === undefined) {
      let manager = (0, _manager.getInternalComponentManager)(definitionState, isOptional);

      if (manager === null) {
        this.componentDefinitionCache.set(definitionState, null);
        return null;
      }

      false && (0, _util.assert)(manager, 'BUG: expected manager');
      let capabilities = (0, _manager.capabilityFlagsFrom)(manager.getCapabilities(definitionState));
      let templateFactory = (0, _manager.getComponentTemplate)(definitionState);
      let compilable = null;
      let template;

      if (!(0, _manager.managerHasCapability)(manager, capabilities, 1
      /* DynamicLayout */
      )) {
        template = (_a = templateFactory === null || templateFactory === void 0 ? void 0 : templateFactory(owner)) !== null && _a !== void 0 ? _a : this.defaultTemplate;
      } else {
        template = templateFactory === null || templateFactory === void 0 ? void 0 : templateFactory(owner);
      }

      if (template !== undefined) {
        template = (0, _util.unwrapTemplate)(template);
        compilable = (0, _manager.managerHasCapability)(manager, capabilities, 1024
        /* Wrapped */
        ) ? template.asWrappedLayout() : template.asLayout();
      }

      definition = {
        resolvedName: null,
        handle: -1,
        manager,
        capabilities,
        state: definitionState,
        compilable
      };
      definition.handle = this.value(definition);
      this.componentDefinitionCache.set(definitionState, definition);
      this.componentDefinitionCount++;
    }

    return definition;
  }

  resolvedComponent(resolvedDefinition, resolvedName) {
    let definition = this.componentDefinitionCache.get(resolvedDefinition);

    if (definition === undefined) {
      let {
        manager,
        state,
        template
      } = resolvedDefinition;
      let capabilities = (0, _manager.capabilityFlagsFrom)(manager.getCapabilities(resolvedDefinition));
      let compilable = null;

      if (!(0, _manager.managerHasCapability)(manager, capabilities, 1
      /* DynamicLayout */
      )) {
        template = template !== null && template !== void 0 ? template : this.defaultTemplate;
      }

      if (template !== null) {
        template = (0, _util.unwrapTemplate)(template);
        compilable = (0, _manager.managerHasCapability)(manager, capabilities, 1024
        /* Wrapped */
        ) ? template.asWrappedLayout() : template.asLayout();
      }

      definition = {
        resolvedName,
        handle: -1,
        manager,
        capabilities,
        state,
        compilable
      };
      definition.handle = this.value(definition);
      this.componentDefinitionCache.set(resolvedDefinition, definition);
      this.componentDefinitionCount++;
    }

    return definition;
  }

  getValue(index) {
    false && (0, _util.assert)(index >= 0, `cannot get value for handle: ${index}`);
    return this.values[index];
  }

  getArray(index) {
    let reifiedArrs = this.reifiedArrs;
    let reified = reifiedArrs[index];

    if (reified === undefined) {
      let names = this.getValue(index);
      reified = new Array(names.length);

      for (let i = 0; i < names.length; i++) {
        reified[i] = this.getValue(names[i]);
      }

      reifiedArrs[index] = reified;
    }

    return reified;
  }

}

exports.ConstantsImpl = ConstantsImpl;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
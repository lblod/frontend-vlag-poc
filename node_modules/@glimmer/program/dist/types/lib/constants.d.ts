import { CompileTimeConstants, ComponentDefinitionState, ConstantPool, ComponentDefinition, ResolutionTimeConstants, ResolvedComponentDefinition, RuntimeConstants, ModifierDefinitionState, HelperDefinitionState, Template } from '@glimmer/interfaces';
export declare class CompileTimeConstantImpl implements CompileTimeConstants {
    protected values: unknown[];
    protected indexMap: Map<unknown, number>;
    value(value: unknown): number;
    array(values: unknown[]): number;
    toPool(): ConstantPool;
}
export declare class RuntimeConstantsImpl implements RuntimeConstants {
    protected values: unknown[];
    constructor(pool: ConstantPool);
    getValue<T>(handle: number): T;
    getArray<T>(value: number): T[];
}
export declare class ConstantsImpl extends CompileTimeConstantImpl implements RuntimeConstants, ResolutionTimeConstants {
    protected reifiedArrs: {
        [key: number]: unknown[];
    };
    defaultTemplate: Template;
    helperDefinitionCount: number;
    modifierDefinitionCount: number;
    componentDefinitionCount: number;
    private helperDefinitionCache;
    private modifierDefinitionCache;
    private componentDefinitionCache;
    helper(definitionState: HelperDefinitionState, _resolvedName: string | null, isOptional: true): number | null;
    helper(definitionState: HelperDefinitionState, _resolvedName?: string | null): number;
    modifier(definitionState: ModifierDefinitionState, resolvedName: string | null, isOptional: true): number | null;
    modifier(definitionState: ModifierDefinitionState, resolvedName?: string | null): number;
    component(definitionState: ComponentDefinitionState, owner: object): ComponentDefinition;
    resolvedComponent(resolvedDefinition: ResolvedComponentDefinition, resolvedName: string): ComponentDefinition;
    getValue<T>(index: number): T;
    getArray<T>(index: number): T[];
}
//# sourceMappingURL=constants.d.ts.map
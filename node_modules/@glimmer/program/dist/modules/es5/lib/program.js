import { RuntimeOpImpl } from './opcode';
import { assert } from '@glimmer/util';
var PAGE_SIZE = 0x100000;
export var RuntimeHeapImpl = /*#__PURE__*/function () {
  function RuntimeHeapImpl(serializedHeap) {
    var buffer = serializedHeap.buffer,
        table = serializedHeap.table;
    this.heap = new Int32Array(buffer);
    this.table = table;
  } // It is illegal to close over this address, as compaction
  // may move it. However, it is legal to use this address
  // multiple times between compactions.


  var _proto = RuntimeHeapImpl.prototype;

  _proto.getaddr = function getaddr(handle) {
    return this.table[handle];
  };

  _proto.getbyaddr = function getbyaddr(address) {
    false && assert(this.heap[address] !== undefined, 'Access memory out of bounds of the heap');
    return this.heap[address];
  };

  _proto.sizeof = function sizeof(handle) {
    return _sizeof(this.table, handle);
  };

  return RuntimeHeapImpl;
}();
export function hydrateHeap(serializedHeap) {
  return new RuntimeHeapImpl(serializedHeap);
}
/**
 * The Heap is responsible for dynamically allocating
 * memory in which we read/write the VM's instructions
 * from/to. When we malloc we pass out a VMHandle, which
 * is used as an indirect way of accessing the memory during
 * execution of the VM. Internally we track the different
 * regions of the memory in an int array known as the table.
 *
 * The table 32-bit aligned and has the following layout:
 *
 * | ... | hp (u32) |       info (u32)   | size (u32) |
 * | ... |  Handle  | Scope Size | State | Size       |
 * | ... | 32bits   | 30bits     | 2bits | 32bit      |
 *
 * With this information we effectively have the ability to
 * control when we want to free memory. That being said you
 * can not free during execution as raw address are only
 * valid during the execution. This means you cannot close
 * over them as you will have a bad memory access exception.
 */

export var HeapImpl = /*#__PURE__*/function () {
  function HeapImpl() {
    this.offset = 0;
    this.handle = 0;
    this.heap = new Int32Array(PAGE_SIZE);
    this.handleTable = [];
    this.handleState = [];
  }

  var _proto2 = HeapImpl.prototype;

  _proto2.push = function push(item) {
    this.sizeCheck();
    this.heap[this.offset++] = item;
  };

  _proto2.sizeCheck = function sizeCheck() {
    var heap = this.heap;

    if (this.offset === this.heap.length) {
      var newHeap = new Int32Array(heap.length + PAGE_SIZE);
      newHeap.set(heap, 0);
      this.heap = newHeap;
    }
  };

  _proto2.getbyaddr = function getbyaddr(address) {
    return this.heap[address];
  };

  _proto2.setbyaddr = function setbyaddr(address, value) {
    this.heap[address] = value;
  };

  _proto2.malloc = function malloc() {
    // push offset, info, size
    this.handleTable.push(this.offset);
    return this.handleTable.length - 1;
  };

  _proto2.finishMalloc = function finishMalloc(handle) {
    // @TODO: At the moment, garbage collection isn't actually used, so this is
    // wrapped to prevent us from allocating extra space in prod. In the future,
    // if we start using the compact API, we should change this.
    if (false
    /* LOCAL_DEBUG */
    ) {
        this.handleState[handle] = 0
        /* Allocated */
        ;
      }
  };

  _proto2.size = function size() {
    return this.offset;
  } // It is illegal to close over this address, as compaction
  // may move it. However, it is legal to use this address
  // multiple times between compactions.
  ;

  _proto2.getaddr = function getaddr(handle) {
    return this.handleTable[handle];
  };

  _proto2.sizeof = function sizeof(handle) {
    return _sizeof(this.handleTable, handle);
  };

  _proto2.free = function free(handle) {
    this.handleState[handle] = 1
    /* Freed */
    ;
  }
  /**
   * The heap uses the [Mark-Compact Algorithm](https://en.wikipedia.org/wiki/Mark-compact_algorithm) to shift
   * reachable memory to the bottom of the heap and freeable
   * memory to the top of the heap. When we have shifted all
   * the reachable memory to the top of the heap, we move the
   * offset to the next free position.
   */
  ;

  _proto2.compact = function compact() {
    var compactedSize = 0;
    var handleTable = this.handleTable,
        handleState = this.handleState,
        heap = this.heap;

    for (var i = 0; i < length; i++) {
      var offset = handleTable[i];
      var size = handleTable[i + 1] - offset;
      var state = handleState[i];

      if (state === 2
      /* Purged */
      ) {
          continue;
        } else if (state === 1
      /* Freed */
      ) {
          // transition to "already freed" aka "purged"
          // a good improvement would be to reuse
          // these slots
          handleState[i] = 2
          /* Purged */
          ;
          compactedSize += size;
        } else if (state === 0
      /* Allocated */
      ) {
          for (var j = offset; j <= i + size; j++) {
            heap[j - compactedSize] = heap[j];
          }

          handleTable[i] = offset - compactedSize;
        } else if (state === 3
      /* Pointer */
      ) {
          handleTable[i] = offset - compactedSize;
        }
    }

    this.offset = this.offset - compactedSize;
  };

  _proto2.capture = function capture(offset) {
    if (offset === void 0) {
      offset = this.offset;
    }

    // Only called in eager mode
    var buffer = slice(this.heap, 0, offset).buffer;
    return {
      handle: this.handle,
      table: this.handleTable,
      buffer: buffer
    };
  };

  return HeapImpl;
}();
export var RuntimeProgramImpl = /*#__PURE__*/function () {
  function RuntimeProgramImpl(constants, heap) {
    this.constants = constants;
    this.heap = heap;
    this._opcode = new RuntimeOpImpl(this.heap);
  }

  var _proto3 = RuntimeProgramImpl.prototype;

  _proto3.opcode = function opcode(offset) {
    this._opcode.offset = offset;
    return this._opcode;
  };

  return RuntimeProgramImpl;
}();

function slice(arr, start, end) {
  if (arr.slice !== undefined) {
    return arr.slice(start, end);
  }

  var ret = new Int32Array(end);

  for (; start < end; start++) {
    ret[start] = arr[start];
  }

  return ret;
}

function _sizeof(table, handle) {
  if (false
  /* LOCAL_DEBUG */
  ) {
      return table[handle + 1] - table[handle];
    } else {
    return -1;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
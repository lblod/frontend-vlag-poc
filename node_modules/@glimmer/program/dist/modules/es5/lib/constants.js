function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import { assert, constants, unwrapTemplate } from '@glimmer/util';
import { capabilityFlagsFrom, getComponentTemplate, getInternalComponentManager, getInternalHelperManager, getInternalModifierManager, managerHasCapability } from '@glimmer/manager';
import { templateFactory } from '@glimmer/opcode-compiler';
import { DEFAULT_TEMPLATE } from './util/default-template';
var WELL_KNOWN_EMPTY_ARRAY = Object.freeze([]);
var STARTER_CONSTANTS = constants(WELL_KNOWN_EMPTY_ARRAY);
var WELL_KNOWN_EMPTY_ARRAY_POSITION = STARTER_CONSTANTS.indexOf(WELL_KNOWN_EMPTY_ARRAY);
export var CompileTimeConstantImpl = /*#__PURE__*/function () {
  function CompileTimeConstantImpl() {
    // `0` means NULL
    this.values = STARTER_CONSTANTS.slice();
    this.indexMap = new Map(this.values.map(function (value, index) {
      return [value, index];
    }));
  }

  var _proto = CompileTimeConstantImpl.prototype;

  _proto.value = function value(_value) {
    var indexMap = this.indexMap;
    var index = indexMap.get(_value);

    if (index === undefined) {
      index = this.values.push(_value) - 1;
      indexMap.set(_value, index);
    }

    return index;
  };

  _proto.array = function array(values) {
    if (values.length === 0) {
      return WELL_KNOWN_EMPTY_ARRAY_POSITION;
    }

    var handles = new Array(values.length);

    for (var i = 0; i < values.length; i++) {
      handles[i] = this.value(values[i]);
    }

    return this.value(handles);
  };

  _proto.toPool = function toPool() {
    return this.values;
  };

  return CompileTimeConstantImpl;
}();
export var RuntimeConstantsImpl = /*#__PURE__*/function () {
  function RuntimeConstantsImpl(pool) {
    this.values = pool;
  }

  var _proto2 = RuntimeConstantsImpl.prototype;

  _proto2.getValue = function getValue(handle) {
    return this.values[handle];
  };

  _proto2.getArray = function getArray(value) {
    var handles = this.getValue(value);
    var reified = new Array(handles.length);

    for (var i = 0; i < handles.length; i++) {
      var n = handles[i];
      reified[i] = this.getValue(n);
    }

    return reified;
  };

  return RuntimeConstantsImpl;
}();
export var ConstantsImpl = /*#__PURE__*/function (_CompileTimeConstantI) {
  _inheritsLoose(ConstantsImpl, _CompileTimeConstantI);

  function ConstantsImpl() {
    var _this$reifiedArrs;

    var _this;

    _this = _CompileTimeConstantI.apply(this, arguments) || this;
    _this.reifiedArrs = (_this$reifiedArrs = {}, _this$reifiedArrs[WELL_KNOWN_EMPTY_ARRAY_POSITION] = WELL_KNOWN_EMPTY_ARRAY, _this$reifiedArrs);
    _this.defaultTemplate = templateFactory(DEFAULT_TEMPLATE)(); // Used for tests and debugging purposes, and to be able to analyze large apps
    // This is why it's enabled even in production

    _this.helperDefinitionCount = 0;
    _this.modifierDefinitionCount = 0;
    _this.componentDefinitionCount = 0;
    _this.helperDefinitionCache = new WeakMap();
    _this.modifierDefinitionCache = new WeakMap();
    _this.componentDefinitionCache = new WeakMap();
    return _this;
  }

  var _proto3 = ConstantsImpl.prototype;

  _proto3.helper = function helper(definitionState, // TODO: Add a way to expose resolved name for debugging
  _resolvedName, isOptional) {
    if (_resolvedName === void 0) {
      _resolvedName = null;
    }

    var handle = this.helperDefinitionCache.get(definitionState);

    if (handle === undefined) {
      var managerOrHelper = getInternalHelperManager(definitionState, isOptional);

      if (managerOrHelper === null) {
        this.helperDefinitionCache.set(definitionState, null);
        return null;
      }

      false && assert(managerOrHelper, 'BUG: expected manager or helper');
      var helper = typeof managerOrHelper === 'function' ? managerOrHelper : managerOrHelper.getHelper(definitionState);
      handle = this.value(helper);
      this.helperDefinitionCache.set(definitionState, handle);
      this.helperDefinitionCount++;
    }

    return handle;
  };

  _proto3.modifier = function modifier(definitionState, resolvedName, isOptional) {
    if (resolvedName === void 0) {
      resolvedName = null;
    }

    var handle = this.modifierDefinitionCache.get(definitionState);

    if (handle === undefined) {
      var manager = getInternalModifierManager(definitionState, isOptional);

      if (manager === null) {
        this.modifierDefinitionCache.set(definitionState, null);
        return null;
      }

      var definition = {
        resolvedName: resolvedName,
        manager: manager,
        state: definitionState
      };
      handle = this.value(definition);
      this.modifierDefinitionCache.set(definitionState, handle);
      this.modifierDefinitionCount++;
    }

    return handle;
  };

  _proto3.component = function component(definitionState, owner, isOptional) {
    var _a;

    var definition = this.componentDefinitionCache.get(definitionState);

    if (definition === undefined) {
      var manager = getInternalComponentManager(definitionState, isOptional);

      if (manager === null) {
        this.componentDefinitionCache.set(definitionState, null);
        return null;
      }

      false && assert(manager, 'BUG: expected manager');
      var capabilities = capabilityFlagsFrom(manager.getCapabilities(definitionState));

      var _templateFactory = getComponentTemplate(definitionState);

      var compilable = null;
      var template;

      if (!managerHasCapability(manager, capabilities, 1
      /* DynamicLayout */
      )) {
        template = (_a = _templateFactory === null || _templateFactory === void 0 ? void 0 : _templateFactory(owner)) !== null && _a !== void 0 ? _a : this.defaultTemplate;
      } else {
        template = _templateFactory === null || _templateFactory === void 0 ? void 0 : _templateFactory(owner);
      }

      if (template !== undefined) {
        template = unwrapTemplate(template);
        compilable = managerHasCapability(manager, capabilities, 1024
        /* Wrapped */
        ) ? template.asWrappedLayout() : template.asLayout();
      }

      definition = {
        resolvedName: null,
        handle: -1,
        manager: manager,
        capabilities: capabilities,
        state: definitionState,
        compilable: compilable
      };
      definition.handle = this.value(definition);
      this.componentDefinitionCache.set(definitionState, definition);
      this.componentDefinitionCount++;
    }

    return definition;
  };

  _proto3.resolvedComponent = function resolvedComponent(resolvedDefinition, resolvedName) {
    var definition = this.componentDefinitionCache.get(resolvedDefinition);

    if (definition === undefined) {
      var manager = resolvedDefinition.manager,
          state = resolvedDefinition.state,
          template = resolvedDefinition.template;
      var capabilities = capabilityFlagsFrom(manager.getCapabilities(resolvedDefinition));
      var compilable = null;

      if (!managerHasCapability(manager, capabilities, 1
      /* DynamicLayout */
      )) {
        template = template !== null && template !== void 0 ? template : this.defaultTemplate;
      }

      if (template !== null) {
        template = unwrapTemplate(template);
        compilable = managerHasCapability(manager, capabilities, 1024
        /* Wrapped */
        ) ? template.asWrappedLayout() : template.asLayout();
      }

      definition = {
        resolvedName: resolvedName,
        handle: -1,
        manager: manager,
        capabilities: capabilities,
        state: state,
        compilable: compilable
      };
      definition.handle = this.value(definition);
      this.componentDefinitionCache.set(resolvedDefinition, definition);
      this.componentDefinitionCount++;
    }

    return definition;
  };

  _proto3.getValue = function getValue(index) {
    false && assert(index >= 0, "cannot get value for handle: " + index);
    return this.values[index];
  };

  _proto3.getArray = function getArray(index) {
    var reifiedArrs = this.reifiedArrs;
    var reified = reifiedArrs[index];

    if (reified === undefined) {
      var names = this.getValue(index);
      reified = new Array(names.length);

      for (var i = 0; i < names.length; i++) {
        reified[i] = this.getValue(names[i]);
      }

      reifiedArrs[index] = reified;
    }

    return reified;
  };

  return ConstantsImpl;
}(CompileTimeConstantImpl);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InstructionEncoderImpl = void 0;

var _env = require("@glimmer/env");

var InstructionEncoderImpl = /*#__PURE__*/function () {
  function InstructionEncoderImpl(buffer) {
    this.buffer = buffer;
    this.size = 0;
  }

  var _proto = InstructionEncoderImpl.prototype;

  _proto.encode = function encode(type, machine) {
    if (type > 255
    /* TYPE_SIZE */
    ) {
        throw new Error("Opcode type over 8-bits. Got " + type + ".");
      }

    var first = type | machine | arguments.length - 2 << 8
    /* ARG_SHIFT */
    ;
    this.buffer.push(first);

    for (var i = 2; i < arguments.length; i++) {
      var op = arguments[i];

      if (_env.DEBUG && typeof op === 'number' && op > 2147483647
      /* MAX_SIZE */
      ) {
          throw new Error("Operand over 32-bits. Got " + op + ".");
        }

      this.buffer.push(op);
    }

    this.size = this.buffer.length;
  };

  _proto.patch = function patch(position, target) {
    if (this.buffer[position + 1] === -1) {
      this.buffer[position + 1] = target;
    } else {
      throw new Error('Trying to patch operand in populated slot instead of a reserved slot.');
    }
  };

  return InstructionEncoderImpl;
}();

exports.InstructionEncoderImpl = InstructionEncoderImpl;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL2VuY29kZXIvbGliL2VuY29kZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQVVBLElBQU0sc0JBQU4sR0FBQSxhQUFBLFlBQUE7QUFDRSxXQUFBLHNCQUFBLENBQUEsTUFBQSxFQUEyQztBQUF0QixTQUFBLE1BQUEsR0FBQSxNQUFBO0FBRXJCLFNBQUEsSUFBQSxHQUFBLENBQUE7QUFGK0M7O0FBRGpELE1BQUEsTUFBQSxHQUFBLHNCQUFBLENBQUEsU0FBQTs7QUFBQSxFQUFBLE1BQUEsQ0FBQSxNQUFBLEdBT0UsU0FBQSxNQUFBLENBQUEsSUFBQSxFQUFBLE9BQUEsRUFBaUU7QUFDL0QsUUFBSyxJQUFlLEdBQUE7QUFBQTtBQUFwQixNQUE2QztBQUMzQyxjQUFNLElBQUEsS0FBQSxDQUFBLGtDQUFOLElBQU0sR0FBTixHQUFNLENBQU47QUFDRDs7QUFFRCxRQUFJLEtBQUssR0FBRyxJQUFJLEdBQUosT0FBQSxHQUFtQixTQUFTLENBQVQsTUFBQSxHQUFELENBQUMsSUFBcUI7QUFBQTtBQUFwRDtBQUVBLFNBQUEsTUFBQSxDQUFBLElBQUEsQ0FBQSxLQUFBOztBQUVBLFNBQUssSUFBSSxDQUFDLEdBQVYsQ0FBQSxFQUFnQixDQUFDLEdBQUcsU0FBUyxDQUE3QixNQUFBLEVBQXNDLENBQXRDLEVBQUEsRUFBMkM7QUFDekMsVUFBSSxFQUFFLEdBQUcsU0FBUyxDQUFsQixDQUFrQixDQUFsQjs7QUFDQSxVQUFJLGNBQVMsT0FBQSxFQUFBLEtBQVQsUUFBQSxJQUFtQyxFQUFFLEdBQUE7QUFBQTtBQUF6QyxRQUFpRTtBQUMvRCxnQkFBTSxJQUFBLEtBQUEsQ0FBQSwrQkFBTixFQUFNLEdBQU4sR0FBTSxDQUFOO0FBQ0Q7O0FBQ0QsV0FBQSxNQUFBLENBQUEsSUFBQSxDQUFBLEVBQUE7QUFDRDs7QUFFRCxTQUFBLElBQUEsR0FBWSxLQUFBLE1BQUEsQ0FBWixNQUFBO0FBeEJKLEdBQUE7O0FBQUEsRUFBQSxNQUFBLENBQUEsS0FBQSxHQTJCRSxTQUFBLEtBQUEsQ0FBQSxRQUFBLEVBQUEsTUFBQSxFQUFzQztBQUNwQyxRQUFJLEtBQUEsTUFBQSxDQUFZLFFBQVEsR0FBcEIsQ0FBQSxNQUE4QixDQUFsQyxDQUFBLEVBQXNDO0FBQ3BDLFdBQUEsTUFBQSxDQUFZLFFBQVEsR0FBcEIsQ0FBQSxJQUFBLE1BQUE7QUFERixLQUFBLE1BRU87QUFDTCxZQUFNLElBQUEsS0FBQSxDQUFOLHVFQUFNLENBQU47QUFDRDtBQWhDTCxHQUFBOztBQUFBLFNBQUEsc0JBQUE7QUFBQSxDQUFBLEVBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBERUJVRyB9IGZyb20gJ0BnbGltbWVyL2Vudic7XG5pbXBvcnQge1xuICBDb21waWxlckJ1ZmZlcixcbiAgT3BlcmFuZCxcbiAgTWFjaGluZU9wLFxuICBPcCxcbiAgSW5zdHJ1Y3Rpb25FbmNvZGVyLFxuICBPcGNvZGVTaXplLFxufSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcblxuZXhwb3J0IGNsYXNzIEluc3RydWN0aW9uRW5jb2RlckltcGwgaW1wbGVtZW50cyBJbnN0cnVjdGlvbkVuY29kZXIge1xuICBjb25zdHJ1Y3RvcihyZWFkb25seSBidWZmZXI6IENvbXBpbGVyQnVmZmVyKSB7fVxuXG4gIHNpemUgPSAwO1xuXG4gIGVuY29kZSh0eXBlOiBNYWNoaW5lT3AsIG1hY2hpbmU6IE9wY29kZVNpemUuTUFDSElORV9NQVNLLCAuLi5vcGVyYW5kczogT3BlcmFuZFtdKTogdm9pZDtcbiAgZW5jb2RlKHR5cGU6IE9wLCBtYWNoaW5lOiAwLCAuLi5vcGVyYW5kczogT3BlcmFuZFtdKTogdm9pZDtcbiAgZW5jb2RlKHR5cGU6IE9wIHwgTWFjaGluZU9wLCBtYWNoaW5lOiAwIHwgT3Bjb2RlU2l6ZS5NQUNISU5FX01BU0spIHtcbiAgICBpZiAoKHR5cGUgYXMgbnVtYmVyKSA+IE9wY29kZVNpemUuVFlQRV9TSVpFKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE9wY29kZSB0eXBlIG92ZXIgOC1iaXRzLiBHb3QgJHt0eXBlfS5gKTtcbiAgICB9XG5cbiAgICBsZXQgZmlyc3QgPSB0eXBlIHwgbWFjaGluZSB8ICgoYXJndW1lbnRzLmxlbmd0aCAtIDIpIDw8IE9wY29kZVNpemUuQVJHX1NISUZUKTtcblxuICAgIHRoaXMuYnVmZmVyLnB1c2goZmlyc3QpO1xuXG4gICAgZm9yIChsZXQgaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBvcCA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGlmIChERUJVRyAmJiB0eXBlb2Ygb3AgPT09ICdudW1iZXInICYmIG9wID4gT3Bjb2RlU2l6ZS5NQVhfU0laRSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE9wZXJhbmQgb3ZlciAzMi1iaXRzLiBHb3QgJHtvcH0uYCk7XG4gICAgICB9XG4gICAgICB0aGlzLmJ1ZmZlci5wdXNoKG9wKTtcbiAgICB9XG5cbiAgICB0aGlzLnNpemUgPSB0aGlzLmJ1ZmZlci5sZW5ndGg7XG4gIH1cblxuICBwYXRjaChwb3NpdGlvbjogbnVtYmVyLCB0YXJnZXQ6IG51bWJlcikge1xuICAgIGlmICh0aGlzLmJ1ZmZlcltwb3NpdGlvbiArIDFdID09PSAtMSkge1xuICAgICAgdGhpcy5idWZmZXJbcG9zaXRpb24gKyAxXSA9IHRhcmdldDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUcnlpbmcgdG8gcGF0Y2ggb3BlcmFuZCBpbiBwb3B1bGF0ZWQgc2xvdCBpbnN0ZWFkIG9mIGEgcmVzZXJ2ZWQgc2xvdC4nKTtcbiAgICB9XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=
define('@glimmer/node', ['exports', '@glimmer/runtime', '@simple-dom/document'], function (exports, runtime, createHTMLDocument) { 'use strict';

  createHTMLDocument = createHTMLDocument && Object.prototype.hasOwnProperty.call(createHTMLDocument, 'default') ? createHTMLDocument['default'] : createHTMLDocument;

  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

  var NodeDOMTreeConstruction = /*#__PURE__*/function (_DOMTreeConstruction) {
    _inheritsLoose(NodeDOMTreeConstruction, _DOMTreeConstruction);

    function NodeDOMTreeConstruction(doc) {
      return _DOMTreeConstruction.call(this, doc || createHTMLDocument()) || this;
    } // override to prevent usage of `this.document` until after the constructor


    var _proto = NodeDOMTreeConstruction.prototype;

    _proto.setupUselessElement = function setupUselessElement() {};

    _proto.insertHTMLBefore = function insertHTMLBefore(parent, reference, html) {
      var raw = this.document.createRawHTMLSection(html);
      parent.insertBefore(raw, reference);
      return new runtime.ConcreteBounds(parent, raw, raw);
    } // override to avoid SVG detection/work when in node (this is not needed in SSR)
    ;

    _proto.createElement = function createElement(tag) {
      return this.document.createElement(tag);
    } // override to avoid namespace shenanigans when in node (this is not needed in SSR)
    ;

    _proto.setAttribute = function setAttribute(element, name, value) {
      element.setAttribute(name, value);
    };

    return NodeDOMTreeConstruction;
  }(runtime.DOMTreeConstruction);

  function _inheritsLoose$1(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }
  var TEXT_NODE = 3;
  var NEEDS_EXTRA_CLOSE = new WeakMap();

  function currentNode(cursor) {
    var element = cursor.element,
        nextSibling = cursor.nextSibling;

    if (nextSibling === null) {
      return element.lastChild;
    } else {
      return nextSibling.previousSibling;
    }
  }

  var SerializeBuilder = /*#__PURE__*/function (_NewElementBuilder) {
    _inheritsLoose$1(SerializeBuilder, _NewElementBuilder);

    function SerializeBuilder() {
      var _this;

      _this = _NewElementBuilder.apply(this, arguments) || this;
      _this.serializeBlockDepth = 0;
      return _this;
    }

    var _proto = SerializeBuilder.prototype;

    _proto.__openBlock = function __openBlock() {
      var tagName = this.element.tagName;

      if (tagName !== 'TITLE' && tagName !== 'SCRIPT' && tagName !== 'STYLE') {
        var depth = this.serializeBlockDepth++;

        this.__appendComment("%+b:" + depth + "%");
      }

      _NewElementBuilder.prototype.__openBlock.call(this);
    };

    _proto.__closeBlock = function __closeBlock() {
      var tagName = this.element.tagName;

      _NewElementBuilder.prototype.__closeBlock.call(this);

      if (tagName !== 'TITLE' && tagName !== 'SCRIPT' && tagName !== 'STYLE') {
        var depth = --this.serializeBlockDepth;

        this.__appendComment("%-b:" + depth + "%");
      }
    };

    _proto.__appendHTML = function __appendHTML(html) {
      var tagName = this.element.tagName;

      if (tagName === 'TITLE' || tagName === 'SCRIPT' || tagName === 'STYLE') {
        return _NewElementBuilder.prototype.__appendHTML.call(this, html);
      } // Do we need to run the html tokenizer here?


      var first = this.__appendComment('%glmr%');

      if (tagName === 'TABLE') {
        var openIndex = html.indexOf('<');

        if (openIndex > -1) {
          var tr = html.slice(openIndex + 1, openIndex + 3);

          if (tr === 'tr') {
            html = "<tbody>" + html + "</tbody>";
          }
        }
      }

      if (html === '') {
        this.__appendComment('% %');
      } else {
        _NewElementBuilder.prototype.__appendHTML.call(this, html);
      }

      var last = this.__appendComment('%glmr%');

      return new runtime.ConcreteBounds(this.element, first, last);
    };

    _proto.__appendText = function __appendText(string) {
      var tagName = this.element.tagName;
      var current = currentNode(this);

      if (tagName === 'TITLE' || tagName === 'SCRIPT' || tagName === 'STYLE') {
        return _NewElementBuilder.prototype.__appendText.call(this, string);
      } else if (string === '') {
        return this.__appendComment('% %');
      } else if (current && current.nodeType === TEXT_NODE) {
        this.__appendComment('%|%');
      }

      return _NewElementBuilder.prototype.__appendText.call(this, string);
    };

    _proto.closeElement = function closeElement() {
      if (NEEDS_EXTRA_CLOSE.has(this.element)) {
        NEEDS_EXTRA_CLOSE["delete"](this.element);

        _NewElementBuilder.prototype.closeElement.call(this);
      }

      return _NewElementBuilder.prototype.closeElement.call(this);
    };

    _proto.openElement = function openElement(tag) {
      if (tag === 'tr') {
        if (this.element.tagName !== 'TBODY' && this.element.tagName !== 'THEAD' && this.element.tagName !== 'TFOOT') {
          this.openElement('tbody'); // This prevents the closeBlock comment from being re-parented
          // under the auto inserted tbody. Rehydration builder needs to
          // account for the insertion since it is injected here and not
          // really in the template.

          NEEDS_EXTRA_CLOSE.set(this.constructing, true);
          this.flushElement(null);
        }
      }

      return _NewElementBuilder.prototype.openElement.call(this, tag);
    };

    _proto.pushRemoteElement = function pushRemoteElement(element, cursorId, insertBefore) {
      if (insertBefore === void 0) {
        insertBefore = null;
      }

      var dom = this.dom;
      var script = dom.createElement('script');
      script.setAttribute('glmr', cursorId);
      dom.insertBefore(element, script, insertBefore);
      return _NewElementBuilder.prototype.pushRemoteElement.call(this, element, cursorId, insertBefore);
    };

    return SerializeBuilder;
  }(runtime.NewElementBuilder);

  function serializeBuilder(env, cursor) {
    return SerializeBuilder.forInitialRender(env, cursor);
  }

  exports.NodeDOMTreeConstruction = NodeDOMTreeConstruction;
  exports.serializeBuilder = serializeBuilder;

  Object.defineProperty(exports, '__esModule', { value: true });

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

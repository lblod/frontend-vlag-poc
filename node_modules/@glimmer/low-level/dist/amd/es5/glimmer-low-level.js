define('@glimmer/low-level', ['exports'], function (exports) { 'use strict';

  var Storage = /*#__PURE__*/function () {
    function Storage() {
      this.array = [];
      this.next = 0;
    }

    var _proto = Storage.prototype;

    _proto.add = function add(element) {
      var slot = this.next,
          array = this.array;

      if (slot === array.length) {
        this.next++;
      } else {
        var prev = array[slot];
        this.next = prev;
      }

      this.array[slot] = element;
      return slot;
    };

    _proto.deref = function deref(pointer) {
      return this.array[pointer];
    };

    _proto.drop = function drop(pointer) {
      this.array[pointer] = this.next;
      this.next = pointer;
    };

    return Storage;
  }();

  var Stack = /*#__PURE__*/function () {
    function Stack(vec) {
      if (vec === void 0) {
        vec = [];
      }

      this.vec = vec;
    }

    var _proto = Stack.prototype;

    _proto.clone = function clone() {
      return new Stack(this.vec.slice());
    };

    _proto.sliceFrom = function sliceFrom(start) {
      return new Stack(this.vec.slice(start));
    };

    _proto.slice = function slice(start, end) {
      return new Stack(this.vec.slice(start, end));
    };

    _proto.copy = function copy(from, to) {
      this.vec[to] = this.vec[from];
    } // TODO: how to model u64 argument?
    ;

    _proto.writeRaw = function writeRaw(pos, value) {
      // TODO: Grow?
      this.vec[pos] = value;
    } // TODO: partially decoded enum?
    ;

    _proto.getRaw = function getRaw(pos) {
      return this.vec[pos];
    };

    _proto.reset = function reset() {
      this.vec.length = 0;
    };

    _proto.len = function len() {
      return this.vec.length;
    };

    return Stack;
  }();

  exports.Stack = Stack;
  exports.Storage = Storage;

  Object.defineProperty(exports, '__esModule', { value: true });

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xpbW1lci1sb3ctbGV2ZWwuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL2xvdy1sZXZlbC9saWIvZ2x1ZS9zdG9yYWdlLnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvQGdsaW1tZXIvbG93LWxldmVsL2xpYi9hc20vc3RhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFN0b3JhZ2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IGFycmF5OiB1bmtub3duW10gPSBbXTtcbiAgcHJpdmF0ZSBuZXh0ID0gMDtcblxuICBhZGQoZWxlbWVudDogdW5rbm93bik6IG51bWJlciB7XG4gICAgbGV0IHsgbmV4dDogc2xvdCwgYXJyYXkgfSA9IHRoaXM7XG5cbiAgICBpZiAoc2xvdCA9PT0gYXJyYXkubGVuZ3RoKSB7XG4gICAgICB0aGlzLm5leHQrKztcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHByZXYgPSBhcnJheVtzbG90XSBhcyBudW1iZXI7XG4gICAgICB0aGlzLm5leHQgPSBwcmV2O1xuICAgIH1cblxuICAgIHRoaXMuYXJyYXlbc2xvdF0gPSBlbGVtZW50O1xuICAgIHJldHVybiBzbG90O1xuICB9XG5cbiAgZGVyZWYocG9pbnRlcjogbnVtYmVyKTogdW5rbm93biB7XG4gICAgcmV0dXJuIHRoaXMuYXJyYXlbcG9pbnRlcl07XG4gIH1cblxuICBkcm9wKHBvaW50ZXI6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuYXJyYXlbcG9pbnRlcl0gPSB0aGlzLm5leHQ7XG4gICAgdGhpcy5uZXh0ID0gcG9pbnRlcjtcbiAgfVxufVxuIiwiZXhwb3J0IHR5cGUgVTY0ID0gbnVtYmVyO1xuZXhwb3J0IHR5cGUgVTMyID0gbnVtYmVyO1xuZXhwb3J0IHR5cGUgSTMyID0gbnVtYmVyO1xuXG5leHBvcnQgY2xhc3MgU3RhY2sge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHZlYzogVTY0W10gPSBbXSkge31cblxuICBjbG9uZSgpOiBTdGFjayB7XG4gICAgcmV0dXJuIG5ldyBTdGFjayh0aGlzLnZlYy5zbGljZSgpKTtcbiAgfVxuXG4gIHNsaWNlRnJvbShzdGFydDogVTMyKTogU3RhY2sge1xuICAgIHJldHVybiBuZXcgU3RhY2sodGhpcy52ZWMuc2xpY2Uoc3RhcnQpKTtcbiAgfVxuXG4gIHNsaWNlKHN0YXJ0OiBVMzIsIGVuZDogSTMyKTogU3RhY2sge1xuICAgIHJldHVybiBuZXcgU3RhY2sodGhpcy52ZWMuc2xpY2Uoc3RhcnQsIGVuZCkpO1xuICB9XG5cbiAgY29weShmcm9tOiBVMzIsIHRvOiBVMzIpIHtcbiAgICB0aGlzLnZlY1t0b10gPSB0aGlzLnZlY1tmcm9tXTtcbiAgfVxuXG4gIC8vIFRPRE86IGhvdyB0byBtb2RlbCB1NjQgYXJndW1lbnQ/XG4gIHdyaXRlUmF3KHBvczogVTMyLCB2YWx1ZTogVTY0KTogdm9pZCB7XG4gICAgLy8gVE9ETzogR3Jvdz9cbiAgICB0aGlzLnZlY1twb3NdID0gdmFsdWU7XG4gIH1cblxuICAvLyBUT0RPOiBwYXJ0aWFsbHkgZGVjb2RlZCBlbnVtP1xuICBnZXRSYXcocG9zOiBVMzIpOiBVMzIge1xuICAgIHJldHVybiB0aGlzLnZlY1twb3NdO1xuICB9XG5cbiAgcmVzZXQoKTogdm9pZCB7XG4gICAgdGhpcy52ZWMubGVuZ3RoID0gMDtcbiAgfVxuXG4gIGxlbigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnZlYy5sZW5ndGg7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztNQUFNLE9BQU47RUFBQSxxQkFBQTtFQUNtQixTQUFBLEtBQUEsR0FBQSxFQUFBO0VBQ1QsU0FBQSxJQUFBLEdBQUEsQ0FBQTtFQXdCVDs7RUExQkQ7O0VBQUEsU0FJRSxHQUpGLEdBSUUsYUFBRyxPQUFILEVBQW9CO0VBQUEsUUFDZCxJQURjLEdBQ2xCLElBRGtCLENBQ1osSUFEWTtFQUFBLFFBQ0EsS0FEQSxHQUNsQixJQURrQixDQUNBLEtBREE7O0VBR2xCLFFBQUksSUFBSSxLQUFLLEtBQUssQ0FBbEIsTUFBQSxFQUEyQjtFQUN6QixXQUFBLElBQUE7RUFERixLQUFBLE1BRU87RUFDTCxVQUFJLElBQUksR0FBRyxLQUFLLENBQWhCLElBQWdCLENBQWhCO0VBQ0EsV0FBQSxJQUFBLEdBQUEsSUFBQTtFQUNEOztFQUVELFNBQUEsS0FBQSxDQUFBLElBQUEsSUFBQSxPQUFBO0VBQ0EsV0FBQSxJQUFBO0VBQ0QsR0FoQkg7O0VBQUEsU0FrQkUsS0FsQkYsR0FrQkUsZUFBSyxPQUFMLEVBQXFCO0VBQ25CLFdBQU8sS0FBQSxLQUFBLENBQVAsT0FBTyxDQUFQO0VBQ0QsR0FwQkg7O0VBQUEsU0FzQkUsSUF0QkYsR0FzQkUsY0FBSSxPQUFKLEVBQW9CO0VBQ2xCLFNBQUEsS0FBQSxDQUFBLE9BQUEsSUFBc0IsS0FBdEIsSUFBQTtFQUNBLFNBQUEsSUFBQSxHQUFBLE9BQUE7RUFDRCxHQXpCSDs7RUFBQTtFQUFBOztNQ0lNLEtBQU47RUFDRSxpQkFBb0IsR0FBcEIsRUFBbUM7RUFBQSxRQUFmLEdBQWU7RUFBZixNQUFBLEdBQWUsR0FBbkMsRUFBbUM7RUFBQTs7RUFBZixTQUFBLEdBQUEsR0FBQSxHQUFBO0VBQW1COztFQUR6Qzs7RUFBQSxTQUdFLEtBSEYsR0FHRSxpQkFBSztFQUNILFdBQU8sSUFBQSxLQUFBLENBQVUsS0FBQSxHQUFBLENBQWpCLEtBQWlCLEVBQVYsQ0FBUDtFQUNELEdBTEg7O0VBQUEsU0FPRSxTQVBGLEdBT0UsbUJBQVMsS0FBVCxFQUFvQjtFQUNsQixXQUFPLElBQUEsS0FBQSxDQUFVLEtBQUEsR0FBQSxDQUFBLEtBQUEsQ0FBakIsS0FBaUIsQ0FBVixDQUFQO0VBQ0QsR0FUSDs7RUFBQSxTQVdFLEtBWEYsR0FXRSxlQUFLLEtBQUwsRUFBSyxHQUFMLEVBQTBCO0VBQ3hCLFdBQU8sSUFBQSxLQUFBLENBQVUsS0FBQSxHQUFBLENBQUEsS0FBQSxDQUFBLEtBQUEsRUFBakIsR0FBaUIsQ0FBVixDQUFQO0VBQ0QsR0FiSDs7RUFBQSxTQWVFLElBZkYsR0FlRSxjQUFJLElBQUosRUFBSSxFQUFKLEVBQXVCO0VBQ3JCLFNBQUEsR0FBQSxDQUFBLEVBQUEsSUFBZSxLQUFBLEdBQUEsQ0FBZixJQUFlLENBQWY7RUFoQmMsR0FBbEI7RUFBQTs7RUFBQSxTQW9CRSxRQXBCRixHQW9CRSxrQkFBUSxHQUFSLEVBQVEsS0FBUixFQUE2QjtFQUMzQjtFQUNBLFNBQUEsR0FBQSxDQUFBLEdBQUEsSUFBQSxLQUFBO0VBdEJjLEdBQWxCO0VBQUE7O0VBQUEsU0EwQkUsTUExQkYsR0EwQkUsZ0JBQU0sR0FBTixFQUFlO0VBQ2IsV0FBTyxLQUFBLEdBQUEsQ0FBUCxHQUFPLENBQVA7RUFDRCxHQTVCSDs7RUFBQSxTQThCRSxLQTlCRixHQThCRSxpQkFBSztFQUNILFNBQUEsR0FBQSxDQUFBLE1BQUEsR0FBQSxDQUFBO0VBQ0QsR0FoQ0g7O0VBQUEsU0FrQ0UsR0FsQ0YsR0FrQ0UsZUFBRztFQUNELFdBQU8sS0FBQSxHQUFBLENBQVAsTUFBQTtFQUNELEdBcENIOztFQUFBO0VBQUE7Ozs7Ozs7Ozs7Ozs7In0=

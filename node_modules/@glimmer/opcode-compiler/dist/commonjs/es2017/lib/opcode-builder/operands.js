"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.labelOperand = labelOperand;
exports.evalSymbolsOperand = evalSymbolsOperand;
exports.isStrictMode = isStrictMode;
exports.blockOperand = blockOperand;
exports.stdlibOperand = stdlibOperand;
exports.nonSmallIntOperand = nonSmallIntOperand;
exports.symbolTableOperand = symbolTableOperand;
exports.layoutOperand = layoutOperand;

var _util = require("@glimmer/util");

function labelOperand(value) {
  return {
    type: 1
    /* Label */
    ,
    value
  };
}

function evalSymbolsOperand() {
  return {
    type: 3
    /* EvalSymbols */
    ,
    value: undefined
  };
}

function isStrictMode() {
  return {
    type: 2
    /* IsStrictMode */
    ,
    value: undefined
  };
}

function blockOperand(value) {
  return {
    type: 4
    /* Block */
    ,
    value
  };
}

function stdlibOperand(value) {
  return {
    type: 5
    /* StdLib */
    ,
    value
  };
}

function nonSmallIntOperand(value) {
  false && (0, _util.assert)(!(0, _util.isSmallInt)(value), 'Attempted to make a operand for an int that was not a small int, you should encode this as an immediate');
  return {
    type: 6
    /* NonSmallInt */
    ,
    value
  };
}

function symbolTableOperand(value) {
  return {
    type: 7
    /* SymbolTable */
    ,
    value
  };
}

function layoutOperand(value) {
  return {
    type: 8
    /* Layout */
    ,
    value
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL29wY29kZS1jb21waWxlci9saWIvb3Bjb2RlLWJ1aWxkZXIvb3BlcmFuZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFlQTs7QUFFTSxTQUFBLFlBQUEsQ0FBQSxLQUFBLEVBQW9DO0FBQ3hDLFNBQU87QUFBRSxJQUFBLElBQUksRUFBQTtBQUFBO0FBQU47QUFBZ0MsSUFBQTtBQUFoQyxHQUFQO0FBQ0Q7O0FBRUssU0FBQSxrQkFBQSxHQUE0QjtBQUNoQyxTQUFPO0FBQUUsSUFBQSxJQUFJLEVBQUE7QUFBQTtBQUFOO0FBQXNDLElBQUEsS0FBSyxFQUFFO0FBQTdDLEdBQVA7QUFDRDs7QUFFSyxTQUFBLFlBQUEsR0FBc0I7QUFDMUIsU0FBTztBQUFFLElBQUEsSUFBSSxFQUFBO0FBQUE7QUFBTjtBQUF1QyxJQUFBLEtBQUssRUFBRTtBQUE5QyxHQUFQO0FBQ0Q7O0FBRUssU0FBQSxZQUFBLENBQUEsS0FBQSxFQUFxRTtBQUN6RSxTQUFPO0FBQUUsSUFBQSxJQUFJLEVBQUE7QUFBQTtBQUFOO0FBQWdDLElBQUE7QUFBaEMsR0FBUDtBQUNEOztBQUVLLFNBQUEsYUFBQSxDQUFBLEtBQUEsRUFNNkI7QUFFakMsU0FBTztBQUFFLElBQUEsSUFBSSxFQUFBO0FBQUE7QUFBTjtBQUFpQyxJQUFBO0FBQWpDLEdBQVA7QUFDRDs7QUFFSyxTQUFBLGtCQUFBLENBQUEsS0FBQSxFQUEwQztBQUFBLFdBQzlDLGtCQUNFLENBQUMsc0JBREcsS0FDSCxDQURILEVBRDhDLHlHQUM5QyxDQUQ4QztBQUs5QyxTQUFPO0FBQUUsSUFBQSxJQUFJLEVBQUE7QUFBQTtBQUFOO0FBQXNDLElBQUE7QUFBdEMsR0FBUDtBQUNEOztBQUVLLFNBQUEsa0JBQUEsQ0FBQSxLQUFBLEVBQStDO0FBQ25ELFNBQU87QUFBRSxJQUFBLElBQUksRUFBQTtBQUFBO0FBQU47QUFBc0MsSUFBQTtBQUF0QyxHQUFQO0FBQ0Q7O0FBRUssU0FBQSxhQUFBLENBQUEsS0FBQSxFQUFpRDtBQUNyRCxTQUFPO0FBQUUsSUFBQSxJQUFJLEVBQUE7QUFBQTtBQUFOO0FBQWlDLElBQUE7QUFBakMsR0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgTGFiZWxPcGVyYW5kLFxuICBTZXJpYWxpemVkSW5saW5lQmxvY2ssXG4gIEV2YWxTeW1ib2xzT3BlcmFuZCxcbiAgSGlnaExldmVsT3BlcmFuZCxcbiAgQmxvY2tPcGVyYW5kLFxuICBTdGRMaWJPcGVyYW5kLFxuICBOb25TbWFsbEludE9wZXJhbmQsXG4gIFNlcmlhbGl6ZWRCbG9jayxcbiAgU3ltYm9sVGFibGUsXG4gIFN5bWJvbFRhYmxlT3BlcmFuZCxcbiAgQ29tcGlsYWJsZVRlbXBsYXRlLFxuICBMYXlvdXRPcGVyYW5kLFxuICBJc1N0cmljdE1vZGVPcGVyYW5kLFxufSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcbmltcG9ydCB7IGFzc2VydCwgaXNTbWFsbEludCB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuXG5leHBvcnQgZnVuY3Rpb24gbGFiZWxPcGVyYW5kKHZhbHVlOiBzdHJpbmcpOiBMYWJlbE9wZXJhbmQge1xuICByZXR1cm4geyB0eXBlOiBIaWdoTGV2ZWxPcGVyYW5kLkxhYmVsLCB2YWx1ZSB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXZhbFN5bWJvbHNPcGVyYW5kKCk6IEV2YWxTeW1ib2xzT3BlcmFuZCB7XG4gIHJldHVybiB7IHR5cGU6IEhpZ2hMZXZlbE9wZXJhbmQuRXZhbFN5bWJvbHMsIHZhbHVlOiB1bmRlZmluZWQgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU3RyaWN0TW9kZSgpOiBJc1N0cmljdE1vZGVPcGVyYW5kIHtcbiAgcmV0dXJuIHsgdHlwZTogSGlnaExldmVsT3BlcmFuZC5Jc1N0cmljdE1vZGUsIHZhbHVlOiB1bmRlZmluZWQgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJsb2NrT3BlcmFuZCh2YWx1ZTogU2VyaWFsaXplZElubGluZUJsb2NrIHwgU2VyaWFsaXplZEJsb2NrKTogQmxvY2tPcGVyYW5kIHtcbiAgcmV0dXJuIHsgdHlwZTogSGlnaExldmVsT3BlcmFuZC5CbG9jaywgdmFsdWUgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0ZGxpYk9wZXJhbmQoXG4gIHZhbHVlOlxuICAgIHwgJ21haW4nXG4gICAgfCAndHJ1c3RpbmctYXBwZW5kJ1xuICAgIHwgJ2NhdXRpb3VzLWFwcGVuZCdcbiAgICB8ICd0cnVzdGluZy1ub24tZHluYW1pYy1hcHBlbmQnXG4gICAgfCAnY2F1dGlvdXMtbm9uLWR5bmFtaWMtYXBwZW5kJ1xuKTogU3RkTGliT3BlcmFuZCB7XG4gIHJldHVybiB7IHR5cGU6IEhpZ2hMZXZlbE9wZXJhbmQuU3RkTGliLCB2YWx1ZSB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbm9uU21hbGxJbnRPcGVyYW5kKHZhbHVlOiBudW1iZXIpOiBOb25TbWFsbEludE9wZXJhbmQge1xuICBhc3NlcnQoXG4gICAgIWlzU21hbGxJbnQodmFsdWUpLFxuICAgICdBdHRlbXB0ZWQgdG8gbWFrZSBhIG9wZXJhbmQgZm9yIGFuIGludCB0aGF0IHdhcyBub3QgYSBzbWFsbCBpbnQsIHlvdSBzaG91bGQgZW5jb2RlIHRoaXMgYXMgYW4gaW1tZWRpYXRlJ1xuICApO1xuICByZXR1cm4geyB0eXBlOiBIaWdoTGV2ZWxPcGVyYW5kLk5vblNtYWxsSW50LCB2YWx1ZSB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3ltYm9sVGFibGVPcGVyYW5kKHZhbHVlOiBTeW1ib2xUYWJsZSk6IFN5bWJvbFRhYmxlT3BlcmFuZCB7XG4gIHJldHVybiB7IHR5cGU6IEhpZ2hMZXZlbE9wZXJhbmQuU3ltYm9sVGFibGUsIHZhbHVlIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsYXlvdXRPcGVyYW5kKHZhbHVlOiBDb21waWxhYmxlVGVtcGxhdGUpOiBMYXlvdXRPcGVyYW5kIHtcbiAgcmV0dXJuIHsgdHlwZTogSGlnaExldmVsT3BlcmFuZC5MYXlvdXQsIHZhbHVlIH07XG59XG4iXSwic291cmNlUm9vdCI6IiJ9
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InvokeComponent = InvokeComponent;
exports.InvokeDynamicComponent = InvokeDynamicComponent;
exports.InvokeNonStaticComponent = InvokeNonStaticComponent;
exports.WrappedComponent = WrappedComponent;
exports.invokePreparedComponent = invokePreparedComponent;
exports.InvokeBareComponent = InvokeBareComponent;
exports.WithSavedRegister = WithSavedRegister;
exports.ATTRS_BLOCK = void 0;

var _manager = require("@glimmer/manager");

var _vm = require("@glimmer/vm");

var _util = require("@glimmer/util");

var _utils = require("../../utils");

var _operands = require("../operands");

var _blocks2 = require("./blocks");

var _conditional = require("./conditional");

var _expr = require("./expr");

var _shared = require("./shared");

const ATTRS_BLOCK = '&attrs';
exports.ATTRS_BLOCK = ATTRS_BLOCK;

function InvokeComponent(op, component, _elementBlock, positional, named, _blocks) {
  let {
    compilable,
    capabilities,
    handle
  } = component;
  let elementBlock = _elementBlock ? [_elementBlock, []] : null;
  let blocks = Array.isArray(_blocks) || _blocks === null ? (0, _utils.namedBlocks)(_blocks) : _blocks;

  if (compilable) {
    op(78
    /* PushComponentDefinition */
    , handle);
    InvokeStaticComponent(op, {
      capabilities: capabilities,
      layout: compilable,
      elementBlock,
      positional,
      named,
      blocks
    });
  } else {
    op(78
    /* PushComponentDefinition */
    , handle);
    InvokeNonStaticComponent(op, {
      capabilities: capabilities,
      elementBlock,
      positional,
      named,
      atNames: true,
      blocks
    });
  }
}

function InvokeDynamicComponent(op, definition, _elementBlock, positional, named, _blocks, atNames, curried) {
  let elementBlock = _elementBlock ? [_elementBlock, []] : null;
  let blocks = Array.isArray(_blocks) || _blocks === null ? (0, _utils.namedBlocks)(_blocks) : _blocks;
  (0, _conditional.Replayable)(op, () => {
    (0, _expr.expr)(op, definition);
    op(33
    /* Dup */
    , _vm.$sp, 0);
    return 2;
  }, () => {
    op(66
    /* JumpUnless */
    , (0, _operands.labelOperand)('ELSE'));

    if (curried) {
      op(81
      /* ResolveCurriedComponent */
      );
    } else {
      op(80
      /* ResolveDynamicComponent */
      , (0, _operands.isStrictMode)());
    }

    op(79
    /* PushDynamicComponentInstance */
    );
    InvokeNonStaticComponent(op, {
      capabilities: true,
      elementBlock,
      positional,
      named,
      atNames,
      blocks
    });
    op(1000
    /* Label */
    , 'ELSE');
  });
}

function InvokeStaticComponent(op, {
  capabilities,
  layout,
  elementBlock,
  positional,
  named,
  blocks
}) {
  let {
    symbolTable
  } = layout;
  let bailOut = symbolTable.hasEval || (0, _manager.hasCapability)(capabilities, 4
  /* PrepareArgs */
  );

  if (bailOut) {
    InvokeNonStaticComponent(op, {
      capabilities,
      elementBlock,
      positional,
      named,
      atNames: true,
      blocks,
      layout
    });
    return;
  }

  op(36
  /* Fetch */
  , _vm.$s0);
  op(33
  /* Dup */
  , _vm.$sp, 1);
  op(35
  /* Load */
  , _vm.$s0);
  op(0
  /* PushFrame */
  ); // Setup arguments

  let {
    symbols
  } = symbolTable; // As we push values onto the stack, we store the symbols associated  with them
  // so that we can set them on the scope later on with SetVariable and SetBlock

  let blockSymbols = [];
  let argSymbols = [];
  let argNames = []; // First we push the blocks onto the stack

  let blockNames = blocks.names; // Starting with the attrs block, if it exists and is referenced in the component

  if (elementBlock !== null) {
    let symbol = symbols.indexOf(ATTRS_BLOCK);

    if (symbol !== -1) {
      (0, _blocks2.PushYieldableBlock)(op, elementBlock);
      blockSymbols.push(symbol);
    }
  } // Followed by the other blocks, if they exist and are referenced in the component.
  // Also store the index of the associated symbol.


  for (let i = 0; i < blockNames.length; i++) {
    let name = blockNames[i];
    let symbol = symbols.indexOf(`&${name}`);

    if (symbol !== -1) {
      (0, _blocks2.PushYieldableBlock)(op, blocks.get(name));
      blockSymbols.push(symbol);
    }
  } // Next up we have arguments. If the component has the `createArgs` capability,
  // then it wants access to the arguments in JavaScript. We can't know whether
  // or not an argument is used, so we have to give access to all of them.


  if ((0, _manager.hasCapability)(capabilities, 8
  /* CreateArgs */
  )) {
    // First we push positional arguments
    let count = (0, _shared.CompilePositional)(op, positional); // setup the flags with the count of positionals, and to indicate that atNames
    // are used

    let flags = count << 4;
    flags |= 0b1000;
    let names = _util.EMPTY_STRING_ARRAY; // Next, if named args exist, push them all. If they have an associated symbol
    // in the invoked component (e.g. they are used within its template), we push
    // that symbol. If not, we still push the expression as it may be used, and
    // we store the symbol as -1 (this is used later).

    if (named !== null) {
      names = named[0];
      let val = named[1];

      for (let i = 0; i < val.length; i++) {
        let symbol = symbols.indexOf(names[i]);
        (0, _expr.expr)(op, val[i]);
        argSymbols.push(symbol);
      }
    } // Finally, push the VM arguments themselves. These args won't need access
    // to blocks (they aren't accessible from userland anyways), so we push an
    // empty array instead of the actual block names.


    op(82
    /* PushArgs */
    , names, _util.EMPTY_STRING_ARRAY, flags); // And push an extra pop operation to remove the args before we begin setting
    // variables on the local context

    argSymbols.push(-1);
  } else if (named !== null) {
    // If the component does not have the `createArgs` capability, then the only
    // expressions we need to push onto the stack are those that are actually
    // referenced in the template of the invoked component (e.g. have symbols).
    let names = named[0];
    let val = named[1];

    for (let i = 0; i < val.length; i++) {
      let name = names[i];
      let symbol = symbols.indexOf(name);

      if (symbol !== -1) {
        (0, _expr.expr)(op, val[i]);
        argSymbols.push(symbol);
        argNames.push(name);
      }
    }
  }

  op(97
  /* BeginComponentTransaction */
  , _vm.$s0);

  if ((0, _manager.hasCapability)(capabilities, 64
  /* DynamicScope */
  )) {
    op(59
    /* PushDynamicScope */
    );
  }

  if ((0, _manager.hasCapability)(capabilities, 512
  /* CreateInstance */
  )) {
    op(87
    /* CreateComponent */
    , blocks.has('default') | 0, _vm.$s0);
  }

  op(88
  /* RegisterComponentDestructor */
  , _vm.$s0);

  if ((0, _manager.hasCapability)(capabilities, 8
  /* CreateArgs */
  )) {
    op(90
    /* GetComponentSelf */
    , _vm.$s0);
  } else {
    op(90
    /* GetComponentSelf */
    , _vm.$s0, argNames);
  } // Setup the new root scope for the component


  op(37
  /* RootScope */
  , symbols.length + 1, Object.keys(blocks).length > 0 ? 1 : 0); // Pop the self reference off the stack and set it to the symbol for `this`
  // in the new scope. This is why all subsequent symbols are increased by one.

  op(19
  /* SetVariable */
  , 0); // Going in reverse, now we pop the args/blocks off the stack, starting with
  // arguments, and assign them to their symbols in the new scope.

  for (let i = argSymbols.length - 1; i >= 0; i--) {
    let symbol = argSymbols[i];

    if (symbol === -1) {
      // The expression was not bound to a local symbol, it was only pushed to be
      // used with VM args in the javascript side
      op(34
      /* Pop */
      , 1);
    } else {
      op(19
      /* SetVariable */
      , symbol + 1);
    }
  } // if any positional params exist, pop them off the stack as well


  if (positional !== null) {
    op(34
    /* Pop */
    , positional.length);
  } // Finish up by popping off and assigning blocks


  for (let i = blockSymbols.length - 1; i >= 0; i--) {
    let symbol = blockSymbols[i];
    op(20
    /* SetBlock */
    , symbol + 1);
  }

  op(28
  /* Constant */
  , (0, _operands.layoutOperand)(layout));
  op(61
  /* CompileBlock */
  );
  op(2
  /* InvokeVirtual */
  );
  op(100
  /* DidRenderLayout */
  , _vm.$s0);
  op(1
  /* PopFrame */
  );
  op(40
  /* PopScope */
  );

  if ((0, _manager.hasCapability)(capabilities, 64
  /* DynamicScope */
  )) {
    op(60
    /* PopDynamicScope */
    );
  }

  op(98
  /* CommitComponentTransaction */
  );
  op(35
  /* Load */
  , _vm.$s0);
}

function InvokeNonStaticComponent(op, {
  capabilities,
  elementBlock,
  positional,
  named,
  atNames,
  blocks: namedBlocks,
  layout
}) {
  let bindableBlocks = !!namedBlocks;
  let bindableAtNames = capabilities === true || (0, _manager.hasCapability)(capabilities, 4
  /* PrepareArgs */
  ) || !!(named && named[0].length !== 0);
  let blocks = namedBlocks.with('attrs', elementBlock);
  op(36
  /* Fetch */
  , _vm.$s0);
  op(33
  /* Dup */
  , _vm.$sp, 1);
  op(35
  /* Load */
  , _vm.$s0);
  op(0
  /* PushFrame */
  );
  (0, _shared.CompileArgs)(op, positional, named, blocks, atNames);
  op(85
  /* PrepareArgs */
  , _vm.$s0);
  invokePreparedComponent(op, blocks.has('default'), bindableBlocks, bindableAtNames, () => {
    if (layout) {
      op(63
      /* PushSymbolTable */
      , (0, _operands.symbolTableOperand)(layout.symbolTable));
      op(28
      /* Constant */
      , (0, _operands.layoutOperand)(layout));
      op(61
      /* CompileBlock */
      );
    } else {
      op(92
      /* GetComponentLayout */
      , _vm.$s0);
    }

    op(95
    /* PopulateLayout */
    , _vm.$s0);
  });
  op(35
  /* Load */
  , _vm.$s0);
}

function WrappedComponent(op, layout, attrsBlockNumber) {
  op(1001
  /* StartLabels */
  );
  WithSavedRegister(op, _vm.$s1, () => {
    op(91
    /* GetComponentTagName */
    , _vm.$s0);
    op(31
    /* PrimitiveReference */
    );
    op(33
    /* Dup */
    , _vm.$sp, 0);
  });
  op(66
  /* JumpUnless */
  , (0, _operands.labelOperand)('BODY'));
  op(36
  /* Fetch */
  , _vm.$s1);
  op(89
  /* PutComponentOperations */
  );
  op(49
  /* OpenDynamicElement */
  );
  op(99
  /* DidCreateElement */
  , _vm.$s0);
  (0, _blocks2.YieldBlock)(op, attrsBlockNumber, null);
  op(54
  /* FlushElement */
  );
  op(1000
  /* Label */
  , 'BODY');
  (0, _blocks2.InvokeStaticBlock)(op, [layout.block[0], []]);
  op(36
  /* Fetch */
  , _vm.$s1);
  op(66
  /* JumpUnless */
  , (0, _operands.labelOperand)('END'));
  op(55
  /* CloseElement */
  );
  op(1000
  /* Label */
  , 'END');
  op(35
  /* Load */
  , _vm.$s1);
  op(1002
  /* StopLabels */
  );
}

function invokePreparedComponent(op, hasBlock, bindableBlocks, bindableAtNames, populateLayout = null) {
  op(97
  /* BeginComponentTransaction */
  , _vm.$s0);
  op(59
  /* PushDynamicScope */
  );
  op(87
  /* CreateComponent */
  , hasBlock | 0, _vm.$s0); // this has to run after createComponent to allow
  // for late-bound layouts, but a caller is free
  // to populate the layout earlier if it wants to
  // and do nothing here.

  if (populateLayout) {
    populateLayout();
  }

  op(88
  /* RegisterComponentDestructor */
  , _vm.$s0);
  op(90
  /* GetComponentSelf */
  , _vm.$s0);
  op(38
  /* VirtualRootScope */
  , _vm.$s0);
  op(19
  /* SetVariable */
  , 0);
  op(94
  /* SetupForEval */
  , _vm.$s0);
  if (bindableAtNames) op(17
  /* SetNamedVariables */
  , _vm.$s0);
  if (bindableBlocks) op(18
  /* SetBlocks */
  , _vm.$s0);
  op(34
  /* Pop */
  , 1);
  op(96
  /* InvokeComponentLayout */
  , _vm.$s0);
  op(100
  /* DidRenderLayout */
  , _vm.$s0);
  op(1
  /* PopFrame */
  );
  op(40
  /* PopScope */
  );
  op(60
  /* PopDynamicScope */
  );
  op(98
  /* CommitComponentTransaction */
  );
}

function InvokeBareComponent(op) {
  op(36
  /* Fetch */
  , _vm.$s0);
  op(33
  /* Dup */
  , _vm.$sp, 1);
  op(35
  /* Load */
  , _vm.$s0);
  op(0
  /* PushFrame */
  );
  op(83
  /* PushEmptyArgs */
  );
  op(85
  /* PrepareArgs */
  , _vm.$s0);
  invokePreparedComponent(op, false, false, true, () => {
    op(92
    /* GetComponentLayout */
    , _vm.$s0);
    op(95
    /* PopulateLayout */
    , _vm.$s0);
  });
  op(35
  /* Load */
  , _vm.$s0);
}

function WithSavedRegister(op, register, block) {
  op(36
  /* Fetch */
  , register);
  block();
  op(35
  /* Load */
  , register);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
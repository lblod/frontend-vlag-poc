"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PushPrimitiveReference = PushPrimitiveReference;
exports.PushPrimitive = PushPrimitive;
exports.Call = Call;
exports.CallDynamic = CallDynamic;
exports.DynamicScope = DynamicScope;
exports.Curry = Curry;

var _vm = require("@glimmer/vm");

var _util = require("@glimmer/util");

var _shared = require("./shared");

var _operands = require("../operands");

var _expr = require("./expr");

/**
 * Push a reference onto the stack corresponding to a statically known primitive
 * @param value A JavaScript primitive (undefined, null, boolean, number or string)
 */
function PushPrimitiveReference(op, value) {
  PushPrimitive(op, value);
  op(31
  /* PrimitiveReference */
  );
}
/**
 * Push an encoded representation of a JavaScript primitive on the stack
 *
 * @param value A JavaScript primitive (undefined, null, boolean, number or string)
 */


function PushPrimitive(op, primitive) {
  let p = primitive;

  if (typeof p === 'number') {
    p = (0, _util.isSmallInt)(p) ? (0, _util.encodeImmediate)(p) : (0, _operands.nonSmallIntOperand)(p);
  }

  op(30
  /* Primitive */
  , p);
}
/**
 * Invoke a foreign function (a "helper") based on a statically known handle
 *
 * @param op The op creation function
 * @param handle A handle
 * @param positional An optional list of expressions to compile
 * @param named An optional list of named arguments (name + expression) to compile
 */


function Call(op, handle, positional, named) {
  op(0
  /* PushFrame */
  );
  (0, _shared.SimpleArgs)(op, positional, named, false);
  op(16
  /* Helper */
  , handle);
  op(1
  /* PopFrame */
  );
  op(36
  /* Fetch */
  , _vm.$v0);
}
/**
 * Invoke a foreign function (a "helper") based on a dynamically loaded definition
 *
 * @param op The op creation function
 * @param positional An optional list of expressions to compile
 * @param named An optional list of named arguments (name + expression) to compile
 */


function CallDynamic(op, positional, named, append) {
  op(0
  /* PushFrame */
  );
  (0, _shared.SimpleArgs)(op, positional, named, false);
  op(33
  /* Dup */
  , _vm.$fp, 1);
  op(107
  /* DynamicHelper */
  );

  if (append) {
    op(36
    /* Fetch */
    , _vm.$v0);
    append();
    op(1
    /* PopFrame */
    );
    op(34
    /* Pop */
    , 1);
  } else {
    op(1
    /* PopFrame */
    );
    op(34
    /* Pop */
    , 1);
    op(36
    /* Fetch */
    , _vm.$v0);
  }
}
/**
 * Evaluate statements in the context of new dynamic scope entries. Move entries from the
 * stack into named entries in the dynamic scope, then evaluate the statements, then pop
 * the dynamic scope
 *
 * @param names a list of dynamic scope names
 * @param block a function that returns a list of statements to evaluate
 */


function DynamicScope(op, names, block) {
  op(59
  /* PushDynamicScope */
  );
  op(58
  /* BindDynamicScope */
  , names);
  block();
  op(60
  /* PopDynamicScope */
  );
}

function Curry(op, type, definition, positional, named) {
  op(0
  /* PushFrame */
  );
  (0, _shared.SimpleArgs)(op, positional, named, false);
  op(86
  /* CaptureArgs */
  );
  (0, _expr.expr)(op, definition);
  op(77
  /* Curry */
  , type, (0, _operands.isStrictMode)());
  op(1
  /* PopFrame */
  );
  op(36
  /* Fetch */
  , _vm.$v0);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL29wY29kZS1jb21waWxlci9saWIvb3Bjb2RlLWJ1aWxkZXIvaGVscGVycy92bS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTs7QUFTQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFVQTs7OztBQUlNLFNBQUEsc0JBQUEsQ0FBQSxFQUFBLEVBQUEsS0FBQSxFQUF1RTtBQUMzRSxFQUFBLGFBQWEsQ0FBQSxFQUFBLEVBQWIsS0FBYSxDQUFiO0FBQ0EsRUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLEdBQUY7QUFDRDtBQUVEOzs7Ozs7O0FBS00sU0FBQSxhQUFBLENBQUEsRUFBQSxFQUFBLFNBQUEsRUFBa0U7QUFDdEUsTUFBSSxDQUFDLEdBQUwsU0FBQTs7QUFFQSxNQUFJLE9BQUEsQ0FBQSxLQUFKLFFBQUEsRUFBMkI7QUFDekIsSUFBQSxDQUFDLEdBQUcsc0JBQUEsQ0FBQSxJQUFnQiwyQkFBaEIsQ0FBZ0IsQ0FBaEIsR0FBcUMsa0NBQXpDLENBQXlDLENBQXpDO0FBQ0Q7O0FBRUQsRUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLElBQUYsQ0FBRSxDQUFGO0FBQ0Q7QUFFRDs7Ozs7Ozs7OztBQVFNLFNBQUEsSUFBQSxDQUFBLEVBQUEsRUFBQSxNQUFBLEVBQUEsVUFBQSxFQUFBLEtBQUEsRUFJdUI7QUFFM0IsRUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLEdBQUY7QUFDQSwwQkFBVSxFQUFWLEVBQVUsVUFBVixFQUFVLEtBQVYsRUFBQSxLQUFBO0FBQ0EsRUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLElBQUYsTUFBRSxDQUFGO0FBQ0EsRUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLEdBQUY7QUFDQSxFQUFBLEVBQUUsQ0FBQTtBQUFBO0FBQUEsSUFBRixPQUFFLENBQUY7QUFDRDtBQUVEOzs7Ozs7Ozs7QUFPTSxTQUFBLFdBQUEsQ0FBQSxFQUFBLEVBQUEsVUFBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLEVBSWU7QUFFbkIsRUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLEdBQUY7QUFDQSwwQkFBVSxFQUFWLEVBQVUsVUFBVixFQUFVLEtBQVYsRUFBQSxLQUFBO0FBQ0EsRUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLElBQUEsT0FBQSxFQUFGLENBQUUsQ0FBRjtBQUNBLEVBQUEsRUFBRSxDQUFBO0FBQUE7QUFBQSxHQUFGOztBQUNBLE1BQUEsTUFBQSxFQUFZO0FBQ1YsSUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLE1BQUYsT0FBRSxDQUFGO0FBQ0EsSUFBQSxNQUFNO0FBQ04sSUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLEtBQUY7QUFDQSxJQUFBLEVBQUUsQ0FBQTtBQUFBO0FBQUEsTUFBRixDQUFFLENBQUY7QUFKRixHQUFBLE1BS087QUFDTCxJQUFBLEVBQUUsQ0FBQTtBQUFBO0FBQUEsS0FBRjtBQUNBLElBQUEsRUFBRSxDQUFBO0FBQUE7QUFBQSxNQUFGLENBQUUsQ0FBRjtBQUNBLElBQUEsRUFBRSxDQUFBO0FBQUE7QUFBQSxNQUFGLE9BQUUsQ0FBRjtBQUNEO0FBQ0Y7QUFFRDs7Ozs7Ozs7OztBQVFNLFNBQUEsWUFBQSxDQUFBLEVBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUE4RTtBQUNsRixFQUFBLEVBQUUsQ0FBQTtBQUFBO0FBQUEsR0FBRjtBQUNBLEVBQUEsRUFBRSxDQUFBO0FBQUE7QUFBQSxJQUFGLEtBQUUsQ0FBRjtBQUNBLEVBQUEsS0FBSztBQUNMLEVBQUEsRUFBRSxDQUFBO0FBQUE7QUFBQSxHQUFGO0FBQ0Q7O0FBRUssU0FBQSxLQUFBLENBQUEsRUFBQSxFQUFBLElBQUEsRUFBQSxVQUFBLEVBQUEsVUFBQSxFQUFBLEtBQUEsRUFLdUI7QUFFM0IsRUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLEdBQUY7QUFDQSwwQkFBVSxFQUFWLEVBQVUsVUFBVixFQUFVLEtBQVYsRUFBQSxLQUFBO0FBQ0EsRUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLEdBQUY7QUFDQSxrQkFBSSxFQUFKLEVBQUEsVUFBQTtBQUNBLEVBQUEsRUFBRSxDQUFBO0FBQUE7QUFBQSxJQUFBLElBQUEsRUFBRiw2QkFBRSxDQUFGO0FBQ0EsRUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLEdBQUY7QUFDQSxFQUFBLEVBQUUsQ0FBQTtBQUFBO0FBQUEsSUFBRixPQUFFLENBQUY7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7ICRmcCwgJHYwIH0gZnJvbSAnQGdsaW1tZXIvdm0nO1xuaW1wb3J0IHtcbiAgT3B0aW9uLFxuICBPcCxcbiAgTWFjaGluZU9wLFxuICBXaXJlRm9ybWF0LFxuICBOb25TbWFsbEludE9wZXJhbmQsXG4gIEN1cnJpZWRUeXBlLFxufSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcbmltcG9ydCB7IGVuY29kZUltbWVkaWF0ZSwgaXNTbWFsbEludCB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuaW1wb3J0IHsgU2ltcGxlQXJncyB9IGZyb20gJy4vc2hhcmVkJztcbmltcG9ydCB7IFB1c2hFeHByZXNzaW9uT3AsIFB1c2hTdGF0ZW1lbnRPcCB9IGZyb20gJy4uLy4uL3N5bnRheC9jb21waWxlcnMnO1xuaW1wb3J0IHsgaXNTdHJpY3RNb2RlLCBub25TbWFsbEludE9wZXJhbmQgfSBmcm9tICcuLi9vcGVyYW5kcyc7XG5pbXBvcnQgeyBleHByIH0gZnJvbSAnLi9leHByJztcblxuZXhwb3J0IHR5cGUgUHJpbWl0aXZlID0gdW5kZWZpbmVkIHwgbnVsbCB8IGJvb2xlYW4gfCBudW1iZXIgfCBzdHJpbmc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGlsZUhlbHBlciB7XG4gIGhhbmRsZTogbnVtYmVyO1xuICBwb3NpdGlvbmFsOiBPcHRpb248V2lyZUZvcm1hdC5Db3JlLlBhcmFtcz47XG4gIG5hbWVkOiBXaXJlRm9ybWF0LkNvcmUuSGFzaDtcbn1cblxuLyoqXG4gKiBQdXNoIGEgcmVmZXJlbmNlIG9udG8gdGhlIHN0YWNrIGNvcnJlc3BvbmRpbmcgdG8gYSBzdGF0aWNhbGx5IGtub3duIHByaW1pdGl2ZVxuICogQHBhcmFtIHZhbHVlIEEgSmF2YVNjcmlwdCBwcmltaXRpdmUgKHVuZGVmaW5lZCwgbnVsbCwgYm9vbGVhbiwgbnVtYmVyIG9yIHN0cmluZylcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFB1c2hQcmltaXRpdmVSZWZlcmVuY2Uob3A6IFB1c2hFeHByZXNzaW9uT3AsIHZhbHVlOiBQcmltaXRpdmUpOiB2b2lkIHtcbiAgUHVzaFByaW1pdGl2ZShvcCwgdmFsdWUpO1xuICBvcChPcC5QcmltaXRpdmVSZWZlcmVuY2UpO1xufVxuXG4vKipcbiAqIFB1c2ggYW4gZW5jb2RlZCByZXByZXNlbnRhdGlvbiBvZiBhIEphdmFTY3JpcHQgcHJpbWl0aXZlIG9uIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB2YWx1ZSBBIEphdmFTY3JpcHQgcHJpbWl0aXZlICh1bmRlZmluZWQsIG51bGwsIGJvb2xlYW4sIG51bWJlciBvciBzdHJpbmcpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBQdXNoUHJpbWl0aXZlKG9wOiBQdXNoRXhwcmVzc2lvbk9wLCBwcmltaXRpdmU6IFByaW1pdGl2ZSk6IHZvaWQge1xuICBsZXQgcDogUHJpbWl0aXZlIHwgTm9uU21hbGxJbnRPcGVyYW5kID0gcHJpbWl0aXZlO1xuXG4gIGlmICh0eXBlb2YgcCA9PT0gJ251bWJlcicpIHtcbiAgICBwID0gaXNTbWFsbEludChwKSA/IGVuY29kZUltbWVkaWF0ZShwKSA6IG5vblNtYWxsSW50T3BlcmFuZChwKTtcbiAgfVxuXG4gIG9wKE9wLlByaW1pdGl2ZSwgcCk7XG59XG5cbi8qKlxuICogSW52b2tlIGEgZm9yZWlnbiBmdW5jdGlvbiAoYSBcImhlbHBlclwiKSBiYXNlZCBvbiBhIHN0YXRpY2FsbHkga25vd24gaGFuZGxlXG4gKlxuICogQHBhcmFtIG9wIFRoZSBvcCBjcmVhdGlvbiBmdW5jdGlvblxuICogQHBhcmFtIGhhbmRsZSBBIGhhbmRsZVxuICogQHBhcmFtIHBvc2l0aW9uYWwgQW4gb3B0aW9uYWwgbGlzdCBvZiBleHByZXNzaW9ucyB0byBjb21waWxlXG4gKiBAcGFyYW0gbmFtZWQgQW4gb3B0aW9uYWwgbGlzdCBvZiBuYW1lZCBhcmd1bWVudHMgKG5hbWUgKyBleHByZXNzaW9uKSB0byBjb21waWxlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBDYWxsKFxuICBvcDogUHVzaEV4cHJlc3Npb25PcCxcbiAgaGFuZGxlOiBudW1iZXIsXG4gIHBvc2l0aW9uYWw6IFdpcmVGb3JtYXQuQ29yZS5QYXJhbXMsXG4gIG5hbWVkOiBXaXJlRm9ybWF0LkNvcmUuSGFzaFxuKTogdm9pZCB7XG4gIG9wKE1hY2hpbmVPcC5QdXNoRnJhbWUpO1xuICBTaW1wbGVBcmdzKG9wLCBwb3NpdGlvbmFsLCBuYW1lZCwgZmFsc2UpO1xuICBvcChPcC5IZWxwZXIsIGhhbmRsZSk7XG4gIG9wKE1hY2hpbmVPcC5Qb3BGcmFtZSk7XG4gIG9wKE9wLkZldGNoLCAkdjApO1xufVxuXG4vKipcbiAqIEludm9rZSBhIGZvcmVpZ24gZnVuY3Rpb24gKGEgXCJoZWxwZXJcIikgYmFzZWQgb24gYSBkeW5hbWljYWxseSBsb2FkZWQgZGVmaW5pdGlvblxuICpcbiAqIEBwYXJhbSBvcCBUaGUgb3AgY3JlYXRpb24gZnVuY3Rpb25cbiAqIEBwYXJhbSBwb3NpdGlvbmFsIEFuIG9wdGlvbmFsIGxpc3Qgb2YgZXhwcmVzc2lvbnMgdG8gY29tcGlsZVxuICogQHBhcmFtIG5hbWVkIEFuIG9wdGlvbmFsIGxpc3Qgb2YgbmFtZWQgYXJndW1lbnRzIChuYW1lICsgZXhwcmVzc2lvbikgdG8gY29tcGlsZVxuICovXG5leHBvcnQgZnVuY3Rpb24gQ2FsbER5bmFtaWMoXG4gIG9wOiBQdXNoRXhwcmVzc2lvbk9wLFxuICBwb3NpdGlvbmFsOiBXaXJlRm9ybWF0LkNvcmUuUGFyYW1zLFxuICBuYW1lZDogV2lyZUZvcm1hdC5Db3JlLkhhc2gsXG4gIGFwcGVuZD86ICgpID0+IHZvaWRcbik6IHZvaWQge1xuICBvcChNYWNoaW5lT3AuUHVzaEZyYW1lKTtcbiAgU2ltcGxlQXJncyhvcCwgcG9zaXRpb25hbCwgbmFtZWQsIGZhbHNlKTtcbiAgb3AoT3AuRHVwLCAkZnAsIDEpO1xuICBvcChPcC5EeW5hbWljSGVscGVyKTtcbiAgaWYgKGFwcGVuZCkge1xuICAgIG9wKE9wLkZldGNoLCAkdjApO1xuICAgIGFwcGVuZCgpO1xuICAgIG9wKE1hY2hpbmVPcC5Qb3BGcmFtZSk7XG4gICAgb3AoT3AuUG9wLCAxKTtcbiAgfSBlbHNlIHtcbiAgICBvcChNYWNoaW5lT3AuUG9wRnJhbWUpO1xuICAgIG9wKE9wLlBvcCwgMSk7XG4gICAgb3AoT3AuRmV0Y2gsICR2MCk7XG4gIH1cbn1cblxuLyoqXG4gKiBFdmFsdWF0ZSBzdGF0ZW1lbnRzIGluIHRoZSBjb250ZXh0IG9mIG5ldyBkeW5hbWljIHNjb3BlIGVudHJpZXMuIE1vdmUgZW50cmllcyBmcm9tIHRoZVxuICogc3RhY2sgaW50byBuYW1lZCBlbnRyaWVzIGluIHRoZSBkeW5hbWljIHNjb3BlLCB0aGVuIGV2YWx1YXRlIHRoZSBzdGF0ZW1lbnRzLCB0aGVuIHBvcFxuICogdGhlIGR5bmFtaWMgc2NvcGVcbiAqXG4gKiBAcGFyYW0gbmFtZXMgYSBsaXN0IG9mIGR5bmFtaWMgc2NvcGUgbmFtZXNcbiAqIEBwYXJhbSBibG9jayBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGxpc3Qgb2Ygc3RhdGVtZW50cyB0byBldmFsdWF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gRHluYW1pY1Njb3BlKG9wOiBQdXNoU3RhdGVtZW50T3AsIG5hbWVzOiBzdHJpbmdbXSwgYmxvY2s6ICgpID0+IHZvaWQpOiB2b2lkIHtcbiAgb3AoT3AuUHVzaER5bmFtaWNTY29wZSk7XG4gIG9wKE9wLkJpbmREeW5hbWljU2NvcGUsIG5hbWVzKTtcbiAgYmxvY2soKTtcbiAgb3AoT3AuUG9wRHluYW1pY1Njb3BlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEN1cnJ5KFxuICBvcDogUHVzaEV4cHJlc3Npb25PcCxcbiAgdHlwZTogQ3VycmllZFR5cGUsXG4gIGRlZmluaXRpb246IFdpcmVGb3JtYXQuRXhwcmVzc2lvbixcbiAgcG9zaXRpb25hbDogV2lyZUZvcm1hdC5Db3JlLlBhcmFtcyxcbiAgbmFtZWQ6IFdpcmVGb3JtYXQuQ29yZS5IYXNoXG4pOiB2b2lkIHtcbiAgb3AoTWFjaGluZU9wLlB1c2hGcmFtZSk7XG4gIFNpbXBsZUFyZ3Mob3AsIHBvc2l0aW9uYWwsIG5hbWVkLCBmYWxzZSk7XG4gIG9wKE9wLkNhcHR1cmVBcmdzKTtcbiAgZXhwcihvcCwgZGVmaW5pdGlvbik7XG4gIG9wKE9wLkN1cnJ5LCB0eXBlLCBpc1N0cmljdE1vZGUoKSk7XG4gIG9wKE1hY2hpbmVPcC5Qb3BGcmFtZSk7XG4gIG9wKE9wLkZldGNoLCAkdjApO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==
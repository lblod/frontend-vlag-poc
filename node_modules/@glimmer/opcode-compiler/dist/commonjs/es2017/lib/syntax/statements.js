"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inflateTagName = inflateTagName;
exports.inflateAttrName = inflateAttrName;
exports.STATEMENTS = void 0;

var _vm = require("@glimmer/vm");

var _blocks = require("../opcode-builder/helpers/blocks");

var _components = require("../opcode-builder/helpers/components");

var _conditional = require("../opcode-builder/helpers/conditional");

var _expr = require("../opcode-builder/helpers/expr");

var _shared = require("../opcode-builder/helpers/shared");

var _vm2 = require("../opcode-builder/helpers/vm");

var _operands = require("../opcode-builder/operands");

var _compilers = require("./compilers");

var _resolution = require("../opcode-builder/helpers/resolution");

var _utils = require("../utils");

const STATEMENTS = new _compilers.Compilers();
exports.STATEMENTS = STATEMENTS;
const INFLATE_ATTR_TABLE = ['class', 'id', 'value', 'name', 'type', 'style', 'href'];
const INFLATE_TAG_TABLE = ['div', 'span', 'p', 'a'];

function inflateTagName(tagName) {
  return typeof tagName === 'string' ? tagName : INFLATE_TAG_TABLE[tagName];
}

function inflateAttrName(attrName) {
  return typeof attrName === 'string' ? attrName : INFLATE_ATTR_TABLE[attrName];
}

STATEMENTS.add(3
/* Comment */
, (op, sexp) => op(42
/* Comment */
, sexp[1]));
STATEMENTS.add(13
/* CloseElement */
, op => op(55
/* CloseElement */
));
STATEMENTS.add(12
/* FlushElement */
, op => op(54
/* FlushElement */
));
STATEMENTS.add(4
/* Modifier */
, (op, [, expression, positional, named]) => {
  if ((0, _resolution.isGetFreeModifier)(expression)) {
    op(1003
    /* ResolveModifier */
    , expression, handle => {
      op(0
      /* PushFrame */
      );
      (0, _shared.SimpleArgs)(op, positional, named, false);
      op(57
      /* Modifier */
      , handle);
      op(1
      /* PopFrame */
      );
    });
  } else {
    (0, _expr.expr)(op, expression);
    op(0
    /* PushFrame */
    );
    (0, _shared.SimpleArgs)(op, positional, named, false);
    op(33
    /* Dup */
    , _vm.$fp, 1);
    op(108
    /* DynamicModifier */
    );
    op(1
    /* PopFrame */
    );
  }
});
STATEMENTS.add(14
/* StaticAttr */
, (op, [, name, value, namespace]) => {
  op(51
  /* StaticAttr */
  , inflateAttrName(name), value, namespace !== null && namespace !== void 0 ? namespace : null);
});
STATEMENTS.add(24
/* StaticComponentAttr */
, (op, [, name, value, namespace]) => {
  op(105
  /* StaticComponentAttr */
  , inflateAttrName(name), value, namespace !== null && namespace !== void 0 ? namespace : null);
});
STATEMENTS.add(15
/* DynamicAttr */
, (op, [, name, value, namespace]) => {
  (0, _expr.expr)(op, value);
  op(52
  /* DynamicAttr */
  , inflateAttrName(name), false, namespace !== null && namespace !== void 0 ? namespace : null);
});
STATEMENTS.add(22
/* TrustingDynamicAttr */
, (op, [, name, value, namespace]) => {
  (0, _expr.expr)(op, value);
  op(52
  /* DynamicAttr */
  , inflateAttrName(name), true, namespace !== null && namespace !== void 0 ? namespace : null);
});
STATEMENTS.add(16
/* ComponentAttr */
, (op, [, name, value, namespace]) => {
  (0, _expr.expr)(op, value);
  op(53
  /* ComponentAttr */
  , inflateAttrName(name), false, namespace !== null && namespace !== void 0 ? namespace : null);
});
STATEMENTS.add(23
/* TrustingComponentAttr */
, (op, [, name, value, namespace]) => {
  (0, _expr.expr)(op, value);
  op(53
  /* ComponentAttr */
  , inflateAttrName(name), true, namespace !== null && namespace !== void 0 ? namespace : null);
});
STATEMENTS.add(10
/* OpenElement */
, (op, [, tag]) => {
  op(48
  /* OpenElement */
  , inflateTagName(tag));
});
STATEMENTS.add(11
/* OpenElementWithSplat */
, (op, [, tag]) => {
  op(89
  /* PutComponentOperations */
  );
  op(48
  /* OpenElement */
  , inflateTagName(tag));
});
STATEMENTS.add(8
/* Component */
, (op, [, expr, elementBlock, named, blocks]) => {
  if ((0, _resolution.isGetFreeComponent)(expr)) {
    op(1004
    /* ResolveComponent */
    , expr, component => {
      (0, _components.InvokeComponent)(op, component, elementBlock, null, named, blocks);
    });
  } else {
    // otherwise, the component name was an expression, so resolve the expression
    // and invoke it as a dynamic component
    (0, _components.InvokeDynamicComponent)(op, expr, elementBlock, null, named, blocks, true, true);
  }
});
STATEMENTS.add(18
/* Yield */
, (op, [, to, params]) => (0, _blocks.YieldBlock)(op, to, params));
STATEMENTS.add(17
/* AttrSplat */
, (op, [, to]) => (0, _blocks.YieldBlock)(op, to, null));
STATEMENTS.add(26
/* Debugger */
, (op, [, evalInfo]) => op(103
/* Debugger */
, (0, _operands.evalSymbolsOperand)(), evalInfo));
STATEMENTS.add(1
/* Append */
, (op, [, value]) => {
  // Special case for static values
  if (!Array.isArray(value)) {
    op(41
    /* Text */
    , value === null || value === undefined ? '' : String(value));
  } else if ((0, _resolution.isGetFreeOptionalComponentOrHelper)(value)) {
    op(1008
    /* ResolveOptionalComponentOrHelper */
    , value, {
      ifComponent(component) {
        (0, _components.InvokeComponent)(op, component, null, null, null, null);
      },

      ifHelper(handle) {
        op(0
        /* PushFrame */
        );
        (0, _vm2.Call)(op, handle, null, null);
        op(3
        /* InvokeStatic */
        , (0, _operands.stdlibOperand)('cautious-non-dynamic-append'));
        op(1
        /* PopFrame */
        );
      },

      ifValue(handle) {
        op(0
        /* PushFrame */
        );
        op(29
        /* ConstantReference */
        , handle);
        op(3
        /* InvokeStatic */
        , (0, _operands.stdlibOperand)('cautious-non-dynamic-append'));
        op(1
        /* PopFrame */
        );
      }

    });
  } else if (value[0] === 28
  /* Call */
  ) {
      let [, expression, positional, named] = value;

      if ((0, _resolution.isGetFreeComponentOrHelper)(expression)) {
        op(1007
        /* ResolveComponentOrHelper */
        , expression, {
          ifComponent(component) {
            (0, _components.InvokeComponent)(op, component, null, positional, hashToArgs(named), null);
          },

          ifHelper(handle) {
            op(0
            /* PushFrame */
            );
            (0, _vm2.Call)(op, handle, positional, named);
            op(3
            /* InvokeStatic */
            , (0, _operands.stdlibOperand)('cautious-non-dynamic-append'));
            op(1
            /* PopFrame */
            );
          }

        });
      } else {
        (0, _conditional.SwitchCases)(op, () => {
          (0, _expr.expr)(op, expression);
          op(106
          /* DynamicContentType */
          );
        }, when => {
          when(0
          /* Component */
          , () => {
            op(81
            /* ResolveCurriedComponent */
            );
            op(79
            /* PushDynamicComponentInstance */
            );
            (0, _components.InvokeNonStaticComponent)(op, {
              capabilities: true,
              elementBlock: null,
              positional,
              named,
              atNames: false,
              blocks: (0, _utils.namedBlocks)(null)
            });
          });
          when(1
          /* Helper */
          , () => {
            (0, _vm2.CallDynamic)(op, positional, named, () => {
              op(3
              /* InvokeStatic */
              , (0, _operands.stdlibOperand)('cautious-non-dynamic-append'));
            });
          });
        });
      }
    } else {
    op(0
    /* PushFrame */
    );
    (0, _expr.expr)(op, value);
    op(3
    /* InvokeStatic */
    , (0, _operands.stdlibOperand)('cautious-append'));
    op(1
    /* PopFrame */
    );
  }
});
STATEMENTS.add(2
/* TrustingAppend */
, (op, [, value]) => {
  if (!Array.isArray(value)) {
    op(41
    /* Text */
    , value === null || value === undefined ? '' : String(value));
  } else {
    op(0
    /* PushFrame */
    );
    (0, _expr.expr)(op, value);
    op(3
    /* InvokeStatic */
    , (0, _operands.stdlibOperand)('trusting-append'));
    op(1
    /* PopFrame */
    );
  }
});
STATEMENTS.add(6
/* Block */
, (op, [, expr, positional, named, blocks]) => {
  if ((0, _resolution.isGetFreeComponent)(expr)) {
    op(1004
    /* ResolveComponent */
    , expr, component => {
      (0, _components.InvokeComponent)(op, component, null, positional, hashToArgs(named), blocks);
    });
  } else {
    (0, _components.InvokeDynamicComponent)(op, expr, null, positional, named, blocks, false, false);
  }
});
STATEMENTS.add(40
/* InElement */
, (op, [, block, guid, destination, insertBefore]) => {
  (0, _conditional.ReplayableIf)(op, () => {
    (0, _expr.expr)(op, guid);

    if (insertBefore === undefined) {
      (0, _vm2.PushPrimitiveReference)(op, undefined);
    } else {
      (0, _expr.expr)(op, insertBefore);
    }

    (0, _expr.expr)(op, destination);
    op(33
    /* Dup */
    , _vm.$sp, 0);
    return 4;
  }, () => {
    op(50
    /* PushRemoteElement */
    );
    (0, _blocks.InvokeStaticBlock)(op, block);
    op(56
    /* PopRemoteElement */
    );
  });
});
STATEMENTS.add(41
/* If */
, (op, [, condition, block, inverse]) => (0, _conditional.ReplayableIf)(op, () => {
  (0, _expr.expr)(op, condition);
  op(71
  /* ToBoolean */
  );
  return 1;
}, () => {
  (0, _blocks.InvokeStaticBlock)(op, block);
}, inverse ? () => {
  (0, _blocks.InvokeStaticBlock)(op, inverse);
} : undefined));
STATEMENTS.add(42
/* Each */
, (op, [, value, key, block, inverse]) => (0, _conditional.Replayable)(op, () => {
  if (key) {
    (0, _expr.expr)(op, key);
  } else {
    (0, _vm2.PushPrimitiveReference)(op, null);
  }

  (0, _expr.expr)(op, value);
  return 2;
}, () => {
  op(72
  /* EnterList */
  , (0, _operands.labelOperand)('BODY'), (0, _operands.labelOperand)('ELSE'));
  op(0
  /* PushFrame */
  );
  op(33
  /* Dup */
  , _vm.$fp, 1);
  op(6
  /* ReturnTo */
  , (0, _operands.labelOperand)('ITER'));
  op(1000
  /* Label */
  , 'ITER');
  op(74
  /* Iterate */
  , (0, _operands.labelOperand)('BREAK'));
  op(1000
  /* Label */
  , 'BODY');
  (0, _blocks.InvokeStaticBlockWithStack)(op, block, 2);
  op(34
  /* Pop */
  , 2);
  op(4
  /* Jump */
  , (0, _operands.labelOperand)('FINALLY'));
  op(1000
  /* Label */
  , 'BREAK');
  op(1
  /* PopFrame */
  );
  op(73
  /* ExitList */
  );
  op(4
  /* Jump */
  , (0, _operands.labelOperand)('FINALLY'));
  op(1000
  /* Label */
  , 'ELSE');

  if (inverse) {
    (0, _blocks.InvokeStaticBlock)(op, inverse);
  }
}));
STATEMENTS.add(43
/* With */
, (op, [, value, block, inverse]) => {
  (0, _conditional.ReplayableIf)(op, () => {
    (0, _expr.expr)(op, value);
    op(33
    /* Dup */
    , _vm.$sp, 0);
    op(71
    /* ToBoolean */
    );
    return 2;
  }, () => {
    (0, _blocks.InvokeStaticBlockWithStack)(op, block, 1);
  }, () => {
    if (inverse) {
      (0, _blocks.InvokeStaticBlock)(op, inverse);
    }
  });
});
STATEMENTS.add(44
/* Let */
, (op, [, positional, block]) => {
  let count = (0, _shared.CompilePositional)(op, positional);
  (0, _blocks.InvokeStaticBlockWithStack)(op, block, count);
});
STATEMENTS.add(45
/* WithDynamicVars */
, (op, [, named, block]) => {
  if (named) {
    let [names, expressions] = named;
    (0, _shared.CompilePositional)(op, expressions);
    (0, _vm2.DynamicScope)(op, names, () => {
      (0, _blocks.InvokeStaticBlock)(op, block);
    });
  } else {
    (0, _blocks.InvokeStaticBlock)(op, block);
  }
});
STATEMENTS.add(46
/* InvokeComponent */
, (op, [, expr, positional, named, blocks]) => {
  if ((0, _resolution.isGetFreeComponent)(expr)) {
    op(1004
    /* ResolveComponent */
    , expr, component => {
      (0, _components.InvokeComponent)(op, component, null, positional, hashToArgs(named), blocks);
    });
  } else {
    (0, _components.InvokeDynamicComponent)(op, expr, null, positional, named, blocks, false, false);
  }
});

function hashToArgs(hash) {
  if (hash === null) return null;
  let names = hash[0].map(key => `@${key}`);
  return [names, hash[1]];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
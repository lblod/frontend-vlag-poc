"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = templateFactory;
exports.templateCacheCounters = void 0;

var _util = require("@glimmer/util");

var _compilableTemplate = require("./compilable-template");

var _wrappedComponent = require("./wrapped-component");

let clientId = 0;
let templateCacheCounters = {
  cacheHit: 0,
  cacheMiss: 0
};
/**
 * Wraps a template js in a template module to change it into a factory
 * that handles lazy parsing the template and to create per env singletons
 * of the template.
 */

exports.templateCacheCounters = templateCacheCounters;

function templateFactory({
  id: templateId,
  moduleName,
  block,
  scope,
  isStrictMode
}) {
  // TODO(template-refactors): This should be removed in the near future, as it
  // appears that id is unused. It is currently kept for backwards compat reasons.
  let id = templateId || `client-${clientId++}`; // TODO: This caches JSON serialized output once in case a template is
  // compiled by multiple owners, but we haven't verified if this is actually
  // helpful. We should benchmark this in the future.

  let parsedBlock;
  let ownerlessTemplate = null;
  let templateCache = new WeakMap();

  let factory = owner => {
    if (parsedBlock === undefined) {
      parsedBlock = JSON.parse(block);
    }

    if (owner === undefined) {
      if (ownerlessTemplate === null) {
        templateCacheCounters.cacheMiss++;
        ownerlessTemplate = new TemplateImpl({
          id,
          block: parsedBlock,
          moduleName,
          owner: null,
          scope,
          isStrictMode
        });
      } else {
        templateCacheCounters.cacheHit++;
      }

      return ownerlessTemplate;
    }

    let result = templateCache.get(owner);

    if (result === undefined) {
      templateCacheCounters.cacheMiss++;
      result = new TemplateImpl({
        id,
        block: parsedBlock,
        moduleName,
        owner,
        scope,
        isStrictMode
      });
      templateCache.set(owner, result);
    } else {
      templateCacheCounters.cacheHit++;
    }

    return result;
  };

  factory.__id = id;
  factory.__meta = {
    moduleName
  };
  return factory;
}

class TemplateImpl {
  constructor(parsedLayout) {
    this.parsedLayout = parsedLayout;
    this.result = 'ok';
    this.layout = null;
    this.wrappedLayout = null;
  }

  get moduleName() {
    return this.parsedLayout.moduleName;
  }

  get id() {
    return this.parsedLayout.id;
  } // TODO(template-refactors): This should be removed in the near future, it is
  // only being exposed for backwards compatibility


  get referrer() {
    return {
      moduleName: this.parsedLayout.moduleName,
      owner: this.parsedLayout.owner
    };
  }

  asLayout() {
    if (this.layout) return this.layout;
    return this.layout = (0, _compilableTemplate.compilable)((0, _util.assign)({}, this.parsedLayout), this.moduleName);
  }

  asWrappedLayout() {
    if (this.wrappedLayout) return this.wrappedLayout;
    return this.wrappedLayout = new _wrappedComponent.WrappedBuilder((0, _util.assign)({}, this.parsedLayout), this.moduleName);
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
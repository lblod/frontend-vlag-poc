"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.namedBlocks = namedBlocks;
exports.EMPTY_BLOCKS = exports.NamedBlocksImpl = void 0;

var _util = require("@glimmer/util");

class NamedBlocksImpl {
  constructor(blocks) {
    this.blocks = blocks;
    this.names = blocks ? Object.keys(blocks) : [];
  }

  get(name) {
    if (!this.blocks) return null;
    return this.blocks[name] || null;
  }

  has(name) {
    let {
      blocks
    } = this;
    return blocks !== null && name in blocks;
  }

  with(name, block) {
    let {
      blocks
    } = this;

    if (blocks) {
      return new NamedBlocksImpl((0, _util.assign)({}, blocks, {
        [name]: block
      }));
    } else {
      return new NamedBlocksImpl({
        [name]: block
      });
    }
  }

  get hasAny() {
    return this.blocks !== null;
  }

}

exports.NamedBlocksImpl = NamedBlocksImpl;
const EMPTY_BLOCKS = new NamedBlocksImpl(null);
exports.EMPTY_BLOCKS = EMPTY_BLOCKS;

function namedBlocks(blocks) {
  if (blocks === null) {
    return EMPTY_BLOCKS;
  }

  let out = (0, _util.dict)();
  let [keys, values] = blocks;

  for (let i = 0; i < keys.length; i++) {
    out[keys[i]] = values[i];
  }

  return new NamedBlocksImpl(out);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL29wY29kZS1jb21waWxlci9saWIvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFDQTs7QUFNTSxNQUFBLGVBQUEsQ0FBc0I7QUFHMUIsRUFBQSxXQUFBLENBQUEsTUFBQSxFQUFtRDtBQUEvQixTQUFBLE1BQUEsR0FBQSxNQUFBO0FBQ2xCLFNBQUEsS0FBQSxHQUFhLE1BQU0sR0FBRyxNQUFNLENBQU4sSUFBQSxDQUFILE1BQUcsQ0FBSCxHQUFuQixFQUFBO0FBQ0Q7O0FBRUQsRUFBQSxHQUFHLENBQUEsSUFBQSxFQUFhO0FBQ2QsUUFBSSxDQUFDLEtBQUwsTUFBQSxFQUFrQixPQUFBLElBQUE7QUFFbEIsV0FBTyxLQUFBLE1BQUEsQ0FBQSxJQUFBLEtBQVAsSUFBQTtBQUNEOztBQUVELEVBQUEsR0FBRyxDQUFBLElBQUEsRUFBYTtBQUNkLFFBQUk7QUFBRSxNQUFBO0FBQUYsUUFBSixJQUFBO0FBQ0EsV0FBTyxNQUFNLEtBQU4sSUFBQSxJQUFtQixJQUFJLElBQTlCLE1BQUE7QUFDRDs7QUFFRCxFQUFBLElBQUksQ0FBQSxJQUFBLEVBQUEsS0FBQSxFQUFtRDtBQUNyRCxRQUFJO0FBQUUsTUFBQTtBQUFGLFFBQUosSUFBQTs7QUFFQSxRQUFBLE1BQUEsRUFBWTtBQUNWLGFBQU8sSUFBQSxlQUFBLENBQW9CLGtCQUFNLEVBQU4sRUFBTSxNQUFOLEVBQW1CO0FBQUUsU0FBQSxJQUFBLEdBQVE7QUFBVixPQUFuQixDQUFwQixDQUFQO0FBREYsS0FBQSxNQUVPO0FBQ0wsYUFBTyxJQUFBLGVBQUEsQ0FBb0I7QUFBRSxTQUFBLElBQUEsR0FBUTtBQUFWLE9BQXBCLENBQVA7QUFDRDtBQUNGOztBQUVELE1BQUEsTUFBQSxHQUFVO0FBQ1IsV0FBTyxLQUFBLE1BQUEsS0FBUCxJQUFBO0FBQ0Q7O0FBOUJ5Qjs7O0FBaUNyQixNQUFNLFlBQVksR0FBRyxJQUFBLGVBQUEsQ0FBckIsSUFBcUIsQ0FBckI7OztBQUVELFNBQUEsV0FBQSxDQUFBLE1BQUEsRUFBb0Q7QUFDeEQsTUFBSSxNQUFNLEtBQVYsSUFBQSxFQUFxQjtBQUNuQixXQUFBLFlBQUE7QUFDRDs7QUFFRCxNQUFJLEdBQUcsR0FBUCxpQkFBQTtBQUVBLE1BQUksQ0FBQSxJQUFBLEVBQUEsTUFBQSxJQUFKLE1BQUE7O0FBRUEsT0FBSyxJQUFJLENBQUMsR0FBVixDQUFBLEVBQWdCLENBQUMsR0FBRyxJQUFJLENBQXhCLE1BQUEsRUFBaUMsQ0FBakMsRUFBQSxFQUFzQztBQUNwQyxJQUFBLEdBQUcsQ0FBQyxJQUFJLENBQVIsQ0FBUSxDQUFMLENBQUgsR0FBZSxNQUFNLENBQXJCLENBQXFCLENBQXJCO0FBQ0Q7O0FBRUQsU0FBTyxJQUFBLGVBQUEsQ0FBUCxHQUFPLENBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5hbWVkQmxvY2tzLCBPcHRpb24sIFdpcmVGb3JtYXQsIFNlcmlhbGl6ZWRJbmxpbmVCbG9jayB9IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgZGljdCwgYXNzaWduIH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5cbmludGVyZmFjZSBOYW1lZEJsb2Nrc0RpY3Qge1xuICBba2V5OiBzdHJpbmddOiBPcHRpb248V2lyZUZvcm1hdC5TZXJpYWxpemVkSW5saW5lQmxvY2s+O1xufVxuXG5leHBvcnQgY2xhc3MgTmFtZWRCbG9ja3NJbXBsIGltcGxlbWVudHMgTmFtZWRCbG9ja3Mge1xuICBwdWJsaWMgbmFtZXM6IHN0cmluZ1tdO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYmxvY2tzOiBPcHRpb248TmFtZWRCbG9ja3NEaWN0Pikge1xuICAgIHRoaXMubmFtZXMgPSBibG9ja3MgPyBPYmplY3Qua2V5cyhibG9ja3MpIDogW107XG4gIH1cblxuICBnZXQobmFtZTogc3RyaW5nKTogT3B0aW9uPFNlcmlhbGl6ZWRJbmxpbmVCbG9jaz4ge1xuICAgIGlmICghdGhpcy5ibG9ja3MpIHJldHVybiBudWxsO1xuXG4gICAgcmV0dXJuIHRoaXMuYmxvY2tzW25hbWVdIHx8IG51bGw7XG4gIH1cblxuICBoYXMobmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgbGV0IHsgYmxvY2tzIH0gPSB0aGlzO1xuICAgIHJldHVybiBibG9ja3MgIT09IG51bGwgJiYgbmFtZSBpbiBibG9ja3M7XG4gIH1cblxuICB3aXRoKG5hbWU6IHN0cmluZywgYmxvY2s6IE9wdGlvbjxTZXJpYWxpemVkSW5saW5lQmxvY2s+KTogTmFtZWRCbG9ja3Mge1xuICAgIGxldCB7IGJsb2NrcyB9ID0gdGhpcztcblxuICAgIGlmIChibG9ja3MpIHtcbiAgICAgIHJldHVybiBuZXcgTmFtZWRCbG9ja3NJbXBsKGFzc2lnbih7fSwgYmxvY2tzLCB7IFtuYW1lXTogYmxvY2sgfSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IE5hbWVkQmxvY2tzSW1wbCh7IFtuYW1lXTogYmxvY2sgfSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGhhc0FueSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5ibG9ja3MgIT09IG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IEVNUFRZX0JMT0NLUyA9IG5ldyBOYW1lZEJsb2Nrc0ltcGwobnVsbCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBuYW1lZEJsb2NrcyhibG9ja3M6IFdpcmVGb3JtYXQuQ29yZS5CbG9ja3MpOiBOYW1lZEJsb2NrcyB7XG4gIGlmIChibG9ja3MgPT09IG51bGwpIHtcbiAgICByZXR1cm4gRU1QVFlfQkxPQ0tTO1xuICB9XG5cbiAgbGV0IG91dDogTmFtZWRCbG9ja3NEaWN0ID0gZGljdCgpO1xuXG4gIGxldCBba2V5cywgdmFsdWVzXSA9IGJsb2NrcztcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBvdXRba2V5c1tpXV0gPSB2YWx1ZXNbaV07XG4gIH1cblxuICByZXR1cm4gbmV3IE5hbWVkQmxvY2tzSW1wbChvdXQpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==
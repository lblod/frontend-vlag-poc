"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.namedBlocks = namedBlocks;
exports.EMPTY_BLOCKS = exports.NamedBlocksImpl = void 0;

var _util = require("@glimmer/util");

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var NamedBlocksImpl = /*#__PURE__*/function () {
  function NamedBlocksImpl(blocks) {
    this.blocks = blocks;
    this.names = blocks ? Object.keys(blocks) : [];
  }

  var _proto = NamedBlocksImpl.prototype;

  _proto.get = function get(name) {
    if (!this.blocks) return null;
    return this.blocks[name] || null;
  };

  _proto.has = function has(name) {
    var blocks = this.blocks;
    return blocks !== null && name in blocks;
  };

  _proto["with"] = function _with(name, block) {
    var blocks = this.blocks;

    if (blocks) {
      var _assign;

      return new NamedBlocksImpl((0, _util.assign)({}, blocks, (_assign = {}, _assign[name] = block, _assign)));
    } else {
      var _NamedBlocksImpl;

      return new NamedBlocksImpl((_NamedBlocksImpl = {}, _NamedBlocksImpl[name] = block, _NamedBlocksImpl));
    }
  };

  _createClass(NamedBlocksImpl, [{
    key: "hasAny",
    get: function get() {
      return this.blocks !== null;
    }
  }]);

  return NamedBlocksImpl;
}();

exports.NamedBlocksImpl = NamedBlocksImpl;
var EMPTY_BLOCKS = new NamedBlocksImpl(null);
exports.EMPTY_BLOCKS = EMPTY_BLOCKS;

function namedBlocks(blocks) {
  if (blocks === null) {
    return EMPTY_BLOCKS;
  }

  var out = (0, _util.dict)();
  var keys = blocks[0],
      values = blocks[1];

  for (var i = 0; i < keys.length; i++) {
    out[keys[i]] = values[i];
  }

  return new NamedBlocksImpl(out);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL29wY29kZS1jb21waWxlci9saWIvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBTUEsSUFBTSxlQUFOLEdBQUEsYUFBQSxZQUFBO0FBR0UsV0FBQSxlQUFBLENBQUEsTUFBQSxFQUFtRDtBQUEvQixTQUFBLE1BQUEsR0FBQSxNQUFBO0FBQ2xCLFNBQUEsS0FBQSxHQUFhLE1BQU0sR0FBRyxNQUFNLENBQU4sSUFBQSxDQUFILE1BQUcsQ0FBSCxHQUFuQixFQUFBO0FBQ0Q7O0FBTEgsTUFBQSxNQUFBLEdBQUEsZUFBQSxDQUFBLFNBQUE7O0FBQUEsRUFBQSxNQUFBLENBQUEsR0FBQSxHQU9FLFNBQUEsR0FBQSxDQUFBLElBQUEsRUFBZ0I7QUFDZCxRQUFJLENBQUMsS0FBTCxNQUFBLEVBQWtCLE9BQUEsSUFBQTtBQUVsQixXQUFPLEtBQUEsTUFBQSxDQUFBLElBQUEsS0FBUCxJQUFBO0FBVkosR0FBQTs7QUFBQSxFQUFBLE1BQUEsQ0FBQSxHQUFBLEdBYUUsU0FBQSxHQUFBLENBQUEsSUFBQSxFQUFnQjtBQUFBLFFBQ1IsTUFEUSxHQUFBLEtBQUEsTUFBQTtBQUVkLFdBQU8sTUFBTSxLQUFOLElBQUEsSUFBbUIsSUFBSSxJQUE5QixNQUFBO0FBZkosR0FBQTs7QUFBQSxFQUFBLE1BQUEsQ0FBQSxNQUFBLENBQUEsR0FrQkUsU0FBQSxLQUFBLENBQUEsSUFBQSxFQUFBLEtBQUEsRUFBdUQ7QUFBQSxRQUMvQyxNQUQrQyxHQUFBLEtBQUEsTUFBQTs7QUFHckQsUUFBQSxNQUFBLEVBQVk7QUFBQSxVQUFBLE9BQUE7O0FBQ1YsYUFBTyxJQUFBLGVBQUEsQ0FBb0Isa0JBQU0sRUFBTixFQUFNLE1BQU4sR0FBTSxPQUFBLEdBQUEsRUFBQSxFQUFBLE9BQUEsQ0FBQSxJQUFBLENBQUEsR0FBQSxLQUFBLEVBQWpDLE9BQTJCLEVBQXBCLENBQVA7QUFERixLQUFBLE1BRU87QUFBQSxVQUFBLGdCQUFBOztBQUNMLGFBQU8sSUFBQSxlQUFBLEVBQUEsZ0JBQUEsR0FBQSxFQUFBLEVBQUEsZ0JBQUEsQ0FBQSxJQUFBLENBQUEsR0FBQSxLQUFBLEVBQVAsZ0JBQU8sRUFBUDtBQUNEO0FBekJMLEdBQUE7O0FBQUEsRUFBQSxZQUFBLENBQUEsZUFBQSxFQUFBLENBQUE7QUFBQSxJQUFBLEdBQUEsRUFBQSxRQUFBO0FBQUEsSUFBQSxHQUFBLEVBQUEsU0FBQSxHQUFBLEdBNEJZO0FBQ1IsYUFBTyxLQUFBLE1BQUEsS0FBUCxJQUFBO0FBQ0Q7QUE5QkgsR0FBQSxDQUFBLENBQUE7O0FBQUEsU0FBQSxlQUFBO0FBQUEsQ0FBQSxFQUFBOzs7QUFpQ08sSUFBTSxZQUFZLEdBQUcsSUFBQSxlQUFBLENBQXJCLElBQXFCLENBQXJCOzs7QUFFRCxTQUFBLFdBQUEsQ0FBQSxNQUFBLEVBQW9EO0FBQ3hELE1BQUksTUFBTSxLQUFWLElBQUEsRUFBcUI7QUFDbkIsV0FBQSxZQUFBO0FBQ0Q7O0FBRUQsTUFBSSxHQUFHLEdBQVAsaUJBQUE7QUFMd0QsTUFPcEQsSUFQb0QsR0FPeEQsTUFQd0QsQ0FBQSxDQUFBLENBQUE7QUFBQSxNQU9wRCxNQVBvRCxHQU94RCxNQVB3RCxDQUFBLENBQUEsQ0FBQTs7QUFTeEQsT0FBSyxJQUFJLENBQUMsR0FBVixDQUFBLEVBQWdCLENBQUMsR0FBRyxJQUFJLENBQXhCLE1BQUEsRUFBaUMsQ0FBakMsRUFBQSxFQUFzQztBQUNwQyxJQUFBLEdBQUcsQ0FBQyxJQUFJLENBQVIsQ0FBUSxDQUFMLENBQUgsR0FBZSxNQUFNLENBQXJCLENBQXFCLENBQXJCO0FBQ0Q7O0FBRUQsU0FBTyxJQUFBLGVBQUEsQ0FBUCxHQUFPLENBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5hbWVkQmxvY2tzLCBPcHRpb24sIFdpcmVGb3JtYXQsIFNlcmlhbGl6ZWRJbmxpbmVCbG9jayB9IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgZGljdCwgYXNzaWduIH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5cbmludGVyZmFjZSBOYW1lZEJsb2Nrc0RpY3Qge1xuICBba2V5OiBzdHJpbmddOiBPcHRpb248V2lyZUZvcm1hdC5TZXJpYWxpemVkSW5saW5lQmxvY2s+O1xufVxuXG5leHBvcnQgY2xhc3MgTmFtZWRCbG9ja3NJbXBsIGltcGxlbWVudHMgTmFtZWRCbG9ja3Mge1xuICBwdWJsaWMgbmFtZXM6IHN0cmluZ1tdO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYmxvY2tzOiBPcHRpb248TmFtZWRCbG9ja3NEaWN0Pikge1xuICAgIHRoaXMubmFtZXMgPSBibG9ja3MgPyBPYmplY3Qua2V5cyhibG9ja3MpIDogW107XG4gIH1cblxuICBnZXQobmFtZTogc3RyaW5nKTogT3B0aW9uPFNlcmlhbGl6ZWRJbmxpbmVCbG9jaz4ge1xuICAgIGlmICghdGhpcy5ibG9ja3MpIHJldHVybiBudWxsO1xuXG4gICAgcmV0dXJuIHRoaXMuYmxvY2tzW25hbWVdIHx8IG51bGw7XG4gIH1cblxuICBoYXMobmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgbGV0IHsgYmxvY2tzIH0gPSB0aGlzO1xuICAgIHJldHVybiBibG9ja3MgIT09IG51bGwgJiYgbmFtZSBpbiBibG9ja3M7XG4gIH1cblxuICB3aXRoKG5hbWU6IHN0cmluZywgYmxvY2s6IE9wdGlvbjxTZXJpYWxpemVkSW5saW5lQmxvY2s+KTogTmFtZWRCbG9ja3Mge1xuICAgIGxldCB7IGJsb2NrcyB9ID0gdGhpcztcblxuICAgIGlmIChibG9ja3MpIHtcbiAgICAgIHJldHVybiBuZXcgTmFtZWRCbG9ja3NJbXBsKGFzc2lnbih7fSwgYmxvY2tzLCB7IFtuYW1lXTogYmxvY2sgfSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IE5hbWVkQmxvY2tzSW1wbCh7IFtuYW1lXTogYmxvY2sgfSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGhhc0FueSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5ibG9ja3MgIT09IG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IEVNUFRZX0JMT0NLUyA9IG5ldyBOYW1lZEJsb2Nrc0ltcGwobnVsbCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBuYW1lZEJsb2NrcyhibG9ja3M6IFdpcmVGb3JtYXQuQ29yZS5CbG9ja3MpOiBOYW1lZEJsb2NrcyB7XG4gIGlmIChibG9ja3MgPT09IG51bGwpIHtcbiAgICByZXR1cm4gRU1QVFlfQkxPQ0tTO1xuICB9XG5cbiAgbGV0IG91dDogTmFtZWRCbG9ja3NEaWN0ID0gZGljdCgpO1xuXG4gIGxldCBba2V5cywgdmFsdWVzXSA9IGJsb2NrcztcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBvdXRba2V5c1tpXV0gPSB2YWx1ZXNbaV07XG4gIH1cblxuICByZXR1cm4gbmV3IE5hbWVkQmxvY2tzSW1wbChvdXQpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==
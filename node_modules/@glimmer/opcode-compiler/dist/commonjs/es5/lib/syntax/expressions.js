"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EXPRESSIONS = void 0;

var _vm = require("@glimmer/vm");

var _globalContext = require("@glimmer/global-context");

var _expr = require("../opcode-builder/helpers/expr");

var _resolution = require("../opcode-builder/helpers/resolution");

var _shared = require("../opcode-builder/helpers/shared");

var _vm2 = require("../opcode-builder/helpers/vm");

var _compilers = require("./compilers");

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      return function () {
        if (i >= o.length) return {
          done: true
        };
        return {
          done: false,
          value: o[i++]
        };
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  it = o[Symbol.iterator]();
  return it.next.bind(it);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

var EXPRESSIONS = new _compilers.Compilers();
exports.EXPRESSIONS = EXPRESSIONS;
EXPRESSIONS.add(29
/* Concat */
, function (op, _ref) {
  var parts = _ref[1];

  for (var _iterator = _createForOfIteratorHelperLoose(parts), _step; !(_step = _iterator()).done;) {
    var part = _step.value;
    (0, _expr.expr)(op, part);
  }

  op(27
  /* Concat */
  , parts.length);
});
EXPRESSIONS.add(28
/* Call */
, function (op, _ref2) {
  var expression = _ref2[1],
      positional = _ref2[2],
      named = _ref2[3];

  if ((0, _resolution.isGetFreeHelper)(expression)) {
    op(1005
    /* ResolveHelper */
    , expression, function (handle) {
      (0, _vm2.Call)(op, handle, positional, named);
    });
  } else {
    (0, _expr.expr)(op, expression);
    (0, _vm2.CallDynamic)(op, positional, named);
  }
});
EXPRESSIONS.add(50
/* Curry */
, function (op, _ref3) {
  var expr = _ref3[1],
      type = _ref3[2],
      positional = _ref3[3],
      named = _ref3[4];
  (0, _vm2.Curry)(op, type, expr, positional, named);
});
EXPRESSIONS.add(30
/* GetSymbol */
, function (op, _ref4) {
  var sym = _ref4[1],
      path = _ref4[2];
  op(21
  /* GetVariable */
  , sym);
  withPath(op, path);
});
EXPRESSIONS.add(32
/* GetTemplateSymbol */
, function (op, _ref5) {
  var sym = _ref5[1],
      path = _ref5[2];
  op(1011
  /* ResolveTemplateLocal */
  , sym, function (handle) {
    op(29
    /* ConstantReference */
    , handle);
    withPath(op, path);
  });
});
EXPRESSIONS.add(31
/* GetStrictFree */
, function (op, _ref6) {
  var sym = _ref6[1],
      _path = _ref6[2];
  op(1009
  /* ResolveFree */
  , sym, function (_handle) {// TODO: Implement in strict mode
  });
});
EXPRESSIONS.add(34
/* GetFreeAsComponentOrHelperHeadOrThisFallback */
, function () {
  // TODO: The logic for this opcode currently exists in STATEMENTS.Append, since
  // we want different wrapping logic depending on if we are invoking a component,
  // helper, or {{this}} fallback. Eventually we fix the opcodes so that we can
  // traverse the subexpression tree like normal in this location.
  throw new Error('unimplemented opcode');
});
EXPRESSIONS.add(36
/* GetFreeAsHelperHeadOrThisFallback */
, function (op, expr) {
  // <div id={{baz}}>
  op(1010
  /* ResolveLocal */
  , expr[1], function (_name) {
    op(1006
    /* ResolveOptionalHelper */
    , expr, {
      ifHelper: function ifHelper(handle) {
        (0, _vm2.Call)(op, handle, null, null);
      }
    });
  });
});
EXPRESSIONS.add(99
/* GetFreeAsDeprecatedHelperHeadOrThisFallback */
, function (op, expr) {
  // <Foo @bar={{baz}}>
  op(1010
  /* ResolveLocal */
  , expr[1], function (_name) {
    op(1006
    /* ResolveOptionalHelper */
    , expr, {
      ifHelper: function ifHelper(handle, name, moduleName) {
        (0, _globalContext.assert)(expr[2] && expr[2].length === 1, '[BUG] Missing argument name');
        var arg = expr[2][0];
        (0, _globalContext.deprecate)("The `" + name + "` helper was used in the `" + moduleName + "` template as `" + arg + "={{" + name + "}}`. " + ("This is ambigious between wanting the `" + arg + "` argument to be the `" + name + "` helper itself, ") + ("or the result of invoking the `" + name + "` helper (current behavior). ") + "This implicit invocation behavior has been deprecated.\n\n" + ("Instead, please explicitly invoke the helper with parenthesis, i.e. `" + arg + "={{(" + name + ")}}`.\n\n") + "Note: the parenthesis are only required in this exact scenario where an ambiguity is present \u2013 where " + ("`" + name + "` referes to a global helper (as opposed to a local variable), AND ") + ("the `" + name + "` helper invocation does not take any arguments, AND ") + "this occurs in a named argument position of a component invocation.\n\n" + "We expect this combination to be quite rare, as most helpers require at least one argument. " + "There is no need to refactor helper invocations in cases where this deprecation was not triggered.", false, {
          id: 'argument-less-helper-paren-less-invocation'
        });
        (0, _vm2.Call)(op, handle, null, null);
      }
    });
  });
});

function withPath(op, path) {
  if (path === undefined || path.length === 0) return;

  for (var i = 0; i < path.length; i++) {
    op(22
    /* GetProperty */
    , path[i]);
  }
}

EXPRESSIONS.add(27
/* Undefined */
, function (op) {
  return (0, _vm2.PushPrimitiveReference)(op, undefined);
});
EXPRESSIONS.add(48
/* HasBlock */
, function (op, _ref7) {
  var block = _ref7[1];
  (0, _expr.expr)(op, block);
  op(25
  /* HasBlock */
  );
});
EXPRESSIONS.add(49
/* HasBlockParams */
, function (op, _ref8) {
  var block = _ref8[1];
  (0, _expr.expr)(op, block);
  op(24
  /* SpreadBlock */
  );
  op(61
  /* CompileBlock */
  );
  op(26
  /* HasBlockParams */
  );
});
EXPRESSIONS.add(52
/* IfInline */
, function (op, _ref9) {
  var condition = _ref9[1],
      truthy = _ref9[2],
      falsy = _ref9[3]; // Push in reverse order

  (0, _expr.expr)(op, falsy);
  (0, _expr.expr)(op, truthy);
  (0, _expr.expr)(op, condition);
  op(109
  /* IfInline */
  );
});
EXPRESSIONS.add(51
/* Not */
, function (op, _ref10) {
  var value = _ref10[1];
  (0, _expr.expr)(op, value);
  op(110
  /* Not */
  );
});
EXPRESSIONS.add(53
/* GetDynamicVar */
, function (op, _ref11) {
  var expression = _ref11[1];
  (0, _expr.expr)(op, expression);
  op(111
  /* GetDynamicVar */
  );
});
EXPRESSIONS.add(54
/* Log */
, function (op, _ref12) {
  var positional = _ref12[1];
  op(0
  /* PushFrame */
  );
  (0, _shared.SimpleArgs)(op, positional, null, false);
  op(112
  /* Log */
  );
  op(1
  /* PopFrame */
  );
  op(36
  /* Fetch */
  , _vm.$v0);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inflateTagName = inflateTagName;
exports.inflateAttrName = inflateAttrName;
exports.STATEMENTS = void 0;

var _vm = require("@glimmer/vm");

var _blocks = require("../opcode-builder/helpers/blocks");

var _components = require("../opcode-builder/helpers/components");

var _conditional = require("../opcode-builder/helpers/conditional");

var _expr = require("../opcode-builder/helpers/expr");

var _shared = require("../opcode-builder/helpers/shared");

var _vm2 = require("../opcode-builder/helpers/vm");

var _operands = require("../opcode-builder/operands");

var _compilers = require("./compilers");

var _resolution = require("../opcode-builder/helpers/resolution");

var _utils = require("../utils");

var STATEMENTS = new _compilers.Compilers();
exports.STATEMENTS = STATEMENTS;
var INFLATE_ATTR_TABLE = ['class', 'id', 'value', 'name', 'type', 'style', 'href'];
var INFLATE_TAG_TABLE = ['div', 'span', 'p', 'a'];

function inflateTagName(tagName) {
  return typeof tagName === 'string' ? tagName : INFLATE_TAG_TABLE[tagName];
}

function inflateAttrName(attrName) {
  return typeof attrName === 'string' ? attrName : INFLATE_ATTR_TABLE[attrName];
}

STATEMENTS.add(3
/* Comment */
, function (op, sexp) {
  return op(42
  /* Comment */
  , sexp[1]);
});
STATEMENTS.add(13
/* CloseElement */
, function (op) {
  return op(55
  /* CloseElement */
  );
});
STATEMENTS.add(12
/* FlushElement */
, function (op) {
  return op(54
  /* FlushElement */
  );
});
STATEMENTS.add(4
/* Modifier */
, function (op, _ref) {
  var expression = _ref[1],
      positional = _ref[2],
      named = _ref[3];

  if ((0, _resolution.isGetFreeModifier)(expression)) {
    op(1003
    /* ResolveModifier */
    , expression, function (handle) {
      op(0
      /* PushFrame */
      );
      (0, _shared.SimpleArgs)(op, positional, named, false);
      op(57
      /* Modifier */
      , handle);
      op(1
      /* PopFrame */
      );
    });
  } else {
    (0, _expr.expr)(op, expression);
    op(0
    /* PushFrame */
    );
    (0, _shared.SimpleArgs)(op, positional, named, false);
    op(33
    /* Dup */
    , _vm.$fp, 1);
    op(108
    /* DynamicModifier */
    );
    op(1
    /* PopFrame */
    );
  }
});
STATEMENTS.add(14
/* StaticAttr */
, function (op, _ref2) {
  var name = _ref2[1],
      value = _ref2[2],
      namespace = _ref2[3];
  op(51
  /* StaticAttr */
  , inflateAttrName(name), value, namespace !== null && namespace !== void 0 ? namespace : null);
});
STATEMENTS.add(24
/* StaticComponentAttr */
, function (op, _ref3) {
  var name = _ref3[1],
      value = _ref3[2],
      namespace = _ref3[3];
  op(105
  /* StaticComponentAttr */
  , inflateAttrName(name), value, namespace !== null && namespace !== void 0 ? namespace : null);
});
STATEMENTS.add(15
/* DynamicAttr */
, function (op, _ref4) {
  var name = _ref4[1],
      value = _ref4[2],
      namespace = _ref4[3];
  (0, _expr.expr)(op, value);
  op(52
  /* DynamicAttr */
  , inflateAttrName(name), false, namespace !== null && namespace !== void 0 ? namespace : null);
});
STATEMENTS.add(22
/* TrustingDynamicAttr */
, function (op, _ref5) {
  var name = _ref5[1],
      value = _ref5[2],
      namespace = _ref5[3];
  (0, _expr.expr)(op, value);
  op(52
  /* DynamicAttr */
  , inflateAttrName(name), true, namespace !== null && namespace !== void 0 ? namespace : null);
});
STATEMENTS.add(16
/* ComponentAttr */
, function (op, _ref6) {
  var name = _ref6[1],
      value = _ref6[2],
      namespace = _ref6[3];
  (0, _expr.expr)(op, value);
  op(53
  /* ComponentAttr */
  , inflateAttrName(name), false, namespace !== null && namespace !== void 0 ? namespace : null);
});
STATEMENTS.add(23
/* TrustingComponentAttr */
, function (op, _ref7) {
  var name = _ref7[1],
      value = _ref7[2],
      namespace = _ref7[3];
  (0, _expr.expr)(op, value);
  op(53
  /* ComponentAttr */
  , inflateAttrName(name), true, namespace !== null && namespace !== void 0 ? namespace : null);
});
STATEMENTS.add(10
/* OpenElement */
, function (op, _ref8) {
  var tag = _ref8[1];
  op(48
  /* OpenElement */
  , inflateTagName(tag));
});
STATEMENTS.add(11
/* OpenElementWithSplat */
, function (op, _ref9) {
  var tag = _ref9[1];
  op(89
  /* PutComponentOperations */
  );
  op(48
  /* OpenElement */
  , inflateTagName(tag));
});
STATEMENTS.add(8
/* Component */
, function (op, _ref10) {
  var expr = _ref10[1],
      elementBlock = _ref10[2],
      named = _ref10[3],
      blocks = _ref10[4];

  if ((0, _resolution.isGetFreeComponent)(expr)) {
    op(1004
    /* ResolveComponent */
    , expr, function (component) {
      (0, _components.InvokeComponent)(op, component, elementBlock, null, named, blocks);
    });
  } else {
    // otherwise, the component name was an expression, so resolve the expression
    // and invoke it as a dynamic component
    (0, _components.InvokeDynamicComponent)(op, expr, elementBlock, null, named, blocks, true, true);
  }
});
STATEMENTS.add(18
/* Yield */
, function (op, _ref11) {
  var to = _ref11[1],
      params = _ref11[2];
  return (0, _blocks.YieldBlock)(op, to, params);
});
STATEMENTS.add(17
/* AttrSplat */
, function (op, _ref12) {
  var to = _ref12[1];
  return (0, _blocks.YieldBlock)(op, to, null);
});
STATEMENTS.add(26
/* Debugger */
, function (op, _ref13) {
  var evalInfo = _ref13[1];
  return op(103
  /* Debugger */
  , (0, _operands.evalSymbolsOperand)(), evalInfo);
});
STATEMENTS.add(1
/* Append */
, function (op, _ref14) {
  var value = _ref14[1]; // Special case for static values

  if (!Array.isArray(value)) {
    op(41
    /* Text */
    , value === null || value === undefined ? '' : String(value));
  } else if ((0, _resolution.isGetFreeOptionalComponentOrHelper)(value)) {
    op(1008
    /* ResolveOptionalComponentOrHelper */
    , value, {
      ifComponent: function ifComponent(component) {
        (0, _components.InvokeComponent)(op, component, null, null, null, null);
      },
      ifHelper: function ifHelper(handle) {
        op(0
        /* PushFrame */
        );
        (0, _vm2.Call)(op, handle, null, null);
        op(3
        /* InvokeStatic */
        , (0, _operands.stdlibOperand)('cautious-non-dynamic-append'));
        op(1
        /* PopFrame */
        );
      },
      ifValue: function ifValue(handle) {
        op(0
        /* PushFrame */
        );
        op(29
        /* ConstantReference */
        , handle);
        op(3
        /* InvokeStatic */
        , (0, _operands.stdlibOperand)('cautious-non-dynamic-append'));
        op(1
        /* PopFrame */
        );
      }
    });
  } else if (value[0] === 28
  /* Call */
  ) {
      var expression = value[1],
          positional = value[2],
          named = value[3];

      if ((0, _resolution.isGetFreeComponentOrHelper)(expression)) {
        op(1007
        /* ResolveComponentOrHelper */
        , expression, {
          ifComponent: function ifComponent(component) {
            (0, _components.InvokeComponent)(op, component, null, positional, hashToArgs(named), null);
          },
          ifHelper: function ifHelper(handle) {
            op(0
            /* PushFrame */
            );
            (0, _vm2.Call)(op, handle, positional, named);
            op(3
            /* InvokeStatic */
            , (0, _operands.stdlibOperand)('cautious-non-dynamic-append'));
            op(1
            /* PopFrame */
            );
          }
        });
      } else {
        (0, _conditional.SwitchCases)(op, function () {
          (0, _expr.expr)(op, expression);
          op(106
          /* DynamicContentType */
          );
        }, function (when) {
          when(0
          /* Component */
          , function () {
            op(81
            /* ResolveCurriedComponent */
            );
            op(79
            /* PushDynamicComponentInstance */
            );
            (0, _components.InvokeNonStaticComponent)(op, {
              capabilities: true,
              elementBlock: null,
              positional: positional,
              named: named,
              atNames: false,
              blocks: (0, _utils.namedBlocks)(null)
            });
          });
          when(1
          /* Helper */
          , function () {
            (0, _vm2.CallDynamic)(op, positional, named, function () {
              op(3
              /* InvokeStatic */
              , (0, _operands.stdlibOperand)('cautious-non-dynamic-append'));
            });
          });
        });
      }
    } else {
    op(0
    /* PushFrame */
    );
    (0, _expr.expr)(op, value);
    op(3
    /* InvokeStatic */
    , (0, _operands.stdlibOperand)('cautious-append'));
    op(1
    /* PopFrame */
    );
  }
});
STATEMENTS.add(2
/* TrustingAppend */
, function (op, _ref15) {
  var value = _ref15[1];

  if (!Array.isArray(value)) {
    op(41
    /* Text */
    , value === null || value === undefined ? '' : String(value));
  } else {
    op(0
    /* PushFrame */
    );
    (0, _expr.expr)(op, value);
    op(3
    /* InvokeStatic */
    , (0, _operands.stdlibOperand)('trusting-append'));
    op(1
    /* PopFrame */
    );
  }
});
STATEMENTS.add(6
/* Block */
, function (op, _ref16) {
  var expr = _ref16[1],
      positional = _ref16[2],
      named = _ref16[3],
      blocks = _ref16[4];

  if ((0, _resolution.isGetFreeComponent)(expr)) {
    op(1004
    /* ResolveComponent */
    , expr, function (component) {
      (0, _components.InvokeComponent)(op, component, null, positional, hashToArgs(named), blocks);
    });
  } else {
    (0, _components.InvokeDynamicComponent)(op, expr, null, positional, named, blocks, false, false);
  }
});
STATEMENTS.add(40
/* InElement */
, function (op, _ref17) {
  var block = _ref17[1],
      guid = _ref17[2],
      destination = _ref17[3],
      insertBefore = _ref17[4];
  (0, _conditional.ReplayableIf)(op, function () {
    (0, _expr.expr)(op, guid);

    if (insertBefore === undefined) {
      (0, _vm2.PushPrimitiveReference)(op, undefined);
    } else {
      (0, _expr.expr)(op, insertBefore);
    }

    (0, _expr.expr)(op, destination);
    op(33
    /* Dup */
    , _vm.$sp, 0);
    return 4;
  }, function () {
    op(50
    /* PushRemoteElement */
    );
    (0, _blocks.InvokeStaticBlock)(op, block);
    op(56
    /* PopRemoteElement */
    );
  });
});
STATEMENTS.add(41
/* If */
, function (op, _ref18) {
  var condition = _ref18[1],
      block = _ref18[2],
      inverse = _ref18[3];
  return (0, _conditional.ReplayableIf)(op, function () {
    (0, _expr.expr)(op, condition);
    op(71
    /* ToBoolean */
    );
    return 1;
  }, function () {
    (0, _blocks.InvokeStaticBlock)(op, block);
  }, inverse ? function () {
    (0, _blocks.InvokeStaticBlock)(op, inverse);
  } : undefined);
});
STATEMENTS.add(42
/* Each */
, function (op, _ref19) {
  var value = _ref19[1],
      key = _ref19[2],
      block = _ref19[3],
      inverse = _ref19[4];
  return (0, _conditional.Replayable)(op, function () {
    if (key) {
      (0, _expr.expr)(op, key);
    } else {
      (0, _vm2.PushPrimitiveReference)(op, null);
    }

    (0, _expr.expr)(op, value);
    return 2;
  }, function () {
    op(72
    /* EnterList */
    , (0, _operands.labelOperand)('BODY'), (0, _operands.labelOperand)('ELSE'));
    op(0
    /* PushFrame */
    );
    op(33
    /* Dup */
    , _vm.$fp, 1);
    op(6
    /* ReturnTo */
    , (0, _operands.labelOperand)('ITER'));
    op(1000
    /* Label */
    , 'ITER');
    op(74
    /* Iterate */
    , (0, _operands.labelOperand)('BREAK'));
    op(1000
    /* Label */
    , 'BODY');
    (0, _blocks.InvokeStaticBlockWithStack)(op, block, 2);
    op(34
    /* Pop */
    , 2);
    op(4
    /* Jump */
    , (0, _operands.labelOperand)('FINALLY'));
    op(1000
    /* Label */
    , 'BREAK');
    op(1
    /* PopFrame */
    );
    op(73
    /* ExitList */
    );
    op(4
    /* Jump */
    , (0, _operands.labelOperand)('FINALLY'));
    op(1000
    /* Label */
    , 'ELSE');

    if (inverse) {
      (0, _blocks.InvokeStaticBlock)(op, inverse);
    }
  });
});
STATEMENTS.add(43
/* With */
, function (op, _ref20) {
  var value = _ref20[1],
      block = _ref20[2],
      inverse = _ref20[3];
  (0, _conditional.ReplayableIf)(op, function () {
    (0, _expr.expr)(op, value);
    op(33
    /* Dup */
    , _vm.$sp, 0);
    op(71
    /* ToBoolean */
    );
    return 2;
  }, function () {
    (0, _blocks.InvokeStaticBlockWithStack)(op, block, 1);
  }, function () {
    if (inverse) {
      (0, _blocks.InvokeStaticBlock)(op, inverse);
    }
  });
});
STATEMENTS.add(44
/* Let */
, function (op, _ref21) {
  var positional = _ref21[1],
      block = _ref21[2];
  var count = (0, _shared.CompilePositional)(op, positional);
  (0, _blocks.InvokeStaticBlockWithStack)(op, block, count);
});
STATEMENTS.add(45
/* WithDynamicVars */
, function (op, _ref22) {
  var named = _ref22[1],
      block = _ref22[2];

  if (named) {
    var names = named[0],
        expressions = named[1];
    (0, _shared.CompilePositional)(op, expressions);
    (0, _vm2.DynamicScope)(op, names, function () {
      (0, _blocks.InvokeStaticBlock)(op, block);
    });
  } else {
    (0, _blocks.InvokeStaticBlock)(op, block);
  }
});
STATEMENTS.add(46
/* InvokeComponent */
, function (op, _ref23) {
  var expr = _ref23[1],
      positional = _ref23[2],
      named = _ref23[3],
      blocks = _ref23[4];

  if ((0, _resolution.isGetFreeComponent)(expr)) {
    op(1004
    /* ResolveComponent */
    , expr, function (component) {
      (0, _components.InvokeComponent)(op, component, null, positional, hashToArgs(named), blocks);
    });
  } else {
    (0, _components.InvokeDynamicComponent)(op, expr, null, positional, named, blocks, false, false);
  }
});

function hashToArgs(hash) {
  if (hash === null) return null;
  var names = hash[0].map(function (key) {
    return "@" + key;
  });
  return [names, hash[1]];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
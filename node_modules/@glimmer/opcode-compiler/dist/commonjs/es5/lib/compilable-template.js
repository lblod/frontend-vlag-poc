"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compilable = compilable;
exports.compileStatements = compileStatements;
exports.compilableBlock = compilableBlock;
exports.PLACEHOLDER_HANDLE = void 0;

var _shared = require("./opcode-builder/helpers/shared");

var _util = require("@glimmer/util");

var _context = require("./opcode-builder/context");

var _compiler = require("./compiler");

var _statements = require("./syntax/statements");

var _encoder = require("./opcode-builder/encoder");

var PLACEHOLDER_HANDLE = -1;
exports.PLACEHOLDER_HANDLE = PLACEHOLDER_HANDLE;

var CompilableTemplateImpl = /*#__PURE__*/function () {
  function CompilableTemplateImpl(statements, meta, // Part of CompilableTemplate
  symbolTable, // Used for debugging
  moduleName) {
    if (moduleName === void 0) {
      moduleName = 'plain block';
    }

    this.statements = statements;
    this.meta = meta;
    this.symbolTable = symbolTable;
    this.moduleName = moduleName;
    this.compiled = null;
  } // Part of CompilableTemplate


  var _proto = CompilableTemplateImpl.prototype;

  _proto.compile = function compile(context) {
    return maybeCompile(this, context);
  };

  return CompilableTemplateImpl;
}();

function compilable(layout, moduleName) {
  var _layout$block = layout.block,
      statements = _layout$block[0],
      symbols = _layout$block[1],
      hasEval = _layout$block[2];
  return new CompilableTemplateImpl(statements, (0, _shared.meta)(layout), {
    symbols: symbols,
    hasEval: hasEval
  }, moduleName);
}

function maybeCompile(compilable, context) {
  if (compilable.compiled !== null) return compilable.compiled;
  compilable.compiled = PLACEHOLDER_HANDLE;
  var statements = compilable.statements,
      meta = compilable.meta;
  var result = compileStatements(statements, meta, context);
  compilable.compiled = result;
  return result;
}

function compileStatements(statements, meta, syntaxContext) {
  var sCompiler = _statements.STATEMENTS;
  var context = (0, _context.templateCompilationContext)(syntaxContext, meta);
  var encoder = context.encoder,
      _context$program = context.program,
      constants = _context$program.constants,
      resolver = _context$program.resolver;

  function pushOp() {
    for (var _len = arguments.length, op = new Array(_len), _key = 0; _key < _len; _key++) {
      op[_key] = arguments[_key];
    }

    (0, _encoder.encodeOp)(encoder, constants, resolver, meta, op);
  }

  for (var i = 0; i < statements.length; i++) {
    sCompiler.compile(pushOp, statements[i]);
  }

  var handle = context.encoder.commit(meta.size);

  if (false
  /* LOCAL_SHOULD_LOG */
  ) {
      (0, _compiler.debugCompiler)(context, handle);
    }

  return handle;
}

function compilableBlock(block, containing) {
  return new CompilableTemplateImpl(block[0], containing, {
    parameters: block[1] || _util.EMPTY_ARRAY
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL29wY29kZS1jb21waWxlci9saWIvY29tcGlsYWJsZS10ZW1wbGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBa0JBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUVBOztBQUVPLElBQU0sa0JBQWtCLEdBQUcsQ0FBM0IsQ0FBQTs7O0lBRVAsc0I7QUFHRSxXQUFBLHNCQUFBLENBQUEsVUFBQSxFQUFBLElBQUEsRUFHRTtBQUhGLEVBQUEsV0FBQSxFQUtFO0FBTEYsRUFBQSxVQUFBLEVBTXFDO0FBQUEsUUFBMUIsVUFBMEIsS0FBQSxLQUFBLENBQUEsRUFBQTtBQUExQixNQUFBLFVBQTBCLEdBTnJDLGFBTVc7QUFBMEI7O0FBTDFCLFNBQUEsVUFBQSxHQUFBLFVBQUE7QUFDQSxTQUFBLElBQUEsR0FBQSxJQUFBO0FBRUEsU0FBQSxXQUFBLEdBQUEsV0FBQTtBQUVBLFNBQUEsVUFBQSxHQUFBLFVBQUE7QUFSWCxTQUFBLFFBQUEsR0FBQSxJQUFBO0lBV0E7Ozs7O1NBQ0EsTyxHQUFBLFNBQUEsT0FBQSxDQUFBLE9BQUEsRUFBOEM7QUFDNUMsV0FBTyxZQUFZLENBQUEsSUFBQSxFQUFuQixPQUFtQixDQUFuQjs7Ozs7O0FBSUUsU0FBQSxVQUFBLENBQUEsTUFBQSxFQUFBLFVBQUEsRUFBa0U7QUFBQSxNQUFBLGFBQUEsR0FDakMsTUFBTSxDQUQyQixLQUFBO0FBQUEsTUFDbEUsVUFEa0UsR0FBQSxhQUFBLENBQUEsQ0FBQSxDQUFBO0FBQUEsTUFDbEUsT0FEa0UsR0FBQSxhQUFBLENBQUEsQ0FBQSxDQUFBO0FBQUEsTUFDbEUsT0FEa0UsR0FBQSxhQUFBLENBQUEsQ0FBQSxDQUFBO0FBRXRFLFNBQU8sSUFBQSxzQkFBQSxDQUFBLFVBQUEsRUFFTCxrQkFGSyxNQUVMLENBRkssRUFHTDtBQUNFLElBQUEsT0FERixFQUFBLE9BQUE7QUFFRSxJQUFBLE9BQUEsRUFBQTtBQUZGLEdBSEssRUFBUCxVQUFPLENBQVA7QUFTRDs7QUFFRCxTQUFBLFlBQUEsQ0FBQSxVQUFBLEVBQUEsT0FBQSxFQUV3QztBQUV0QyxNQUFJLFVBQVUsQ0FBVixRQUFBLEtBQUosSUFBQSxFQUFrQyxPQUFPLFVBQVUsQ0FBakIsUUFBQTtBQUVsQyxFQUFBLFVBQVUsQ0FBVixRQUFBLEdBQUEsa0JBQUE7QUFKc0MsTUFNbEMsVUFOa0MsR0FNdEMsVUFOc0MsQ0FBQSxVQUFBO0FBQUEsTUFNcEIsSUFOb0IsR0FNdEMsVUFOc0MsQ0FBQSxJQUFBO0FBUXRDLE1BQUksTUFBTSxHQUFHLGlCQUFpQixDQUFBLFVBQUEsRUFBQSxJQUFBLEVBQTlCLE9BQThCLENBQTlCO0FBQ0EsRUFBQSxVQUFVLENBQVYsUUFBQSxHQUFBLE1BQUE7QUFFQSxTQUFBLE1BQUE7QUFDRDs7QUFFSyxTQUFBLGlCQUFBLENBQUEsVUFBQSxFQUFBLElBQUEsRUFBQSxhQUFBLEVBR3dDO0FBRTVDLE1BQUksU0FBUyxHQUFiLHNCQUFBO0FBQ0EsTUFBSSxPQUFPLEdBQUcseUNBQTBCLGFBQTFCLEVBQWQsSUFBYyxDQUFkO0FBSDRDLE1BS3hDLE9BTHdDLEdBSzVDLE9BTDRDLENBQUEsT0FBQTtBQUFBLE1BQUEsZ0JBQUEsR0FLNUMsT0FMNEMsQ0FBQSxPQUFBO0FBQUEsTUFPakMsU0FQaUMsR0FBQSxnQkFBQSxDQUFBLFNBQUE7QUFBQSxNQU9wQixRQVBvQixHQUFBLGdCQUFBLENBQUEsUUFBQTs7QUFVNUMsV0FBQSxNQUFBLEdBQXFFO0FBQUEsU0FBQSxJQUFBLElBQUEsR0FBQSxTQUFBLENBQUEsTUFBQSxFQUFyRSxFQUFxRSxHQUFBLElBQUEsS0FBQSxDQUFBLElBQUEsQ0FBQSxFQUFBLElBQUEsR0FBQSxDQUFBLEVBQUEsSUFBQSxHQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsRUFBQTtBQUFyRSxNQUFBLEVBQXFFLENBQUEsSUFBQSxDQUFyRSxHQUFxRSxTQUFBLENBQUEsSUFBQSxDQUFyRTtBQUFxRTs7QUFDbkUsMkJBQVEsT0FBUixFQUFRLFNBQVIsRUFBUSxRQUFSLEVBQVEsSUFBUixFQUFBLEVBQUE7QUFDRDs7QUFFRCxPQUFLLElBQUksQ0FBQyxHQUFWLENBQUEsRUFBZ0IsQ0FBQyxHQUFHLFVBQVUsQ0FBOUIsTUFBQSxFQUF1QyxDQUF2QyxFQUFBLEVBQTRDO0FBQzFDLElBQUEsU0FBUyxDQUFULE9BQUEsQ0FBQSxNQUFBLEVBQTBCLFVBQVUsQ0FBcEMsQ0FBb0MsQ0FBcEM7QUFDRDs7QUFFRCxNQUFJLE1BQU0sR0FBRyxPQUFPLENBQVAsT0FBQSxDQUFBLE1BQUEsQ0FBdUIsSUFBSSxDQUF4QyxJQUFhLENBQWI7O0FBRUEsTUFBQTtBQUFBO0FBQUEsSUFBc0I7QUFDcEIsbUNBQWEsT0FBYixFQUFBLE1BQUE7QUFDRDs7QUFFRCxTQUFBLE1BQUE7QUFDRDs7QUFFSyxTQUFBLGVBQUEsQ0FBQSxLQUFBLEVBQUEsVUFBQSxFQUUwQjtBQUU5QixTQUFPLElBQUEsc0JBQUEsQ0FBNkMsS0FBSyxDQUFsRCxDQUFrRCxDQUFsRCxFQUFBLFVBQUEsRUFBbUU7QUFDeEUsSUFBQSxVQUFVLEVBQUUsS0FBSyxDQUFMLENBQUssQ0FBTCxJQUFhO0FBRCtDLEdBQW5FLENBQVA7QUFHRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIE9wdGlvbixcbiAgTGF5b3V0V2l0aENvbnRleHQsXG4gIENvbnRhaW5pbmdNZXRhZGF0YSxcbiAgU2VyaWFsaXplZElubGluZUJsb2NrLFxuICBXaXJlRm9ybWF0LFxuICBTeW1ib2xUYWJsZSxcbiAgQ29tcGlsYWJsZVRlbXBsYXRlLFxuICBTdGF0ZW1lbnQsXG4gIENvbXBpbGVUaW1lQ29tcGlsYXRpb25Db250ZXh0LFxuICBDb21waWxhYmxlQmxvY2ssXG4gIENvbXBpbGFibGVQcm9ncmFtLFxuICBIYW5kbGVSZXN1bHQsXG4gIEJsb2NrU3ltYm9sVGFibGUsXG4gIFNlcmlhbGl6ZWRCbG9jayxcbiAgQnVpbGRlck9wLFxuICBIaWdoTGV2ZWxPcCxcbn0gZnJvbSAnQGdsaW1tZXIvaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBtZXRhIH0gZnJvbSAnLi9vcGNvZGUtYnVpbGRlci9oZWxwZXJzL3NoYXJlZCc7XG5pbXBvcnQgeyBFTVBUWV9BUlJBWSB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuaW1wb3J0IHsgdGVtcGxhdGVDb21waWxhdGlvbkNvbnRleHQgfSBmcm9tICcuL29wY29kZS1idWlsZGVyL2NvbnRleHQnO1xuaW1wb3J0IHsgTE9DQUxfU0hPVUxEX0xPRyB9IGZyb20gJ0BnbGltbWVyL2xvY2FsLWRlYnVnLWZsYWdzJztcbmltcG9ydCB7IGRlYnVnQ29tcGlsZXIgfSBmcm9tICcuL2NvbXBpbGVyJztcbmltcG9ydCB7IFNUQVRFTUVOVFMgfSBmcm9tICcuL3N5bnRheC9zdGF0ZW1lbnRzJztcbmltcG9ydCB7IEhpZ2hMZXZlbFN0YXRlbWVudE9wIH0gZnJvbSAnLi9zeW50YXgvY29tcGlsZXJzJztcbmltcG9ydCB7IGVuY29kZU9wIH0gZnJvbSAnLi9vcGNvZGUtYnVpbGRlci9lbmNvZGVyJztcblxuZXhwb3J0IGNvbnN0IFBMQUNFSE9MREVSX0hBTkRMRSA9IC0xO1xuXG5jbGFzcyBDb21waWxhYmxlVGVtcGxhdGVJbXBsPFMgZXh0ZW5kcyBTeW1ib2xUYWJsZT4gaW1wbGVtZW50cyBDb21waWxhYmxlVGVtcGxhdGU8Uz4ge1xuICBjb21waWxlZDogT3B0aW9uPEhhbmRsZVJlc3VsdD4gPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHJlYWRvbmx5IHN0YXRlbWVudHM6IFdpcmVGb3JtYXQuU3RhdGVtZW50W10sXG4gICAgcmVhZG9ubHkgbWV0YTogQ29udGFpbmluZ01ldGFkYXRhLFxuICAgIC8vIFBhcnQgb2YgQ29tcGlsYWJsZVRlbXBsYXRlXG4gICAgcmVhZG9ubHkgc3ltYm9sVGFibGU6IFMsXG4gICAgLy8gVXNlZCBmb3IgZGVidWdnaW5nXG4gICAgcmVhZG9ubHkgbW9kdWxlTmFtZSA9ICdwbGFpbiBibG9jaydcbiAgKSB7fVxuXG4gIC8vIFBhcnQgb2YgQ29tcGlsYWJsZVRlbXBsYXRlXG4gIGNvbXBpbGUoY29udGV4dDogQ29tcGlsZVRpbWVDb21waWxhdGlvbkNvbnRleHQpOiBIYW5kbGVSZXN1bHQge1xuICAgIHJldHVybiBtYXliZUNvbXBpbGUodGhpcywgY29udGV4dCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBpbGFibGUobGF5b3V0OiBMYXlvdXRXaXRoQ29udGV4dCwgbW9kdWxlTmFtZTogc3RyaW5nKTogQ29tcGlsYWJsZVByb2dyYW0ge1xuICBsZXQgW3N0YXRlbWVudHMsIHN5bWJvbHMsIGhhc0V2YWxdID0gbGF5b3V0LmJsb2NrO1xuICByZXR1cm4gbmV3IENvbXBpbGFibGVUZW1wbGF0ZUltcGwoXG4gICAgc3RhdGVtZW50cyxcbiAgICBtZXRhKGxheW91dCksXG4gICAge1xuICAgICAgc3ltYm9scyxcbiAgICAgIGhhc0V2YWwsXG4gICAgfSxcbiAgICBtb2R1bGVOYW1lXG4gICk7XG59XG5cbmZ1bmN0aW9uIG1heWJlQ29tcGlsZShcbiAgY29tcGlsYWJsZTogQ29tcGlsYWJsZVRlbXBsYXRlSW1wbDxTeW1ib2xUYWJsZT4sXG4gIGNvbnRleHQ6IENvbXBpbGVUaW1lQ29tcGlsYXRpb25Db250ZXh0XG4pOiBIYW5kbGVSZXN1bHQge1xuICBpZiAoY29tcGlsYWJsZS5jb21waWxlZCAhPT0gbnVsbCkgcmV0dXJuIGNvbXBpbGFibGUuY29tcGlsZWQhO1xuXG4gIGNvbXBpbGFibGUuY29tcGlsZWQgPSBQTEFDRUhPTERFUl9IQU5ETEU7XG5cbiAgbGV0IHsgc3RhdGVtZW50cywgbWV0YSB9ID0gY29tcGlsYWJsZTtcblxuICBsZXQgcmVzdWx0ID0gY29tcGlsZVN0YXRlbWVudHMoc3RhdGVtZW50cywgbWV0YSwgY29udGV4dCk7XG4gIGNvbXBpbGFibGUuY29tcGlsZWQgPSByZXN1bHQ7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBpbGVTdGF0ZW1lbnRzKFxuICBzdGF0ZW1lbnRzOiBTdGF0ZW1lbnRbXSxcbiAgbWV0YTogQ29udGFpbmluZ01ldGFkYXRhLFxuICBzeW50YXhDb250ZXh0OiBDb21waWxlVGltZUNvbXBpbGF0aW9uQ29udGV4dFxuKTogSGFuZGxlUmVzdWx0IHtcbiAgbGV0IHNDb21waWxlciA9IFNUQVRFTUVOVFM7XG4gIGxldCBjb250ZXh0ID0gdGVtcGxhdGVDb21waWxhdGlvbkNvbnRleHQoc3ludGF4Q29udGV4dCwgbWV0YSk7XG5cbiAgbGV0IHtcbiAgICBlbmNvZGVyLFxuICAgIHByb2dyYW06IHsgY29uc3RhbnRzLCByZXNvbHZlciB9LFxuICB9ID0gY29udGV4dDtcblxuICBmdW5jdGlvbiBwdXNoT3AoLi4ub3A6IEJ1aWxkZXJPcCB8IEhpZ2hMZXZlbE9wIHwgSGlnaExldmVsU3RhdGVtZW50T3ApIHtcbiAgICBlbmNvZGVPcChlbmNvZGVyLCBjb25zdGFudHMsIHJlc29sdmVyLCBtZXRhLCBvcCBhcyBCdWlsZGVyT3AgfCBIaWdoTGV2ZWxPcCk7XG4gIH1cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0YXRlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBzQ29tcGlsZXIuY29tcGlsZShwdXNoT3AsIHN0YXRlbWVudHNbaV0pO1xuICB9XG5cbiAgbGV0IGhhbmRsZSA9IGNvbnRleHQuZW5jb2Rlci5jb21taXQobWV0YS5zaXplKTtcblxuICBpZiAoTE9DQUxfU0hPVUxEX0xPRykge1xuICAgIGRlYnVnQ29tcGlsZXIoY29udGV4dCwgaGFuZGxlKTtcbiAgfVxuXG4gIHJldHVybiBoYW5kbGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21waWxhYmxlQmxvY2soXG4gIGJsb2NrOiBTZXJpYWxpemVkSW5saW5lQmxvY2sgfCBTZXJpYWxpemVkQmxvY2ssXG4gIGNvbnRhaW5pbmc6IENvbnRhaW5pbmdNZXRhZGF0YVxuKTogQ29tcGlsYWJsZUJsb2NrIHtcbiAgcmV0dXJuIG5ldyBDb21waWxhYmxlVGVtcGxhdGVJbXBsPEJsb2NrU3ltYm9sVGFibGU+KGJsb2NrWzBdLCBjb250YWluaW5nLCB7XG4gICAgcGFyYW1ldGVyczogYmxvY2tbMV0gfHwgKEVNUFRZX0FSUkFZIGFzIG51bWJlcltdKSxcbiAgfSk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9
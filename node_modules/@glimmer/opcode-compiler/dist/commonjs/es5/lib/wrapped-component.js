"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WrappedBuilder = void 0;

var _context = require("./opcode-builder/context");

var _shared = require("./opcode-builder/helpers/shared");

var _components = require("./opcode-builder/helpers/components");

var _compiler = require("./compiler");

var _encoder = require("./opcode-builder/encoder");

var WrappedBuilder = /*#__PURE__*/function () {
  function WrappedBuilder(layout, moduleName) {
    this.layout = layout;
    this.moduleName = moduleName;
    this.compiled = null;
    var block = layout.block;
    var symbols = block[1],
        hasEval = block[2];
    symbols = symbols.slice(); // ensure ATTRS_BLOCK is always included (only once) in the list of symbols

    var attrsBlockIndex = symbols.indexOf(_components.ATTRS_BLOCK);

    if (attrsBlockIndex === -1) {
      this.attrsBlockNumber = symbols.push(_components.ATTRS_BLOCK);
    } else {
      this.attrsBlockNumber = attrsBlockIndex + 1;
    }

    this.symbolTable = {
      hasEval: hasEval,
      symbols: symbols
    };
  }

  var _proto = WrappedBuilder.prototype;

  _proto.compile = function compile(syntax) {
    if (this.compiled !== null) return this.compiled;
    var m = (0, _shared.meta)(this.layout);
    var context = (0, _context.templateCompilationContext)(syntax, m);
    var encoder = context.encoder,
        _context$program = context.program,
        constants = _context$program.constants,
        resolver = _context$program.resolver;

    function pushOp() {
      for (var _len = arguments.length, op = new Array(_len), _key = 0; _key < _len; _key++) {
        op[_key] = arguments[_key];
      }

      (0, _encoder.encodeOp)(encoder, constants, resolver, m, op);
    }

    (0, _components.WrappedComponent)(pushOp, this.layout, this.attrsBlockNumber);
    var handle = context.encoder.commit(m.size);

    if (typeof handle !== 'number') {
      return handle;
    }

    this.compiled = handle;

    if (false
    /* LOCAL_SHOULD_LOG */
    ) {
        (0, _compiler.debugCompiler)(context, handle);
      }

    return handle;
  };

  return WrappedBuilder;
}();

exports.WrappedBuilder = WrappedBuilder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL29wY29kZS1jb21waWxlci9saWIvd3JhcHBlZC1jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVdBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUdBLElBQU0sY0FBTixHQUFBLGFBQUEsWUFBQTtBQUtFLFdBQUEsY0FBQSxDQUFBLE1BQUEsRUFBQSxVQUFBLEVBQXdFO0FBQXBELFNBQUEsTUFBQSxHQUFBLE1BQUE7QUFBa0MsU0FBQSxVQUFBLEdBQUEsVUFBQTtBQUg5QyxTQUFBLFFBQUEsR0FBQSxJQUFBO0FBR2dFLFFBQ2hFLEtBRGdFLEdBQ3RFLE1BRHNFLENBQUEsS0FBQTtBQUFBLFFBRWxFLE9BRmtFLEdBRXRFLEtBRnNFLENBQUEsQ0FBQSxDQUFBO0FBQUEsUUFFbEUsT0FGa0UsR0FFdEUsS0FGc0UsQ0FBQSxDQUFBLENBQUE7QUFJdEUsSUFBQSxPQUFPLEdBQUcsT0FBTyxDQUpxRCxLQUk1RCxFQUFWLENBSnNFLENBTXRFOztBQUNBLFFBQUksZUFBZSxHQUFHLE9BQU8sQ0FBUCxPQUFBLENBQXRCLHVCQUFzQixDQUF0Qjs7QUFDQSxRQUFJLGVBQWUsS0FBSyxDQUF4QixDQUFBLEVBQTRCO0FBQzFCLFdBQUEsZ0JBQUEsR0FBd0IsT0FBTyxDQUFQLElBQUEsQ0FBeEIsdUJBQXdCLENBQXhCO0FBREYsS0FBQSxNQUVPO0FBQ0wsV0FBQSxnQkFBQSxHQUF3QixlQUFlLEdBQXZDLENBQUE7QUFDRDs7QUFFRCxTQUFBLFdBQUEsR0FBbUI7QUFDakIsTUFBQSxPQURpQixFQUFBLE9BQUE7QUFFakIsTUFBQSxPQUFBLEVBQUE7QUFGaUIsS0FBbkI7QUFJRDs7QUF2QkgsTUFBQSxNQUFBLEdBQUEsY0FBQSxDQUFBLFNBQUE7O0FBQUEsRUFBQSxNQUFBLENBQUEsT0FBQSxHQXlCRSxTQUFBLE9BQUEsQ0FBQSxNQUFBLEVBQTZDO0FBQzNDLFFBQUksS0FBQSxRQUFBLEtBQUosSUFBQSxFQUE0QixPQUFPLEtBQVAsUUFBQTtBQUU1QixRQUFJLENBQUMsR0FBRyxrQkFBSyxLQUFiLE1BQVEsQ0FBUjtBQUNBLFFBQUksT0FBTyxHQUFHLHlDQUEwQixNQUExQixFQUFkLENBQWMsQ0FBZDtBQUoyQyxRQU12QyxPQU51QyxHQU0zQyxPQU4yQyxDQUFBLE9BQUE7QUFBQSxRQUFBLGdCQUFBLEdBTTNDLE9BTjJDLENBQUEsT0FBQTtBQUFBLFFBUWhDLFNBUmdDLEdBQUEsZ0JBQUEsQ0FBQSxTQUFBO0FBQUEsUUFRbkIsUUFSbUIsR0FBQSxnQkFBQSxDQUFBLFFBQUE7O0FBVzNDLGFBQUEsTUFBQSxHQUFxRTtBQUFBLFdBQUEsSUFBQSxJQUFBLEdBQUEsU0FBQSxDQUFBLE1BQUEsRUFBckUsRUFBcUUsR0FBQSxJQUFBLEtBQUEsQ0FBQSxJQUFBLENBQUEsRUFBQSxJQUFBLEdBQUEsQ0FBQSxFQUFBLElBQUEsR0FBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLEVBQUE7QUFBckUsUUFBQSxFQUFxRSxDQUFBLElBQUEsQ0FBckUsR0FBcUUsU0FBQSxDQUFBLElBQUEsQ0FBckU7QUFBcUU7O0FBQ25FLDZCQUFRLE9BQVIsRUFBUSxTQUFSLEVBQVEsUUFBUixFQUFRLENBQVIsRUFBQSxFQUFBO0FBQ0Q7O0FBRUQsc0NBQWdCLE1BQWhCLEVBQXlCLEtBQVQsTUFBaEIsRUFBc0MsS0FBdEMsZ0JBQUE7QUFFQSxRQUFJLE1BQU0sR0FBRyxPQUFPLENBQVAsT0FBQSxDQUFBLE1BQUEsQ0FBdUIsQ0FBQyxDQUFyQyxJQUFhLENBQWI7O0FBRUEsUUFBSSxPQUFBLE1BQUEsS0FBSixRQUFBLEVBQWdDO0FBQzlCLGFBQUEsTUFBQTtBQUNEOztBQUVELFNBQUEsUUFBQSxHQUFBLE1BQUE7O0FBRUEsUUFBQTtBQUFBO0FBQUEsTUFBc0I7QUFDcEIscUNBQWEsT0FBYixFQUFBLE1BQUE7QUFDRDs7QUFFRCxXQUFBLE1BQUE7QUF0REosR0FBQTs7QUFBQSxTQUFBLGNBQUE7QUFBQSxDQUFBLEVBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBQcm9ncmFtU3ltYm9sVGFibGUsXG4gIENvbXBpbGFibGVQcm9ncmFtLFxuICBMYXlvdXRXaXRoQ29udGV4dCxcbiAgT3B0aW9uLFxuICBDb21waWxlVGltZUNvbXBpbGF0aW9uQ29udGV4dCxcbiAgSGFuZGxlUmVzdWx0LFxuICBCdWlsZGVyT3AsXG4gIEhpZ2hMZXZlbE9wLFxufSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcblxuaW1wb3J0IHsgdGVtcGxhdGVDb21waWxhdGlvbkNvbnRleHQgfSBmcm9tICcuL29wY29kZS1idWlsZGVyL2NvbnRleHQnO1xuaW1wb3J0IHsgbWV0YSB9IGZyb20gJy4vb3Bjb2RlLWJ1aWxkZXIvaGVscGVycy9zaGFyZWQnO1xuaW1wb3J0IHsgQVRUUlNfQkxPQ0ssIFdyYXBwZWRDb21wb25lbnQgfSBmcm9tICcuL29wY29kZS1idWlsZGVyL2hlbHBlcnMvY29tcG9uZW50cyc7XG5pbXBvcnQgeyBMT0NBTF9TSE9VTERfTE9HIH0gZnJvbSAnQGdsaW1tZXIvbG9jYWwtZGVidWctZmxhZ3MnO1xuaW1wb3J0IHsgZGVidWdDb21waWxlciB9IGZyb20gJy4vY29tcGlsZXInO1xuaW1wb3J0IHsgZW5jb2RlT3AgfSBmcm9tICcuL29wY29kZS1idWlsZGVyL2VuY29kZXInO1xuaW1wb3J0IHsgSGlnaExldmVsU3RhdGVtZW50T3AgfSBmcm9tICcuL3N5bnRheC9jb21waWxlcnMnO1xuXG5leHBvcnQgY2xhc3MgV3JhcHBlZEJ1aWxkZXIgaW1wbGVtZW50cyBDb21waWxhYmxlUHJvZ3JhbSB7XG4gIHB1YmxpYyBzeW1ib2xUYWJsZTogUHJvZ3JhbVN5bWJvbFRhYmxlO1xuICBwcml2YXRlIGNvbXBpbGVkOiBPcHRpb248bnVtYmVyPiA9IG51bGw7XG4gIHByaXZhdGUgYXR0cnNCbG9ja051bWJlcjogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbGF5b3V0OiBMYXlvdXRXaXRoQ29udGV4dCwgcHVibGljIG1vZHVsZU5hbWU6IHN0cmluZykge1xuICAgIGxldCB7IGJsb2NrIH0gPSBsYXlvdXQ7XG4gICAgbGV0IFssIHN5bWJvbHMsIGhhc0V2YWxdID0gYmxvY2s7XG5cbiAgICBzeW1ib2xzID0gc3ltYm9scy5zbGljZSgpO1xuXG4gICAgLy8gZW5zdXJlIEFUVFJTX0JMT0NLIGlzIGFsd2F5cyBpbmNsdWRlZCAob25seSBvbmNlKSBpbiB0aGUgbGlzdCBvZiBzeW1ib2xzXG4gICAgbGV0IGF0dHJzQmxvY2tJbmRleCA9IHN5bWJvbHMuaW5kZXhPZihBVFRSU19CTE9DSyk7XG4gICAgaWYgKGF0dHJzQmxvY2tJbmRleCA9PT0gLTEpIHtcbiAgICAgIHRoaXMuYXR0cnNCbG9ja051bWJlciA9IHN5bWJvbHMucHVzaChBVFRSU19CTE9DSyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYXR0cnNCbG9ja051bWJlciA9IGF0dHJzQmxvY2tJbmRleCArIDE7XG4gICAgfVxuXG4gICAgdGhpcy5zeW1ib2xUYWJsZSA9IHtcbiAgICAgIGhhc0V2YWwsXG4gICAgICBzeW1ib2xzLFxuICAgIH07XG4gIH1cblxuICBjb21waWxlKHN5bnRheDogQ29tcGlsZVRpbWVDb21waWxhdGlvbkNvbnRleHQpOiBIYW5kbGVSZXN1bHQge1xuICAgIGlmICh0aGlzLmNvbXBpbGVkICE9PSBudWxsKSByZXR1cm4gdGhpcy5jb21waWxlZDtcblxuICAgIGxldCBtID0gbWV0YSh0aGlzLmxheW91dCk7XG4gICAgbGV0IGNvbnRleHQgPSB0ZW1wbGF0ZUNvbXBpbGF0aW9uQ29udGV4dChzeW50YXgsIG0pO1xuXG4gICAgbGV0IHtcbiAgICAgIGVuY29kZXIsXG4gICAgICBwcm9ncmFtOiB7IGNvbnN0YW50cywgcmVzb2x2ZXIgfSxcbiAgICB9ID0gY29udGV4dDtcblxuICAgIGZ1bmN0aW9uIHB1c2hPcCguLi5vcDogQnVpbGRlck9wIHwgSGlnaExldmVsT3AgfCBIaWdoTGV2ZWxTdGF0ZW1lbnRPcCkge1xuICAgICAgZW5jb2RlT3AoZW5jb2RlciwgY29uc3RhbnRzLCByZXNvbHZlciwgbSwgb3AgYXMgQnVpbGRlck9wIHwgSGlnaExldmVsT3ApO1xuICAgIH1cblxuICAgIFdyYXBwZWRDb21wb25lbnQocHVzaE9wLCB0aGlzLmxheW91dCwgdGhpcy5hdHRyc0Jsb2NrTnVtYmVyKTtcblxuICAgIGxldCBoYW5kbGUgPSBjb250ZXh0LmVuY29kZXIuY29tbWl0KG0uc2l6ZSk7XG5cbiAgICBpZiAodHlwZW9mIGhhbmRsZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiBoYW5kbGU7XG4gICAgfVxuXG4gICAgdGhpcy5jb21waWxlZCA9IGhhbmRsZTtcblxuICAgIGlmIChMT0NBTF9TSE9VTERfTE9HKSB7XG4gICAgICBkZWJ1Z0NvbXBpbGVyKGNvbnRleHQsIGhhbmRsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhhbmRsZTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==
import { $s0 } from '@glimmer/vm';
import { invokePreparedComponent, InvokeBareComponent } from './components';
import { StdLib } from '../stdlib';
import { encodeOp, EncoderImpl } from '../encoder';
import { SwitchCases } from './conditional';
import { CallDynamic } from './vm';
export function main(op) {
  op(75
  /* Main */
  , $s0);
  invokePreparedComponent(op, false, false, true);
}
/**
 * Append content to the DOM. This standard function triages content and does the
 * right thing based upon whether it's a string, safe string, component, fragment
 * or node.
 *
 * @param trusting whether to interpolate a string as raw HTML (corresponds to
 * triple curlies)
 */

export function StdAppend(op, trusting, nonDynamicAppend) {
  SwitchCases(op, () => op(76
  /* ContentType */
  ), when => {
    when(2
    /* String */
    , () => {
      if (trusting) {
        op(68
        /* AssertSame */
        );
        op(43
        /* AppendHTML */
        );
      } else {
        op(47
        /* AppendText */
        );
      }
    });

    if (typeof nonDynamicAppend === 'number') {
      when(0
      /* Component */
      , () => {
        op(81
        /* ResolveCurriedComponent */
        );
        op(79
        /* PushDynamicComponentInstance */
        );
        InvokeBareComponent(op);
      });
      when(1
      /* Helper */
      , () => {
        CallDynamic(op, null, null, () => {
          op(3
          /* InvokeStatic */
          , nonDynamicAppend);
        });
      });
    } else {
      // when non-dynamic, we can no longer call the value (potentially because we've already called it)
      // this prevents infinite loops. We instead coerce the value, whatever it is, into the DOM.
      when(0
      /* Component */
      , () => {
        op(47
        /* AppendText */
        );
      });
      when(1
      /* Helper */
      , () => {
        op(47
        /* AppendText */
        );
      });
    }

    when(4
    /* SafeString */
    , () => {
      op(68
      /* AssertSame */
      );
      op(44
      /* AppendSafeHTML */
      );
    });
    when(5
    /* Fragment */
    , () => {
      op(68
      /* AssertSame */
      );
      op(45
      /* AppendDocumentFragment */
      );
    });
    when(6
    /* Node */
    , () => {
      op(68
      /* AssertSame */
      );
      op(46
      /* AppendNode */
      );
    });
  });
}
export function compileStd(context) {
  let mainHandle = build(context, op => main(op));
  let trustingGuardedNonDynamicAppend = build(context, op => StdAppend(op, true, null));
  let cautiousGuardedNonDynamicAppend = build(context, op => StdAppend(op, false, null));
  let trustingGuardedDynamicAppend = build(context, op => StdAppend(op, true, trustingGuardedNonDynamicAppend));
  let cautiousGuardedDynamicAppend = build(context, op => StdAppend(op, false, cautiousGuardedNonDynamicAppend));
  return new StdLib(mainHandle, trustingGuardedDynamicAppend, cautiousGuardedDynamicAppend, trustingGuardedNonDynamicAppend, cautiousGuardedNonDynamicAppend);
}
const STDLIB_META = {
  evalSymbols: null,
  upvars: null,
  moduleName: 'stdlib',
  // TODO: ??
  scopeValues: null,
  isStrictMode: true,
  owner: null,
  size: 0
};

function build(program, callback) {
  let {
    constants,
    heap,
    resolver
  } = program;
  let encoder = new EncoderImpl(heap, STDLIB_META);

  function pushOp(...op) {
    encodeOp(encoder, constants, resolver, STDLIB_META, op);
  }

  callback(pushOp);
  let result = encoder.commit(0);

  if (typeof result !== 'number') {
    // This shouldn't be possible
    throw new Error(`Unexpected errors compiling std`);
  } else {
    return result;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
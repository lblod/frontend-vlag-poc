import { $fp } from '@glimmer/vm';
import { PushPrimitive } from './vm';
import { blockOperand, symbolTableOperand } from '../operands';
import { SimpleArgs } from './shared';
/**
 * Yield to a block located at a particular symbol location.
 *
 * @param to the symbol containing the block to yield to
 * @param params optional block parameters to yield to the block
 */

export function YieldBlock(op, to, positional) {
  SimpleArgs(op, positional, null, true);
  op(23
  /* GetBlock */
  , to);
  op(24
  /* SpreadBlock */
  );
  op(61
  /* CompileBlock */
  );
  op(64
  /* InvokeYield */
  );
  op(40
  /* PopScope */
  );
  op(1
  /* PopFrame */
  );
}
/**
 * Push an (optional) yieldable block onto the stack. The yieldable block must be known
 * statically at compile time.
 *
 * @param block An optional Compilable block
 */

export function PushYieldableBlock(op, block) {
  PushSymbolTable(op, block && block[1]);
  op(62
  /* PushBlockScope */
  );
  PushCompilable(op, block);
}
/**
 * Invoke a block that is known statically at compile time.
 *
 * @param block a Compilable block
 */

export function InvokeStaticBlock(op, block) {
  op(0
  /* PushFrame */
  );
  PushCompilable(op, block);
  op(61
  /* CompileBlock */
  );
  op(2
  /* InvokeVirtual */
  );
  op(1
  /* PopFrame */
  );
}
/**
 * Invoke a static block, preserving some number of stack entries for use in
 * updating.
 *
 * @param block A compilable block
 * @param callerCount A number of stack entries to preserve
 */

export function InvokeStaticBlockWithStack(op, block, callerCount) {
  let parameters = block[1];
  let calleeCount = parameters.length;
  let count = Math.min(callerCount, calleeCount);

  if (count === 0) {
    InvokeStaticBlock(op, block);
    return;
  }

  op(0
  /* PushFrame */
  );

  if (count) {
    op(39
    /* ChildScope */
    );

    for (let i = 0; i < count; i++) {
      op(33
      /* Dup */
      , $fp, callerCount - i);
      op(19
      /* SetVariable */
      , parameters[i]);
    }
  }

  PushCompilable(op, block);
  op(61
  /* CompileBlock */
  );
  op(2
  /* InvokeVirtual */
  );

  if (count) {
    op(40
    /* PopScope */
    );
  }

  op(1
  /* PopFrame */
  );
}
export function PushSymbolTable(op, parameters) {
  if (parameters !== null) {
    op(63
    /* PushSymbolTable */
    , symbolTableOperand({
      parameters
    }));
  } else {
    PushPrimitive(op, null);
  }
}
export function PushCompilable(op, _block) {
  if (_block === null) {
    PushPrimitive(op, null);
  } else {
    op(28
    /* Constant */
    , blockOperand(_block));
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL29wY29kZS1jb21waWxlci9saWIvb3Bjb2RlLWJ1aWxkZXIvaGVscGVycy9ibG9ja3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsU0FBUyxHQUFULFFBQW9CLGFBQXBCO0FBQ0EsU0FBUyxhQUFULFFBQThCLE1BQTlCO0FBQ0EsU0FBUyxZQUFULEVBQXVCLGtCQUF2QixRQUFpRCxhQUFqRDtBQUNBLFNBQVMsVUFBVCxRQUEyQixVQUEzQjtBQUdBOzs7Ozs7O0FBTUEsT0FBTSxTQUFVLFVBQVYsQ0FDSixFQURJLEVBRUosRUFGSSxFQUdKLFVBSEksRUFHc0M7QUFFMUMsRUFBQSxVQUFVLENBQUMsRUFBRCxFQUFLLFVBQUwsRUFBaUIsSUFBakIsRUFBdUIsSUFBdkIsQ0FBVjtBQUNBLEVBQUEsRUFBRSxDQUFBO0FBQUE7QUFBQSxJQUFjLEVBQWQsQ0FBRjtBQUNBLEVBQUEsRUFBRSxDQUFBO0FBQUE7QUFBQSxHQUFGO0FBQ0EsRUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLEdBQUY7QUFDQSxFQUFBLEVBQUUsQ0FBQTtBQUFBO0FBQUEsR0FBRjtBQUNBLEVBQUEsRUFBRSxDQUFBO0FBQUE7QUFBQSxHQUFGO0FBQ0EsRUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLEdBQUY7QUFDRDtBQUVEOzs7Ozs7O0FBTUEsT0FBTSxTQUFVLGtCQUFWLENBQ0osRUFESSxFQUVKLEtBRkksRUFFMkM7QUFFL0MsRUFBQSxlQUFlLENBQUMsRUFBRCxFQUFLLEtBQUssSUFBSSxLQUFLLENBQUMsQ0FBRCxDQUFuQixDQUFmO0FBQ0EsRUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLEdBQUY7QUFDQSxFQUFBLGNBQWMsQ0FBQyxFQUFELEVBQUssS0FBTCxDQUFkO0FBQ0Q7QUFFRDs7Ozs7O0FBS0EsT0FBTSxTQUFVLGlCQUFWLENBQ0osRUFESSxFQUVKLEtBRkksRUFFbUM7QUFFdkMsRUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLEdBQUY7QUFDQSxFQUFBLGNBQWMsQ0FBQyxFQUFELEVBQUssS0FBTCxDQUFkO0FBQ0EsRUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLEdBQUY7QUFDQSxFQUFBLEVBQUUsQ0FBQTtBQUFBO0FBQUEsR0FBRjtBQUNBLEVBQUEsRUFBRSxDQUFBO0FBQUE7QUFBQSxHQUFGO0FBQ0Q7QUFFRDs7Ozs7Ozs7QUFPQSxPQUFNLFNBQVUsMEJBQVYsQ0FDSixFQURJLEVBRUosS0FGSSxFQUdKLFdBSEksRUFHZTtBQUVuQixNQUFJLFVBQVUsR0FBRyxLQUFLLENBQUMsQ0FBRCxDQUF0QjtBQUNBLE1BQUksV0FBVyxHQUFHLFVBQVUsQ0FBQyxNQUE3QjtBQUNBLE1BQUksS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFMLENBQVMsV0FBVCxFQUFzQixXQUF0QixDQUFaOztBQUVBLE1BQUksS0FBSyxLQUFLLENBQWQsRUFBaUI7QUFDZixJQUFBLGlCQUFpQixDQUFDLEVBQUQsRUFBSyxLQUFMLENBQWpCO0FBQ0E7QUFDRDs7QUFFRCxFQUFBLEVBQUUsQ0FBQTtBQUFBO0FBQUEsR0FBRjs7QUFFQSxNQUFJLEtBQUosRUFBVztBQUNULElBQUEsRUFBRSxDQUFBO0FBQUE7QUFBQSxLQUFGOztBQUVBLFNBQUssSUFBSSxDQUFDLEdBQUcsQ0FBYixFQUFnQixDQUFDLEdBQUcsS0FBcEIsRUFBMkIsQ0FBQyxFQUE1QixFQUFnQztBQUM5QixNQUFBLEVBQUUsQ0FBQTtBQUFBO0FBQUEsUUFBUyxHQUFULEVBQWMsV0FBVyxHQUFHLENBQTVCLENBQUY7QUFDQSxNQUFBLEVBQUUsQ0FBQTtBQUFBO0FBQUEsUUFBaUIsVUFBVSxDQUFDLENBQUQsQ0FBM0IsQ0FBRjtBQUNEO0FBQ0Y7O0FBRUQsRUFBQSxjQUFjLENBQUMsRUFBRCxFQUFLLEtBQUwsQ0FBZDtBQUNBLEVBQUEsRUFBRSxDQUFBO0FBQUE7QUFBQSxHQUFGO0FBQ0EsRUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLEdBQUY7O0FBRUEsTUFBSSxLQUFKLEVBQVc7QUFDVCxJQUFBLEVBQUUsQ0FBQTtBQUFBO0FBQUEsS0FBRjtBQUNEOztBQUVELEVBQUEsRUFBRSxDQUFBO0FBQUE7QUFBQSxHQUFGO0FBQ0Q7QUFFRCxPQUFNLFNBQVUsZUFBVixDQUEwQixFQUExQixFQUFnRCxVQUFoRCxFQUEyRTtBQUMvRSxNQUFJLFVBQVUsS0FBSyxJQUFuQixFQUF5QjtBQUN2QixJQUFBLEVBQUUsQ0FBQTtBQUFBO0FBQUEsTUFBcUIsa0JBQWtCLENBQUM7QUFBRSxNQUFBO0FBQUYsS0FBRCxDQUF2QyxDQUFGO0FBQ0QsR0FGRCxNQUVPO0FBQ0wsSUFBQSxhQUFhLENBQUMsRUFBRCxFQUFLLElBQUwsQ0FBYjtBQUNEO0FBQ0Y7QUFFRCxPQUFNLFNBQVUsY0FBVixDQUNKLEVBREksRUFFSixNQUZJLEVBRTRDO0FBRWhELE1BQUksTUFBTSxLQUFLLElBQWYsRUFBcUI7QUFDbkIsSUFBQSxhQUFhLENBQUMsRUFBRCxFQUFLLElBQUwsQ0FBYjtBQUNELEdBRkQsTUFFTztBQUNMLElBQUEsRUFBRSxDQUFBO0FBQUE7QUFBQSxNQUFjLFlBQVksQ0FBQyxNQUFELENBQTFCLENBQUY7QUFDRDtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFjaGluZU9wLCBPcCwgT3B0aW9uLCBXaXJlRm9ybWF0IH0gZnJvbSAnQGdsaW1tZXIvaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyAkZnAgfSBmcm9tICdAZ2xpbW1lci92bSc7XG5pbXBvcnQgeyBQdXNoUHJpbWl0aXZlIH0gZnJvbSAnLi92bSc7XG5pbXBvcnQgeyBibG9ja09wZXJhbmQsIHN5bWJvbFRhYmxlT3BlcmFuZCB9IGZyb20gJy4uL29wZXJhbmRzJztcbmltcG9ydCB7IFNpbXBsZUFyZ3MgfSBmcm9tICcuL3NoYXJlZCc7XG5pbXBvcnQgeyBQdXNoRXhwcmVzc2lvbk9wLCBQdXNoU3RhdGVtZW50T3AgfSBmcm9tICcuLi8uLi9zeW50YXgvY29tcGlsZXJzJztcblxuLyoqXG4gKiBZaWVsZCB0byBhIGJsb2NrIGxvY2F0ZWQgYXQgYSBwYXJ0aWN1bGFyIHN5bWJvbCBsb2NhdGlvbi5cbiAqXG4gKiBAcGFyYW0gdG8gdGhlIHN5bWJvbCBjb250YWluaW5nIHRoZSBibG9jayB0byB5aWVsZCB0b1xuICogQHBhcmFtIHBhcmFtcyBvcHRpb25hbCBibG9jayBwYXJhbWV0ZXJzIHRvIHlpZWxkIHRvIHRoZSBibG9ja1xuICovXG5leHBvcnQgZnVuY3Rpb24gWWllbGRCbG9jayhcbiAgb3A6IFB1c2hTdGF0ZW1lbnRPcCxcbiAgdG86IG51bWJlcixcbiAgcG9zaXRpb25hbDogT3B0aW9uPFdpcmVGb3JtYXQuQ29yZS5QYXJhbXM+XG4pOiB2b2lkIHtcbiAgU2ltcGxlQXJncyhvcCwgcG9zaXRpb25hbCwgbnVsbCwgdHJ1ZSk7XG4gIG9wKE9wLkdldEJsb2NrLCB0byk7XG4gIG9wKE9wLlNwcmVhZEJsb2NrKTtcbiAgb3AoT3AuQ29tcGlsZUJsb2NrKTtcbiAgb3AoT3AuSW52b2tlWWllbGQpO1xuICBvcChPcC5Qb3BTY29wZSk7XG4gIG9wKE1hY2hpbmVPcC5Qb3BGcmFtZSk7XG59XG5cbi8qKlxuICogUHVzaCBhbiAob3B0aW9uYWwpIHlpZWxkYWJsZSBibG9jayBvbnRvIHRoZSBzdGFjay4gVGhlIHlpZWxkYWJsZSBibG9jayBtdXN0IGJlIGtub3duXG4gKiBzdGF0aWNhbGx5IGF0IGNvbXBpbGUgdGltZS5cbiAqXG4gKiBAcGFyYW0gYmxvY2sgQW4gb3B0aW9uYWwgQ29tcGlsYWJsZSBibG9ja1xuICovXG5leHBvcnQgZnVuY3Rpb24gUHVzaFlpZWxkYWJsZUJsb2NrKFxuICBvcDogUHVzaFN0YXRlbWVudE9wLFxuICBibG9jazogT3B0aW9uPFdpcmVGb3JtYXQuU2VyaWFsaXplZElubGluZUJsb2NrPlxuKTogdm9pZCB7XG4gIFB1c2hTeW1ib2xUYWJsZShvcCwgYmxvY2sgJiYgYmxvY2tbMV0pO1xuICBvcChPcC5QdXNoQmxvY2tTY29wZSk7XG4gIFB1c2hDb21waWxhYmxlKG9wLCBibG9jayk7XG59XG5cbi8qKlxuICogSW52b2tlIGEgYmxvY2sgdGhhdCBpcyBrbm93biBzdGF0aWNhbGx5IGF0IGNvbXBpbGUgdGltZS5cbiAqXG4gKiBAcGFyYW0gYmxvY2sgYSBDb21waWxhYmxlIGJsb2NrXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBJbnZva2VTdGF0aWNCbG9jayhcbiAgb3A6IFB1c2hTdGF0ZW1lbnRPcCxcbiAgYmxvY2s6IFdpcmVGb3JtYXQuU2VyaWFsaXplZElubGluZUJsb2NrXG4pOiB2b2lkIHtcbiAgb3AoTWFjaGluZU9wLlB1c2hGcmFtZSk7XG4gIFB1c2hDb21waWxhYmxlKG9wLCBibG9jayk7XG4gIG9wKE9wLkNvbXBpbGVCbG9jayk7XG4gIG9wKE1hY2hpbmVPcC5JbnZva2VWaXJ0dWFsKTtcbiAgb3AoTWFjaGluZU9wLlBvcEZyYW1lKTtcbn1cblxuLyoqXG4gKiBJbnZva2UgYSBzdGF0aWMgYmxvY2ssIHByZXNlcnZpbmcgc29tZSBudW1iZXIgb2Ygc3RhY2sgZW50cmllcyBmb3IgdXNlIGluXG4gKiB1cGRhdGluZy5cbiAqXG4gKiBAcGFyYW0gYmxvY2sgQSBjb21waWxhYmxlIGJsb2NrXG4gKiBAcGFyYW0gY2FsbGVyQ291bnQgQSBudW1iZXIgb2Ygc3RhY2sgZW50cmllcyB0byBwcmVzZXJ2ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gSW52b2tlU3RhdGljQmxvY2tXaXRoU3RhY2soXG4gIG9wOiBQdXNoU3RhdGVtZW50T3AsXG4gIGJsb2NrOiBXaXJlRm9ybWF0LlNlcmlhbGl6ZWRJbmxpbmVCbG9jayxcbiAgY2FsbGVyQ291bnQ6IG51bWJlclxuKTogdm9pZCB7XG4gIGxldCBwYXJhbWV0ZXJzID0gYmxvY2tbMV07XG4gIGxldCBjYWxsZWVDb3VudCA9IHBhcmFtZXRlcnMubGVuZ3RoO1xuICBsZXQgY291bnQgPSBNYXRoLm1pbihjYWxsZXJDb3VudCwgY2FsbGVlQ291bnQpO1xuXG4gIGlmIChjb3VudCA9PT0gMCkge1xuICAgIEludm9rZVN0YXRpY0Jsb2NrKG9wLCBibG9jayk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgb3AoTWFjaGluZU9wLlB1c2hGcmFtZSk7XG5cbiAgaWYgKGNvdW50KSB7XG4gICAgb3AoT3AuQ2hpbGRTY29wZSk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgIG9wKE9wLkR1cCwgJGZwLCBjYWxsZXJDb3VudCAtIGkpO1xuICAgICAgb3AoT3AuU2V0VmFyaWFibGUsIHBhcmFtZXRlcnNbaV0pO1xuICAgIH1cbiAgfVxuXG4gIFB1c2hDb21waWxhYmxlKG9wLCBibG9jayk7XG4gIG9wKE9wLkNvbXBpbGVCbG9jayk7XG4gIG9wKE1hY2hpbmVPcC5JbnZva2VWaXJ0dWFsKTtcblxuICBpZiAoY291bnQpIHtcbiAgICBvcChPcC5Qb3BTY29wZSk7XG4gIH1cblxuICBvcChNYWNoaW5lT3AuUG9wRnJhbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUHVzaFN5bWJvbFRhYmxlKG9wOiBQdXNoRXhwcmVzc2lvbk9wLCBwYXJhbWV0ZXJzOiBudW1iZXJbXSB8IG51bGwpOiB2b2lkIHtcbiAgaWYgKHBhcmFtZXRlcnMgIT09IG51bGwpIHtcbiAgICBvcChPcC5QdXNoU3ltYm9sVGFibGUsIHN5bWJvbFRhYmxlT3BlcmFuZCh7IHBhcmFtZXRlcnMgfSkpO1xuICB9IGVsc2Uge1xuICAgIFB1c2hQcmltaXRpdmUob3AsIG51bGwpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBQdXNoQ29tcGlsYWJsZShcbiAgb3A6IFB1c2hFeHByZXNzaW9uT3AsXG4gIF9ibG9jazogT3B0aW9uPFdpcmVGb3JtYXQuU2VyaWFsaXplZElubGluZUJsb2NrPlxuKTogdm9pZCB7XG4gIGlmIChfYmxvY2sgPT09IG51bGwpIHtcbiAgICBQdXNoUHJpbWl0aXZlKG9wLCBudWxsKTtcbiAgfSBlbHNlIHtcbiAgICBvcChPcC5Db25zdGFudCwgYmxvY2tPcGVyYW5kKF9ibG9jaykpO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9
import { $fp, $v0 } from '@glimmer/vm';
import { encodeImmediate, isSmallInt } from '@glimmer/util';
import { SimpleArgs } from './shared';
import { isStrictMode, nonSmallIntOperand } from '../operands';
import { expr } from './expr';
/**
 * Push a reference onto the stack corresponding to a statically known primitive
 * @param value A JavaScript primitive (undefined, null, boolean, number or string)
 */

export function PushPrimitiveReference(op, value) {
  PushPrimitive(op, value);
  op(31
  /* PrimitiveReference */
  );
}
/**
 * Push an encoded representation of a JavaScript primitive on the stack
 *
 * @param value A JavaScript primitive (undefined, null, boolean, number or string)
 */

export function PushPrimitive(op, primitive) {
  let p = primitive;

  if (typeof p === 'number') {
    p = isSmallInt(p) ? encodeImmediate(p) : nonSmallIntOperand(p);
  }

  op(30
  /* Primitive */
  , p);
}
/**
 * Invoke a foreign function (a "helper") based on a statically known handle
 *
 * @param op The op creation function
 * @param handle A handle
 * @param positional An optional list of expressions to compile
 * @param named An optional list of named arguments (name + expression) to compile
 */

export function Call(op, handle, positional, named) {
  op(0
  /* PushFrame */
  );
  SimpleArgs(op, positional, named, false);
  op(16
  /* Helper */
  , handle);
  op(1
  /* PopFrame */
  );
  op(36
  /* Fetch */
  , $v0);
}
/**
 * Invoke a foreign function (a "helper") based on a dynamically loaded definition
 *
 * @param op The op creation function
 * @param positional An optional list of expressions to compile
 * @param named An optional list of named arguments (name + expression) to compile
 */

export function CallDynamic(op, positional, named, append) {
  op(0
  /* PushFrame */
  );
  SimpleArgs(op, positional, named, false);
  op(33
  /* Dup */
  , $fp, 1);
  op(107
  /* DynamicHelper */
  );

  if (append) {
    op(36
    /* Fetch */
    , $v0);
    append();
    op(1
    /* PopFrame */
    );
    op(34
    /* Pop */
    , 1);
  } else {
    op(1
    /* PopFrame */
    );
    op(34
    /* Pop */
    , 1);
    op(36
    /* Fetch */
    , $v0);
  }
}
/**
 * Evaluate statements in the context of new dynamic scope entries. Move entries from the
 * stack into named entries in the dynamic scope, then evaluate the statements, then pop
 * the dynamic scope
 *
 * @param names a list of dynamic scope names
 * @param block a function that returns a list of statements to evaluate
 */

export function DynamicScope(op, names, block) {
  op(59
  /* PushDynamicScope */
  );
  op(58
  /* BindDynamicScope */
  , names);
  block();
  op(60
  /* PopDynamicScope */
  );
}
export function Curry(op, type, definition, positional, named) {
  op(0
  /* PushFrame */
  );
  SimpleArgs(op, positional, named, false);
  op(86
  /* CaptureArgs */
  );
  expr(op, definition);
  op(77
  /* Curry */
  , type, isStrictMode());
  op(1
  /* PopFrame */
  );
  op(36
  /* Fetch */
  , $v0);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
import { InstructionEncoderImpl } from '@glimmer/encoder';
import { isMachineOp } from '@glimmer/vm';
import { Stack, dict, EMPTY_STRING_ARRAY, encodeHandle, assert } from '@glimmer/util';
import { resolveComponent, resolveComponentOrHelper, resolveHelper, resolveModifier, resolveOptionalComponentOrHelper, resolveOptionalHelper } from './helpers/resolution';
import { compilableBlock } from '../compilable-template';
import { DEBUG } from '@glimmer/env';
export class Labels {
  constructor() {
    this.labels = dict();
    this.targets = [];
  }

  label(name, index) {
    this.labels[name] = index;
  }

  target(at, target) {
    this.targets.push({
      at,
      target
    });
  }

  patch(heap) {
    let {
      targets,
      labels
    } = this;

    for (let i = 0; i < targets.length; i++) {
      let {
        at,
        target
      } = targets[i];
      let address = labels[target] - at;
      (false && assert(heap.getbyaddr(at) === -1, 'Expected heap to contain a placeholder, but it did not'));
      heap.setbyaddr(at, address);
    }
  }

}
export function encodeOp(encoder, constants, resolver, meta, op) {
  if (isBuilderOpcode(op[0])) {
    let [type, ...operands] = op;
    encoder.push(constants, type, ...operands);
  } else {
    switch (op[0]) {
      case 1000
      /* Label */
      :
        return encoder.label(op[1]);

      case 1001
      /* StartLabels */
      :
        return encoder.startLabels();

      case 1002
      /* StopLabels */
      :
        return encoder.stopLabels();

      case 1004
      /* ResolveComponent */
      :
        return resolveComponent(resolver, constants, meta, op);

      case 1003
      /* ResolveModifier */
      :
        return resolveModifier(resolver, constants, meta, op);

      case 1005
      /* ResolveHelper */
      :
        return resolveHelper(resolver, constants, meta, op);

      case 1007
      /* ResolveComponentOrHelper */
      :
        return resolveComponentOrHelper(resolver, constants, meta, op);

      case 1006
      /* ResolveOptionalHelper */
      :
        return resolveOptionalHelper(resolver, constants, meta, op);

      case 1008
      /* ResolveOptionalComponentOrHelper */
      :
        return resolveOptionalComponentOrHelper(resolver, constants, meta, op);

      case 1010
      /* ResolveLocal */
      :
        let freeVar = op[1];
        let name = meta.upvars[freeVar];
        let andThen = op[2];
        andThen(name, meta.moduleName);
        break;

      case 1011
      /* ResolveTemplateLocal */
      :
        let [, valueIndex, then] = op;
        let value = meta.scopeValues[valueIndex];
        then(constants.value(value));
        break;

      case 1009
      /* ResolveFree */
      :
        if (DEBUG) {
          let [, upvarIndex] = op;
          let freeName = meta.upvars[upvarIndex];
          throw new Error(`Attempted to resolve a value in a strict mode template, but that value was not in scope: ${freeName}`);
        }

        break;

      default:
        throw new Error(`Unexpected high level opcode ${op[0]}`);
    }
  }
}
export class EncoderImpl {
  constructor(heap, meta, stdlib) {
    this.heap = heap;
    this.meta = meta;
    this.stdlib = stdlib;
    this.labelsStack = new Stack();
    this.encoder = new InstructionEncoderImpl([]);
    this.errors = [];
    this.handle = heap.malloc();
  }

  error(error) {
    this.encoder.encode(30
    /* Primitive */
    , 0);
    this.errors.push(error);
  }

  commit(size) {
    let handle = this.handle;
    this.heap.push(5
    /* Return */
    | 1024
    /* MACHINE_MASK */
    );
    this.heap.finishMalloc(handle, size);

    if (this.errors.length) {
      return {
        errors: this.errors,
        handle
      };
    } else {
      return handle;
    }
  }

  push(constants, type, ...args) {
    let {
      heap
    } = this;

    if (DEBUG && type > 255
    /* TYPE_SIZE */
    ) {
        throw new Error(`Opcode type over 8-bits. Got ${type}.`);
      }

    let machine = isMachineOp(type) ? 1024
    /* MACHINE_MASK */
    : 0;
    let first = type | machine | args.length << 8
    /* ARG_SHIFT */
    ;
    heap.push(first);

    for (let i = 0; i < args.length; i++) {
      let op = args[i];
      heap.push(this.operand(constants, op));
    }
  }

  operand(constants, operand) {
    if (typeof operand === 'number') {
      return operand;
    }

    if (typeof operand === 'object' && operand !== null) {
      if (Array.isArray(operand)) {
        return encodeHandle(constants.array(operand));
      } else {
        switch (operand.type) {
          case 1
          /* Label */
          :
            this.currentLabels.target(this.heap.offset, operand.value);
            return -1;

          case 2
          /* IsStrictMode */
          :
            return encodeHandle(constants.value(this.meta.isStrictMode));

          case 3
          /* EvalSymbols */
          :
            return encodeHandle(constants.array(this.meta.evalSymbols || EMPTY_STRING_ARRAY));

          case 4
          /* Block */
          :
            return encodeHandle(constants.value(compilableBlock(operand.value, this.meta)));

          case 5
          /* StdLib */
          :
            return this.stdlib[operand.value];

          case 6
          /* NonSmallInt */
          :
          case 7
          /* SymbolTable */
          :
          case 8
          /* Layout */
          :
            return constants.value(operand.value);
        }
      }
    }

    return encodeHandle(constants.value(operand));
  }

  get currentLabels() {
    return this.labelsStack.current;
  }

  label(name) {
    this.currentLabels.label(name, this.heap.offset + 1);
  }

  startLabels() {
    this.labelsStack.push(new Labels());
  }

  stopLabels() {
    let label = this.labelsStack.pop();
    label.patch(this.heap);
  }

}

function isBuilderOpcode(op) {
  return op < 1000
  /* Start */
  ;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
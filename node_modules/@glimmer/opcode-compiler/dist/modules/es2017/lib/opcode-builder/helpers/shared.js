import { EMPTY_ARRAY, EMPTY_STRING_ARRAY } from '@glimmer/util';
import { PushYieldableBlock } from './blocks';
import { expr } from './expr';
/**
 * Compile arguments, pushing an Arguments object onto the stack.
 *
 * @param args.params
 * @param args.hash
 * @param args.blocks
 * @param args.atNames
 */

export function CompileArgs(op, positional, named, blocks, atNames) {
  let blockNames = blocks.names;

  for (let i = 0; i < blockNames.length; i++) {
    PushYieldableBlock(op, blocks.get(blockNames[i]));
  }

  let count = CompilePositional(op, positional);
  let flags = count << 4;
  if (atNames) flags |= 0b1000;

  if (blocks) {
    flags |= 0b111;
  }

  let names = EMPTY_ARRAY;

  if (named) {
    names = named[0];
    let val = named[1];

    for (let i = 0; i < val.length; i++) {
      expr(op, val[i]);
    }
  }

  op(82
  /* PushArgs */
  , names, blockNames, flags);
}
export function SimpleArgs(op, positional, named, atNames) {
  if (positional === null && named === null) {
    op(83
    /* PushEmptyArgs */
    );
    return;
  }

  let count = CompilePositional(op, positional);
  let flags = count << 4;
  if (atNames) flags |= 0b1000;
  let names = EMPTY_STRING_ARRAY;

  if (named) {
    names = named[0];
    let val = named[1];

    for (let i = 0; i < val.length; i++) {
      expr(op, val[i]);
    }
  }

  op(82
  /* PushArgs */
  , names, EMPTY_STRING_ARRAY, flags);
}
/**
 * Compile an optional list of positional arguments, which pushes each argument
 * onto the stack and returns the number of parameters compiled
 *
 * @param positional an optional list of positional arguments
 */

export function CompilePositional(op, positional) {
  if (positional === null) return 0;

  for (let i = 0; i < positional.length; i++) {
    expr(op, positional[i]);
  }

  return positional.length;
}
export function meta(layout) {
  var _a, _b;

  let [, symbols,, upvars] = layout.block;
  return {
    evalSymbols: evalSymbols(layout),
    upvars: upvars,
    scopeValues: (_b = (_a = layout.scope) === null || _a === void 0 ? void 0 : _a.call(layout)) !== null && _b !== void 0 ? _b : null,
    isStrictMode: layout.isStrictMode,
    moduleName: layout.moduleName,
    owner: layout.owner,
    size: symbols.length
  };
}
export function evalSymbols(layout) {
  let {
    block
  } = layout;
  let [, symbols, hasEval] = block;
  return hasEval ? symbols : null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL29wY29kZS1jb21waWxlci9saWIvb3Bjb2RlLWJ1aWxkZXIvaGVscGVycy9zaGFyZWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsU0FBUyxXQUFULEVBQXNCLGtCQUF0QixRQUFnRCxlQUFoRDtBQUNBLFNBQVMsa0JBQVQsUUFBbUMsVUFBbkM7QUFFQSxTQUFTLElBQVQsUUFBcUIsUUFBckI7QUFFQTs7Ozs7Ozs7O0FBUUEsT0FBTSxTQUFVLFdBQVYsQ0FDSixFQURJLEVBRUosVUFGSSxFQUdKLEtBSEksRUFJSixNQUpJLEVBS0osT0FMSSxFQUtZO0FBRWhCLE1BQUksVUFBVSxHQUFhLE1BQU0sQ0FBQyxLQUFsQzs7QUFDQSxPQUFLLElBQUksQ0FBQyxHQUFHLENBQWIsRUFBZ0IsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxNQUEvQixFQUF1QyxDQUFDLEVBQXhDLEVBQTRDO0FBQzFDLElBQUEsa0JBQWtCLENBQUMsRUFBRCxFQUFLLE1BQU0sQ0FBQyxHQUFQLENBQVcsVUFBVSxDQUFDLENBQUQsQ0FBckIsQ0FBTCxDQUFsQjtBQUNEOztBQUVELE1BQUksS0FBSyxHQUFHLGlCQUFpQixDQUFDLEVBQUQsRUFBSyxVQUFMLENBQTdCO0FBRUEsTUFBSSxLQUFLLEdBQUcsS0FBSyxJQUFJLENBQXJCO0FBRUEsTUFBSSxPQUFKLEVBQWEsS0FBSyxJQUFJLE1BQVQ7O0FBRWIsTUFBSSxNQUFKLEVBQVk7QUFDVixJQUFBLEtBQUssSUFBSSxLQUFUO0FBQ0Q7O0FBRUQsTUFBSSxLQUFLLEdBQUcsV0FBWjs7QUFFQSxNQUFJLEtBQUosRUFBVztBQUNULElBQUEsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFELENBQWI7QUFDQSxRQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBRCxDQUFmOztBQUNBLFNBQUssSUFBSSxDQUFDLEdBQUcsQ0FBYixFQUFnQixDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQXhCLEVBQWdDLENBQUMsRUFBakMsRUFBcUM7QUFDbkMsTUFBQSxJQUFJLENBQUMsRUFBRCxFQUFLLEdBQUcsQ0FBQyxDQUFELENBQVIsQ0FBSjtBQUNEO0FBQ0Y7O0FBRUQsRUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLElBQWMsS0FBZCxFQUFpQyxVQUFqQyxFQUE2QyxLQUE3QyxDQUFGO0FBQ0Q7QUFFRCxPQUFNLFNBQVUsVUFBVixDQUNKLEVBREksRUFFSixVQUZJLEVBR0osS0FISSxFQUlKLE9BSkksRUFJWTtBQUVoQixNQUFJLFVBQVUsS0FBSyxJQUFmLElBQXVCLEtBQUssS0FBSyxJQUFyQyxFQUEyQztBQUN6QyxJQUFBLEVBQUUsQ0FBQTtBQUFBO0FBQUEsS0FBRjtBQUNBO0FBQ0Q7O0FBRUQsTUFBSSxLQUFLLEdBQUcsaUJBQWlCLENBQUMsRUFBRCxFQUFLLFVBQUwsQ0FBN0I7QUFFQSxNQUFJLEtBQUssR0FBRyxLQUFLLElBQUksQ0FBckI7QUFFQSxNQUFJLE9BQUosRUFBYSxLQUFLLElBQUksTUFBVDtBQUViLE1BQUksS0FBSyxHQUFHLGtCQUFaOztBQUVBLE1BQUksS0FBSixFQUFXO0FBQ1QsSUFBQSxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUQsQ0FBYjtBQUNBLFFBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFELENBQWY7O0FBQ0EsU0FBSyxJQUFJLENBQUMsR0FBRyxDQUFiLEVBQWdCLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBeEIsRUFBZ0MsQ0FBQyxFQUFqQyxFQUFxQztBQUNuQyxNQUFBLElBQUksQ0FBQyxFQUFELEVBQUssR0FBRyxDQUFDLENBQUQsQ0FBUixDQUFKO0FBQ0Q7QUFDRjs7QUFFRCxFQUFBLEVBQUUsQ0FBQTtBQUFBO0FBQUEsSUFBYyxLQUFkLEVBQWlDLGtCQUFqQyxFQUFxRCxLQUFyRCxDQUFGO0FBQ0Q7QUFFRDs7Ozs7OztBQU1BLE9BQU0sU0FBVSxpQkFBVixDQUNKLEVBREksRUFFSixVQUZJLEVBRXNDO0FBRTFDLE1BQUksVUFBVSxLQUFLLElBQW5CLEVBQXlCLE9BQU8sQ0FBUDs7QUFFekIsT0FBSyxJQUFJLENBQUMsR0FBRyxDQUFiLEVBQWdCLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBL0IsRUFBdUMsQ0FBQyxFQUF4QyxFQUE0QztBQUMxQyxJQUFBLElBQUksQ0FBQyxFQUFELEVBQUssVUFBVSxDQUFDLENBQUQsQ0FBZixDQUFKO0FBQ0Q7O0FBRUQsU0FBTyxVQUFVLENBQUMsTUFBbEI7QUFDRDtBQUVELE9BQU0sU0FBVSxJQUFWLENBQWUsTUFBZixFQUF3Qzs7O0FBQzVDLE1BQUksR0FBRyxPQUFILEdBQWMsTUFBZCxJQUF3QixNQUFNLENBQUMsS0FBbkM7QUFFQSxTQUFPO0FBQ0wsSUFBQSxXQUFXLEVBQUUsV0FBVyxDQUFDLE1BQUQsQ0FEbkI7QUFFTCxJQUFBLE1BQU0sRUFBRSxNQUZIO0FBR0wsSUFBQSxXQUFXLEVBQUEsQ0FBQSxFQUFBLEdBQUEsQ0FBQSxFQUFBLEdBQUUsTUFBTSxDQUFDLEtBQVQsTUFBYyxJQUFkLElBQWMsRUFBQSxLQUFBLEtBQUEsQ0FBZCxHQUFjLEtBQUEsQ0FBZCxHQUFjLEVBQUEsQ0FBQSxJQUFBLENBQVosTUFBWSxDQUFkLE1BQVEsSUFBUixJQUFRLEVBQUEsS0FBQSxLQUFBLENBQVIsR0FBUSxFQUFSLEdBQXNCLElBSDVCO0FBSUwsSUFBQSxZQUFZLEVBQUUsTUFBTSxDQUFDLFlBSmhCO0FBS0wsSUFBQSxVQUFVLEVBQUUsTUFBTSxDQUFDLFVBTGQ7QUFNTCxJQUFBLEtBQUssRUFBRSxNQUFNLENBQUMsS0FOVDtBQU9MLElBQUEsSUFBSSxFQUFFLE9BQU8sQ0FBQztBQVBULEdBQVA7QUFTRDtBQUVELE9BQU0sU0FBVSxXQUFWLENBQXNCLE1BQXRCLEVBQStDO0FBQ25ELE1BQUk7QUFBRSxJQUFBO0FBQUYsTUFBWSxNQUFoQjtBQUNBLE1BQUksR0FBRyxPQUFILEVBQVksT0FBWixJQUF1QixLQUEzQjtBQUVBLFNBQU8sT0FBTyxHQUFHLE9BQUgsR0FBYSxJQUEzQjtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29udGFpbmluZ01ldGFkYXRhLFxuICBMYXlvdXRXaXRoQ29udGV4dCxcbiAgT3AsXG4gIE9wdGlvbixcbiAgV2lyZUZvcm1hdCxcbiAgTmFtZWRCbG9ja3MsXG59IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgRU1QVFlfQVJSQVksIEVNUFRZX1NUUklOR19BUlJBWSB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuaW1wb3J0IHsgUHVzaFlpZWxkYWJsZUJsb2NrIH0gZnJvbSAnLi9ibG9ja3MnO1xuaW1wb3J0IHsgUHVzaEV4cHJlc3Npb25PcCwgUHVzaFN0YXRlbWVudE9wIH0gZnJvbSAnLi4vLi4vc3ludGF4L2NvbXBpbGVycyc7XG5pbXBvcnQgeyBleHByIH0gZnJvbSAnLi9leHByJztcblxuLyoqXG4gKiBDb21waWxlIGFyZ3VtZW50cywgcHVzaGluZyBhbiBBcmd1bWVudHMgb2JqZWN0IG9udG8gdGhlIHN0YWNrLlxuICpcbiAqIEBwYXJhbSBhcmdzLnBhcmFtc1xuICogQHBhcmFtIGFyZ3MuaGFzaFxuICogQHBhcmFtIGFyZ3MuYmxvY2tzXG4gKiBAcGFyYW0gYXJncy5hdE5hbWVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBDb21waWxlQXJncyhcbiAgb3A6IFB1c2hTdGF0ZW1lbnRPcCxcbiAgcG9zaXRpb25hbDogV2lyZUZvcm1hdC5Db3JlLlBhcmFtcyxcbiAgbmFtZWQ6IFdpcmVGb3JtYXQuQ29yZS5IYXNoLFxuICBibG9ja3M6IE5hbWVkQmxvY2tzLFxuICBhdE5hbWVzOiBib29sZWFuXG4pOiB2b2lkIHtcbiAgbGV0IGJsb2NrTmFtZXM6IHN0cmluZ1tdID0gYmxvY2tzLm5hbWVzO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGJsb2NrTmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICBQdXNoWWllbGRhYmxlQmxvY2sob3AsIGJsb2Nrcy5nZXQoYmxvY2tOYW1lc1tpXSkpO1xuICB9XG5cbiAgbGV0IGNvdW50ID0gQ29tcGlsZVBvc2l0aW9uYWwob3AsIHBvc2l0aW9uYWwpO1xuXG4gIGxldCBmbGFncyA9IGNvdW50IDw8IDQ7XG5cbiAgaWYgKGF0TmFtZXMpIGZsYWdzIHw9IDBiMTAwMDtcblxuICBpZiAoYmxvY2tzKSB7XG4gICAgZmxhZ3MgfD0gMGIxMTE7XG4gIH1cblxuICBsZXQgbmFtZXMgPSBFTVBUWV9BUlJBWSBhcyByZWFkb25seSBzdHJpbmdbXTtcblxuICBpZiAobmFtZWQpIHtcbiAgICBuYW1lcyA9IG5hbWVkWzBdO1xuICAgIGxldCB2YWwgPSBuYW1lZFsxXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbC5sZW5ndGg7IGkrKykge1xuICAgICAgZXhwcihvcCwgdmFsW2ldKTtcbiAgICB9XG4gIH1cblxuICBvcChPcC5QdXNoQXJncywgbmFtZXMgYXMgc3RyaW5nW10sIGJsb2NrTmFtZXMsIGZsYWdzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFNpbXBsZUFyZ3MoXG4gIG9wOiBQdXNoRXhwcmVzc2lvbk9wLFxuICBwb3NpdGlvbmFsOiBPcHRpb248V2lyZUZvcm1hdC5Db3JlLlBhcmFtcz4sXG4gIG5hbWVkOiBPcHRpb248V2lyZUZvcm1hdC5Db3JlLkhhc2g+LFxuICBhdE5hbWVzOiBib29sZWFuXG4pOiB2b2lkIHtcbiAgaWYgKHBvc2l0aW9uYWwgPT09IG51bGwgJiYgbmFtZWQgPT09IG51bGwpIHtcbiAgICBvcChPcC5QdXNoRW1wdHlBcmdzKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgY291bnQgPSBDb21waWxlUG9zaXRpb25hbChvcCwgcG9zaXRpb25hbCk7XG5cbiAgbGV0IGZsYWdzID0gY291bnQgPDwgNDtcblxuICBpZiAoYXROYW1lcykgZmxhZ3MgfD0gMGIxMDAwO1xuXG4gIGxldCBuYW1lcyA9IEVNUFRZX1NUUklOR19BUlJBWTtcblxuICBpZiAobmFtZWQpIHtcbiAgICBuYW1lcyA9IG5hbWVkWzBdO1xuICAgIGxldCB2YWwgPSBuYW1lZFsxXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbC5sZW5ndGg7IGkrKykge1xuICAgICAgZXhwcihvcCwgdmFsW2ldKTtcbiAgICB9XG4gIH1cblxuICBvcChPcC5QdXNoQXJncywgbmFtZXMgYXMgc3RyaW5nW10sIEVNUFRZX1NUUklOR19BUlJBWSwgZmxhZ3MpO1xufVxuXG4vKipcbiAqIENvbXBpbGUgYW4gb3B0aW9uYWwgbGlzdCBvZiBwb3NpdGlvbmFsIGFyZ3VtZW50cywgd2hpY2ggcHVzaGVzIGVhY2ggYXJndW1lbnRcbiAqIG9udG8gdGhlIHN0YWNrIGFuZCByZXR1cm5zIHRoZSBudW1iZXIgb2YgcGFyYW1ldGVycyBjb21waWxlZFxuICpcbiAqIEBwYXJhbSBwb3NpdGlvbmFsIGFuIG9wdGlvbmFsIGxpc3Qgb2YgcG9zaXRpb25hbCBhcmd1bWVudHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIENvbXBpbGVQb3NpdGlvbmFsKFxuICBvcDogUHVzaEV4cHJlc3Npb25PcCxcbiAgcG9zaXRpb25hbDogT3B0aW9uPFdpcmVGb3JtYXQuQ29yZS5QYXJhbXM+XG4pOiBudW1iZXIge1xuICBpZiAocG9zaXRpb25hbCA9PT0gbnVsbCkgcmV0dXJuIDA7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3NpdGlvbmFsLmxlbmd0aDsgaSsrKSB7XG4gICAgZXhwcihvcCwgcG9zaXRpb25hbFtpXSk7XG4gIH1cblxuICByZXR1cm4gcG9zaXRpb25hbC5sZW5ndGg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXRhKGxheW91dDogTGF5b3V0V2l0aENvbnRleHQpOiBDb250YWluaW5nTWV0YWRhdGEge1xuICBsZXQgWywgc3ltYm9scywgLCB1cHZhcnNdID0gbGF5b3V0LmJsb2NrO1xuXG4gIHJldHVybiB7XG4gICAgZXZhbFN5bWJvbHM6IGV2YWxTeW1ib2xzKGxheW91dCksXG4gICAgdXB2YXJzOiB1cHZhcnMsXG4gICAgc2NvcGVWYWx1ZXM6IGxheW91dC5zY29wZT8uKCkgPz8gbnVsbCxcbiAgICBpc1N0cmljdE1vZGU6IGxheW91dC5pc1N0cmljdE1vZGUsXG4gICAgbW9kdWxlTmFtZTogbGF5b3V0Lm1vZHVsZU5hbWUsXG4gICAgb3duZXI6IGxheW91dC5vd25lcixcbiAgICBzaXplOiBzeW1ib2xzLmxlbmd0aCxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV2YWxTeW1ib2xzKGxheW91dDogTGF5b3V0V2l0aENvbnRleHQpOiBPcHRpb248c3RyaW5nW10+IHtcbiAgbGV0IHsgYmxvY2sgfSA9IGxheW91dDtcbiAgbGV0IFssIHN5bWJvbHMsIGhhc0V2YWxdID0gYmxvY2s7XG5cbiAgcmV0dXJuIGhhc0V2YWwgPyBzeW1ib2xzIDogbnVsbDtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=
import { $v0 } from '@glimmer/vm';
import { assert, deprecate } from '@glimmer/global-context';
import { expr } from '../opcode-builder/helpers/expr';
import { isGetFreeHelper } from '../opcode-builder/helpers/resolution';
import { SimpleArgs } from '../opcode-builder/helpers/shared';
import { Call, CallDynamic, Curry, PushPrimitiveReference } from '../opcode-builder/helpers/vm';
import { Compilers } from './compilers';
export const EXPRESSIONS = new Compilers();
EXPRESSIONS.add(29
/* Concat */
, (op, [, parts]) => {
  for (let part of parts) {
    expr(op, part);
  }

  op(27
  /* Concat */
  , parts.length);
});
EXPRESSIONS.add(28
/* Call */
, (op, [, expression, positional, named]) => {
  if (isGetFreeHelper(expression)) {
    op(1005
    /* ResolveHelper */
    , expression, handle => {
      Call(op, handle, positional, named);
    });
  } else {
    expr(op, expression);
    CallDynamic(op, positional, named);
  }
});
EXPRESSIONS.add(50
/* Curry */
, (op, [, expr, type, positional, named]) => {
  Curry(op, type, expr, positional, named);
});
EXPRESSIONS.add(30
/* GetSymbol */
, (op, [, sym, path]) => {
  op(21
  /* GetVariable */
  , sym);
  withPath(op, path);
});
EXPRESSIONS.add(32
/* GetTemplateSymbol */
, (op, [, sym, path]) => {
  op(1011
  /* ResolveTemplateLocal */
  , sym, handle => {
    op(29
    /* ConstantReference */
    , handle);
    withPath(op, path);
  });
});
EXPRESSIONS.add(31
/* GetStrictFree */
, (op, [, sym, _path]) => {
  op(1009
  /* ResolveFree */
  , sym, _handle => {// TODO: Implement in strict mode
  });
});
EXPRESSIONS.add(34
/* GetFreeAsComponentOrHelperHeadOrThisFallback */
, () => {
  // TODO: The logic for this opcode currently exists in STATEMENTS.Append, since
  // we want different wrapping logic depending on if we are invoking a component,
  // helper, or {{this}} fallback. Eventually we fix the opcodes so that we can
  // traverse the subexpression tree like normal in this location.
  throw new Error('unimplemented opcode');
});
EXPRESSIONS.add(36
/* GetFreeAsHelperHeadOrThisFallback */
, (op, expr) => {
  // <div id={{baz}}>
  op(1010
  /* ResolveLocal */
  , expr[1], _name => {
    op(1006
    /* ResolveOptionalHelper */
    , expr, {
      ifHelper: handle => {
        Call(op, handle, null, null);
      }
    });
  });
});
EXPRESSIONS.add(99
/* GetFreeAsDeprecatedHelperHeadOrThisFallback */
, (op, expr) => {
  // <Foo @bar={{baz}}>
  op(1010
  /* ResolveLocal */
  , expr[1], _name => {
    op(1006
    /* ResolveOptionalHelper */
    , expr, {
      ifHelper: (handle, name, moduleName) => {
        assert(expr[2] && expr[2].length === 1, '[BUG] Missing argument name');
        let arg = expr[2][0];
        deprecate(`The \`${name}\` helper was used in the \`${moduleName}\` template as \`${arg}={{${name}}}\`. ` + `This is ambigious between wanting the \`${arg}\` argument to be the \`${name}\` helper itself, ` + `or the result of invoking the \`${name}\` helper (current behavior). ` + `This implicit invocation behavior has been deprecated.\n\n` + `Instead, please explicitly invoke the helper with parenthesis, i.e. \`${arg}={{(${name})}}\`.\n\n` + `Note: the parenthesis are only required in this exact scenario where an ambiguity is present â€“ where ` + `\`${name}\` referes to a global helper (as opposed to a local variable), AND ` + `the \`${name}\` helper invocation does not take any arguments, AND ` + `this occurs in a named argument position of a component invocation.\n\n` + `We expect this combination to be quite rare, as most helpers require at least one argument. ` + `There is no need to refactor helper invocations in cases where this deprecation was not triggered.`, false, {
          id: 'argument-less-helper-paren-less-invocation'
        });
        Call(op, handle, null, null);
      }
    });
  });
});

function withPath(op, path) {
  if (path === undefined || path.length === 0) return;

  for (let i = 0; i < path.length; i++) {
    op(22
    /* GetProperty */
    , path[i]);
  }
}

EXPRESSIONS.add(27
/* Undefined */
, op => PushPrimitiveReference(op, undefined));
EXPRESSIONS.add(48
/* HasBlock */
, (op, [, block]) => {
  expr(op, block);
  op(25
  /* HasBlock */
  );
});
EXPRESSIONS.add(49
/* HasBlockParams */
, (op, [, block]) => {
  expr(op, block);
  op(24
  /* SpreadBlock */
  );
  op(61
  /* CompileBlock */
  );
  op(26
  /* HasBlockParams */
  );
});
EXPRESSIONS.add(52
/* IfInline */
, (op, [, condition, truthy, falsy]) => {
  // Push in reverse order
  expr(op, falsy);
  expr(op, truthy);
  expr(op, condition);
  op(109
  /* IfInline */
  );
});
EXPRESSIONS.add(51
/* Not */
, (op, [, value]) => {
  expr(op, value);
  op(110
  /* Not */
  );
});
EXPRESSIONS.add(53
/* GetDynamicVar */
, (op, [, expression]) => {
  expr(op, expression);
  op(111
  /* GetDynamicVar */
  );
});
EXPRESSIONS.add(54
/* Log */
, (op, [, positional]) => {
  op(0
  /* PushFrame */
  );
  SimpleArgs(op, positional, null, false);
  op(112
  /* Log */
  );
  op(1
  /* PopFrame */
  );
  op(36
  /* Fetch */
  , $v0);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
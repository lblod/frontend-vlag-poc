import { $fp, $sp } from '@glimmer/vm';
import { InvokeStaticBlock, InvokeStaticBlockWithStack, YieldBlock } from '../opcode-builder/helpers/blocks';
import { InvokeComponent, InvokeDynamicComponent, InvokeNonStaticComponent } from '../opcode-builder/helpers/components';
import { SwitchCases, Replayable, ReplayableIf } from '../opcode-builder/helpers/conditional';
import { expr } from '../opcode-builder/helpers/expr';
import { CompilePositional, SimpleArgs } from '../opcode-builder/helpers/shared';
import { Call, CallDynamic, DynamicScope, PushPrimitiveReference } from '../opcode-builder/helpers/vm';
import { evalSymbolsOperand, labelOperand, stdlibOperand } from '../opcode-builder/operands';
import { Compilers } from './compilers';
import { isGetFreeComponent, isGetFreeComponentOrHelper, isGetFreeModifier, isGetFreeOptionalComponentOrHelper } from '../opcode-builder/helpers/resolution';
import { namedBlocks } from '../utils';
export const STATEMENTS = new Compilers();
const INFLATE_ATTR_TABLE = ['class', 'id', 'value', 'name', 'type', 'style', 'href'];
const INFLATE_TAG_TABLE = ['div', 'span', 'p', 'a'];
export function inflateTagName(tagName) {
  return typeof tagName === 'string' ? tagName : INFLATE_TAG_TABLE[tagName];
}
export function inflateAttrName(attrName) {
  return typeof attrName === 'string' ? attrName : INFLATE_ATTR_TABLE[attrName];
}
STATEMENTS.add(3
/* Comment */
, (op, sexp) => op(42
/* Comment */
, sexp[1]));
STATEMENTS.add(13
/* CloseElement */
, op => op(55
/* CloseElement */
));
STATEMENTS.add(12
/* FlushElement */
, op => op(54
/* FlushElement */
));
STATEMENTS.add(4
/* Modifier */
, (op, [, expression, positional, named]) => {
  if (isGetFreeModifier(expression)) {
    op(1003
    /* ResolveModifier */
    , expression, handle => {
      op(0
      /* PushFrame */
      );
      SimpleArgs(op, positional, named, false);
      op(57
      /* Modifier */
      , handle);
      op(1
      /* PopFrame */
      );
    });
  } else {
    expr(op, expression);
    op(0
    /* PushFrame */
    );
    SimpleArgs(op, positional, named, false);
    op(33
    /* Dup */
    , $fp, 1);
    op(108
    /* DynamicModifier */
    );
    op(1
    /* PopFrame */
    );
  }
});
STATEMENTS.add(14
/* StaticAttr */
, (op, [, name, value, namespace]) => {
  op(51
  /* StaticAttr */
  , inflateAttrName(name), value, namespace !== null && namespace !== void 0 ? namespace : null);
});
STATEMENTS.add(24
/* StaticComponentAttr */
, (op, [, name, value, namespace]) => {
  op(105
  /* StaticComponentAttr */
  , inflateAttrName(name), value, namespace !== null && namespace !== void 0 ? namespace : null);
});
STATEMENTS.add(15
/* DynamicAttr */
, (op, [, name, value, namespace]) => {
  expr(op, value);
  op(52
  /* DynamicAttr */
  , inflateAttrName(name), false, namespace !== null && namespace !== void 0 ? namespace : null);
});
STATEMENTS.add(22
/* TrustingDynamicAttr */
, (op, [, name, value, namespace]) => {
  expr(op, value);
  op(52
  /* DynamicAttr */
  , inflateAttrName(name), true, namespace !== null && namespace !== void 0 ? namespace : null);
});
STATEMENTS.add(16
/* ComponentAttr */
, (op, [, name, value, namespace]) => {
  expr(op, value);
  op(53
  /* ComponentAttr */
  , inflateAttrName(name), false, namespace !== null && namespace !== void 0 ? namespace : null);
});
STATEMENTS.add(23
/* TrustingComponentAttr */
, (op, [, name, value, namespace]) => {
  expr(op, value);
  op(53
  /* ComponentAttr */
  , inflateAttrName(name), true, namespace !== null && namespace !== void 0 ? namespace : null);
});
STATEMENTS.add(10
/* OpenElement */
, (op, [, tag]) => {
  op(48
  /* OpenElement */
  , inflateTagName(tag));
});
STATEMENTS.add(11
/* OpenElementWithSplat */
, (op, [, tag]) => {
  op(89
  /* PutComponentOperations */
  );
  op(48
  /* OpenElement */
  , inflateTagName(tag));
});
STATEMENTS.add(8
/* Component */
, (op, [, expr, elementBlock, named, blocks]) => {
  if (isGetFreeComponent(expr)) {
    op(1004
    /* ResolveComponent */
    , expr, component => {
      InvokeComponent(op, component, elementBlock, null, named, blocks);
    });
  } else {
    // otherwise, the component name was an expression, so resolve the expression
    // and invoke it as a dynamic component
    InvokeDynamicComponent(op, expr, elementBlock, null, named, blocks, true, true);
  }
});
STATEMENTS.add(18
/* Yield */
, (op, [, to, params]) => YieldBlock(op, to, params));
STATEMENTS.add(17
/* AttrSplat */
, (op, [, to]) => YieldBlock(op, to, null));
STATEMENTS.add(26
/* Debugger */
, (op, [, evalInfo]) => op(103
/* Debugger */
, evalSymbolsOperand(), evalInfo));
STATEMENTS.add(1
/* Append */
, (op, [, value]) => {
  // Special case for static values
  if (!Array.isArray(value)) {
    op(41
    /* Text */
    , value === null || value === undefined ? '' : String(value));
  } else if (isGetFreeOptionalComponentOrHelper(value)) {
    op(1008
    /* ResolveOptionalComponentOrHelper */
    , value, {
      ifComponent(component) {
        InvokeComponent(op, component, null, null, null, null);
      },

      ifHelper(handle) {
        op(0
        /* PushFrame */
        );
        Call(op, handle, null, null);
        op(3
        /* InvokeStatic */
        , stdlibOperand('cautious-non-dynamic-append'));
        op(1
        /* PopFrame */
        );
      },

      ifValue(handle) {
        op(0
        /* PushFrame */
        );
        op(29
        /* ConstantReference */
        , handle);
        op(3
        /* InvokeStatic */
        , stdlibOperand('cautious-non-dynamic-append'));
        op(1
        /* PopFrame */
        );
      }

    });
  } else if (value[0] === 28
  /* Call */
  ) {
      let [, expression, positional, named] = value;

      if (isGetFreeComponentOrHelper(expression)) {
        op(1007
        /* ResolveComponentOrHelper */
        , expression, {
          ifComponent(component) {
            InvokeComponent(op, component, null, positional, hashToArgs(named), null);
          },

          ifHelper(handle) {
            op(0
            /* PushFrame */
            );
            Call(op, handle, positional, named);
            op(3
            /* InvokeStatic */
            , stdlibOperand('cautious-non-dynamic-append'));
            op(1
            /* PopFrame */
            );
          }

        });
      } else {
        SwitchCases(op, () => {
          expr(op, expression);
          op(106
          /* DynamicContentType */
          );
        }, when => {
          when(0
          /* Component */
          , () => {
            op(81
            /* ResolveCurriedComponent */
            );
            op(79
            /* PushDynamicComponentInstance */
            );
            InvokeNonStaticComponent(op, {
              capabilities: true,
              elementBlock: null,
              positional,
              named,
              atNames: false,
              blocks: namedBlocks(null)
            });
          });
          when(1
          /* Helper */
          , () => {
            CallDynamic(op, positional, named, () => {
              op(3
              /* InvokeStatic */
              , stdlibOperand('cautious-non-dynamic-append'));
            });
          });
        });
      }
    } else {
    op(0
    /* PushFrame */
    );
    expr(op, value);
    op(3
    /* InvokeStatic */
    , stdlibOperand('cautious-append'));
    op(1
    /* PopFrame */
    );
  }
});
STATEMENTS.add(2
/* TrustingAppend */
, (op, [, value]) => {
  if (!Array.isArray(value)) {
    op(41
    /* Text */
    , value === null || value === undefined ? '' : String(value));
  } else {
    op(0
    /* PushFrame */
    );
    expr(op, value);
    op(3
    /* InvokeStatic */
    , stdlibOperand('trusting-append'));
    op(1
    /* PopFrame */
    );
  }
});
STATEMENTS.add(6
/* Block */
, (op, [, expr, positional, named, blocks]) => {
  if (isGetFreeComponent(expr)) {
    op(1004
    /* ResolveComponent */
    , expr, component => {
      InvokeComponent(op, component, null, positional, hashToArgs(named), blocks);
    });
  } else {
    InvokeDynamicComponent(op, expr, null, positional, named, blocks, false, false);
  }
});
STATEMENTS.add(40
/* InElement */
, (op, [, block, guid, destination, insertBefore]) => {
  ReplayableIf(op, () => {
    expr(op, guid);

    if (insertBefore === undefined) {
      PushPrimitiveReference(op, undefined);
    } else {
      expr(op, insertBefore);
    }

    expr(op, destination);
    op(33
    /* Dup */
    , $sp, 0);
    return 4;
  }, () => {
    op(50
    /* PushRemoteElement */
    );
    InvokeStaticBlock(op, block);
    op(56
    /* PopRemoteElement */
    );
  });
});
STATEMENTS.add(41
/* If */
, (op, [, condition, block, inverse]) => ReplayableIf(op, () => {
  expr(op, condition);
  op(71
  /* ToBoolean */
  );
  return 1;
}, () => {
  InvokeStaticBlock(op, block);
}, inverse ? () => {
  InvokeStaticBlock(op, inverse);
} : undefined));
STATEMENTS.add(42
/* Each */
, (op, [, value, key, block, inverse]) => Replayable(op, () => {
  if (key) {
    expr(op, key);
  } else {
    PushPrimitiveReference(op, null);
  }

  expr(op, value);
  return 2;
}, () => {
  op(72
  /* EnterList */
  , labelOperand('BODY'), labelOperand('ELSE'));
  op(0
  /* PushFrame */
  );
  op(33
  /* Dup */
  , $fp, 1);
  op(6
  /* ReturnTo */
  , labelOperand('ITER'));
  op(1000
  /* Label */
  , 'ITER');
  op(74
  /* Iterate */
  , labelOperand('BREAK'));
  op(1000
  /* Label */
  , 'BODY');
  InvokeStaticBlockWithStack(op, block, 2);
  op(34
  /* Pop */
  , 2);
  op(4
  /* Jump */
  , labelOperand('FINALLY'));
  op(1000
  /* Label */
  , 'BREAK');
  op(1
  /* PopFrame */
  );
  op(73
  /* ExitList */
  );
  op(4
  /* Jump */
  , labelOperand('FINALLY'));
  op(1000
  /* Label */
  , 'ELSE');

  if (inverse) {
    InvokeStaticBlock(op, inverse);
  }
}));
STATEMENTS.add(43
/* With */
, (op, [, value, block, inverse]) => {
  ReplayableIf(op, () => {
    expr(op, value);
    op(33
    /* Dup */
    , $sp, 0);
    op(71
    /* ToBoolean */
    );
    return 2;
  }, () => {
    InvokeStaticBlockWithStack(op, block, 1);
  }, () => {
    if (inverse) {
      InvokeStaticBlock(op, inverse);
    }
  });
});
STATEMENTS.add(44
/* Let */
, (op, [, positional, block]) => {
  let count = CompilePositional(op, positional);
  InvokeStaticBlockWithStack(op, block, count);
});
STATEMENTS.add(45
/* WithDynamicVars */
, (op, [, named, block]) => {
  if (named) {
    let [names, expressions] = named;
    CompilePositional(op, expressions);
    DynamicScope(op, names, () => {
      InvokeStaticBlock(op, block);
    });
  } else {
    InvokeStaticBlock(op, block);
  }
});
STATEMENTS.add(46
/* InvokeComponent */
, (op, [, expr, positional, named, blocks]) => {
  if (isGetFreeComponent(expr)) {
    op(1004
    /* ResolveComponent */
    , expr, component => {
      InvokeComponent(op, component, null, positional, hashToArgs(named), blocks);
    });
  } else {
    InvokeDynamicComponent(op, expr, null, positional, named, blocks, false, false);
  }
});

function hashToArgs(hash) {
  if (hash === null) return null;
  let names = hash[0].map(key => `@${key}`);
  return [names, hash[1]];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
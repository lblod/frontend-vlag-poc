import { dict, assign } from '@glimmer/util';
export class NamedBlocksImpl {
  constructor(blocks) {
    this.blocks = blocks;
    this.names = blocks ? Object.keys(blocks) : [];
  }

  get(name) {
    if (!this.blocks) return null;
    return this.blocks[name] || null;
  }

  has(name) {
    let {
      blocks
    } = this;
    return blocks !== null && name in blocks;
  }

  with(name, block) {
    let {
      blocks
    } = this;

    if (blocks) {
      return new NamedBlocksImpl(assign({}, blocks, {
        [name]: block
      }));
    } else {
      return new NamedBlocksImpl({
        [name]: block
      });
    }
  }

  get hasAny() {
    return this.blocks !== null;
  }

}
export const EMPTY_BLOCKS = new NamedBlocksImpl(null);
export function namedBlocks(blocks) {
  if (blocks === null) {
    return EMPTY_BLOCKS;
  }

  let out = dict();
  let [keys, values] = blocks;

  for (let i = 0; i < keys.length; i++) {
    out[keys[i]] = values[i];
  }

  return new NamedBlocksImpl(out);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL29wY29kZS1jb21waWxlci9saWIvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsU0FBUyxJQUFULEVBQWUsTUFBZixRQUE2QixlQUE3QjtBQU1BLE9BQU0sTUFBTyxlQUFQLENBQXNCO0FBRzFCLEVBQUEsV0FBQSxDQUFvQixNQUFwQixFQUFtRDtBQUEvQixTQUFBLE1BQUEsR0FBQSxNQUFBO0FBQ2xCLFNBQUssS0FBTCxHQUFhLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBUCxDQUFZLE1BQVosQ0FBSCxHQUF5QixFQUE1QztBQUNEOztBQUVELEVBQUEsR0FBRyxDQUFDLElBQUQsRUFBYTtBQUNkLFFBQUksQ0FBQyxLQUFLLE1BQVYsRUFBa0IsT0FBTyxJQUFQO0FBRWxCLFdBQU8sS0FBSyxNQUFMLENBQVksSUFBWixLQUFxQixJQUE1QjtBQUNEOztBQUVELEVBQUEsR0FBRyxDQUFDLElBQUQsRUFBYTtBQUNkLFFBQUk7QUFBRSxNQUFBO0FBQUYsUUFBYSxJQUFqQjtBQUNBLFdBQU8sTUFBTSxLQUFLLElBQVgsSUFBbUIsSUFBSSxJQUFJLE1BQWxDO0FBQ0Q7O0FBRUQsRUFBQSxJQUFJLENBQUMsSUFBRCxFQUFlLEtBQWYsRUFBbUQ7QUFDckQsUUFBSTtBQUFFLE1BQUE7QUFBRixRQUFhLElBQWpCOztBQUVBLFFBQUksTUFBSixFQUFZO0FBQ1YsYUFBTyxJQUFJLGVBQUosQ0FBb0IsTUFBTSxDQUFDLEVBQUQsRUFBSyxNQUFMLEVBQWE7QUFBRSxTQUFDLElBQUQsR0FBUTtBQUFWLE9BQWIsQ0FBMUIsQ0FBUDtBQUNELEtBRkQsTUFFTztBQUNMLGFBQU8sSUFBSSxlQUFKLENBQW9CO0FBQUUsU0FBQyxJQUFELEdBQVE7QUFBVixPQUFwQixDQUFQO0FBQ0Q7QUFDRjs7QUFFRCxNQUFJLE1BQUosR0FBVTtBQUNSLFdBQU8sS0FBSyxNQUFMLEtBQWdCLElBQXZCO0FBQ0Q7O0FBOUJ5QjtBQWlDNUIsT0FBTyxNQUFNLFlBQVksR0FBRyxJQUFJLGVBQUosQ0FBb0IsSUFBcEIsQ0FBckI7QUFFUCxPQUFNLFNBQVUsV0FBVixDQUFzQixNQUF0QixFQUFvRDtBQUN4RCxNQUFJLE1BQU0sS0FBSyxJQUFmLEVBQXFCO0FBQ25CLFdBQU8sWUFBUDtBQUNEOztBQUVELE1BQUksR0FBRyxHQUFvQixJQUFJLEVBQS9CO0FBRUEsTUFBSSxDQUFDLElBQUQsRUFBTyxNQUFQLElBQWlCLE1BQXJCOztBQUVBLE9BQUssSUFBSSxDQUFDLEdBQUcsQ0FBYixFQUFnQixDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQXpCLEVBQWlDLENBQUMsRUFBbEMsRUFBc0M7QUFDcEMsSUFBQSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUQsQ0FBTCxDQUFILEdBQWUsTUFBTSxDQUFDLENBQUQsQ0FBckI7QUFDRDs7QUFFRCxTQUFPLElBQUksZUFBSixDQUFvQixHQUFwQixDQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOYW1lZEJsb2NrcywgT3B0aW9uLCBXaXJlRm9ybWF0LCBTZXJpYWxpemVkSW5saW5lQmxvY2sgfSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcbmltcG9ydCB7IGRpY3QsIGFzc2lnbiB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuXG5pbnRlcmZhY2UgTmFtZWRCbG9ja3NEaWN0IHtcbiAgW2tleTogc3RyaW5nXTogT3B0aW9uPFdpcmVGb3JtYXQuU2VyaWFsaXplZElubGluZUJsb2NrPjtcbn1cblxuZXhwb3J0IGNsYXNzIE5hbWVkQmxvY2tzSW1wbCBpbXBsZW1lbnRzIE5hbWVkQmxvY2tzIHtcbiAgcHVibGljIG5hbWVzOiBzdHJpbmdbXTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGJsb2NrczogT3B0aW9uPE5hbWVkQmxvY2tzRGljdD4pIHtcbiAgICB0aGlzLm5hbWVzID0gYmxvY2tzID8gT2JqZWN0LmtleXMoYmxvY2tzKSA6IFtdO1xuICB9XG5cbiAgZ2V0KG5hbWU6IHN0cmluZyk6IE9wdGlvbjxTZXJpYWxpemVkSW5saW5lQmxvY2s+IHtcbiAgICBpZiAoIXRoaXMuYmxvY2tzKSByZXR1cm4gbnVsbDtcblxuICAgIHJldHVybiB0aGlzLmJsb2Nrc1tuYW1lXSB8fCBudWxsO1xuICB9XG5cbiAgaGFzKG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGxldCB7IGJsb2NrcyB9ID0gdGhpcztcbiAgICByZXR1cm4gYmxvY2tzICE9PSBudWxsICYmIG5hbWUgaW4gYmxvY2tzO1xuICB9XG5cbiAgd2l0aChuYW1lOiBzdHJpbmcsIGJsb2NrOiBPcHRpb248U2VyaWFsaXplZElubGluZUJsb2NrPik6IE5hbWVkQmxvY2tzIHtcbiAgICBsZXQgeyBibG9ja3MgfSA9IHRoaXM7XG5cbiAgICBpZiAoYmxvY2tzKSB7XG4gICAgICByZXR1cm4gbmV3IE5hbWVkQmxvY2tzSW1wbChhc3NpZ24oe30sIGJsb2NrcywgeyBbbmFtZV06IGJsb2NrIH0pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBOYW1lZEJsb2Nrc0ltcGwoeyBbbmFtZV06IGJsb2NrIH0pO1xuICAgIH1cbiAgfVxuXG4gIGdldCBoYXNBbnkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuYmxvY2tzICE9PSBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBFTVBUWV9CTE9DS1MgPSBuZXcgTmFtZWRCbG9ja3NJbXBsKG51bGwpO1xuXG5leHBvcnQgZnVuY3Rpb24gbmFtZWRCbG9ja3MoYmxvY2tzOiBXaXJlRm9ybWF0LkNvcmUuQmxvY2tzKTogTmFtZWRCbG9ja3Mge1xuICBpZiAoYmxvY2tzID09PSBudWxsKSB7XG4gICAgcmV0dXJuIEVNUFRZX0JMT0NLUztcbiAgfVxuXG4gIGxldCBvdXQ6IE5hbWVkQmxvY2tzRGljdCA9IGRpY3QoKTtcblxuICBsZXQgW2tleXMsIHZhbHVlc10gPSBibG9ja3M7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgb3V0W2tleXNbaV1dID0gdmFsdWVzW2ldO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBOYW1lZEJsb2Nrc0ltcGwob3V0KTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

import { InstructionEncoderImpl } from '@glimmer/encoder';
import { isMachineOp } from '@glimmer/vm';
import { Stack, dict, EMPTY_STRING_ARRAY, encodeHandle, assert } from '@glimmer/util';
import { resolveComponent, resolveComponentOrHelper, resolveHelper, resolveModifier, resolveOptionalComponentOrHelper, resolveOptionalHelper } from './helpers/resolution';
import { compilableBlock } from '../compilable-template';
import { DEBUG } from '@glimmer/env';
export var Labels = /*#__PURE__*/function () {
  function Labels() {
    this.labels = dict();
    this.targets = [];
  }

  var _proto = Labels.prototype;

  _proto.label = function label(name, index) {
    this.labels[name] = index;
  };

  _proto.target = function target(at, _target) {
    this.targets.push({
      at: at,
      target: _target
    });
  };

  _proto.patch = function patch(heap) {
    var targets = this.targets,
        labels = this.labels;

    for (var i = 0; i < targets.length; i++) {
      var _targets$i = targets[i],
          at = _targets$i.at,
          target = _targets$i.target;
      var address = labels[target] - at;
      false && assert(heap.getbyaddr(at) === -1, 'Expected heap to contain a placeholder, but it did not');
      heap.setbyaddr(at, address);
    }
  };

  return Labels;
}();
export function encodeOp(encoder, constants, resolver, meta, op) {
  if (isBuilderOpcode(op[0])) {
    var type = op[0],
        operands = op.slice(1);
    encoder.push.apply(encoder, [constants, type].concat(operands));
  } else {
    switch (op[0]) {
      case 1000
      /* Label */
      :
        return encoder.label(op[1]);

      case 1001
      /* StartLabels */
      :
        return encoder.startLabels();

      case 1002
      /* StopLabels */
      :
        return encoder.stopLabels();

      case 1004
      /* ResolveComponent */
      :
        return resolveComponent(resolver, constants, meta, op);

      case 1003
      /* ResolveModifier */
      :
        return resolveModifier(resolver, constants, meta, op);

      case 1005
      /* ResolveHelper */
      :
        return resolveHelper(resolver, constants, meta, op);

      case 1007
      /* ResolveComponentOrHelper */
      :
        return resolveComponentOrHelper(resolver, constants, meta, op);

      case 1006
      /* ResolveOptionalHelper */
      :
        return resolveOptionalHelper(resolver, constants, meta, op);

      case 1008
      /* ResolveOptionalComponentOrHelper */
      :
        return resolveOptionalComponentOrHelper(resolver, constants, meta, op);

      case 1010
      /* ResolveLocal */
      :
        var freeVar = op[1];
        var name = meta.upvars[freeVar];
        var andThen = op[2];
        andThen(name, meta.moduleName);
        break;

      case 1011
      /* ResolveTemplateLocal */
      :
        var valueIndex = op[1],
            then = op[2];
        var value = meta.scopeValues[valueIndex];
        then(constants.value(value));
        break;

      case 1009
      /* ResolveFree */
      :
        if (DEBUG) {
          var upvarIndex = op[1];
          var freeName = meta.upvars[upvarIndex];
          throw new Error("Attempted to resolve a value in a strict mode template, but that value was not in scope: " + freeName);
        }

        break;

      default:
        throw new Error("Unexpected high level opcode " + op[0]);
    }
  }
}
export var EncoderImpl = /*#__PURE__*/function () {
  function EncoderImpl(heap, meta, stdlib) {
    this.heap = heap;
    this.meta = meta;
    this.stdlib = stdlib;
    this.labelsStack = new Stack();
    this.encoder = new InstructionEncoderImpl([]);
    this.errors = [];
    this.handle = heap.malloc();
  }

  var _proto2 = EncoderImpl.prototype;

  _proto2.error = function error(_error) {
    this.encoder.encode(30
    /* Primitive */
    , 0);
    this.errors.push(_error);
  };

  _proto2.commit = function commit(size) {
    var handle = this.handle;
    this.heap.push(5
    /* Return */
    | 1024
    /* MACHINE_MASK */
    );
    this.heap.finishMalloc(handle, size);

    if (this.errors.length) {
      return {
        errors: this.errors,
        handle: handle
      };
    } else {
      return handle;
    }
  };

  _proto2.push = function push(constants, type) {
    var heap = this.heap;

    if (DEBUG && type > 255
    /* TYPE_SIZE */
    ) {
        throw new Error("Opcode type over 8-bits. Got " + type + ".");
      }

    var machine = isMachineOp(type) ? 1024
    /* MACHINE_MASK */
    : 0;
    var first = type | machine | (arguments.length <= 2 ? 0 : arguments.length - 2) << 8
    /* ARG_SHIFT */
    ;
    heap.push(first);

    for (var i = 0; i < (arguments.length <= 2 ? 0 : arguments.length - 2); i++) {
      var op = i + 2 < 2 || arguments.length <= i + 2 ? undefined : arguments[i + 2];
      heap.push(this.operand(constants, op));
    }
  };

  _proto2.operand = function operand(constants, _operand) {
    if (typeof _operand === 'number') {
      return _operand;
    }

    if (typeof _operand === 'object' && _operand !== null) {
      if (Array.isArray(_operand)) {
        return encodeHandle(constants.array(_operand));
      } else {
        switch (_operand.type) {
          case 1
          /* Label */
          :
            this.currentLabels.target(this.heap.offset, _operand.value);
            return -1;

          case 2
          /* IsStrictMode */
          :
            return encodeHandle(constants.value(this.meta.isStrictMode));

          case 3
          /* EvalSymbols */
          :
            return encodeHandle(constants.array(this.meta.evalSymbols || EMPTY_STRING_ARRAY));

          case 4
          /* Block */
          :
            return encodeHandle(constants.value(compilableBlock(_operand.value, this.meta)));

          case 5
          /* StdLib */
          :
            return this.stdlib[_operand.value];

          case 6
          /* NonSmallInt */
          :
          case 7
          /* SymbolTable */
          :
          case 8
          /* Layout */
          :
            return constants.value(_operand.value);
        }
      }
    }

    return encodeHandle(constants.value(_operand));
  };

  _proto2.label = function label(name) {
    this.currentLabels.label(name, this.heap.offset + 1);
  };

  _proto2.startLabels = function startLabels() {
    this.labelsStack.push(new Labels());
  };

  _proto2.stopLabels = function stopLabels() {
    var label = this.labelsStack.pop();
    label.patch(this.heap);
  };

  _createClass(EncoderImpl, [{
    key: "currentLabels",
    get: function get() {
      return this.labelsStack.current;
    }
  }]);

  return EncoderImpl;
}();

function isBuilderOpcode(op) {
  return op < 1000
  /* Start */
  ;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
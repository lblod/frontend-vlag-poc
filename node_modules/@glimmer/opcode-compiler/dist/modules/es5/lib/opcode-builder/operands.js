import { assert, isSmallInt } from '@glimmer/util';
export function labelOperand(value) {
  return {
    type: 1
    /* Label */
    ,
    value: value
  };
}
export function evalSymbolsOperand() {
  return {
    type: 3
    /* EvalSymbols */
    ,
    value: undefined
  };
}
export function isStrictMode() {
  return {
    type: 2
    /* IsStrictMode */
    ,
    value: undefined
  };
}
export function blockOperand(value) {
  return {
    type: 4
    /* Block */
    ,
    value: value
  };
}
export function stdlibOperand(value) {
  return {
    type: 5
    /* StdLib */
    ,
    value: value
  };
}
export function nonSmallIntOperand(value) {
  false && assert(!isSmallInt(value), 'Attempted to make a operand for an int that was not a small int, you should encode this as an immediate');
  return {
    type: 6
    /* NonSmallInt */
    ,
    value: value
  };
}
export function symbolTableOperand(value) {
  return {
    type: 7
    /* SymbolTable */
    ,
    value: value
  };
}
export function layoutOperand(value) {
  return {
    type: 8
    /* Layout */
    ,
    value: value
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL29wY29kZS1jb21waWxlci9saWIvb3Bjb2RlLWJ1aWxkZXIvb3BlcmFuZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZUEsU0FBQSxNQUFBLEVBQUEsVUFBQSxRQUFBLGVBQUE7QUFFQSxPQUFNLFNBQUEsWUFBQSxDQUFBLEtBQUEsRUFBb0M7QUFDeEMsU0FBTztBQUFFLElBQUEsSUFBSSxFQUFBO0FBQUE7QUFBTjtBQUFnQyxJQUFBLEtBQUEsRUFBQTtBQUFoQyxHQUFQO0FBQ0Q7QUFFRCxPQUFNLFNBQUEsa0JBQUEsR0FBNEI7QUFDaEMsU0FBTztBQUFFLElBQUEsSUFBSSxFQUFBO0FBQUE7QUFBTjtBQUFzQyxJQUFBLEtBQUssRUFBRTtBQUE3QyxHQUFQO0FBQ0Q7QUFFRCxPQUFNLFNBQUEsWUFBQSxHQUFzQjtBQUMxQixTQUFPO0FBQUUsSUFBQSxJQUFJLEVBQUE7QUFBQTtBQUFOO0FBQXVDLElBQUEsS0FBSyxFQUFFO0FBQTlDLEdBQVA7QUFDRDtBQUVELE9BQU0sU0FBQSxZQUFBLENBQUEsS0FBQSxFQUFxRTtBQUN6RSxTQUFPO0FBQUUsSUFBQSxJQUFJLEVBQUE7QUFBQTtBQUFOO0FBQWdDLElBQUEsS0FBQSxFQUFBO0FBQWhDLEdBQVA7QUFDRDtBQUVELE9BQU0sU0FBQSxhQUFBLENBQUEsS0FBQSxFQU02QjtBQUVqQyxTQUFPO0FBQUUsSUFBQSxJQUFJLEVBQUE7QUFBQTtBQUFOO0FBQWlDLElBQUEsS0FBQSxFQUFBO0FBQWpDLEdBQVA7QUFDRDtBQUVELE9BQU0sU0FBQSxrQkFBQSxDQUFBLEtBQUEsRUFBMEM7QUFBQSxXQUM5QyxNQUFNLENBQ0osQ0FBQyxVQUFVLENBRFAsS0FDTyxDQURQLEVBRHdDLHlHQUN4QyxDQUR3QztBQUs5QyxTQUFPO0FBQUUsSUFBQSxJQUFJLEVBQUE7QUFBQTtBQUFOO0FBQXNDLElBQUEsS0FBQSxFQUFBO0FBQXRDLEdBQVA7QUFDRDtBQUVELE9BQU0sU0FBQSxrQkFBQSxDQUFBLEtBQUEsRUFBK0M7QUFDbkQsU0FBTztBQUFFLElBQUEsSUFBSSxFQUFBO0FBQUE7QUFBTjtBQUFzQyxJQUFBLEtBQUEsRUFBQTtBQUF0QyxHQUFQO0FBQ0Q7QUFFRCxPQUFNLFNBQUEsYUFBQSxDQUFBLEtBQUEsRUFBaUQ7QUFDckQsU0FBTztBQUFFLElBQUEsSUFBSSxFQUFBO0FBQUE7QUFBTjtBQUFpQyxJQUFBLEtBQUEsRUFBQTtBQUFqQyxHQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBMYWJlbE9wZXJhbmQsXG4gIFNlcmlhbGl6ZWRJbmxpbmVCbG9jayxcbiAgRXZhbFN5bWJvbHNPcGVyYW5kLFxuICBIaWdoTGV2ZWxPcGVyYW5kLFxuICBCbG9ja09wZXJhbmQsXG4gIFN0ZExpYk9wZXJhbmQsXG4gIE5vblNtYWxsSW50T3BlcmFuZCxcbiAgU2VyaWFsaXplZEJsb2NrLFxuICBTeW1ib2xUYWJsZSxcbiAgU3ltYm9sVGFibGVPcGVyYW5kLFxuICBDb21waWxhYmxlVGVtcGxhdGUsXG4gIExheW91dE9wZXJhbmQsXG4gIElzU3RyaWN0TW9kZU9wZXJhbmQsXG59IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgYXNzZXJ0LCBpc1NtYWxsSW50IH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBsYWJlbE9wZXJhbmQodmFsdWU6IHN0cmluZyk6IExhYmVsT3BlcmFuZCB7XG4gIHJldHVybiB7IHR5cGU6IEhpZ2hMZXZlbE9wZXJhbmQuTGFiZWwsIHZhbHVlIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBldmFsU3ltYm9sc09wZXJhbmQoKTogRXZhbFN5bWJvbHNPcGVyYW5kIHtcbiAgcmV0dXJuIHsgdHlwZTogSGlnaExldmVsT3BlcmFuZC5FdmFsU3ltYm9scywgdmFsdWU6IHVuZGVmaW5lZCB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTdHJpY3RNb2RlKCk6IElzU3RyaWN0TW9kZU9wZXJhbmQge1xuICByZXR1cm4geyB0eXBlOiBIaWdoTGV2ZWxPcGVyYW5kLklzU3RyaWN0TW9kZSwgdmFsdWU6IHVuZGVmaW5lZCB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmxvY2tPcGVyYW5kKHZhbHVlOiBTZXJpYWxpemVkSW5saW5lQmxvY2sgfCBTZXJpYWxpemVkQmxvY2spOiBCbG9ja09wZXJhbmQge1xuICByZXR1cm4geyB0eXBlOiBIaWdoTGV2ZWxPcGVyYW5kLkJsb2NrLCB2YWx1ZSB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RkbGliT3BlcmFuZChcbiAgdmFsdWU6XG4gICAgfCAnbWFpbidcbiAgICB8ICd0cnVzdGluZy1hcHBlbmQnXG4gICAgfCAnY2F1dGlvdXMtYXBwZW5kJ1xuICAgIHwgJ3RydXN0aW5nLW5vbi1keW5hbWljLWFwcGVuZCdcbiAgICB8ICdjYXV0aW91cy1ub24tZHluYW1pYy1hcHBlbmQnXG4pOiBTdGRMaWJPcGVyYW5kIHtcbiAgcmV0dXJuIHsgdHlwZTogSGlnaExldmVsT3BlcmFuZC5TdGRMaWIsIHZhbHVlIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBub25TbWFsbEludE9wZXJhbmQodmFsdWU6IG51bWJlcik6IE5vblNtYWxsSW50T3BlcmFuZCB7XG4gIGFzc2VydChcbiAgICAhaXNTbWFsbEludCh2YWx1ZSksXG4gICAgJ0F0dGVtcHRlZCB0byBtYWtlIGEgb3BlcmFuZCBmb3IgYW4gaW50IHRoYXQgd2FzIG5vdCBhIHNtYWxsIGludCwgeW91IHNob3VsZCBlbmNvZGUgdGhpcyBhcyBhbiBpbW1lZGlhdGUnXG4gICk7XG4gIHJldHVybiB7IHR5cGU6IEhpZ2hMZXZlbE9wZXJhbmQuTm9uU21hbGxJbnQsIHZhbHVlIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzeW1ib2xUYWJsZU9wZXJhbmQodmFsdWU6IFN5bWJvbFRhYmxlKTogU3ltYm9sVGFibGVPcGVyYW5kIHtcbiAgcmV0dXJuIHsgdHlwZTogSGlnaExldmVsT3BlcmFuZC5TeW1ib2xUYWJsZSwgdmFsdWUgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxheW91dE9wZXJhbmQodmFsdWU6IENvbXBpbGFibGVUZW1wbGF0ZSk6IExheW91dE9wZXJhbmQge1xuICByZXR1cm4geyB0eXBlOiBIaWdoTGV2ZWxPcGVyYW5kLkxheW91dCwgdmFsdWUgfTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=
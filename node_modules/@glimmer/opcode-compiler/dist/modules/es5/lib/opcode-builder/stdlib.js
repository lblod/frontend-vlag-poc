function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

export var StdLib = /*#__PURE__*/function () {
  function StdLib(main, trustingGuardedAppend, cautiousGuardedAppend, trustingNonDynamicAppend, cautiousNonDynamicAppend) {
    this.main = main;
    this.trustingGuardedAppend = trustingGuardedAppend;
    this.cautiousGuardedAppend = cautiousGuardedAppend;
    this.trustingNonDynamicAppend = trustingNonDynamicAppend;
    this.cautiousNonDynamicAppend = cautiousNonDynamicAppend;
  }

  var _proto = StdLib.prototype;

  _proto.getAppend = function getAppend(trusting) {
    return trusting ? this.trustingGuardedAppend : this.cautiousGuardedAppend;
  };

  _createClass(StdLib, [{
    key: 'trusting-append',
    get: function get() {
      return this.trustingGuardedAppend;
    }
  }, {
    key: 'cautious-append',
    get: function get() {
      return this.cautiousGuardedAppend;
    }
  }, {
    key: 'trusting-non-dynamic-append',
    get: function get() {
      return this.trustingNonDynamicAppend;
    }
  }, {
    key: 'cautious-non-dynamic-append',
    get: function get() {
      return this.cautiousNonDynamicAppend;
    }
  }]);

  return StdLib;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL29wY29kZS1jb21waWxlci9saWIvb3Bjb2RlLWJ1aWxkZXIvc3RkbGliLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxXQUFNLE1BQU47QUFDRSxrQkFBQSxJQUFBLEVBQUEscUJBQUEsRUFBQSxxQkFBQSxFQUFBLHdCQUFBLEVBQUEsd0JBQUEsRUFLMEM7QUFKakMsU0FBQSxJQUFBLEdBQUEsSUFBQTtBQUNDLFNBQUEscUJBQUEsR0FBQSxxQkFBQTtBQUNBLFNBQUEscUJBQUEsR0FBQSxxQkFBQTtBQUNBLFNBQUEsd0JBQUEsR0FBQSx3QkFBQTtBQUNBLFNBQUEsd0JBQUEsR0FBQSx3QkFBQTtBQUNOOztBQVBOOztBQUFBLFNBeUJFLFNBekJGLEdBeUJFLG1CQUFTLFFBQVQsRUFBMkI7QUFDekIsV0FBTyxRQUFRLEdBQUcsS0FBSCxxQkFBQSxHQUFnQyxLQUEvQyxxQkFBQTtBQUNELEdBM0JIOztBQUFBO0FBQUEsU0FTRSxpQkFURjtBQUFBLHdCQVN1QjtBQUNuQixhQUFPLEtBQVAscUJBQUE7QUFDRDtBQVhIO0FBQUEsU0FhRSxpQkFiRjtBQUFBLHdCQWF1QjtBQUNuQixhQUFPLEtBQVAscUJBQUE7QUFDRDtBQWZIO0FBQUEsU0FpQkUsNkJBakJGO0FBQUEsd0JBaUJtQztBQUMvQixhQUFPLEtBQVAsd0JBQUE7QUFDRDtBQW5CSDtBQUFBLFNBcUJFLDZCQXJCRjtBQUFBLHdCQXFCbUM7QUFDL0IsYUFBTyxLQUFQLHdCQUFBO0FBQ0Q7QUF2Qkg7O0FBQUE7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBTdGRMaWIge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgbWFpbjogbnVtYmVyLFxuICAgIHByaXZhdGUgdHJ1c3RpbmdHdWFyZGVkQXBwZW5kOiBudW1iZXIsXG4gICAgcHJpdmF0ZSBjYXV0aW91c0d1YXJkZWRBcHBlbmQ6IG51bWJlcixcbiAgICBwcml2YXRlIHRydXN0aW5nTm9uRHluYW1pY0FwcGVuZDogbnVtYmVyLFxuICAgIHByaXZhdGUgY2F1dGlvdXNOb25EeW5hbWljQXBwZW5kOiBudW1iZXJcbiAgKSB7fVxuXG4gIGdldCAndHJ1c3RpbmctYXBwZW5kJygpIHtcbiAgICByZXR1cm4gdGhpcy50cnVzdGluZ0d1YXJkZWRBcHBlbmQ7XG4gIH1cblxuICBnZXQgJ2NhdXRpb3VzLWFwcGVuZCcoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2F1dGlvdXNHdWFyZGVkQXBwZW5kO1xuICB9XG5cbiAgZ2V0ICd0cnVzdGluZy1ub24tZHluYW1pYy1hcHBlbmQnKCkge1xuICAgIHJldHVybiB0aGlzLnRydXN0aW5nTm9uRHluYW1pY0FwcGVuZDtcbiAgfVxuXG4gIGdldCAnY2F1dGlvdXMtbm9uLWR5bmFtaWMtYXBwZW5kJygpIHtcbiAgICByZXR1cm4gdGhpcy5jYXV0aW91c05vbkR5bmFtaWNBcHBlbmQ7XG4gIH1cblxuICBnZXRBcHBlbmQodHJ1c3Rpbmc6IGJvb2xlYW4pIHtcbiAgICByZXR1cm4gdHJ1c3RpbmcgPyB0aGlzLnRydXN0aW5nR3VhcmRlZEFwcGVuZCA6IHRoaXMuY2F1dGlvdXNHdWFyZGVkQXBwZW5kO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9
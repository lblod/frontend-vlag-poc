import { DEBUG } from '@glimmer/env';
import { assert, debugToString } from '@glimmer/util';

function isGetLikeTuple(opcode) {
  return Array.isArray(opcode) && opcode.length === 2;
}

function makeResolutionTypeVerifier(typeToVerify) {
  return function (opcode) {
    if (!isGetLikeTuple(opcode)) return false;
    var type = opcode[0];
    return type === 31
    /* GetStrictFree */
    || type === 32
    /* GetTemplateSymbol */
    || type === typeToVerify;
  };
}

export var isGetFreeComponent = makeResolutionTypeVerifier(39
/* GetFreeAsComponentHead */
);
export var isGetFreeModifier = makeResolutionTypeVerifier(38
/* GetFreeAsModifierHead */
);
export var isGetFreeHelper = makeResolutionTypeVerifier(37
/* GetFreeAsHelperHead */
);
export var isGetFreeComponentOrHelper = makeResolutionTypeVerifier(35
/* GetFreeAsComponentOrHelperHead */
);
export var isGetFreeOptionalHelper = makeResolutionTypeVerifier(36
/* GetFreeAsHelperHeadOrThisFallback */
);
export function isGetFreeDeprecatedHelper(opcode) {
  return Array.isArray(opcode) && opcode[0] === 99
  /* GetFreeAsDeprecatedHelperHeadOrThisFallback */
  ;
}
export var isGetFreeOptionalComponentOrHelper = makeResolutionTypeVerifier(34
/* GetFreeAsComponentOrHelperHeadOrThisFallback */
);

function assertResolverInvariants(meta) {
  if (DEBUG) {
    if (!meta.upvars) {
      throw new Error('Attempted to resolve a component, helper, or modifier, but no free vars were found');
    }

    if (!meta.owner) {
      throw new Error('Attempted to resolve a component, helper, or modifier, but no owner was associated with the template it was being resolved from');
    }
  }

  return meta;
}
/**
 * <Foo/>
 * <Foo></Foo>
 * <Foo @arg={{true}} />
 */


export function resolveComponent(resolver, constants, meta, _ref) {
  var expr = _ref[1],
      then = _ref[2];
  false && assert(isGetFreeComponent(expr), 'Attempted to resolve a component with incorrect opcode');
  var type = expr[0];

  if (DEBUG && expr[0] === 31
  /* GetStrictFree */
  ) {
      throw new Error("Attempted to resolve a component in a strict mode template, but that value was not in scope: " + meta.upvars[expr[1]]);
    }

  if (type === 32
  /* GetTemplateSymbol */
  ) {
      var scopeValues = meta.scopeValues,
          owner = meta.owner;
      var definition = scopeValues[expr[1]];
      then(constants.component(definition, owner));
    } else {
    var _assertResolverInvari = assertResolverInvariants(meta),
        upvars = _assertResolverInvari.upvars,
        _owner = _assertResolverInvari.owner;

    var name = upvars[expr[1]];

    var _definition = resolver.lookupComponent(name, _owner);

    if (DEBUG && (typeof _definition !== 'object' || _definition === null)) {
      throw new Error("Attempted to resolve `" + name + "`, which was expected to be a component, but nothing was found.");
    }

    then(constants.resolvedComponent(_definition, name));
  }
}
/**
 * (helper)
 * (helper arg)
 */

export function resolveHelper(resolver, constants, meta, _ref2) {
  var expr = _ref2[1],
      then = _ref2[2];
  false && assert(isGetFreeHelper(expr), 'Attempted to resolve a helper with incorrect opcode');
  var type = expr[0];

  if (type === 32
  /* GetTemplateSymbol */
  ) {
      var scopeValues = meta.scopeValues;
      var definition = scopeValues[expr[1]];
      then(constants.helper(definition));
    } else if (type === 31
  /* GetStrictFree */
  ) {
      then(lookupBuiltInHelper(expr, resolver, meta, constants, 'helper'));
    } else {
    var _assertResolverInvari2 = assertResolverInvariants(meta),
        upvars = _assertResolverInvari2.upvars,
        owner = _assertResolverInvari2.owner;

    var name = upvars[expr[1]];
    var helper = resolver.lookupHelper(name, owner);

    if (DEBUG && helper === null) {
      throw new Error("Attempted to resolve `" + name + "`, which was expected to be a helper, but nothing was found.");
    }

    then(constants.helper(helper, name));
  }
}
/**
 * <div {{modifier}}/>
 * <div {{modifier arg}}/>
 * <Foo {{modifier}}/>
 */

export function resolveModifier(resolver, constants, meta, _ref3) {
  var expr = _ref3[1],
      then = _ref3[2];
  false && assert(isGetFreeModifier(expr), 'Attempted to resolve a modifier with incorrect opcode');
  var type = expr[0];

  if (type === 32
  /* GetTemplateSymbol */
  ) {
      var scopeValues = meta.scopeValues;
      var definition = scopeValues[expr[1]];
      then(constants.modifier(definition));
    } else if (type === 31
  /* GetStrictFree */
  ) {
      var _assertResolverInvari3 = assertResolverInvariants(meta),
          upvars = _assertResolverInvari3.upvars;

      var name = upvars[expr[1]];
      var modifier = resolver.lookupBuiltInModifier(name);

      if (DEBUG && modifier === null) {
        throw new Error("Attempted to resolve a modifier in a strict mode template, but it was not in scope: " + name);
      }

      then(constants.modifier(modifier, name));
    } else {
    var _assertResolverInvari4 = assertResolverInvariants(meta),
        _upvars = _assertResolverInvari4.upvars,
        owner = _assertResolverInvari4.owner;

    var _name = _upvars[expr[1]];

    var _modifier = resolver.lookupModifier(_name, owner);

    if (DEBUG && _modifier === null) {
      throw new Error("Attempted to resolve `" + _name + "`, which was expected to be a modifier, but nothing was found.");
    }

    then(constants.modifier(_modifier, _name));
  }
}
/**
 * {{component-or-helper arg}}
 */

export function resolveComponentOrHelper(resolver, constants, meta, _ref4) {
  var expr = _ref4[1],
      _ref4$ = _ref4[2],
      ifComponent = _ref4$.ifComponent,
      ifHelper = _ref4$.ifHelper;
  false && assert(isGetFreeComponentOrHelper(expr), 'Attempted to resolve a component or helper with incorrect opcode');
  var type = expr[0];

  if (type === 32
  /* GetTemplateSymbol */
  ) {
      var scopeValues = meta.scopeValues,
          owner = meta.owner;
      var definition = scopeValues[expr[1]];
      var component = constants.component(definition, owner, true);

      if (component !== null) {
        ifComponent(component);
        return;
      }

      var helper = constants.helper(definition, null, true);

      if (DEBUG && helper === null) {
        throw new Error("Attempted to use a value as either a component or helper, but it did not have a component manager or helper manager associated with it. The value was: " + debugToString(definition));
      }

      ifHelper(helper);
    } else if (type === 31
  /* GetStrictFree */
  ) {
      ifHelper(lookupBuiltInHelper(expr, resolver, meta, constants, 'component or helper'));
    } else {
    var _assertResolverInvari5 = assertResolverInvariants(meta),
        upvars = _assertResolverInvari5.upvars,
        _owner2 = _assertResolverInvari5.owner;

    var name = upvars[expr[1]];

    var _definition2 = resolver.lookupComponent(name, _owner2);

    if (_definition2 !== null) {
      ifComponent(constants.resolvedComponent(_definition2, name));
    } else {
      var _helper = resolver.lookupHelper(name, _owner2);

      if (DEBUG && _helper === null) {
        throw new Error("Attempted to resolve `" + name + "`, which was expected to be a component or helper, but nothing was found.");
      }

      ifHelper(constants.helper(_helper, name));
    }
  }
}
/**
 * <Foo @arg={{helper}}>
 */

export function resolveOptionalHelper(resolver, constants, meta, _ref5) {
  var expr = _ref5[1],
      ifHelper = _ref5[2].ifHelper;
  false && assert(isGetFreeOptionalHelper(expr) || isGetFreeDeprecatedHelper(expr), 'Attempted to resolve a helper with incorrect opcode');

  var _assertResolverInvari6 = assertResolverInvariants(meta),
      upvars = _assertResolverInvari6.upvars,
      owner = _assertResolverInvari6.owner;

  var name = upvars[expr[1]];
  var helper = resolver.lookupHelper(name, owner);

  if (helper) {
    ifHelper(constants.helper(helper, name), name, meta.moduleName);
  }
}
/**
 * {{maybeHelperOrComponent}}
 */

export function resolveOptionalComponentOrHelper(resolver, constants, meta, _ref6) {
  var expr = _ref6[1],
      _ref6$ = _ref6[2],
      ifComponent = _ref6$.ifComponent,
      ifHelper = _ref6$.ifHelper,
      ifValue = _ref6$.ifValue;
  false && assert(isGetFreeOptionalComponentOrHelper(expr), 'Attempted to resolve an optional component or helper with incorrect opcode');
  var type = expr[0];

  if (type === 32
  /* GetTemplateSymbol */
  ) {
      var scopeValues = meta.scopeValues,
          owner = meta.owner;
      var definition = scopeValues[expr[1]];

      if (typeof definition !== 'function' && (typeof definition !== 'object' || definition === null)) {
        // The value is not an object, so it can't be a component or helper.
        ifValue(constants.value(definition));
        return;
      }

      var component = constants.component(definition, owner, true);

      if (component !== null) {
        ifComponent(component);
        return;
      }

      var helper = constants.helper(definition, null, true);

      if (helper !== null) {
        ifHelper(helper);
        return;
      }

      ifValue(constants.value(definition));
    } else if (type === 31
  /* GetStrictFree */
  ) {
      ifHelper(lookupBuiltInHelper(expr, resolver, meta, constants, 'value'));
    } else {
    var _assertResolverInvari7 = assertResolverInvariants(meta),
        upvars = _assertResolverInvari7.upvars,
        _owner3 = _assertResolverInvari7.owner;

    var name = upvars[expr[1]];

    var _definition3 = resolver.lookupComponent(name, _owner3);

    if (_definition3 !== null) {
      ifComponent(constants.resolvedComponent(_definition3, name));
      return;
    }

    var _helper2 = resolver.lookupHelper(name, _owner3);

    if (_helper2 !== null) {
      ifHelper(constants.helper(_helper2, name));
    }
  }
}

function lookupBuiltInHelper(expr, resolver, meta, constants, type) {
  var _assertResolverInvari8 = assertResolverInvariants(meta),
      upvars = _assertResolverInvari8.upvars;

  var name = upvars[expr[1]];
  var helper = resolver.lookupBuiltInHelper(name);

  if (DEBUG && helper === null) {
    // Keyword helper did not exist, which means that we're attempting to use a
    // value of some kind that is not in scope
    throw new Error("Attempted to resolve a " + type + " in a strict mode template, but that value was not in scope: " + meta.upvars[expr[1]]);
  }

  return constants.helper(helper, name);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
import { $fp, $v0 } from '@glimmer/vm';
import { encodeImmediate, isSmallInt } from '@glimmer/util';
import { SimpleArgs } from './shared';
import { isStrictMode, nonSmallIntOperand } from '../operands';
import { expr } from './expr';
/**
 * Push a reference onto the stack corresponding to a statically known primitive
 * @param value A JavaScript primitive (undefined, null, boolean, number or string)
 */

export function PushPrimitiveReference(op, value) {
  PushPrimitive(op, value);
  op(31
  /* PrimitiveReference */
  );
}
/**
 * Push an encoded representation of a JavaScript primitive on the stack
 *
 * @param value A JavaScript primitive (undefined, null, boolean, number or string)
 */

export function PushPrimitive(op, primitive) {
  var p = primitive;

  if (typeof p === 'number') {
    p = isSmallInt(p) ? encodeImmediate(p) : nonSmallIntOperand(p);
  }

  op(30
  /* Primitive */
  , p);
}
/**
 * Invoke a foreign function (a "helper") based on a statically known handle
 *
 * @param op The op creation function
 * @param handle A handle
 * @param positional An optional list of expressions to compile
 * @param named An optional list of named arguments (name + expression) to compile
 */

export function Call(op, handle, positional, named) {
  op(0
  /* PushFrame */
  );
  SimpleArgs(op, positional, named, false);
  op(16
  /* Helper */
  , handle);
  op(1
  /* PopFrame */
  );
  op(36
  /* Fetch */
  , $v0);
}
/**
 * Invoke a foreign function (a "helper") based on a dynamically loaded definition
 *
 * @param op The op creation function
 * @param positional An optional list of expressions to compile
 * @param named An optional list of named arguments (name + expression) to compile
 */

export function CallDynamic(op, positional, named, append) {
  op(0
  /* PushFrame */
  );
  SimpleArgs(op, positional, named, false);
  op(33
  /* Dup */
  , $fp, 1);
  op(107
  /* DynamicHelper */
  );

  if (append) {
    op(36
    /* Fetch */
    , $v0);
    append();
    op(1
    /* PopFrame */
    );
    op(34
    /* Pop */
    , 1);
  } else {
    op(1
    /* PopFrame */
    );
    op(34
    /* Pop */
    , 1);
    op(36
    /* Fetch */
    , $v0);
  }
}
/**
 * Evaluate statements in the context of new dynamic scope entries. Move entries from the
 * stack into named entries in the dynamic scope, then evaluate the statements, then pop
 * the dynamic scope
 *
 * @param names a list of dynamic scope names
 * @param block a function that returns a list of statements to evaluate
 */

export function DynamicScope(op, names, block) {
  op(59
  /* PushDynamicScope */
  );
  op(58
  /* BindDynamicScope */
  , names);
  block();
  op(60
  /* PopDynamicScope */
  );
}
export function Curry(op, type, definition, positional, named) {
  op(0
  /* PushFrame */
  );
  SimpleArgs(op, positional, named, false);
  op(86
  /* CaptureArgs */
  );
  expr(op, definition);
  op(77
  /* Curry */
  , type, isStrictMode());
  op(1
  /* PopFrame */
  );
  op(36
  /* Fetch */
  , $v0);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL29wY29kZS1jb21waWxlci9saWIvb3Bjb2RlLWJ1aWxkZXIvaGVscGVycy92bS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFBLEdBQUEsRUFBQSxHQUFBLFFBQUEsYUFBQTtBQVNBLFNBQUEsZUFBQSxFQUFBLFVBQUEsUUFBQSxlQUFBO0FBQ0EsU0FBQSxVQUFBLFFBQUEsVUFBQTtBQUVBLFNBQUEsWUFBQSxFQUFBLGtCQUFBLFFBQUEsYUFBQTtBQUNBLFNBQUEsSUFBQSxRQUFBLFFBQUE7QUFVQTs7Ozs7QUFJQSxPQUFNLFNBQUEsc0JBQUEsQ0FBQSxFQUFBLEVBQUEsS0FBQSxFQUF1RTtBQUMzRSxFQUFBLGFBQWEsQ0FBQSxFQUFBLEVBQWIsS0FBYSxDQUFiO0FBQ0EsRUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLEdBQUY7QUFDRDtBQUVEOzs7Ozs7QUFLQSxPQUFNLFNBQUEsYUFBQSxDQUFBLEVBQUEsRUFBQSxTQUFBLEVBQWtFO0FBQ3RFLE1BQUksQ0FBQyxHQUFMLFNBQUE7O0FBRUEsTUFBSSxPQUFBLENBQUEsS0FBSixRQUFBLEVBQTJCO0FBQ3pCLElBQUEsQ0FBQyxHQUFHLFVBQVUsQ0FBVixDQUFVLENBQVYsR0FBZ0IsZUFBZSxDQUEvQixDQUErQixDQUEvQixHQUFxQyxrQkFBa0IsQ0FBM0QsQ0FBMkQsQ0FBM0Q7QUFDRDs7QUFFRCxFQUFBLEVBQUUsQ0FBQTtBQUFBO0FBQUEsSUFBRixDQUFFLENBQUY7QUFDRDtBQUVEOzs7Ozs7Ozs7QUFRQSxPQUFNLFNBQUEsSUFBQSxDQUFBLEVBQUEsRUFBQSxNQUFBLEVBQUEsVUFBQSxFQUFBLEtBQUEsRUFJdUI7QUFFM0IsRUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLEdBQUY7QUFDQSxFQUFBLFVBQVUsQ0FBQSxFQUFBLEVBQUEsVUFBQSxFQUFBLEtBQUEsRUFBVixLQUFVLENBQVY7QUFDQSxFQUFBLEVBQUUsQ0FBQTtBQUFBO0FBQUEsSUFBRixNQUFFLENBQUY7QUFDQSxFQUFBLEVBQUUsQ0FBQTtBQUFBO0FBQUEsR0FBRjtBQUNBLEVBQUEsRUFBRSxDQUFBO0FBQUE7QUFBQSxJQUFGLEdBQUUsQ0FBRjtBQUNEO0FBRUQ7Ozs7Ozs7O0FBT0EsT0FBTSxTQUFBLFdBQUEsQ0FBQSxFQUFBLEVBQUEsVUFBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLEVBSWU7QUFFbkIsRUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLEdBQUY7QUFDQSxFQUFBLFVBQVUsQ0FBQSxFQUFBLEVBQUEsVUFBQSxFQUFBLEtBQUEsRUFBVixLQUFVLENBQVY7QUFDQSxFQUFBLEVBQUUsQ0FBQTtBQUFBO0FBQUEsSUFBQSxHQUFBLEVBQUYsQ0FBRSxDQUFGO0FBQ0EsRUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLEdBQUY7O0FBQ0EsTUFBQSxNQUFBLEVBQVk7QUFDVixJQUFBLEVBQUUsQ0FBQTtBQUFBO0FBQUEsTUFBRixHQUFFLENBQUY7QUFDQSxJQUFBLE1BQU07QUFDTixJQUFBLEVBQUUsQ0FBQTtBQUFBO0FBQUEsS0FBRjtBQUNBLElBQUEsRUFBRSxDQUFBO0FBQUE7QUFBQSxNQUFGLENBQUUsQ0FBRjtBQUpGLEdBQUEsTUFLTztBQUNMLElBQUEsRUFBRSxDQUFBO0FBQUE7QUFBQSxLQUFGO0FBQ0EsSUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLE1BQUYsQ0FBRSxDQUFGO0FBQ0EsSUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLE1BQUYsR0FBRSxDQUFGO0FBQ0Q7QUFDRjtBQUVEOzs7Ozs7Ozs7QUFRQSxPQUFNLFNBQUEsWUFBQSxDQUFBLEVBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUE4RTtBQUNsRixFQUFBLEVBQUUsQ0FBQTtBQUFBO0FBQUEsR0FBRjtBQUNBLEVBQUEsRUFBRSxDQUFBO0FBQUE7QUFBQSxJQUFGLEtBQUUsQ0FBRjtBQUNBLEVBQUEsS0FBSztBQUNMLEVBQUEsRUFBRSxDQUFBO0FBQUE7QUFBQSxHQUFGO0FBQ0Q7QUFFRCxPQUFNLFNBQUEsS0FBQSxDQUFBLEVBQUEsRUFBQSxJQUFBLEVBQUEsVUFBQSxFQUFBLFVBQUEsRUFBQSxLQUFBLEVBS3VCO0FBRTNCLEVBQUEsRUFBRSxDQUFBO0FBQUE7QUFBQSxHQUFGO0FBQ0EsRUFBQSxVQUFVLENBQUEsRUFBQSxFQUFBLFVBQUEsRUFBQSxLQUFBLEVBQVYsS0FBVSxDQUFWO0FBQ0EsRUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLEdBQUY7QUFDQSxFQUFBLElBQUksQ0FBQSxFQUFBLEVBQUosVUFBSSxDQUFKO0FBQ0EsRUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLElBQUEsSUFBQSxFQUFpQixZQUFuQixFQUFFLENBQUY7QUFDQSxFQUFBLEVBQUUsQ0FBQTtBQUFBO0FBQUEsR0FBRjtBQUNBLEVBQUEsRUFBRSxDQUFBO0FBQUE7QUFBQSxJQUFGLEdBQUUsQ0FBRjtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgJGZwLCAkdjAgfSBmcm9tICdAZ2xpbW1lci92bSc7XG5pbXBvcnQge1xuICBPcHRpb24sXG4gIE9wLFxuICBNYWNoaW5lT3AsXG4gIFdpcmVGb3JtYXQsXG4gIE5vblNtYWxsSW50T3BlcmFuZCxcbiAgQ3VycmllZFR5cGUsXG59IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgZW5jb2RlSW1tZWRpYXRlLCBpc1NtYWxsSW50IH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5pbXBvcnQgeyBTaW1wbGVBcmdzIH0gZnJvbSAnLi9zaGFyZWQnO1xuaW1wb3J0IHsgUHVzaEV4cHJlc3Npb25PcCwgUHVzaFN0YXRlbWVudE9wIH0gZnJvbSAnLi4vLi4vc3ludGF4L2NvbXBpbGVycyc7XG5pbXBvcnQgeyBpc1N0cmljdE1vZGUsIG5vblNtYWxsSW50T3BlcmFuZCB9IGZyb20gJy4uL29wZXJhbmRzJztcbmltcG9ydCB7IGV4cHIgfSBmcm9tICcuL2V4cHInO1xuXG5leHBvcnQgdHlwZSBQcmltaXRpdmUgPSB1bmRlZmluZWQgfCBudWxsIHwgYm9vbGVhbiB8IG51bWJlciB8IHN0cmluZztcblxuZXhwb3J0IGludGVyZmFjZSBDb21waWxlSGVscGVyIHtcbiAgaGFuZGxlOiBudW1iZXI7XG4gIHBvc2l0aW9uYWw6IE9wdGlvbjxXaXJlRm9ybWF0LkNvcmUuUGFyYW1zPjtcbiAgbmFtZWQ6IFdpcmVGb3JtYXQuQ29yZS5IYXNoO1xufVxuXG4vKipcbiAqIFB1c2ggYSByZWZlcmVuY2Ugb250byB0aGUgc3RhY2sgY29ycmVzcG9uZGluZyB0byBhIHN0YXRpY2FsbHkga25vd24gcHJpbWl0aXZlXG4gKiBAcGFyYW0gdmFsdWUgQSBKYXZhU2NyaXB0IHByaW1pdGl2ZSAodW5kZWZpbmVkLCBudWxsLCBib29sZWFuLCBudW1iZXIgb3Igc3RyaW5nKVxuICovXG5leHBvcnQgZnVuY3Rpb24gUHVzaFByaW1pdGl2ZVJlZmVyZW5jZShvcDogUHVzaEV4cHJlc3Npb25PcCwgdmFsdWU6IFByaW1pdGl2ZSk6IHZvaWQge1xuICBQdXNoUHJpbWl0aXZlKG9wLCB2YWx1ZSk7XG4gIG9wKE9wLlByaW1pdGl2ZVJlZmVyZW5jZSk7XG59XG5cbi8qKlxuICogUHVzaCBhbiBlbmNvZGVkIHJlcHJlc2VudGF0aW9uIG9mIGEgSmF2YVNjcmlwdCBwcmltaXRpdmUgb24gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHZhbHVlIEEgSmF2YVNjcmlwdCBwcmltaXRpdmUgKHVuZGVmaW5lZCwgbnVsbCwgYm9vbGVhbiwgbnVtYmVyIG9yIHN0cmluZylcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFB1c2hQcmltaXRpdmUob3A6IFB1c2hFeHByZXNzaW9uT3AsIHByaW1pdGl2ZTogUHJpbWl0aXZlKTogdm9pZCB7XG4gIGxldCBwOiBQcmltaXRpdmUgfCBOb25TbWFsbEludE9wZXJhbmQgPSBwcmltaXRpdmU7XG5cbiAgaWYgKHR5cGVvZiBwID09PSAnbnVtYmVyJykge1xuICAgIHAgPSBpc1NtYWxsSW50KHApID8gZW5jb2RlSW1tZWRpYXRlKHApIDogbm9uU21hbGxJbnRPcGVyYW5kKHApO1xuICB9XG5cbiAgb3AoT3AuUHJpbWl0aXZlLCBwKTtcbn1cblxuLyoqXG4gKiBJbnZva2UgYSBmb3JlaWduIGZ1bmN0aW9uIChhIFwiaGVscGVyXCIpIGJhc2VkIG9uIGEgc3RhdGljYWxseSBrbm93biBoYW5kbGVcbiAqXG4gKiBAcGFyYW0gb3AgVGhlIG9wIGNyZWF0aW9uIGZ1bmN0aW9uXG4gKiBAcGFyYW0gaGFuZGxlIEEgaGFuZGxlXG4gKiBAcGFyYW0gcG9zaXRpb25hbCBBbiBvcHRpb25hbCBsaXN0IG9mIGV4cHJlc3Npb25zIHRvIGNvbXBpbGVcbiAqIEBwYXJhbSBuYW1lZCBBbiBvcHRpb25hbCBsaXN0IG9mIG5hbWVkIGFyZ3VtZW50cyAobmFtZSArIGV4cHJlc3Npb24pIHRvIGNvbXBpbGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIENhbGwoXG4gIG9wOiBQdXNoRXhwcmVzc2lvbk9wLFxuICBoYW5kbGU6IG51bWJlcixcbiAgcG9zaXRpb25hbDogV2lyZUZvcm1hdC5Db3JlLlBhcmFtcyxcbiAgbmFtZWQ6IFdpcmVGb3JtYXQuQ29yZS5IYXNoXG4pOiB2b2lkIHtcbiAgb3AoTWFjaGluZU9wLlB1c2hGcmFtZSk7XG4gIFNpbXBsZUFyZ3Mob3AsIHBvc2l0aW9uYWwsIG5hbWVkLCBmYWxzZSk7XG4gIG9wKE9wLkhlbHBlciwgaGFuZGxlKTtcbiAgb3AoTWFjaGluZU9wLlBvcEZyYW1lKTtcbiAgb3AoT3AuRmV0Y2gsICR2MCk7XG59XG5cbi8qKlxuICogSW52b2tlIGEgZm9yZWlnbiBmdW5jdGlvbiAoYSBcImhlbHBlclwiKSBiYXNlZCBvbiBhIGR5bmFtaWNhbGx5IGxvYWRlZCBkZWZpbml0aW9uXG4gKlxuICogQHBhcmFtIG9wIFRoZSBvcCBjcmVhdGlvbiBmdW5jdGlvblxuICogQHBhcmFtIHBvc2l0aW9uYWwgQW4gb3B0aW9uYWwgbGlzdCBvZiBleHByZXNzaW9ucyB0byBjb21waWxlXG4gKiBAcGFyYW0gbmFtZWQgQW4gb3B0aW9uYWwgbGlzdCBvZiBuYW1lZCBhcmd1bWVudHMgKG5hbWUgKyBleHByZXNzaW9uKSB0byBjb21waWxlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBDYWxsRHluYW1pYyhcbiAgb3A6IFB1c2hFeHByZXNzaW9uT3AsXG4gIHBvc2l0aW9uYWw6IFdpcmVGb3JtYXQuQ29yZS5QYXJhbXMsXG4gIG5hbWVkOiBXaXJlRm9ybWF0LkNvcmUuSGFzaCxcbiAgYXBwZW5kPzogKCkgPT4gdm9pZFxuKTogdm9pZCB7XG4gIG9wKE1hY2hpbmVPcC5QdXNoRnJhbWUpO1xuICBTaW1wbGVBcmdzKG9wLCBwb3NpdGlvbmFsLCBuYW1lZCwgZmFsc2UpO1xuICBvcChPcC5EdXAsICRmcCwgMSk7XG4gIG9wKE9wLkR5bmFtaWNIZWxwZXIpO1xuICBpZiAoYXBwZW5kKSB7XG4gICAgb3AoT3AuRmV0Y2gsICR2MCk7XG4gICAgYXBwZW5kKCk7XG4gICAgb3AoTWFjaGluZU9wLlBvcEZyYW1lKTtcbiAgICBvcChPcC5Qb3AsIDEpO1xuICB9IGVsc2Uge1xuICAgIG9wKE1hY2hpbmVPcC5Qb3BGcmFtZSk7XG4gICAgb3AoT3AuUG9wLCAxKTtcbiAgICBvcChPcC5GZXRjaCwgJHYwKTtcbiAgfVxufVxuXG4vKipcbiAqIEV2YWx1YXRlIHN0YXRlbWVudHMgaW4gdGhlIGNvbnRleHQgb2YgbmV3IGR5bmFtaWMgc2NvcGUgZW50cmllcy4gTW92ZSBlbnRyaWVzIGZyb20gdGhlXG4gKiBzdGFjayBpbnRvIG5hbWVkIGVudHJpZXMgaW4gdGhlIGR5bmFtaWMgc2NvcGUsIHRoZW4gZXZhbHVhdGUgdGhlIHN0YXRlbWVudHMsIHRoZW4gcG9wXG4gKiB0aGUgZHluYW1pYyBzY29wZVxuICpcbiAqIEBwYXJhbSBuYW1lcyBhIGxpc3Qgb2YgZHluYW1pYyBzY29wZSBuYW1lc1xuICogQHBhcmFtIGJsb2NrIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgbGlzdCBvZiBzdGF0ZW1lbnRzIHRvIGV2YWx1YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBEeW5hbWljU2NvcGUob3A6IFB1c2hTdGF0ZW1lbnRPcCwgbmFtZXM6IHN0cmluZ1tdLCBibG9jazogKCkgPT4gdm9pZCk6IHZvaWQge1xuICBvcChPcC5QdXNoRHluYW1pY1Njb3BlKTtcbiAgb3AoT3AuQmluZER5bmFtaWNTY29wZSwgbmFtZXMpO1xuICBibG9jaygpO1xuICBvcChPcC5Qb3BEeW5hbWljU2NvcGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ3VycnkoXG4gIG9wOiBQdXNoRXhwcmVzc2lvbk9wLFxuICB0eXBlOiBDdXJyaWVkVHlwZSxcbiAgZGVmaW5pdGlvbjogV2lyZUZvcm1hdC5FeHByZXNzaW9uLFxuICBwb3NpdGlvbmFsOiBXaXJlRm9ybWF0LkNvcmUuUGFyYW1zLFxuICBuYW1lZDogV2lyZUZvcm1hdC5Db3JlLkhhc2hcbik6IHZvaWQge1xuICBvcChNYWNoaW5lT3AuUHVzaEZyYW1lKTtcbiAgU2ltcGxlQXJncyhvcCwgcG9zaXRpb25hbCwgbmFtZWQsIGZhbHNlKTtcbiAgb3AoT3AuQ2FwdHVyZUFyZ3MpO1xuICBleHByKG9wLCBkZWZpbml0aW9uKTtcbiAgb3AoT3AuQ3VycnksIHR5cGUsIGlzU3RyaWN0TW9kZSgpKTtcbiAgb3AoTWFjaGluZU9wLlBvcEZyYW1lKTtcbiAgb3AoT3AuRmV0Y2gsICR2MCk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9
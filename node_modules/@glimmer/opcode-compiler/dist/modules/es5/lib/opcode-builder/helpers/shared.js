import { EMPTY_ARRAY, EMPTY_STRING_ARRAY } from '@glimmer/util';
import { PushYieldableBlock } from './blocks';
import { expr } from './expr';
/**
 * Compile arguments, pushing an Arguments object onto the stack.
 *
 * @param args.params
 * @param args.hash
 * @param args.blocks
 * @param args.atNames
 */

export function CompileArgs(op, positional, named, blocks, atNames) {
  var blockNames = blocks.names;

  for (var i = 0; i < blockNames.length; i++) {
    PushYieldableBlock(op, blocks.get(blockNames[i]));
  }

  var count = CompilePositional(op, positional);
  var flags = count << 4;
  if (atNames) flags |= 8;

  if (blocks) {
    flags |= 7;
  }

  var names = EMPTY_ARRAY;

  if (named) {
    names = named[0];
    var val = named[1];

    for (var _i = 0; _i < val.length; _i++) {
      expr(op, val[_i]);
    }
  }

  op(82
  /* PushArgs */
  , names, blockNames, flags);
}
export function SimpleArgs(op, positional, named, atNames) {
  if (positional === null && named === null) {
    op(83
    /* PushEmptyArgs */
    );
    return;
  }

  var count = CompilePositional(op, positional);
  var flags = count << 4;
  if (atNames) flags |= 8;
  var names = EMPTY_STRING_ARRAY;

  if (named) {
    names = named[0];
    var val = named[1];

    for (var i = 0; i < val.length; i++) {
      expr(op, val[i]);
    }
  }

  op(82
  /* PushArgs */
  , names, EMPTY_STRING_ARRAY, flags);
}
/**
 * Compile an optional list of positional arguments, which pushes each argument
 * onto the stack and returns the number of parameters compiled
 *
 * @param positional an optional list of positional arguments
 */

export function CompilePositional(op, positional) {
  if (positional === null) return 0;

  for (var i = 0; i < positional.length; i++) {
    expr(op, positional[i]);
  }

  return positional.length;
}
export function meta(layout) {
  var _a, _b;

  var _layout$block = layout.block,
      symbols = _layout$block[1],
      upvars = _layout$block[3];
  return {
    evalSymbols: evalSymbols(layout),
    upvars: upvars,
    scopeValues: (_b = (_a = layout.scope) === null || _a === void 0 ? void 0 : _a.call(layout)) !== null && _b !== void 0 ? _b : null,
    isStrictMode: layout.isStrictMode,
    moduleName: layout.moduleName,
    owner: layout.owner,
    size: symbols.length
  };
}
export function evalSymbols(layout) {
  var block = layout.block;
  var symbols = block[1],
      hasEval = block[2];
  return hasEval ? symbols : null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL29wY29kZS1jb21waWxlci9saWIvb3Bjb2RlLWJ1aWxkZXIvaGVscGVycy9zaGFyZWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsU0FBQSxXQUFBLEVBQUEsa0JBQUEsUUFBQSxlQUFBO0FBQ0EsU0FBQSxrQkFBQSxRQUFBLFVBQUE7QUFFQSxTQUFBLElBQUEsUUFBQSxRQUFBO0FBRUE7Ozs7Ozs7OztBQVFBLE9BQU0sU0FBQSxXQUFBLENBQUEsRUFBQSxFQUFBLFVBQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLE9BQUEsRUFLWTtBQUVoQixNQUFJLFVBQVUsR0FBYSxNQUFNLENBQWpDLEtBQUE7O0FBQ0EsT0FBSyxJQUFJLENBQUMsR0FBVixDQUFBLEVBQWdCLENBQUMsR0FBRyxVQUFVLENBQTlCLE1BQUEsRUFBdUMsQ0FBdkMsRUFBQSxFQUE0QztBQUMxQyxJQUFBLGtCQUFrQixDQUFBLEVBQUEsRUFBSyxNQUFNLENBQU4sR0FBQSxDQUFXLFVBQVUsQ0FBNUMsQ0FBNEMsQ0FBckIsQ0FBTCxDQUFsQjtBQUNEOztBQUVELE1BQUksS0FBSyxHQUFHLGlCQUFpQixDQUFBLEVBQUEsRUFBN0IsVUFBNkIsQ0FBN0I7QUFFQSxNQUFJLEtBQUssR0FBRyxLQUFLLElBQWpCLENBQUE7QUFFQSxNQUFBLE9BQUEsRUFBYSxLQUFLLElBQUwsQ0FBQTs7QUFFYixNQUFBLE1BQUEsRUFBWTtBQUNWLElBQUEsS0FBSyxJQUFMLENBQUE7QUFDRDs7QUFFRCxNQUFJLEtBQUssR0FBVCxXQUFBOztBQUVBLE1BQUEsS0FBQSxFQUFXO0FBQ1QsSUFBQSxLQUFLLEdBQUcsS0FBSyxDQUFiLENBQWEsQ0FBYjtBQUNBLFFBQUksR0FBRyxHQUFHLEtBQUssQ0FBZixDQUFlLENBQWY7O0FBQ0EsU0FBSyxJQUFJLEVBQUMsR0FBVixDQUFBLEVBQWdCLEVBQUMsR0FBRyxHQUFHLENBQXZCLE1BQUEsRUFB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ZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbnRhaW5pbmdNZXRhZGF0YSxcbiAgTGF5b3V0V2l0aENvbnRleHQsXG4gIE9wLFxuICBPcHRpb24sXG4gIFdpcmVGb3JtYXQsXG4gIE5hbWVkQmxvY2tzLFxufSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcbmltcG9ydCB7IEVNUFRZX0FSUkFZLCBFTVBUWV9TVFJJTkdfQVJSQVkgfSBmcm9tICdAZ2xpbW1lci91dGlsJztcbmltcG9ydCB7IFB1c2hZaWVsZGFibGVCbG9jayB9IGZyb20gJy4vYmxvY2tzJztcbmltcG9ydCB7IFB1c2hFeHByZXNzaW9uT3AsIFB1c2hTdGF0ZW1lbnRPcCB9IGZyb20gJy4uLy4uL3N5bnRheC9jb21waWxlcnMnO1xuaW1wb3J0IHsgZXhwciB9IGZyb20gJy4vZXhwcic7XG5cbi8qKlxuICogQ29tcGlsZSBhcmd1bWVudHMsIHB1c2hpbmcgYW4gQXJndW1lbnRzIG9iamVjdCBvbnRvIHRoZSBzdGFjay5cbiAqXG4gKiBAcGFyYW0gYXJncy5wYXJhbXNcbiAqIEBwYXJhbSBhcmdzLmhhc2hcbiAqIEBwYXJhbSBhcmdzLmJsb2Nrc1xuICogQHBhcmFtIGFyZ3MuYXROYW1lc1xuICovXG5leHBvcnQgZnVuY3Rpb24gQ29tcGlsZUFyZ3MoXG4gIG9wOiBQdXNoU3RhdGVtZW50T3AsXG4gIHBvc2l0aW9uYWw6IFdpcmVGb3JtYXQuQ29yZS5QYXJhbXMsXG4gIG5hbWVkOiBXaXJlRm9ybWF0LkNvcmUuSGFzaCxcbiAgYmxvY2tzOiBOYW1lZEJsb2NrcyxcbiAgYXROYW1lczogYm9vbGVhblxuKTogdm9pZCB7XG4gIGxldCBibG9ja05hbWVzOiBzdHJpbmdbXSA9IGJsb2Nrcy5uYW1lcztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBibG9ja05hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgUHVzaFlpZWxkYWJsZUJsb2NrKG9wLCBibG9ja3MuZ2V0KGJsb2NrTmFtZXNbaV0pKTtcbiAgfVxuXG4gIGxldCBjb3VudCA9IENvbXBpbGVQb3NpdGlvbmFsKG9wLCBwb3NpdGlvbmFsKTtcblxuICBsZXQgZmxhZ3MgPSBjb3VudCA8PCA0O1xuXG4gIGlmIChhdE5hbWVzKSBmbGFncyB8PSAwYjEwMDA7XG5cbiAgaWYgKGJsb2Nrcykge1xuICAgIGZsYWdzIHw9IDBiMTExO1xuICB9XG5cbiAgbGV0IG5hbWVzID0gRU1QVFlfQVJSQVkgYXMgcmVhZG9ubHkgc3RyaW5nW107XG5cbiAgaWYgKG5hbWVkKSB7XG4gICAgbmFtZXMgPSBuYW1lZFswXTtcbiAgICBsZXQgdmFsID0gbmFtZWRbMV07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWwubGVuZ3RoOyBpKyspIHtcbiAgICAgIGV4cHIob3AsIHZhbFtpXSk7XG4gICAgfVxuICB9XG5cbiAgb3AoT3AuUHVzaEFyZ3MsIG5hbWVzIGFzIHN0cmluZ1tdLCBibG9ja05hbWVzLCBmbGFncyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTaW1wbGVBcmdzKFxuICBvcDogUHVzaEV4cHJlc3Npb25PcCxcbiAgcG9zaXRpb25hbDogT3B0aW9uPFdpcmVGb3JtYXQuQ29yZS5QYXJhbXM+LFxuICBuYW1lZDogT3B0aW9uPFdpcmVGb3JtYXQuQ29yZS5IYXNoPixcbiAgYXROYW1lczogYm9vbGVhblxuKTogdm9pZCB7XG4gIGlmIChwb3NpdGlvbmFsID09PSBudWxsICYmIG5hbWVkID09PSBudWxsKSB7XG4gICAgb3AoT3AuUHVzaEVtcHR5QXJncyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGNvdW50ID0gQ29tcGlsZVBvc2l0aW9uYWwob3AsIHBvc2l0aW9uYWwpO1xuXG4gIGxldCBmbGFncyA9IGNvdW50IDw8IDQ7XG5cbiAgaWYgKGF0TmFtZXMpIGZsYWdzIHw9IDBiMTAwMDtcblxuICBsZXQgbmFtZXMgPSBFTVBUWV9TVFJJTkdfQVJSQVk7XG5cbiAgaWYgKG5hbWVkKSB7XG4gICAgbmFtZXMgPSBuYW1lZFswXTtcbiAgICBsZXQgdmFsID0gbmFtZWRbMV07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWwubGVuZ3RoOyBpKyspIHtcbiAgICAgIGV4cHIob3AsIHZhbFtpXSk7XG4gICAgfVxuICB9XG5cbiAgb3AoT3AuUHVzaEFyZ3MsIG5hbWVzIGFzIHN0cmluZ1tdLCBFTVBUWV9TVFJJTkdfQVJSQVksIGZsYWdzKTtcbn1cblxuLyoqXG4gKiBDb21waWxlIGFuIG9wdGlvbmFsIGxpc3Qgb2YgcG9zaXRpb25hbCBhcmd1bWVudHMsIHdoaWNoIHB1c2hlcyBlYWNoIGFyZ3VtZW50XG4gKiBvbnRvIHRoZSBzdGFjayBhbmQgcmV0dXJucyB0aGUgbnVtYmVyIG9mIHBhcmFtZXRlcnMgY29tcGlsZWRcbiAqXG4gKiBAcGFyYW0gcG9zaXRpb25hbCBhbiBvcHRpb25hbCBsaXN0IG9mIHBvc2l0aW9uYWwgYXJndW1lbnRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBDb21waWxlUG9zaXRpb25hbChcbiAgb3A6IFB1c2hFeHByZXNzaW9uT3AsXG4gIHBvc2l0aW9uYWw6IE9wdGlvbjxXaXJlRm9ybWF0LkNvcmUuUGFyYW1zPlxuKTogbnVtYmVyIHtcbiAgaWYgKHBvc2l0aW9uYWwgPT09IG51bGwpIHJldHVybiAwO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zaXRpb25hbC5sZW5ndGg7IGkrKykge1xuICAgIGV4cHIob3AsIHBvc2l0aW9uYWxbaV0pO1xuICB9XG5cbiAgcmV0dXJuIHBvc2l0aW9uYWwubGVuZ3RoO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWV0YShsYXlvdXQ6IExheW91dFdpdGhDb250ZXh0KTogQ29udGFpbmluZ01ldGFkYXRhIHtcbiAgbGV0IFssIHN5bWJvbHMsICwgdXB2YXJzXSA9IGxheW91dC5ibG9jaztcblxuICByZXR1cm4ge1xuICAgIGV2YWxTeW1ib2xzOiBldmFsU3ltYm9scyhsYXlvdXQpLFxuICAgIHVwdmFyczogdXB2YXJzLFxuICAgIHNjb3BlVmFsdWVzOiBsYXlvdXQuc2NvcGU/LigpID8/IG51bGwsXG4gICAgaXNTdHJpY3RNb2RlOiBsYXlvdXQuaXNTdHJpY3RNb2RlLFxuICAgIG1vZHVsZU5hbWU6IGxheW91dC5tb2R1bGVOYW1lLFxuICAgIG93bmVyOiBsYXlvdXQub3duZXIsXG4gICAgc2l6ZTogc3ltYm9scy5sZW5ndGgsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBldmFsU3ltYm9scyhsYXlvdXQ6IExheW91dFdpdGhDb250ZXh0KTogT3B0aW9uPHN0cmluZ1tdPiB7XG4gIGxldCB7IGJsb2NrIH0gPSBsYXlvdXQ7XG4gIGxldCBbLCBzeW1ib2xzLCBoYXNFdmFsXSA9IGJsb2NrO1xuXG4gIHJldHVybiBoYXNFdmFsID8gc3ltYm9scyA6IG51bGw7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9
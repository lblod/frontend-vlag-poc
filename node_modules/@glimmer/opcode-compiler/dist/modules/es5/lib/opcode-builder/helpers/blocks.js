import { $fp } from '@glimmer/vm';
import { PushPrimitive } from './vm';
import { blockOperand, symbolTableOperand } from '../operands';
import { SimpleArgs } from './shared';
/**
 * Yield to a block located at a particular symbol location.
 *
 * @param to the symbol containing the block to yield to
 * @param params optional block parameters to yield to the block
 */

export function YieldBlock(op, to, positional) {
  SimpleArgs(op, positional, null, true);
  op(23
  /* GetBlock */
  , to);
  op(24
  /* SpreadBlock */
  );
  op(61
  /* CompileBlock */
  );
  op(64
  /* InvokeYield */
  );
  op(40
  /* PopScope */
  );
  op(1
  /* PopFrame */
  );
}
/**
 * Push an (optional) yieldable block onto the stack. The yieldable block must be known
 * statically at compile time.
 *
 * @param block An optional Compilable block
 */

export function PushYieldableBlock(op, block) {
  PushSymbolTable(op, block && block[1]);
  op(62
  /* PushBlockScope */
  );
  PushCompilable(op, block);
}
/**
 * Invoke a block that is known statically at compile time.
 *
 * @param block a Compilable block
 */

export function InvokeStaticBlock(op, block) {
  op(0
  /* PushFrame */
  );
  PushCompilable(op, block);
  op(61
  /* CompileBlock */
  );
  op(2
  /* InvokeVirtual */
  );
  op(1
  /* PopFrame */
  );
}
/**
 * Invoke a static block, preserving some number of stack entries for use in
 * updating.
 *
 * @param block A compilable block
 * @param callerCount A number of stack entries to preserve
 */

export function InvokeStaticBlockWithStack(op, block, callerCount) {
  var parameters = block[1];
  var calleeCount = parameters.length;
  var count = Math.min(callerCount, calleeCount);

  if (count === 0) {
    InvokeStaticBlock(op, block);
    return;
  }

  op(0
  /* PushFrame */
  );

  if (count) {
    op(39
    /* ChildScope */
    );

    for (var i = 0; i < count; i++) {
      op(33
      /* Dup */
      , $fp, callerCount - i);
      op(19
      /* SetVariable */
      , parameters[i]);
    }
  }

  PushCompilable(op, block);
  op(61
  /* CompileBlock */
  );
  op(2
  /* InvokeVirtual */
  );

  if (count) {
    op(40
    /* PopScope */
    );
  }

  op(1
  /* PopFrame */
  );
}
export function PushSymbolTable(op, parameters) {
  if (parameters !== null) {
    op(63
    /* PushSymbolTable */
    , symbolTableOperand({
      parameters: parameters
    }));
  } else {
    PushPrimitive(op, null);
  }
}
export function PushCompilable(op, _block) {
  if (_block === null) {
    PushPrimitive(op, null);
  } else {
    op(28
    /* Constant */
    , blockOperand(_block));
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL29wY29kZS1jb21waWxlci9saWIvb3Bjb2RlLWJ1aWxkZXIvaGVscGVycy9ibG9ja3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsU0FBQSxHQUFBLFFBQUEsYUFBQTtBQUNBLFNBQUEsYUFBQSxRQUFBLE1BQUE7QUFDQSxTQUFBLFlBQUEsRUFBQSxrQkFBQSxRQUFBLGFBQUE7QUFDQSxTQUFBLFVBQUEsUUFBQSxVQUFBO0FBR0E7Ozs7Ozs7QUFNQSxPQUFNLFNBQUEsVUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsVUFBQSxFQUdzQztBQUUxQyxFQUFBLFVBQVUsQ0FBQSxFQUFBLEVBQUEsVUFBQSxFQUFBLElBQUEsRUFBVixJQUFVLENBQVY7QUFDQSxFQUFBLEVBQUUsQ0FBQTtBQUFBO0FBQUEsSUFBRixFQUFFLENBQUY7QUFDQSxFQUFBLEVBQUUsQ0FBQTtBQUFBO0FBQUEsR0FBRjtBQUNBLEVBQUEsRUFBRSxDQUFBO0FBQUE7QUFBQSxHQUFGO0FBQ0EsRUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLEdBQUY7QUFDQSxFQUFBLEVBQUUsQ0FBQTtBQUFBO0FBQUEsR0FBRjtBQUNBLEVBQUEsRUFBRSxDQUFBO0FBQUE7QUFBQSxHQUFGO0FBQ0Q7QUFFRDs7Ozs7OztBQU1BLE9BQU0sU0FBQSxrQkFBQSxDQUFBLEVBQUEsRUFBQSxLQUFBLEVBRTJDO0FBRS9DLEVBQUEsZUFBZSxDQUFBLEVBQUEsRUFBSyxLQUFLLElBQUksS0FBSyxDQUFsQyxDQUFrQyxDQUFuQixDQUFmO0FBQ0EsRUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLEdBQUY7QUFDQSxFQUFBLGNBQWMsQ0FBQSxFQUFBLEVBQWQsS0FBYyxDQUFkO0FBQ0Q7QUFFRDs7Ozs7O0FBS0EsT0FBTSxTQUFBLGlCQUFBLENBQUEsRUFBQSxFQUFBLEtBQUEsRUFFbUM7QUFFdkMsRUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLEdBQUY7QUFDQSxFQUFBLGNBQWMsQ0FBQSxFQUFBLEVBQWQsS0FBYyxDQUFkO0FBQ0EsRUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLEdBQUY7QUFDQSxFQUFBLEVBQUUsQ0FBQTtBQUFBO0FBQUEsR0FBRjtBQUNBLEVBQUEsRUFBRSxDQUFBO0FBQUE7QUFBQSxHQUFGO0FBQ0Q7QUFFRDs7Ozs7Ozs7QUFPQSxPQUFNLFNBQUEsMEJBQUEsQ0FBQSxFQUFBLEVBQUEsS0FBQSxFQUFBLFdBQUEsRUFHZTtBQUVuQixNQUFJLFVBQVUsR0FBRyxLQUFLLENBQXRCLENBQXNCLENBQXRCO0FBQ0EsTUFBSSxXQUFXLEdBQUcsVUFBVSxDQUE1QixNQUFBO0FBQ0EsTUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFKLEdBQUEsQ0FBQSxXQUFBLEVBQVosV0FBWSxDQUFaOztBQUVBLE1BQUksS0FBSyxLQUFULENBQUEsRUFBaUI7QUFDZixJQUFBLGlCQUFpQixDQUFBLEVBQUEsRUFBakIsS0FBaUIsQ0FBakI7QUFDQTtBQUNEOztBQUVELEVBQUEsRUFBRSxDQUFBO0FBQUE7QUFBQSxHQUFGOztBQUVBLE1BQUEsS0FBQSxFQUFXO0FBQ1QsSUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLEtBQUY7O0FBRUEsU0FBSyxJQUFJLENBQUMsR0FBVixDQUFBLEVBQWdCLENBQUMsR0FBakIsS0FBQSxFQUEyQixDQUEzQixFQUFBLEVBQWdDO0FBQzlCLE1BQUEsRUFBRSxDQUFBO0FBQUE7QUFBQSxRQUFBLEdBQUEsRUFBYyxXQUFXLEdBQTNCLENBQUUsQ0FBRjtBQUNBLE1BQUEsRUFBRSxDQUFBO0FBQUE7QUFBQSxRQUFpQixVQUFVLENBQTdCLENBQTZCLENBQTNCLENBQUY7QUFDRDtBQUNGOztBQUVELEVBQUEsY0FBYyxDQUFBLEVBQUEsRUFBZCxLQUFjLENBQWQ7QUFDQSxFQUFBLEVBQUUsQ0FBQTtBQUFBO0FBQUEsR0FBRjtBQUNBLEVBQUEsRUFBRSxDQUFBO0FBQUE7QUFBQSxHQUFGOztBQUVBLE1BQUEsS0FBQSxFQUFXO0FBQ1QsSUFBQSxFQUFFLENBQUE7QUFBQTtBQUFBLEtBQUY7QUFDRDs7QUFFRCxFQUFBLEVBQUUsQ0FBQTtBQUFBO0FBQUEsR0FBRjtBQUNEO0FBRUQsT0FBTSxTQUFBLGVBQUEsQ0FBQSxFQUFBLEVBQUEsVUFBQSxFQUEyRTtBQUMvRSxNQUFJLFVBQVUsS0FBZCxJQUFBLEVBQXlCO0FBQ3ZCLElBQUEsRUFBRSxDQUFBO0FBQUE7QUFBQSxNQUFxQixrQkFBa0IsQ0FBQztBQUFFLE1BQUEsVUFBQSxFQUFBO0FBQUYsS0FBRCxDQUF2QyxDQUFGO0FBREYsR0FBQSxNQUVPO0FBQ0wsSUFBQSxhQUFhLENBQUEsRUFBQSxFQUFiLElBQWEsQ0FBYjtBQUNEO0FBQ0Y7QUFFRCxPQUFNLFNBQUEsY0FBQSxDQUFBLEVBQUEsRUFBQSxNQUFBLEVBRTRDO0FBRWhELE1BQUksTUFBTSxLQUFWLElBQUEsRUFBcUI7QUFDbkIsSUFBQSxhQUFhLENBQUEsRUFBQSxFQUFiLElBQWEsQ0FBYjtBQURGLEdBQUEsTUFFTztBQUNMLElBQUEsRUFBRSxDQUFBO0FBQUE7QUFBQSxNQUFjLFlBQVksQ0FBNUIsTUFBNEIsQ0FBMUIsQ0FBRjtBQUNEO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYWNoaW5lT3AsIE9wLCBPcHRpb24sIFdpcmVGb3JtYXQgfSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcbmltcG9ydCB7ICRmcCB9IGZyb20gJ0BnbGltbWVyL3ZtJztcbmltcG9ydCB7IFB1c2hQcmltaXRpdmUgfSBmcm9tICcuL3ZtJztcbmltcG9ydCB7IGJsb2NrT3BlcmFuZCwgc3ltYm9sVGFibGVPcGVyYW5kIH0gZnJvbSAnLi4vb3BlcmFuZHMnO1xuaW1wb3J0IHsgU2ltcGxlQXJncyB9IGZyb20gJy4vc2hhcmVkJztcbmltcG9ydCB7IFB1c2hFeHByZXNzaW9uT3AsIFB1c2hTdGF0ZW1lbnRPcCB9IGZyb20gJy4uLy4uL3N5bnRheC9jb21waWxlcnMnO1xuXG4vKipcbiAqIFlpZWxkIHRvIGEgYmxvY2sgbG9jYXRlZCBhdCBhIHBhcnRpY3VsYXIgc3ltYm9sIGxvY2F0aW9uLlxuICpcbiAqIEBwYXJhbSB0byB0aGUgc3ltYm9sIGNvbnRhaW5pbmcgdGhlIGJsb2NrIHRvIHlpZWxkIHRvXG4gKiBAcGFyYW0gcGFyYW1zIG9wdGlvbmFsIGJsb2NrIHBhcmFtZXRlcnMgdG8geWllbGQgdG8gdGhlIGJsb2NrXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBZaWVsZEJsb2NrKFxuICBvcDogUHVzaFN0YXRlbWVudE9wLFxuICB0bzogbnVtYmVyLFxuICBwb3NpdGlvbmFsOiBPcHRpb248V2lyZUZvcm1hdC5Db3JlLlBhcmFtcz5cbik6IHZvaWQge1xuICBTaW1wbGVBcmdzKG9wLCBwb3NpdGlvbmFsLCBudWxsLCB0cnVlKTtcbiAgb3AoT3AuR2V0QmxvY2ssIHRvKTtcbiAgb3AoT3AuU3ByZWFkQmxvY2spO1xuICBvcChPcC5Db21waWxlQmxvY2spO1xuICBvcChPcC5JbnZva2VZaWVsZCk7XG4gIG9wKE9wLlBvcFNjb3BlKTtcbiAgb3AoTWFjaGluZU9wLlBvcEZyYW1lKTtcbn1cblxuLyoqXG4gKiBQdXNoIGFuIChvcHRpb25hbCkgeWllbGRhYmxlIGJsb2NrIG9udG8gdGhlIHN0YWNrLiBUaGUgeWllbGRhYmxlIGJsb2NrIG11c3QgYmUga25vd25cbiAqIHN0YXRpY2FsbHkgYXQgY29tcGlsZSB0aW1lLlxuICpcbiAqIEBwYXJhbSBibG9jayBBbiBvcHRpb25hbCBDb21waWxhYmxlIGJsb2NrXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBQdXNoWWllbGRhYmxlQmxvY2soXG4gIG9wOiBQdXNoU3RhdGVtZW50T3AsXG4gIGJsb2NrOiBPcHRpb248V2lyZUZvcm1hdC5TZXJpYWxpemVkSW5saW5lQmxvY2s+XG4pOiB2b2lkIHtcbiAgUHVzaFN5bWJvbFRhYmxlKG9wLCBibG9jayAmJiBibG9ja1sxXSk7XG4gIG9wKE9wLlB1c2hCbG9ja1Njb3BlKTtcbiAgUHVzaENvbXBpbGFibGUob3AsIGJsb2NrKTtcbn1cblxuLyoqXG4gKiBJbnZva2UgYSBibG9jayB0aGF0IGlzIGtub3duIHN0YXRpY2FsbHkgYXQgY29tcGlsZSB0aW1lLlxuICpcbiAqIEBwYXJhbSBibG9jayBhIENvbXBpbGFibGUgYmxvY2tcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEludm9rZVN0YXRpY0Jsb2NrKFxuICBvcDogUHVzaFN0YXRlbWVudE9wLFxuICBibG9jazogV2lyZUZvcm1hdC5TZXJpYWxpemVkSW5saW5lQmxvY2tcbik6IHZvaWQge1xuICBvcChNYWNoaW5lT3AuUHVzaEZyYW1lKTtcbiAgUHVzaENvbXBpbGFibGUob3AsIGJsb2NrKTtcbiAgb3AoT3AuQ29tcGlsZUJsb2NrKTtcbiAgb3AoTWFjaGluZU9wLkludm9rZVZpcnR1YWwpO1xuICBvcChNYWNoaW5lT3AuUG9wRnJhbWUpO1xufVxuXG4vKipcbiAqIEludm9rZSBhIHN0YXRpYyBibG9jaywgcHJlc2VydmluZyBzb21lIG51bWJlciBvZiBzdGFjayBlbnRyaWVzIGZvciB1c2UgaW5cbiAqIHVwZGF0aW5nLlxuICpcbiAqIEBwYXJhbSBibG9jayBBIGNvbXBpbGFibGUgYmxvY2tcbiAqIEBwYXJhbSBjYWxsZXJDb3VudCBBIG51bWJlciBvZiBzdGFjayBlbnRyaWVzIHRvIHByZXNlcnZlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBJbnZva2VTdGF0aWNCbG9ja1dpdGhTdGFjayhcbiAgb3A6IFB1c2hTdGF0ZW1lbnRPcCxcbiAgYmxvY2s6IFdpcmVGb3JtYXQuU2VyaWFsaXplZElubGluZUJsb2NrLFxuICBjYWxsZXJDb3VudDogbnVtYmVyXG4pOiB2b2lkIHtcbiAgbGV0IHBhcmFtZXRlcnMgPSBibG9ja1sxXTtcbiAgbGV0IGNhbGxlZUNvdW50ID0gcGFyYW1ldGVycy5sZW5ndGg7XG4gIGxldCBjb3VudCA9IE1hdGgubWluKGNhbGxlckNvdW50LCBjYWxsZWVDb3VudCk7XG5cbiAgaWYgKGNvdW50ID09PSAwKSB7XG4gICAgSW52b2tlU3RhdGljQmxvY2sob3AsIGJsb2NrKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBvcChNYWNoaW5lT3AuUHVzaEZyYW1lKTtcblxuICBpZiAoY291bnQpIHtcbiAgICBvcChPcC5DaGlsZFNjb3BlKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgb3AoT3AuRHVwLCAkZnAsIGNhbGxlckNvdW50IC0gaSk7XG4gICAgICBvcChPcC5TZXRWYXJpYWJsZSwgcGFyYW1ldGVyc1tpXSk7XG4gICAgfVxuICB9XG5cbiAgUHVzaENvbXBpbGFibGUob3AsIGJsb2NrKTtcbiAgb3AoT3AuQ29tcGlsZUJsb2NrKTtcbiAgb3AoTWFjaGluZU9wLkludm9rZVZpcnR1YWwpO1xuXG4gIGlmIChjb3VudCkge1xuICAgIG9wKE9wLlBvcFNjb3BlKTtcbiAgfVxuXG4gIG9wKE1hY2hpbmVPcC5Qb3BGcmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBQdXNoU3ltYm9sVGFibGUob3A6IFB1c2hFeHByZXNzaW9uT3AsIHBhcmFtZXRlcnM6IG51bWJlcltdIHwgbnVsbCk6IHZvaWQge1xuICBpZiAocGFyYW1ldGVycyAhPT0gbnVsbCkge1xuICAgIG9wKE9wLlB1c2hTeW1ib2xUYWJsZSwgc3ltYm9sVGFibGVPcGVyYW5kKHsgcGFyYW1ldGVycyB9KSk7XG4gIH0gZWxzZSB7XG4gICAgUHVzaFByaW1pdGl2ZShvcCwgbnVsbCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFB1c2hDb21waWxhYmxlKFxuICBvcDogUHVzaEV4cHJlc3Npb25PcCxcbiAgX2Jsb2NrOiBPcHRpb248V2lyZUZvcm1hdC5TZXJpYWxpemVkSW5saW5lQmxvY2s+XG4pOiB2b2lkIHtcbiAgaWYgKF9ibG9jayA9PT0gbnVsbCkge1xuICAgIFB1c2hQcmltaXRpdmUob3AsIG51bGwpO1xuICB9IGVsc2Uge1xuICAgIG9wKE9wLkNvbnN0YW50LCBibG9ja09wZXJhbmQoX2Jsb2NrKSk7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=
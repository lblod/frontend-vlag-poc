import { $fp, $sp } from '@glimmer/vm';
import { InvokeStaticBlock, InvokeStaticBlockWithStack, YieldBlock } from '../opcode-builder/helpers/blocks';
import { InvokeComponent, InvokeDynamicComponent, InvokeNonStaticComponent } from '../opcode-builder/helpers/components';
import { SwitchCases, Replayable, ReplayableIf } from '../opcode-builder/helpers/conditional';
import { expr } from '../opcode-builder/helpers/expr';
import { CompilePositional, SimpleArgs } from '../opcode-builder/helpers/shared';
import { Call, CallDynamic, DynamicScope, PushPrimitiveReference } from '../opcode-builder/helpers/vm';
import { evalSymbolsOperand, labelOperand, stdlibOperand } from '../opcode-builder/operands';
import { Compilers } from './compilers';
import { isGetFreeComponent, isGetFreeComponentOrHelper, isGetFreeModifier, isGetFreeOptionalComponentOrHelper } from '../opcode-builder/helpers/resolution';
import { namedBlocks } from '../utils';
export var STATEMENTS = new Compilers();
var INFLATE_ATTR_TABLE = ['class', 'id', 'value', 'name', 'type', 'style', 'href'];
var INFLATE_TAG_TABLE = ['div', 'span', 'p', 'a'];
export function inflateTagName(tagName) {
  return typeof tagName === 'string' ? tagName : INFLATE_TAG_TABLE[tagName];
}
export function inflateAttrName(attrName) {
  return typeof attrName === 'string' ? attrName : INFLATE_ATTR_TABLE[attrName];
}
STATEMENTS.add(3
/* Comment */
, function (op, sexp) {
  return op(42
  /* Comment */
  , sexp[1]);
});
STATEMENTS.add(13
/* CloseElement */
, function (op) {
  return op(55
  /* CloseElement */
  );
});
STATEMENTS.add(12
/* FlushElement */
, function (op) {
  return op(54
  /* FlushElement */
  );
});
STATEMENTS.add(4
/* Modifier */
, function (op, _ref) {
  var expression = _ref[1],
      positional = _ref[2],
      named = _ref[3];

  if (isGetFreeModifier(expression)) {
    op(1003
    /* ResolveModifier */
    , expression, function (handle) {
      op(0
      /* PushFrame */
      );
      SimpleArgs(op, positional, named, false);
      op(57
      /* Modifier */
      , handle);
      op(1
      /* PopFrame */
      );
    });
  } else {
    expr(op, expression);
    op(0
    /* PushFrame */
    );
    SimpleArgs(op, positional, named, false);
    op(33
    /* Dup */
    , $fp, 1);
    op(108
    /* DynamicModifier */
    );
    op(1
    /* PopFrame */
    );
  }
});
STATEMENTS.add(14
/* StaticAttr */
, function (op, _ref2) {
  var name = _ref2[1],
      value = _ref2[2],
      namespace = _ref2[3];
  op(51
  /* StaticAttr */
  , inflateAttrName(name), value, namespace !== null && namespace !== void 0 ? namespace : null);
});
STATEMENTS.add(24
/* StaticComponentAttr */
, function (op, _ref3) {
  var name = _ref3[1],
      value = _ref3[2],
      namespace = _ref3[3];
  op(105
  /* StaticComponentAttr */
  , inflateAttrName(name), value, namespace !== null && namespace !== void 0 ? namespace : null);
});
STATEMENTS.add(15
/* DynamicAttr */
, function (op, _ref4) {
  var name = _ref4[1],
      value = _ref4[2],
      namespace = _ref4[3];
  expr(op, value);
  op(52
  /* DynamicAttr */
  , inflateAttrName(name), false, namespace !== null && namespace !== void 0 ? namespace : null);
});
STATEMENTS.add(22
/* TrustingDynamicAttr */
, function (op, _ref5) {
  var name = _ref5[1],
      value = _ref5[2],
      namespace = _ref5[3];
  expr(op, value);
  op(52
  /* DynamicAttr */
  , inflateAttrName(name), true, namespace !== null && namespace !== void 0 ? namespace : null);
});
STATEMENTS.add(16
/* ComponentAttr */
, function (op, _ref6) {
  var name = _ref6[1],
      value = _ref6[2],
      namespace = _ref6[3];
  expr(op, value);
  op(53
  /* ComponentAttr */
  , inflateAttrName(name), false, namespace !== null && namespace !== void 0 ? namespace : null);
});
STATEMENTS.add(23
/* TrustingComponentAttr */
, function (op, _ref7) {
  var name = _ref7[1],
      value = _ref7[2],
      namespace = _ref7[3];
  expr(op, value);
  op(53
  /* ComponentAttr */
  , inflateAttrName(name), true, namespace !== null && namespace !== void 0 ? namespace : null);
});
STATEMENTS.add(10
/* OpenElement */
, function (op, _ref8) {
  var tag = _ref8[1];
  op(48
  /* OpenElement */
  , inflateTagName(tag));
});
STATEMENTS.add(11
/* OpenElementWithSplat */
, function (op, _ref9) {
  var tag = _ref9[1];
  op(89
  /* PutComponentOperations */
  );
  op(48
  /* OpenElement */
  , inflateTagName(tag));
});
STATEMENTS.add(8
/* Component */
, function (op, _ref10) {
  var expr = _ref10[1],
      elementBlock = _ref10[2],
      named = _ref10[3],
      blocks = _ref10[4];

  if (isGetFreeComponent(expr)) {
    op(1004
    /* ResolveComponent */
    , expr, function (component) {
      InvokeComponent(op, component, elementBlock, null, named, blocks);
    });
  } else {
    // otherwise, the component name was an expression, so resolve the expression
    // and invoke it as a dynamic component
    InvokeDynamicComponent(op, expr, elementBlock, null, named, blocks, true, true);
  }
});
STATEMENTS.add(18
/* Yield */
, function (op, _ref11) {
  var to = _ref11[1],
      params = _ref11[2];
  return YieldBlock(op, to, params);
});
STATEMENTS.add(17
/* AttrSplat */
, function (op, _ref12) {
  var to = _ref12[1];
  return YieldBlock(op, to, null);
});
STATEMENTS.add(26
/* Debugger */
, function (op, _ref13) {
  var evalInfo = _ref13[1];
  return op(103
  /* Debugger */
  , evalSymbolsOperand(), evalInfo);
});
STATEMENTS.add(1
/* Append */
, function (op, _ref14) {
  var value = _ref14[1];

  // Special case for static values
  if (!Array.isArray(value)) {
    op(41
    /* Text */
    , value === null || value === undefined ? '' : String(value));
  } else if (isGetFreeOptionalComponentOrHelper(value)) {
    op(1008
    /* ResolveOptionalComponentOrHelper */
    , value, {
      ifComponent: function ifComponent(component) {
        InvokeComponent(op, component, null, null, null, null);
      },
      ifHelper: function ifHelper(handle) {
        op(0
        /* PushFrame */
        );
        Call(op, handle, null, null);
        op(3
        /* InvokeStatic */
        , stdlibOperand('cautious-non-dynamic-append'));
        op(1
        /* PopFrame */
        );
      },
      ifValue: function ifValue(handle) {
        op(0
        /* PushFrame */
        );
        op(29
        /* ConstantReference */
        , handle);
        op(3
        /* InvokeStatic */
        , stdlibOperand('cautious-non-dynamic-append'));
        op(1
        /* PopFrame */
        );
      }
    });
  } else if (value[0] === 28
  /* Call */
  ) {
      var expression = value[1],
          positional = value[2],
          named = value[3];

      if (isGetFreeComponentOrHelper(expression)) {
        op(1007
        /* ResolveComponentOrHelper */
        , expression, {
          ifComponent: function ifComponent(component) {
            InvokeComponent(op, component, null, positional, hashToArgs(named), null);
          },
          ifHelper: function ifHelper(handle) {
            op(0
            /* PushFrame */
            );
            Call(op, handle, positional, named);
            op(3
            /* InvokeStatic */
            , stdlibOperand('cautious-non-dynamic-append'));
            op(1
            /* PopFrame */
            );
          }
        });
      } else {
        SwitchCases(op, function () {
          expr(op, expression);
          op(106
          /* DynamicContentType */
          );
        }, function (when) {
          when(0
          /* Component */
          , function () {
            op(81
            /* ResolveCurriedComponent */
            );
            op(79
            /* PushDynamicComponentInstance */
            );
            InvokeNonStaticComponent(op, {
              capabilities: true,
              elementBlock: null,
              positional: positional,
              named: named,
              atNames: false,
              blocks: namedBlocks(null)
            });
          });
          when(1
          /* Helper */
          , function () {
            CallDynamic(op, positional, named, function () {
              op(3
              /* InvokeStatic */
              , stdlibOperand('cautious-non-dynamic-append'));
            });
          });
        });
      }
    } else {
    op(0
    /* PushFrame */
    );
    expr(op, value);
    op(3
    /* InvokeStatic */
    , stdlibOperand('cautious-append'));
    op(1
    /* PopFrame */
    );
  }
});
STATEMENTS.add(2
/* TrustingAppend */
, function (op, _ref15) {
  var value = _ref15[1];

  if (!Array.isArray(value)) {
    op(41
    /* Text */
    , value === null || value === undefined ? '' : String(value));
  } else {
    op(0
    /* PushFrame */
    );
    expr(op, value);
    op(3
    /* InvokeStatic */
    , stdlibOperand('trusting-append'));
    op(1
    /* PopFrame */
    );
  }
});
STATEMENTS.add(6
/* Block */
, function (op, _ref16) {
  var expr = _ref16[1],
      positional = _ref16[2],
      named = _ref16[3],
      blocks = _ref16[4];

  if (isGetFreeComponent(expr)) {
    op(1004
    /* ResolveComponent */
    , expr, function (component) {
      InvokeComponent(op, component, null, positional, hashToArgs(named), blocks);
    });
  } else {
    InvokeDynamicComponent(op, expr, null, positional, named, blocks, false, false);
  }
});
STATEMENTS.add(40
/* InElement */
, function (op, _ref17) {
  var block = _ref17[1],
      guid = _ref17[2],
      destination = _ref17[3],
      insertBefore = _ref17[4];
  ReplayableIf(op, function () {
    expr(op, guid);

    if (insertBefore === undefined) {
      PushPrimitiveReference(op, undefined);
    } else {
      expr(op, insertBefore);
    }

    expr(op, destination);
    op(33
    /* Dup */
    , $sp, 0);
    return 4;
  }, function () {
    op(50
    /* PushRemoteElement */
    );
    InvokeStaticBlock(op, block);
    op(56
    /* PopRemoteElement */
    );
  });
});
STATEMENTS.add(41
/* If */
, function (op, _ref18) {
  var condition = _ref18[1],
      block = _ref18[2],
      inverse = _ref18[3];
  return ReplayableIf(op, function () {
    expr(op, condition);
    op(71
    /* ToBoolean */
    );
    return 1;
  }, function () {
    InvokeStaticBlock(op, block);
  }, inverse ? function () {
    InvokeStaticBlock(op, inverse);
  } : undefined);
});
STATEMENTS.add(42
/* Each */
, function (op, _ref19) {
  var value = _ref19[1],
      key = _ref19[2],
      block = _ref19[3],
      inverse = _ref19[4];
  return Replayable(op, function () {
    if (key) {
      expr(op, key);
    } else {
      PushPrimitiveReference(op, null);
    }

    expr(op, value);
    return 2;
  }, function () {
    op(72
    /* EnterList */
    , labelOperand('BODY'), labelOperand('ELSE'));
    op(0
    /* PushFrame */
    );
    op(33
    /* Dup */
    , $fp, 1);
    op(6
    /* ReturnTo */
    , labelOperand('ITER'));
    op(1000
    /* Label */
    , 'ITER');
    op(74
    /* Iterate */
    , labelOperand('BREAK'));
    op(1000
    /* Label */
    , 'BODY');
    InvokeStaticBlockWithStack(op, block, 2);
    op(34
    /* Pop */
    , 2);
    op(4
    /* Jump */
    , labelOperand('FINALLY'));
    op(1000
    /* Label */
    , 'BREAK');
    op(1
    /* PopFrame */
    );
    op(73
    /* ExitList */
    );
    op(4
    /* Jump */
    , labelOperand('FINALLY'));
    op(1000
    /* Label */
    , 'ELSE');

    if (inverse) {
      InvokeStaticBlock(op, inverse);
    }
  });
});
STATEMENTS.add(43
/* With */
, function (op, _ref20) {
  var value = _ref20[1],
      block = _ref20[2],
      inverse = _ref20[3];
  ReplayableIf(op, function () {
    expr(op, value);
    op(33
    /* Dup */
    , $sp, 0);
    op(71
    /* ToBoolean */
    );
    return 2;
  }, function () {
    InvokeStaticBlockWithStack(op, block, 1);
  }, function () {
    if (inverse) {
      InvokeStaticBlock(op, inverse);
    }
  });
});
STATEMENTS.add(44
/* Let */
, function (op, _ref21) {
  var positional = _ref21[1],
      block = _ref21[2];
  var count = CompilePositional(op, positional);
  InvokeStaticBlockWithStack(op, block, count);
});
STATEMENTS.add(45
/* WithDynamicVars */
, function (op, _ref22) {
  var named = _ref22[1],
      block = _ref22[2];

  if (named) {
    var names = named[0],
        expressions = named[1];
    CompilePositional(op, expressions);
    DynamicScope(op, names, function () {
      InvokeStaticBlock(op, block);
    });
  } else {
    InvokeStaticBlock(op, block);
  }
});
STATEMENTS.add(46
/* InvokeComponent */
, function (op, _ref23) {
  var expr = _ref23[1],
      positional = _ref23[2],
      named = _ref23[3],
      blocks = _ref23[4];

  if (isGetFreeComponent(expr)) {
    op(1004
    /* ResolveComponent */
    , expr, function (component) {
      InvokeComponent(op, component, null, positional, hashToArgs(named), blocks);
    });
  } else {
    InvokeDynamicComponent(op, expr, null, positional, named, blocks, false, false);
  }
});

function hashToArgs(hash) {
  if (hash === null) return null;
  var names = hash[0].map(function (key) {
    return "@" + key;
  });
  return [names, hash[1]];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

import { assign } from '@glimmer/util';
import { compilable } from './compilable-template';
import { WrappedBuilder } from './wrapped-component';
var clientId = 0;
export var templateCacheCounters = {
  cacheHit: 0,
  cacheMiss: 0
};
/**
 * Wraps a template js in a template module to change it into a factory
 * that handles lazy parsing the template and to create per env singletons
 * of the template.
 */

export default function templateFactory(_ref) {
  var templateId = _ref.id,
      moduleName = _ref.moduleName,
      block = _ref.block,
      scope = _ref.scope,
      isStrictMode = _ref.isStrictMode;
  // TODO(template-refactors): This should be removed in the near future, as it
  // appears that id is unused. It is currently kept for backwards compat reasons.
  var id = templateId || "client-" + clientId++; // TODO: This caches JSON serialized output once in case a template is
  // compiled by multiple owners, but we haven't verified if this is actually
  // helpful. We should benchmark this in the future.

  var parsedBlock;
  var ownerlessTemplate = null;
  var templateCache = new WeakMap();

  var factory = function factory(owner) {
    if (parsedBlock === undefined) {
      parsedBlock = JSON.parse(block);
    }

    if (owner === undefined) {
      if (ownerlessTemplate === null) {
        templateCacheCounters.cacheMiss++;
        ownerlessTemplate = new TemplateImpl({
          id: id,
          block: parsedBlock,
          moduleName: moduleName,
          owner: null,
          scope: scope,
          isStrictMode: isStrictMode
        });
      } else {
        templateCacheCounters.cacheHit++;
      }

      return ownerlessTemplate;
    }

    var result = templateCache.get(owner);

    if (result === undefined) {
      templateCacheCounters.cacheMiss++;
      result = new TemplateImpl({
        id: id,
        block: parsedBlock,
        moduleName: moduleName,
        owner: owner,
        scope: scope,
        isStrictMode: isStrictMode
      });
      templateCache.set(owner, result);
    } else {
      templateCacheCounters.cacheHit++;
    }

    return result;
  };

  factory.__id = id;
  factory.__meta = {
    moduleName: moduleName
  };
  return factory;
}

var TemplateImpl = /*#__PURE__*/function () {
  function TemplateImpl(parsedLayout) {
    this.parsedLayout = parsedLayout;
    this.result = 'ok';
    this.layout = null;
    this.wrappedLayout = null;
  }

  var _proto = TemplateImpl.prototype;

  _proto.asLayout = function asLayout() {
    if (this.layout) return this.layout;
    return this.layout = compilable(assign({}, this.parsedLayout), this.moduleName);
  };

  _proto.asWrappedLayout = function asWrappedLayout() {
    if (this.wrappedLayout) return this.wrappedLayout;
    return this.wrappedLayout = new WrappedBuilder(assign({}, this.parsedLayout), this.moduleName);
  };

  _createClass(TemplateImpl, [{
    key: "moduleName",
    get: function get() {
      return this.parsedLayout.moduleName;
    }
  }, {
    key: "id",
    get: function get() {
      return this.parsedLayout.id;
    } // TODO(template-refactors): This should be removed in the near future, it is
    // only being exposed for backwards compatibility

  }, {
    key: "referrer",
    get: function get() {
      return {
        moduleName: this.parsedLayout.moduleName,
        owner: this.parsedLayout.owner
      };
    }
  }]);

  return TemplateImpl;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
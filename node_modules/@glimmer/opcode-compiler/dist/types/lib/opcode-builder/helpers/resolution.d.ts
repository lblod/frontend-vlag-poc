import { CompileTimeConstants, CompileTimeResolver, ContainingMetadata, Expressions, ResolveComponentOp, ResolveComponentOrHelperOp, ResolveHelperOp, ResolveModifierOp, ResolveOptionalComponentOrHelperOp, ResolveOptionalHelperOp, ResolutionTimeConstants } from '@glimmer/interfaces';
export declare const isGetFreeComponent: (opcode: Expressions.Expression) => opcode is Expressions.GetTemplateSymbol | Expressions.GetStrictFree | Expressions.GetFreeAsComponentOrHelperHeadOrThisFallback | Expressions.GetFreeAsComponentOrHelperHead | Expressions.GetFreeAsHelperHeadOrThisFallback | Expressions.GetFreeAsDeprecatedHelperHeadOrThisFallback | Expressions.GetFreeAsHelperHead | Expressions.GetFreeAsModifierHead | Expressions.GetFreeAsComponentHead;
export declare const isGetFreeModifier: (opcode: Expressions.Expression) => opcode is Expressions.GetTemplateSymbol | Expressions.GetStrictFree | Expressions.GetFreeAsComponentOrHelperHeadOrThisFallback | Expressions.GetFreeAsComponentOrHelperHead | Expressions.GetFreeAsHelperHeadOrThisFallback | Expressions.GetFreeAsDeprecatedHelperHeadOrThisFallback | Expressions.GetFreeAsHelperHead | Expressions.GetFreeAsModifierHead | Expressions.GetFreeAsComponentHead;
export declare const isGetFreeHelper: (opcode: Expressions.Expression) => opcode is Expressions.GetTemplateSymbol | Expressions.GetStrictFree | Expressions.GetFreeAsComponentOrHelperHeadOrThisFallback | Expressions.GetFreeAsComponentOrHelperHead | Expressions.GetFreeAsHelperHeadOrThisFallback | Expressions.GetFreeAsDeprecatedHelperHeadOrThisFallback | Expressions.GetFreeAsHelperHead | Expressions.GetFreeAsModifierHead | Expressions.GetFreeAsComponentHead;
export declare const isGetFreeComponentOrHelper: (opcode: Expressions.Expression) => opcode is Expressions.GetTemplateSymbol | Expressions.GetStrictFree | Expressions.GetFreeAsComponentOrHelperHeadOrThisFallback | Expressions.GetFreeAsComponentOrHelperHead | Expressions.GetFreeAsHelperHeadOrThisFallback | Expressions.GetFreeAsDeprecatedHelperHeadOrThisFallback | Expressions.GetFreeAsHelperHead | Expressions.GetFreeAsModifierHead | Expressions.GetFreeAsComponentHead;
export declare const isGetFreeOptionalHelper: (opcode: Expressions.Expression) => opcode is Expressions.GetTemplateSymbol | Expressions.GetStrictFree | Expressions.GetFreeAsComponentOrHelperHeadOrThisFallback | Expressions.GetFreeAsComponentOrHelperHead | Expressions.GetFreeAsHelperHeadOrThisFallback | Expressions.GetFreeAsDeprecatedHelperHeadOrThisFallback | Expressions.GetFreeAsHelperHead | Expressions.GetFreeAsModifierHead | Expressions.GetFreeAsComponentHead;
export declare function isGetFreeDeprecatedHelper(opcode: Expressions.Expression): opcode is Expressions.GetPathFreeAsDeprecatedHelperHeadOrThisFallback;
export declare const isGetFreeOptionalComponentOrHelper: (opcode: Expressions.Expression) => opcode is Expressions.GetTemplateSymbol | Expressions.GetStrictFree | Expressions.GetFreeAsComponentOrHelperHeadOrThisFallback | Expressions.GetFreeAsComponentOrHelperHead | Expressions.GetFreeAsHelperHeadOrThisFallback | Expressions.GetFreeAsDeprecatedHelperHeadOrThisFallback | Expressions.GetFreeAsHelperHead | Expressions.GetFreeAsModifierHead | Expressions.GetFreeAsComponentHead;
/**
 * <Foo/>
 * <Foo></Foo>
 * <Foo @arg={{true}} />
 */
export declare function resolveComponent(resolver: CompileTimeResolver, constants: CompileTimeConstants & ResolutionTimeConstants, meta: ContainingMetadata, [, expr, then]: ResolveComponentOp): void;
/**
 * (helper)
 * (helper arg)
 */
export declare function resolveHelper(resolver: CompileTimeResolver, constants: CompileTimeConstants & ResolutionTimeConstants, meta: ContainingMetadata, [, expr, then]: ResolveHelperOp): void;
/**
 * <div {{modifier}}/>
 * <div {{modifier arg}}/>
 * <Foo {{modifier}}/>
 */
export declare function resolveModifier(resolver: CompileTimeResolver, constants: CompileTimeConstants & ResolutionTimeConstants, meta: ContainingMetadata, [, expr, then]: ResolveModifierOp): void;
/**
 * {{component-or-helper arg}}
 */
export declare function resolveComponentOrHelper(resolver: CompileTimeResolver, constants: CompileTimeConstants & ResolutionTimeConstants, meta: ContainingMetadata, [, expr, { ifComponent, ifHelper }]: ResolveComponentOrHelperOp): void;
/**
 * <Foo @arg={{helper}}>
 */
export declare function resolveOptionalHelper(resolver: CompileTimeResolver, constants: CompileTimeConstants & ResolutionTimeConstants, meta: ContainingMetadata, [, expr, { ifHelper }]: ResolveOptionalHelperOp): void;
/**
 * {{maybeHelperOrComponent}}
 */
export declare function resolveOptionalComponentOrHelper(resolver: CompileTimeResolver, constants: CompileTimeConstants & ResolutionTimeConstants, meta: ContainingMetadata, [, expr, { ifComponent, ifHelper, ifValue }]: ResolveOptionalComponentOrHelperOp): void;
//# sourceMappingURL=resolution.d.ts.map
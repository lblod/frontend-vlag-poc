import { Option, WireFormat } from '@glimmer/interfaces';
import { PushExpressionOp, PushStatementOp } from '../../syntax/compilers';
/**
 * Yield to a block located at a particular symbol location.
 *
 * @param to the symbol containing the block to yield to
 * @param params optional block parameters to yield to the block
 */
export declare function YieldBlock(op: PushStatementOp, to: number, positional: Option<WireFormat.Core.Params>): void;
/**
 * Push an (optional) yieldable block onto the stack. The yieldable block must be known
 * statically at compile time.
 *
 * @param block An optional Compilable block
 */
export declare function PushYieldableBlock(op: PushStatementOp, block: Option<WireFormat.SerializedInlineBlock>): void;
/**
 * Invoke a block that is known statically at compile time.
 *
 * @param block a Compilable block
 */
export declare function InvokeStaticBlock(op: PushStatementOp, block: WireFormat.SerializedInlineBlock): void;
/**
 * Invoke a static block, preserving some number of stack entries for use in
 * updating.
 *
 * @param block A compilable block
 * @param callerCount A number of stack entries to preserve
 */
export declare function InvokeStaticBlockWithStack(op: PushStatementOp, block: WireFormat.SerializedInlineBlock, callerCount: number): void;
export declare function PushSymbolTable(op: PushExpressionOp, parameters: number[] | null): void;
export declare function PushCompilable(op: PushExpressionOp, _block: Option<WireFormat.SerializedInlineBlock>): void;
//# sourceMappingURL=blocks.d.ts.map
import { ContainingMetadata, LayoutWithContext, Option, WireFormat, NamedBlocks } from '@glimmer/interfaces';
import { PushExpressionOp, PushStatementOp } from '../../syntax/compilers';
/**
 * Compile arguments, pushing an Arguments object onto the stack.
 *
 * @param args.params
 * @param args.hash
 * @param args.blocks
 * @param args.atNames
 */
export declare function CompileArgs(op: PushStatementOp, positional: WireFormat.Core.Params, named: WireFormat.Core.Hash, blocks: NamedBlocks, atNames: boolean): void;
export declare function SimpleArgs(op: PushExpressionOp, positional: Option<WireFormat.Core.Params>, named: Option<WireFormat.Core.Hash>, atNames: boolean): void;
/**
 * Compile an optional list of positional arguments, which pushes each argument
 * onto the stack and returns the number of parameters compiled
 *
 * @param positional an optional list of positional arguments
 */
export declare function CompilePositional(op: PushExpressionOp, positional: Option<WireFormat.Core.Params>): number;
export declare function meta(layout: LayoutWithContext): ContainingMetadata;
export declare function evalSymbols(layout: LayoutWithContext): Option<string[]>;
//# sourceMappingURL=shared.d.ts.map
import { CompilableProgram, CompileTimeComponent, LayoutWithContext, NamedBlocks, WireFormat, Option, InternalComponentCapability } from '@glimmer/interfaces';
import { SavedRegister } from '@glimmer/vm';
import { PushExpressionOp, PushStatementOp } from '../../syntax/compilers';
export declare const ATTRS_BLOCK = "&attrs";
interface AnyComponent {
    elementBlock: Option<WireFormat.SerializedInlineBlock>;
    positional: WireFormat.Core.Params;
    named: WireFormat.Core.Hash;
    blocks: NamedBlocks;
}
export interface DynamicComponent extends AnyComponent {
    definition: WireFormat.Expression;
    atNames: boolean;
    curried: boolean;
}
export interface StaticComponent extends AnyComponent {
    capabilities: InternalComponentCapability;
    layout: CompilableProgram;
}
export interface Component extends AnyComponent {
    capabilities: InternalComponentCapability | true;
    atNames: boolean;
    layout?: CompilableProgram;
}
export declare function InvokeComponent(op: PushStatementOp, component: CompileTimeComponent, _elementBlock: WireFormat.Core.ElementParameters, positional: WireFormat.Core.Params, named: WireFormat.Core.Hash, _blocks: WireFormat.Core.Blocks): void;
export declare function InvokeDynamicComponent(op: PushStatementOp, definition: WireFormat.Core.Expression, _elementBlock: WireFormat.Core.ElementParameters, positional: WireFormat.Core.Params, named: WireFormat.Core.Hash, _blocks: WireFormat.Core.Blocks, atNames: boolean, curried: boolean): void;
export declare function InvokeNonStaticComponent(op: PushStatementOp, { capabilities, elementBlock, positional, named, atNames, blocks: namedBlocks, layout }: Component): void;
export declare function WrappedComponent(op: PushStatementOp, layout: LayoutWithContext, attrsBlockNumber: number): void;
export declare function invokePreparedComponent(op: PushStatementOp, hasBlock: boolean, bindableBlocks: boolean, bindableAtNames: boolean, populateLayout?: Option<() => void>): void;
export declare function InvokeBareComponent(op: PushStatementOp): void;
export declare function WithSavedRegister(op: PushExpressionOp, register: SavedRegister, block: () => void): void;
export {};
//# sourceMappingURL=components.d.ts.map
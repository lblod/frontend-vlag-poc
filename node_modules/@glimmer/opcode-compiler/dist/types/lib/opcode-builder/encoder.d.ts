import { CompileTimeConstants, CompileTimeHeap, BuilderOpcode, SingleBuilderOperand, Encoder, HighLevelOp, Dict, EncoderError, HandleResult, BuilderOp, CompileTimeResolver, ContainingMetadata, STDLib, ResolutionTimeConstants } from '@glimmer/interfaces';
export declare class Labels {
    labels: Dict<number>;
    targets: Array<{
        at: number;
        target: string;
    }>;
    label(name: string, index: number): void;
    target(at: number, target: string): void;
    patch(heap: CompileTimeHeap): void;
}
export declare function encodeOp(encoder: Encoder, constants: CompileTimeConstants & ResolutionTimeConstants, resolver: CompileTimeResolver, meta: ContainingMetadata, op: BuilderOp | HighLevelOp): void;
export declare class EncoderImpl implements Encoder {
    private heap;
    private meta;
    private stdlib?;
    private labelsStack;
    private encoder;
    private errors;
    private handle;
    constructor(heap: CompileTimeHeap, meta: ContainingMetadata, stdlib?: STDLib | undefined);
    error(error: EncoderError): void;
    commit(size: number): HandleResult;
    push(constants: CompileTimeConstants, type: BuilderOpcode, ...args: SingleBuilderOperand[]): void;
    private operand;
    private get currentLabels();
    label(name: string): void;
    startLabels(): void;
    stopLabels(): void;
}
//# sourceMappingURL=encoder.d.ts.map
import { BuilderOp, HighLevelOp, SexpOpcode, SexpOpcodeMap } from '@glimmer/interfaces';
export declare type PushExpressionOp = (...op: BuilderOp | HighLevelOp) => void;
declare const STATEMENT: unique symbol;
export declare type HighLevelStatementOp = [{
    [STATEMENT]: undefined;
}];
export declare type PushStatementOp = (...op: BuilderOp | HighLevelOp | HighLevelStatementOp) => void;
export declare type CompilerFunction<PushOp extends PushExpressionOp, TSexp> = (op: PushOp, sexp: TSexp) => void;
export declare class Compilers<PushOp extends PushExpressionOp, TSexpOpcodes extends SexpOpcode> {
    private names;
    private funcs;
    add<TSexpOpcode extends TSexpOpcodes>(name: TSexpOpcode, func: CompilerFunction<PushOp, SexpOpcodeMap[TSexpOpcode]>): void;
    compile(op: PushOp, sexp: SexpOpcodeMap[TSexpOpcodes]): void;
}
export {};
//# sourceMappingURL=compilers.d.ts.map
import { ASTv2, KEYWORDS_TYPES } from '@glimmer/syntax';
import { isPresent } from '@glimmer/util';
import { Ok, Result, ResultArray } from '../../../shared/result';
import * as mir from '../../2-encoding/mir';
import { CALL_KEYWORDS } from '../keywords';
import { hasPath } from '../utils/is-node';
export class NormalizeExpressions {
  visit(node, state) {
    switch (node.type) {
      case 'Literal':
        return Ok(this.Literal(node));

      case 'Interpolate':
        return this.Interpolate(node, state);

      case 'Path':
        return this.PathExpression(node);

      case 'Call':
        let translated = CALL_KEYWORDS.translate(node, state);

        if (translated !== null) {
          return translated;
        }

        return this.CallExpression(node, state);

      case 'DeprecatedCall':
        return this.DeprecaedCallExpression(node, state);
    }
  }

  visitList(nodes, state) {
    return new ResultArray(nodes.map(e => VISIT_EXPRS.visit(e, state))).toOptionalList();
  }
  /**
   * Normalize paths into `hir.Path` or a `hir.Expr` that corresponds to the ref.
   *
   * TODO since keywords don't support tails anyway, distinguish PathExpression from
   * VariableReference in ASTv2.
   */


  PathExpression(path) {
    let ref = this.VariableReference(path.ref);
    let {
      tail
    } = path;

    if (isPresent(tail)) {
      let tailLoc = tail[0].loc.extend(tail[tail.length - 1].loc);
      return Ok(new mir.PathExpression({
        loc: path.loc,
        head: ref,
        tail: new mir.Tail({
          loc: tailLoc,
          members: tail
        })
      }));
    } else {
      return Ok(ref);
    }
  }

  VariableReference(ref) {
    return ref;
  }

  Literal(literal) {
    return literal;
  }

  Interpolate(expr, state) {
    let parts = expr.parts.map(convertPathToCallIfKeyword);
    return VISIT_EXPRS.visitList(parts, state).mapOk(parts => new mir.InterpolateExpression({
      loc: expr.loc,
      parts: parts
    }));
  }

  CallExpression(expr, state) {
    if (!hasPath(expr)) {
      throw new Error(`unimplemented subexpression at the head of a subexpression`);
    } else {
      return Result.all(VISIT_EXPRS.visit(expr.callee, state), VISIT_EXPRS.Args(expr.args, state)).mapOk(([callee, args]) => new mir.CallExpression({
        loc: expr.loc,
        callee,
        args
      }));
    }
  }

  DeprecaedCallExpression({
    arg,
    callee,
    loc
  }, _state) {
    return Ok(new mir.DeprecatedCallExpression({
      loc,
      arg,
      callee
    }));
  }

  Args({
    positional,
    named,
    loc
  }, state) {
    return Result.all(this.Positional(positional, state), this.NamedArguments(named, state)).mapOk(([positional, named]) => new mir.Args({
      loc,
      positional,
      named
    }));
  }

  Positional(positional, state) {
    return VISIT_EXPRS.visitList(positional.exprs, state).mapOk(list => new mir.Positional({
      loc: positional.loc,
      list
    }));
  }

  NamedArguments(named, state) {
    let pairs = named.entries.map(arg => {
      let value = convertPathToCallIfKeyword(arg.value);
      return VISIT_EXPRS.visit(value, state).mapOk(value => new mir.NamedArgument({
        loc: arg.loc,
        key: arg.name,
        value
      }));
    });
    return new ResultArray(pairs).toOptionalList().mapOk(pairs => new mir.NamedArguments({
      loc: named.loc,
      entries: pairs
    }));
  }

}
export function convertPathToCallIfKeyword(path) {
  if (path.type === 'Path' && path.ref.type === 'Free' && path.ref.name in KEYWORDS_TYPES) {
    return new ASTv2.CallExpression({
      callee: path,
      args: ASTv2.Args.empty(path.loc),
      loc: path.loc
    });
  }

  return path;
}
export const VISIT_EXPRS = new NormalizeExpressions();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
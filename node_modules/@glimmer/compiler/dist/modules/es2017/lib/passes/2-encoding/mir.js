import { node } from '@glimmer/syntax';
export class Template extends node('Template').fields() {}
export class InElement extends node('InElement').fields() {}
export class Not extends node('Not').fields() {}
export class If extends node('If').fields() {}
export class IfInline extends node('IfInline').fields() {}
export class Each extends node('Each').fields() {}
export class With extends node('With').fields() {}
export class Let extends node('Let').fields() {}
export class WithDynamicVars extends node('WithDynamicVars').fields() {}
export class GetDynamicVar extends node('GetDynamicVar').fields() {}
export class Log extends node('Log').fields() {}
export class InvokeComponent extends node('InvokeComponent').fields() {}
export class NamedBlocks extends node('NamedBlocks').fields() {}
export class NamedBlock extends node('NamedBlock').fields() {}
export class EndBlock extends node('EndBlock').fields() {}
export class AppendTrustedHTML extends node('AppendTrustedHTML').fields() {}
export class AppendTextNode extends node('AppendTextNode').fields() {}
export class AppendComment extends node('AppendComment').fields() {}
export class Component extends node('Component').fields() {}
export class StaticAttr extends node('StaticAttr').fields() {}
export class DynamicAttr extends node('DynamicAttr').fields() {}
export class SimpleElement extends node('SimpleElement').fields() {}
export class ElementParameters extends node('ElementParameters').fields() {}
export class Yield extends node('Yield').fields() {}
export class Debugger extends node('Debugger').fields() {}
export class CallExpression extends node('CallExpression').fields() {}
export class DeprecatedCallExpression extends node('DeprecatedCallExpression').fields() {}
export class Modifier extends node('Modifier').fields() {}
export class InvokeBlock extends node('InvokeBlock').fields() {}
export class SplatAttr extends node('SplatAttr').fields() {}
export class PathExpression extends node('PathExpression').fields() {}
export class GetWithResolver extends node('GetWithResolver').fields() {}
export class GetSymbol extends node('GetSymbol').fields() {}
export class GetFreeWithContext extends node('GetFreeWithContext').fields() {}
/** strict mode */

export class GetFree extends node('GetFree').fields() {}
export class Missing extends node('Missing').fields() {}
export class InterpolateExpression extends node('InterpolateExpression').fields() {}
export class HasBlock extends node('HasBlock').fields() {}
export class HasBlockParams extends node('HasBlockParams').fields() {}
export class Curry extends node('Curry').fields() {}
export class Positional extends node('Positional').fields() {}
export class NamedArguments extends node('NamedArguments').fields() {}
export class NamedArgument extends node('NamedArgument').fields() {}
export class Args extends node('Args').fields() {}
export class Tail extends node('Tail').fields() {}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
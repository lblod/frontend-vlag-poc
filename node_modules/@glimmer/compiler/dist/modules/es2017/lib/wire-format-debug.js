import { dict, exhausted } from '@glimmer/util';
import { inflateAttrName, inflateTagName } from './utils';
export default class WireFormatDebugger {
  constructor([_statements, symbols, _hasEval, upvars]) {
    this.upvars = upvars;
    this.symbols = symbols;
  }

  format(program) {
    let out = [];

    for (let statement of program[0]) {
      out.push(this.formatOpcode(statement));
    }

    return out;
  }

  formatOpcode(opcode) {
    if (Array.isArray(opcode)) {
      switch (opcode[0]) {
        case 1
        /* Append */
        :
          return ['append', this.formatOpcode(opcode[1])];

        case 2
        /* TrustingAppend */
        :
          return ['trusting-append', this.formatOpcode(opcode[1])];

        case 6
        /* Block */
        :
          return ['block', this.formatOpcode(opcode[1]), this.formatParams(opcode[2]), this.formatHash(opcode[3]), this.formatBlocks(opcode[4])];

        case 40
        /* InElement */
        :
          return ['in-element', opcode[1], this.formatOpcode(opcode[2]), opcode[3] ? this.formatOpcode(opcode[3]) : undefined];

        case 10
        /* OpenElement */
        :
          return ['open-element', inflateTagName(opcode[1])];

        case 11
        /* OpenElementWithSplat */
        :
          return ['open-element-with-splat', inflateTagName(opcode[1])];

        case 13
        /* CloseElement */
        :
          return ['close-element'];

        case 12
        /* FlushElement */
        :
          return ['flush-element'];

        case 14
        /* StaticAttr */
        :
          return ['static-attr', inflateAttrName(opcode[1]), opcode[2], opcode[3]];

        case 24
        /* StaticComponentAttr */
        :
          return ['static-component-attr', inflateAttrName(opcode[1]), opcode[2], opcode[3]];

        case 15
        /* DynamicAttr */
        :
          return ['dynamic-attr', inflateAttrName(opcode[1]), this.formatOpcode(opcode[2]), opcode[3]];

        case 16
        /* ComponentAttr */
        :
          return ['component-attr', inflateAttrName(opcode[1]), this.formatOpcode(opcode[2]), opcode[3]];

        case 17
        /* AttrSplat */
        :
          return ['attr-splat'];

        case 18
        /* Yield */
        :
          return ['yield', opcode[1], this.formatParams(opcode[2])];

        case 20
        /* DynamicArg */
        :
          return ['dynamic-arg', opcode[1], this.formatOpcode(opcode[2])];

        case 21
        /* StaticArg */
        :
          return ['static-arg', opcode[1], this.formatOpcode(opcode[2])];

        case 22
        /* TrustingDynamicAttr */
        :
          return ['trusting-dynamic-attr', inflateAttrName(opcode[1]), this.formatOpcode(opcode[2]), opcode[3]];

        case 23
        /* TrustingComponentAttr */
        :
          return ['trusting-component-attr', inflateAttrName(opcode[1]), this.formatOpcode(opcode[2]), opcode[3]];

        case 26
        /* Debugger */
        :
          return ['debugger', opcode[1]];

        case 3
        /* Comment */
        :
          return ['comment', opcode[1]];

        case 4
        /* Modifier */
        :
          return ['modifier', this.formatOpcode(opcode[1]), this.formatParams(opcode[2]), this.formatHash(opcode[3])];

        case 8
        /* Component */
        :
          return ['component', this.formatOpcode(opcode[1]), this.formatElementParams(opcode[2]), this.formatHash(opcode[3]), this.formatBlocks(opcode[4])];

        case 48
        /* HasBlock */
        :
          return ['has-block', this.formatOpcode(opcode[1])];

        case 49
        /* HasBlockParams */
        :
          return ['has-block-params', this.formatOpcode(opcode[1])];

        case 50
        /* Curry */
        :
          return ['curry', this.formatOpcode(opcode[1]), this.formatCurryType(opcode[2]), this.formatParams(opcode[3]), this.formatHash(opcode[4])];

        case 27
        /* Undefined */
        :
          return ['undefined'];

        case 28
        /* Call */
        :
          return ['call', this.formatOpcode(opcode[1]), this.formatParams(opcode[2]), this.formatHash(opcode[3])];

        case 29
        /* Concat */
        :
          return ['concat', this.formatParams(opcode[1])];

        case 31
        /* GetStrictFree */
        :
          return ['get-strict-free', this.upvars[opcode[1]], opcode[2]];

        case 34
        /* GetFreeAsComponentOrHelperHeadOrThisFallback */
        :
          return ['GetFreeAsComponentOrHelperHeadOrThisFallback', this.upvars[opcode[1]], opcode[2]];

        case 35
        /* GetFreeAsComponentOrHelperHead */
        :
          return ['GetFreeAsComponentOrHelperHead', this.upvars[opcode[1]], opcode[2]];

        case 36
        /* GetFreeAsHelperHeadOrThisFallback */
        :
          return ['GetFreeAsHelperHeadOrThisFallback', this.upvars[opcode[1]], opcode[2]];

        case 99
        /* GetFreeAsDeprecatedHelperHeadOrThisFallback */
        :
          return ['GetFreeAsDeprecatedHelperHeadOrThisFallback', this.upvars[opcode[1]]];

        case 37
        /* GetFreeAsHelperHead */
        :
          return ['GetFreeAsHelperHead', this.upvars[opcode[1]], opcode[2]];

        case 39
        /* GetFreeAsComponentHead */
        :
          return ['GetFreeAsComponentHead', this.upvars[opcode[1]], opcode[2]];

        case 38
        /* GetFreeAsModifierHead */
        :
          return ['GetFreeAsModifierHead', this.upvars[opcode[1]], opcode[2]];

        case 30
        /* GetSymbol */
        :
          {
            if (opcode[1] === 0) {
              return ['get-symbol', 'this', opcode[2]];
            } else {
              return ['get-symbol', this.symbols[opcode[1] - 1], opcode[2]];
            }
          }

        case 32
        /* GetTemplateSymbol */
        :
          {
            return ['get-template-symbol', opcode[1], opcode[2]];
          }

        case 41
        /* If */
        :
          return ['if', this.formatOpcode(opcode[1]), this.formatBlock(opcode[2]), opcode[3] ? this.formatBlock(opcode[3]) : null];

        case 52
        /* IfInline */
        :
          return ['if-inline'];

        case 51
        /* Not */
        :
          return ['not'];

        case 42
        /* Each */
        :
          return ['each', this.formatOpcode(opcode[1]), opcode[2] ? this.formatOpcode(opcode[2]) : null, this.formatBlock(opcode[3]), opcode[4] ? this.formatBlock(opcode[4]) : null];

        case 43
        /* With */
        :
          return ['with', this.formatOpcode(opcode[1]), this.formatBlock(opcode[2]), opcode[3] ? this.formatBlock(opcode[3]) : null];

        case 44
        /* Let */
        :
          return ['let', this.formatParams(opcode[1]), this.formatBlock(opcode[2])];

        case 54
        /* Log */
        :
          return ['log', this.formatParams(opcode[1])];

        case 45
        /* WithDynamicVars */
        :
          return ['-with-dynamic-vars', this.formatHash(opcode[1]), this.formatBlock(opcode[2])];

        case 53
        /* GetDynamicVar */
        :
          return ['-get-dynamic-vars', this.formatOpcode(opcode[1])];

        case 46
        /* InvokeComponent */
        :
          return ['component', this.formatOpcode(opcode[1]), this.formatParams(opcode[2]), this.formatHash(opcode[3]), this.formatBlocks(opcode[4])];
      }
    } else {
      return opcode;
    }
  }

  formatCurryType(value) {
    switch (value) {
      case 0
      /* Component */
      :
        return 'component';

      case 1
      /* Helper */
      :
        return 'helper';

      case 2
      /* Modifier */
      :
        return 'modifier';

      default:
        throw exhausted(value);
    }
  }

  formatElementParams(opcodes) {
    if (opcodes === null) return null;
    return opcodes.map(o => this.formatOpcode(o));
  }

  formatParams(opcodes) {
    if (opcodes === null) return null;
    return opcodes.map(o => this.formatOpcode(o));
  }

  formatHash(hash) {
    if (hash === null) return null;
    return hash[0].reduce((accum, key, index) => {
      accum[key] = this.formatOpcode(hash[1][index]);
      return accum;
    }, dict());
  }

  formatBlocks(blocks) {
    if (blocks === null) return null;
    return blocks[0].reduce((accum, key, index) => {
      accum[key] = this.formatBlock(blocks[1][index]);
      return accum;
    }, dict());
  }

  formatBlock(block) {
    return {
      statements: block[0].map(s => this.formatOpcode(s)),
      parameters: block[1]
    };
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
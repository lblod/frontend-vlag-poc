import { normalize, Source } from '@glimmer/syntax';
import { LOCAL_LOGGER } from '@glimmer/util';
import pass0 from './passes/1-normalization/index';
import { visit as pass2 } from './passes/2-encoding/index';
export const defaultId = (() => {
  let req = typeof module === 'object' && typeof module.require === 'function' ? module.require : require;

  if (req) {
    try {
      const crypto = req('crypto');

      let idFn = src => {
        let hash = crypto.createHash('sha1');
        hash.update(src, 'utf8'); // trim to 6 bytes of data (2^48 - 1)

        return hash.digest('base64').substring(0, 8);
      };

      idFn('test');
      return idFn;
    } catch (e) {}
  }

  return function idFn() {
    return null;
  };
})();
const defaultOptions = {
  id: defaultId
};
/*
 * Compile a string into a template javascript string.
 *
 * Example usage:
 *     import { precompile } from '@glimmer/compiler';
 *     import { templateFactory } from 'glimmer-runtime';
 *     let templateJs = precompile("Howdy {{name}}");
 *     let factory = templateFactory(new Function("return " + templateJs)());
 *     let template = factory.create(env);
 *
 * @method precompile
 * @param {string} string a Glimmer template string
 * @return {string} a template javascript string
 */

export function precompileJSON(string, options = defaultOptions) {
  var _a, _b;

  let source = new Source(string, (_a = options.meta) === null || _a === void 0 ? void 0 : _a.moduleName);
  let [ast, locals] = normalize(source, options);
  let block = pass0(source, ast, (_b = options.strictMode) !== null && _b !== void 0 ? _b : false).mapOk(pass2In => {
    return pass2(pass2In);
  });

  if (false
  /* LOCAL_SHOULD_LOG */
  ) {
    LOCAL_LOGGER.log(`Template ->`, block);
  }

  if (block.isOk) {
    return [block.value, locals];
  } else {
    throw block.reason;
  }
} // UUID used as a unique placeholder for placing a snippet of JS code into
// the otherwise JSON stringified value below.

const SCOPE_PLACEHOLDER = '796d24e6-2450-4fb0-8cdf-b65638b5ef70';
/*
 * Compile a string into a template javascript string.
 *
 * Example usage:
 *     import { precompile } from '@glimmer/compiler';
 *     import { templateFactory } from 'glimmer-runtime';
 *     let templateJs = precompile("Howdy {{name}}");
 *     let factory = templateFactory(new Function("return " + templateJs)());
 *     let template = factory.create(env);
 *
 * @method precompile
 * @param {string} string a Glimmer template string
 * @return {string} a template javascript string
 */

export function precompile(source, options = defaultOptions) {
  var _a, _b;

  let [block, usedLocals] = precompileJSON(source, options);
  let moduleName = (_a = options.meta) === null || _a === void 0 ? void 0 : _a.moduleName;
  let idFn = options.id || defaultId;
  let blockJSON = JSON.stringify(block);
  let templateJSONObject = {
    id: idFn(JSON.stringify(options.meta) + blockJSON),
    block: blockJSON,
    moduleName: moduleName !== null && moduleName !== void 0 ? moduleName : '(unknown template module)',
    // lying to the type checker here because we're going to
    // replace it just below, after stringification
    scope: SCOPE_PLACEHOLDER,
    isStrictMode: (_b = options.strictMode) !== null && _b !== void 0 ? _b : false
  };

  if (usedLocals.length === 0) {
    delete templateJSONObject.scope;
  } // JSON is javascript


  let stringified = JSON.stringify(templateJSONObject);

  if (usedLocals.length > 0) {
    let scopeFn = `()=>[${usedLocals.join(',')}]`;
    stringified = stringified.replace(`"${SCOPE_PLACEHOLDER}"`, scopeFn);
  }

  return stringified;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
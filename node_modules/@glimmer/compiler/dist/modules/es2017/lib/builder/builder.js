import { assert, assertNever, dict, exhausted, isPresent, values } from '@glimmer/util';
import { normalizeStatement, VariableKind } from './builder-interface';
export class ProgramSymbols {
  constructor() {
    this._freeVariables = [];
    this._symbols = ['this'];
    this.top = this;
  }

  toSymbols() {
    return this._symbols.slice(1);
  }

  toUpvars() {
    return this._freeVariables;
  }

  freeVar(name) {
    return addString(this._freeVariables, name);
  }

  block(name) {
    return this.symbol(name);
  }

  arg(name) {
    return addString(this._symbols, name);
  }

  local(name) {
    throw new Error(`No local ${name} was found. Maybe you meant ^${name} for upvar, or !${name} for keyword?`);
  }

  this() {
    return 0;
  }

  hasLocal(_name) {
    return false;
  } // any symbol


  symbol(name) {
    return addString(this._symbols, name);
  }

  child(locals) {
    return new LocalSymbols(this, locals);
  }

}

class LocalSymbols {
  constructor(parent, locals) {
    this.parent = parent;
    this.locals = dict();

    for (let local of locals) {
      this.locals[local] = parent.top.symbol(local);
    }
  }

  get paramSymbols() {
    return values(this.locals);
  }

  get top() {
    return this.parent.top;
  }

  freeVar(name) {
    return this.parent.freeVar(name);
  }

  arg(name) {
    return this.parent.arg(name);
  }

  block(name) {
    return this.parent.block(name);
  }

  local(name) {
    if (name in this.locals) {
      return this.locals[name];
    } else {
      return this.parent.local(name);
    }
  }

  this() {
    return this.parent.this();
  }

  hasLocal(name) {
    if (name in this.locals) {
      return true;
    } else {
      return this.parent.hasLocal(name);
    }
  }

  child(locals) {
    return new LocalSymbols(this, locals);
  }

}

function addString(array, item) {
  let index = array.indexOf(item);

  if (index === -1) {
    index = array.length;
    array.push(item);
    return index;
  } else {
    return index;
  }
}

function unimpl(message) {
  return new Error(`unimplemented ${message}`);
}

export function buildStatements(statements, symbols) {
  let out = [];
  statements.forEach(s => out.push(...buildStatement(normalizeStatement(s), symbols)));
  return out;
}
export function buildNormalizedStatements(statements, symbols) {
  let out = [];
  statements.forEach(s => out.push(...buildStatement(s, symbols)));
  return out;
}
export function buildStatement(normalized, symbols = new ProgramSymbols()) {
  switch (normalized.kind) {
    case "AppendPath"
    /* AppendPath */
    :
      {
        return [[normalized.trusted ? 2
        /* TrustingAppend */
        : 1
        /* Append */
        , buildGetPath(normalized.path, symbols)]];
      }

    case "AppendExpr"
    /* AppendExpr */
    :
      {
        return [[normalized.trusted ? 2
        /* TrustingAppend */
        : 1
        /* Append */
        , buildExpression(normalized.expr, normalized.trusted ? 'TrustedAppend' : 'Append', symbols)]];
      }

    case "Call"
    /* Call */
    :
      {
        let {
          head: path,
          params,
          hash,
          trusted
        } = normalized;
        let builtParams = params ? buildParams(params, symbols) : null;
        let builtHash = hash ? buildHash(hash, symbols) : null;
        let builtExpr = buildCallHead(path, trusted ? 3
        /* AmbiguousInvoke */
        : 2
        /* AmbiguousAppendInvoke */
        , symbols);
        return [[trusted ? 2
        /* TrustingAppend */
        : 1
        /* Append */
        , [28
        /* Call */
        , builtExpr, builtParams, builtHash]]];
      }

    case "Literal"
    /* Literal */
    :
      {
        return [[1
        /* Append */
        , normalized.value]];
      }

    case "Comment"
    /* Comment */
    :
      {
        return [[3
        /* Comment */
        , normalized.value]];
      }

    case "Block"
    /* Block */
    :
      {
        let blocks = buildBlocks(normalized.blocks, normalized.blockParams, symbols);
        let hash = buildHash(normalized.hash, symbols);
        let params = buildParams(normalized.params, symbols);
        let path = buildCallHead(normalized.head, 7
        /* ResolveAsComponentHead */
        , symbols);
        return [[6
        /* Block */
        , path, params, hash, blocks]];
      }

    case "Keyword"
    /* Keyword */
    :
      {
        return [buildKeyword(normalized, symbols)];
      }

    case "Element"
    /* Element */
    :
      return buildElement(normalized, symbols);

    case "Modifier"
    /* Modifier */
    :
      throw unimpl('modifier');

    case "DynamicComponent"
    /* DynamicComponent */
    :
      throw unimpl('dynamic component');

    default:
      throw assertNever(normalized);
  }
}
export function s(arr, ...interpolated) {
  let result = arr.reduce((result, string, i) => result + `${string}${interpolated[i] ? String(interpolated[i]) : ''}`, '');
  return [0
  /* Literal */
  , result];
}
export function c(arr, ...interpolated) {
  let result = arr.reduce((result, string, i) => result + `${string}${interpolated[i] ? String(interpolated[i]) : ''}`, '');
  return [1
  /* Comment */
  , result];
}
export function unicode(charCode) {
  return String.fromCharCode(parseInt(charCode, 16));
}
export const NEWLINE = '\n';

function buildKeyword(normalized, symbols) {
  let {
    name
  } = normalized;
  let params = buildParams(normalized.params, symbols);
  let childSymbols = symbols.child(normalized.blockParams || []);
  let block = buildBlock(normalized.blocks.default, childSymbols, childSymbols.paramSymbols);
  let inverse = normalized.blocks.else ? buildBlock(normalized.blocks.else, symbols, []) : null;

  switch (name) {
    case 'with':
      return [43
      /* With */
      , params[0], block, inverse];

    case 'if':
      return [41
      /* If */
      , params[0], block, inverse];

    case 'each':
      let keyExpr = normalized.hash ? normalized.hash['key'] : null;
      let key = keyExpr ? buildExpression(keyExpr, 'Strict', symbols) : null;
      return [42
      /* Each */
      , params[0], key, block, inverse];

    default:
      throw new Error('unimplemented keyword');
  }
}

function buildElement({
  name,
  attrs,
  block
}, symbols) {
  let out = [hasSplat(attrs) ? [11
  /* OpenElementWithSplat */
  , name] : [10
  /* OpenElement */
  , name]];

  if (attrs) {
    let {
      params,
      args
    } = buildElementParams(attrs, symbols);
    out.push(...params);
    (false && assert(args === null, `Can't pass args to a simple element`));
  }

  out.push([12
  /* FlushElement */
  ]);

  if (Array.isArray(block)) {
    block.forEach(s => out.push(...buildStatement(s, symbols)));
  } else if (block === null) {// do nothing
  } else {
    throw assertNever(block);
  }

  out.push([13
  /* CloseElement */
  ]);
  return out;
}

function hasSplat(attrs) {
  if (attrs === null) return false;
  return Object.keys(attrs).some(a => attrs[a] === "Splat"
  /* Splat */
  );
}

export function buildAngleInvocation({
  attrs,
  block,
  head
}, symbols) {
  let paramList = [];
  let args = null;
  let blockList = [];

  if (attrs) {
    let built = buildElementParams(attrs, symbols);
    paramList = built.params;
    args = built.args;
  }

  if (block) blockList = buildNormalizedStatements(block, symbols);
  return [8
  /* Component */
  , buildExpression(head, 7
  /* ResolveAsComponentHead */
  , symbols), isPresent(paramList) ? paramList : null, args, [['default'], [[blockList, []]]]];
}
export function buildElementParams(attrs, symbols) {
  let params = [];
  let keys = [];
  let values = [];
  Object.keys(attrs).forEach(key => {
    let value = attrs[key];

    if (value === "Splat"
    /* Splat */
    ) {
        params.push([17
        /* AttrSplat */
        , symbols.block('&attrs')]);
      } else if (key[0] === '@') {
      keys.push(key);
      values.push(buildExpression(value, 'Strict', symbols));
    } else {
      params.push(...buildAttributeValue(key, value, // TODO: extract namespace from key
      extractNamespace(key), symbols));
    }
  });
  return {
    params,
    args: isPresent(keys) && isPresent(values) ? [keys, values] : null
  };
}
export function extractNamespace(name) {
  if (name === 'xmlns') {
    return "http://www.w3.org/2000/xmlns/"
    /* XMLNS */
    ;
  }

  let match = /^([^:]*):([^:]*)$/.exec(name);

  if (match === null) {
    return null;
  }

  let namespace = match[1];

  switch (namespace) {
    case 'xlink':
      return "http://www.w3.org/1999/xlink"
      /* XLink */
      ;

    case 'xml':
      return "http://www.w3.org/XML/1998/namespace"
      /* XML */
      ;

    case 'xmlns':
      return "http://www.w3.org/2000/xmlns/"
      /* XMLNS */
      ;
  }

  return null;
}
export function buildAttributeValue(name, value, namespace, symbols) {
  switch (value.type) {
    case "Literal"
    /* Literal */
    :
      {
        let val = value.value;

        if (val === false) {
          return [];
        } else if (val === true) {
          return [[14
          /* StaticAttr */
          , name, '', namespace !== null && namespace !== void 0 ? namespace : undefined]];
        } else if (typeof val === 'string') {
          return [[14
          /* StaticAttr */
          , name, val, namespace !== null && namespace !== void 0 ? namespace : undefined]];
        } else {
          throw new Error(`Unexpected/unimplemented literal attribute ${JSON.stringify(val)}`);
        }
      }

    default:
      return [[15
      /* DynamicAttr */
      , name, buildExpression(value, 'AttrValue', symbols), namespace !== null && namespace !== void 0 ? namespace : undefined]];
  }
}

function varContext(context, bare) {
  switch (context) {
    case 'Append':
      return bare ? 'AppendBare' : 'AppendInvoke';

    case 'TrustedAppend':
      return bare ? 'TrustedAppendBare' : 'TrustedAppendInvoke';

    case 'AttrValue':
      return bare ? 'AttrValueBare' : 'AttrValueInvoke';

    default:
      return context;
  }
}

export function buildExpression(expr, context, symbols) {
  switch (expr.type) {
    case "GetPath"
    /* GetPath */
    :
      {
        return buildGetPath(expr, symbols);
      }

    case "GetVar"
    /* GetVar */
    :
      {
        return buildVar(expr.variable, varContext(context, true), symbols);
      }

    case "Concat"
    /* Concat */
    :
      {
        return [29
        /* Concat */
        , buildConcat(expr.params, symbols)];
      }

    case "Call"
    /* Call */
    :
      {
        let builtParams = buildParams(expr.params, symbols);
        let builtHash = buildHash(expr.hash, symbols);
        let builtExpr = buildCallHead(expr.head, context === 'Strict' ? 'SubExpression' : varContext(context, false), symbols);
        return [28
        /* Call */
        , builtExpr, builtParams, builtHash];
      }

    case "HasBlock"
    /* HasBlock */
    :
      {
        return [48
        /* HasBlock */
        , buildVar({
          kind: VariableKind.Block,
          name: expr.name,
          mode: 'loose'
        }, 0
        /* Strict */
        , symbols)];
      }

    case "HasBlockParams"
    /* HasBlockParams */
    :
      {
        return [49
        /* HasBlockParams */
        , buildVar({
          kind: VariableKind.Block,
          name: expr.name,
          mode: 'loose'
        }, 0
        /* Strict */
        , symbols)];
      }

    case "Literal"
    /* Literal */
    :
      {
        if (expr.value === undefined) {
          return [27
          /* Undefined */
          ];
        } else {
          return expr.value;
        }
      }

    default:
      assertNever(expr);
  }
}
export function buildCallHead(callHead, context, symbols) {
  if (callHead.type === "GetVar"
  /* GetVar */
  ) {
      return buildVar(callHead.variable, context, symbols);
    } else {
    return buildGetPath(callHead, symbols);
  }
}
export function buildGetPath(head, symbols) {
  return buildVar(head.path.head, 0
  /* Strict */
  , symbols, head.path.tail);
}
export function buildVar(head, context, symbols, path) {
  let op = 30
  /* GetSymbol */
  ;
  let sym;

  switch (head.kind) {
    case VariableKind.Free:
      if (context === 'Strict') {
        op = 31
        /* GetStrictFree */
        ;
      } else if (context === 'AppendBare') {
        op = 34
        /* GetFreeAsComponentOrHelperHeadOrThisFallback */
        ;
      } else if (context === 'AppendInvoke') {
        op = 35
        /* GetFreeAsComponentOrHelperHead */
        ;
      } else if (context === 'TrustedAppendBare') {
        op = 36
        /* GetFreeAsHelperHeadOrThisFallback */
        ;
      } else if (context === 'TrustedAppendInvoke') {
        op = 37
        /* GetFreeAsHelperHead */
        ;
      } else if (context === 'AttrValueBare') {
        op = 36
        /* GetFreeAsHelperHeadOrThisFallback */
        ;
      } else if (context === 'AttrValueInvoke') {
        op = 37
        /* GetFreeAsHelperHead */
        ;
      } else if (context === 'SubExpression') {
        op = 37
        /* GetFreeAsHelperHead */
        ;
      } else {
        op = expressionContextOp(context);
      }

      sym = symbols.freeVar(head.name);
      break;

    default:
      op = 30
      /* GetSymbol */
      ;
      sym = getSymbolForVar(head.kind, symbols, head.name);
  }

  if (path === undefined || path.length === 0) {
    return [op, sym];
  } else {
    return [op, sym, path];
  }
}

function getSymbolForVar(kind, symbols, name) {
  switch (kind) {
    case VariableKind.Arg:
      return symbols.arg(name);

    case VariableKind.Block:
      return symbols.block(name);

    case VariableKind.Local:
      return symbols.local(name);

    case VariableKind.This:
      return symbols.this();

    default:
      return exhausted(kind);
  }
}

export function expressionContextOp(context) {
  switch (context) {
    case 0
    /* Strict */
    :
      return 31
      /* GetStrictFree */
      ;

    case 1
    /* AmbiguousAppend */
    :
      return 34
      /* GetFreeAsComponentOrHelperHeadOrThisFallback */
      ;

    case 2
    /* AmbiguousAppendInvoke */
    :
      return 35
      /* GetFreeAsComponentOrHelperHead */
      ;

    case 3
    /* AmbiguousInvoke */
    :
      return 36
      /* GetFreeAsHelperHeadOrThisFallback */
      ;

    case 5
    /* ResolveAsCallHead */
    :
      return 37
      /* GetFreeAsHelperHead */
      ;

    case 6
    /* ResolveAsModifierHead */
    :
      return 38
      /* GetFreeAsModifierHead */
      ;

    case 7
    /* ResolveAsComponentHead */
    :
      return 39
      /* GetFreeAsComponentHead */
      ;

    default:
      return exhausted(context);
  }
}
export function buildParams(exprs, symbols) {
  if (exprs === null || !isPresent(exprs)) return null;
  return exprs.map(e => buildExpression(e, 'Strict', symbols));
}
export function buildConcat(exprs, symbols) {
  return exprs.map(e => buildExpression(e, 'AttrValue', symbols));
}
export function buildHash(exprs, symbols) {
  if (exprs === null) return null;
  let out = [[], []];
  Object.keys(exprs).forEach(key => {
    out[0].push(key);
    out[1].push(buildExpression(exprs[key], 'Strict', symbols));
  });
  return out;
}
export function buildBlocks(blocks, blockParams, parent) {
  let keys = [];
  let values = [];
  Object.keys(blocks).forEach(name => {
    keys.push(name);

    if (name === 'default') {
      let symbols = parent.child(blockParams || []);
      values.push(buildBlock(blocks[name], symbols, symbols.paramSymbols));
    } else {
      values.push(buildBlock(blocks[name], parent, []));
    }
  });
  return [keys, values];
}

function buildBlock(block, symbols, locals = []) {
  return [buildNormalizedStatements(block, symbols), locals];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
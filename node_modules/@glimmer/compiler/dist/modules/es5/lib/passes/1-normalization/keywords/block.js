import { generateSyntaxError } from '@glimmer/syntax';
import { Err, Ok, Result } from '../../../shared/result';
import * as mir from '../../2-encoding/mir';
import { VISIT_EXPRS } from '../visitors/expressions';
import { VISIT_STMTS } from '../visitors/statements';
import { keywords } from './impl';
import { assertCurryKeyword } from './utils/curry';
export var BLOCK_KEYWORDS = keywords('Block').kw('in-element', {
  assert: function assert(node) {
    var args = node.args;
    var guid = args.get('guid');

    if (guid) {
      return Err(generateSyntaxError("Cannot pass `guid` to `{{#in-element}}`", guid.loc));
    }

    var insertBefore = args.get('insertBefore');
    var destination = args.nth(0);

    if (destination === null) {
      return Err(generateSyntaxError("{{#in-element}} requires a target element as its first positional parameter", args.loc));
    } // TODO Better syntax checks


    return Ok({
      insertBefore: insertBefore,
      destination: destination
    });
  },
  translate: function translate(_ref, _ref2) {
    var node = _ref.node,
        state = _ref.state;
    var insertBefore = _ref2.insertBefore,
        destination = _ref2.destination;
    var named = node.blocks.get('default');
    var body = VISIT_STMTS.NamedBlock(named, state);
    var destinationResult = VISIT_EXPRS.visit(destination, state);
    return Result.all(body, destinationResult).andThen(function (_ref3) {
      var body = _ref3[0],
          destination = _ref3[1];

      if (insertBefore) {
        return VISIT_EXPRS.visit(insertBefore, state).mapOk(function (insertBefore) {
          return {
            body: body,
            destination: destination,
            insertBefore: insertBefore
          };
        });
      } else {
        return Ok({
          body: body,
          destination: destination,
          insertBefore: new mir.Missing({
            loc: node.callee.loc.collapse('end')
          })
        });
      }
    }).mapOk(function (_ref4) {
      var body = _ref4.body,
          destination = _ref4.destination,
          insertBefore = _ref4.insertBefore;
      return new mir.InElement({
        loc: node.loc,
        block: body,
        insertBefore: insertBefore,
        guid: state.generateUniqueCursor(),
        destination: destination
      });
    });
  }
}).kw('if', {
  assert: function assert(node) {
    var args = node.args;

    if (!args.named.isEmpty()) {
      return Err(generateSyntaxError("{{#if}} cannot receive named parameters, received " + args.named.entries.map(function (e) {
        return e.name.chars;
      }).join(', '), node.loc));
    }

    if (args.positional.size > 1) {
      return Err(generateSyntaxError("{{#if}} can only receive one positional parameter in block form, the conditional value. Received " + args.positional.size + " parameters", node.loc));
    }

    var condition = args.nth(0);

    if (condition === null) {
      return Err(generateSyntaxError("{{#if}} requires a condition as its first positional parameter, did not receive any parameters", node.loc));
    }

    return Ok({
      condition: condition
    });
  },
  translate: function translate(_ref5, _ref6) {
    var node = _ref5.node,
        state = _ref5.state;
    var condition = _ref6.condition;
    var block = node.blocks.get('default');
    var inverse = node.blocks.get('else');
    var conditionResult = VISIT_EXPRS.visit(condition, state);
    var blockResult = VISIT_STMTS.NamedBlock(block, state);
    var inverseResult = inverse ? VISIT_STMTS.NamedBlock(inverse, state) : Ok(null);
    return Result.all(conditionResult, blockResult, inverseResult).mapOk(function (_ref7) {
      var condition = _ref7[0],
          block = _ref7[1],
          inverse = _ref7[2];
      return new mir.If({
        loc: node.loc,
        condition: condition,
        block: block,
        inverse: inverse
      });
    });
  }
}).kw('unless', {
  assert: function assert(node) {
    var args = node.args;

    if (!args.named.isEmpty()) {
      return Err(generateSyntaxError("{{#unless}} cannot receive named parameters, received " + args.named.entries.map(function (e) {
        return e.name.chars;
      }).join(', '), node.loc));
    }

    if (args.positional.size > 1) {
      return Err(generateSyntaxError("{{#unless}} can only receive one positional parameter in block form, the conditional value. Received " + args.positional.size + " parameters", node.loc));
    }

    var condition = args.nth(0);

    if (condition === null) {
      return Err(generateSyntaxError("{{#unless}} requires a condition as its first positional parameter, did not receive any parameters", node.loc));
    }

    return Ok({
      condition: condition
    });
  },
  translate: function translate(_ref8, _ref9) {
    var node = _ref8.node,
        state = _ref8.state;
    var condition = _ref9.condition;
    var block = node.blocks.get('default');
    var inverse = node.blocks.get('else');
    var conditionResult = VISIT_EXPRS.visit(condition, state);
    var blockResult = VISIT_STMTS.NamedBlock(block, state);
    var inverseResult = inverse ? VISIT_STMTS.NamedBlock(inverse, state) : Ok(null);
    return Result.all(conditionResult, blockResult, inverseResult).mapOk(function (_ref10) {
      var condition = _ref10[0],
          block = _ref10[1],
          inverse = _ref10[2];
      return new mir.If({
        loc: node.loc,
        condition: new mir.Not({
          value: condition,
          loc: node.loc
        }),
        block: block,
        inverse: inverse
      });
    });
  }
}).kw('each', {
  assert: function assert(node) {
    var args = node.args;

    if (!args.named.entries.every(function (e) {
      return e.name.chars === 'key';
    })) {
      return Err(generateSyntaxError("{{#each}} can only receive the 'key' named parameter, received " + args.named.entries.filter(function (e) {
        return e.name.chars !== 'key';
      }).map(function (e) {
        return e.name.chars;
      }).join(', '), args.named.loc));
    }

    if (args.positional.size > 1) {
      return Err(generateSyntaxError("{{#each}} can only receive one positional parameter, the collection being iterated. Received " + args.positional.size + " parameters", args.positional.loc));
    }

    var value = args.nth(0);
    var key = args.get('key');

    if (value === null) {
      return Err(generateSyntaxError("{{#each}} requires an iterable value to be passed as its first positional parameter, did not receive any parameters", args.loc));
    }

    return Ok({
      value: value,
      key: key
    });
  },
  translate: function translate(_ref11, _ref12) {
    var node = _ref11.node,
        state = _ref11.state;
    var value = _ref12.value,
        key = _ref12.key;
    var block = node.blocks.get('default');
    var inverse = node.blocks.get('else');
    var valueResult = VISIT_EXPRS.visit(value, state);
    var keyResult = key ? VISIT_EXPRS.visit(key, state) : Ok(null);
    var blockResult = VISIT_STMTS.NamedBlock(block, state);
    var inverseResult = inverse ? VISIT_STMTS.NamedBlock(inverse, state) : Ok(null);
    return Result.all(valueResult, keyResult, blockResult, inverseResult).mapOk(function (_ref13) {
      var value = _ref13[0],
          key = _ref13[1],
          block = _ref13[2],
          inverse = _ref13[3];
      return new mir.Each({
        loc: node.loc,
        value: value,
        key: key,
        block: block,
        inverse: inverse
      });
    });
  }
}).kw('with', {
  assert: function assert(node) {
    var args = node.args;

    if (!args.named.isEmpty()) {
      return Err(generateSyntaxError("{{#with}} cannot receive named parameters, received " + args.named.entries.map(function (e) {
        return e.name.chars;
      }).join(', '), args.named.loc));
    }

    if (args.positional.size > 1) {
      return Err(generateSyntaxError("{{#with}} can only receive one positional parameter. Received " + args.positional.size + " parameters", args.positional.loc));
    }

    var value = args.nth(0);

    if (value === null) {
      return Err(generateSyntaxError("{{#with}} requires a value as its first positional parameter, did not receive any parameters", args.loc));
    }

    return Ok({
      value: value
    });
  },
  translate: function translate(_ref14, _ref15) {
    var node = _ref14.node,
        state = _ref14.state;
    var value = _ref15.value;
    var block = node.blocks.get('default');
    var inverse = node.blocks.get('else');
    var valueResult = VISIT_EXPRS.visit(value, state);
    var blockResult = VISIT_STMTS.NamedBlock(block, state);
    var inverseResult = inverse ? VISIT_STMTS.NamedBlock(inverse, state) : Ok(null);
    return Result.all(valueResult, blockResult, inverseResult).mapOk(function (_ref16) {
      var value = _ref16[0],
          block = _ref16[1],
          inverse = _ref16[2];
      return new mir.With({
        loc: node.loc,
        value: value,
        block: block,
        inverse: inverse
      });
    });
  }
}).kw('let', {
  assert: function assert(node) {
    var args = node.args;

    if (!args.named.isEmpty()) {
      return Err(generateSyntaxError("{{#let}} cannot receive named parameters, received " + args.named.entries.map(function (e) {
        return e.name.chars;
      }).join(', '), args.named.loc));
    }

    if (args.positional.size === 0) {
      return Err(generateSyntaxError("{{#let}} requires at least one value as its first positional parameter, did not receive any parameters", args.positional.loc));
    }

    if (node.blocks.get('else')) {
      return Err(generateSyntaxError("{{#let}} cannot receive an {{else}} block", args.positional.loc));
    }

    return Ok({
      positional: args.positional
    });
  },
  translate: function translate(_ref17, _ref18) {
    var node = _ref17.node,
        state = _ref17.state;
    var positional = _ref18.positional;
    var block = node.blocks.get('default');
    var positionalResult = VISIT_EXPRS.Positional(positional, state);
    var blockResult = VISIT_STMTS.NamedBlock(block, state);
    return Result.all(positionalResult, blockResult).mapOk(function (_ref19) {
      var positional = _ref19[0],
          block = _ref19[1];
      return new mir.Let({
        loc: node.loc,
        positional: positional,
        block: block
      });
    });
  }
}).kw('-with-dynamic-vars', {
  assert: function assert(node) {
    return Ok({
      named: node.args.named
    });
  },
  translate: function translate(_ref20, _ref21) {
    var node = _ref20.node,
        state = _ref20.state;
    var named = _ref21.named;
    var block = node.blocks.get('default');
    var namedResult = VISIT_EXPRS.NamedArguments(named, state);
    var blockResult = VISIT_STMTS.NamedBlock(block, state);
    return Result.all(namedResult, blockResult).mapOk(function (_ref22) {
      var named = _ref22[0],
          block = _ref22[1];
      return new mir.WithDynamicVars({
        loc: node.loc,
        named: named,
        block: block
      });
    });
  }
}).kw('component', {
  assert: assertCurryKeyword(0
  /* Component */
  ),
  translate: function translate(_ref23, _ref24) {
    var node = _ref23.node,
        state = _ref23.state;
    var definition = _ref24.definition,
        args = _ref24.args;
    var definitionResult = VISIT_EXPRS.visit(definition, state);
    var argsResult = VISIT_EXPRS.Args(args, state);
    var blocksResult = VISIT_STMTS.NamedBlocks(node.blocks, state);
    return Result.all(definitionResult, argsResult, blocksResult).mapOk(function (_ref25) {
      var definition = _ref25[0],
          args = _ref25[1],
          blocks = _ref25[2];
      return new mir.InvokeComponent({
        loc: node.loc,
        definition: definition,
        args: args,
        blocks: blocks
      });
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
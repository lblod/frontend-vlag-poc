import { ASTv2 } from '@glimmer/syntax';
import { OptionalList } from '../../../shared/list';
import { Ok, Result, ResultArray } from '../../../shared/result';
import * as mir from '../../2-encoding/mir';
import { BLOCK_KEYWORDS } from '../keywords';
import { APPEND_KEYWORDS } from '../keywords/append';
import { ClassifiedElement, hasDynamicFeatures } from './element/classified';
import { ClassifiedComponent } from './element/component';
import { ClassifiedSimpleElement } from './element/simple-element';
import { VISIT_EXPRS } from './expressions';

var NormalizationStatements = /*#__PURE__*/function () {
  function NormalizationStatements() {}

  var _proto = NormalizationStatements.prototype;

  _proto.visitList = function visitList(nodes, state) {
    return new ResultArray(nodes.map(function (e) {
      return VISIT_STMTS.visit(e, state);
    })).toOptionalList().mapOk(function (list) {
      return list.filter(function (s) {
        return s !== null;
      });
    });
  };

  _proto.visit = function visit(node, state) {
    switch (node.type) {
      case 'GlimmerComment':
        return Ok(null);

      case 'AppendContent':
        return this.AppendContent(node, state);

      case 'HtmlText':
        return Ok(this.TextNode(node));

      case 'HtmlComment':
        return Ok(this.HtmlComment(node));

      case 'InvokeBlock':
        return this.InvokeBlock(node, state);

      case 'InvokeComponent':
        return this.Component(node, state);

      case 'SimpleElement':
        return this.SimpleElement(node, state);
    }
  };

  _proto.InvokeBlock = function InvokeBlock(node, state) {
    var _this = this;

    var translated = BLOCK_KEYWORDS.translate(node, state);

    if (translated !== null) {
      return translated;
    }

    var head = VISIT_EXPRS.visit(node.callee, state);
    var args = VISIT_EXPRS.Args(node.args, state);
    return Result.all(head, args).andThen(function (_ref) {
      var head = _ref[0],
          args = _ref[1];
      return _this.NamedBlocks(node.blocks, state).mapOk(function (blocks) {
        return new mir.InvokeBlock({
          loc: node.loc,
          head: head,
          args: args,
          blocks: blocks
        });
      });
    });
  };

  _proto.NamedBlocks = function NamedBlocks(blocks, state) {
    var _this2 = this;

    var list = new ResultArray(blocks.blocks.map(function (b) {
      return _this2.NamedBlock(b, state);
    }));
    return list.toArray().mapOk(function (list) {
      return new mir.NamedBlocks({
        loc: blocks.loc,
        blocks: OptionalList(list)
      });
    });
  };

  _proto.NamedBlock = function NamedBlock(named, state) {
    var body = state.visitBlock(named.block);
    return body.mapOk(function (body) {
      return new mir.NamedBlock({
        loc: named.loc,
        name: named.name,
        body: body.toArray(),
        scope: named.block.scope
      });
    });
  };

  _proto.SimpleElement = function SimpleElement(element, state) {
    return new ClassifiedElement(element, new ClassifiedSimpleElement(element.tag, element, hasDynamicFeatures(element)), state).toStatement();
  };

  _proto.Component = function Component(component, state) {
    return VISIT_EXPRS.visit(component.callee, state).andThen(function (callee) {
      return new ClassifiedElement(component, new ClassifiedComponent(callee, component), state).toStatement();
    });
  };

  _proto.AppendContent = function AppendContent(append, state) {
    var translated = APPEND_KEYWORDS.translate(append, state);

    if (translated !== null) {
      return translated;
    }

    var value = VISIT_EXPRS.visit(append.value, state);
    return value.mapOk(function (value) {
      if (append.trusting) {
        return new mir.AppendTrustedHTML({
          loc: append.loc,
          html: value
        });
      } else {
        return new mir.AppendTextNode({
          loc: append.loc,
          text: value
        });
      }
    });
  };

  _proto.TextNode = function TextNode(text) {
    return new mir.AppendTextNode({
      loc: text.loc,
      text: new ASTv2.LiteralExpression({
        loc: text.loc,
        value: text.chars
      })
    });
  };

  _proto.HtmlComment = function HtmlComment(comment) {
    return new mir.AppendComment({
      loc: comment.loc,
      value: comment.text
    });
  };

  return NormalizationStatements;
}();

export var VISIT_STMTS = new NormalizationStatements();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
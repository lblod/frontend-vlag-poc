import { ASTv2, KEYWORDS_TYPES } from '@glimmer/syntax';
import { isPresent } from '@glimmer/util';
import { Ok, Result, ResultArray } from '../../../shared/result';
import * as mir from '../../2-encoding/mir';
import { CALL_KEYWORDS } from '../keywords';
import { hasPath } from '../utils/is-node';
export var NormalizeExpressions = /*#__PURE__*/function () {
  function NormalizeExpressions() {}

  var _proto = NormalizeExpressions.prototype;

  _proto.visit = function visit(node, state) {
    switch (node.type) {
      case 'Literal':
        return Ok(this.Literal(node));

      case 'Interpolate':
        return this.Interpolate(node, state);

      case 'Path':
        return this.PathExpression(node);

      case 'Call':
        var translated = CALL_KEYWORDS.translate(node, state);

        if (translated !== null) {
          return translated;
        }

        return this.CallExpression(node, state);

      case 'DeprecatedCall':
        return this.DeprecaedCallExpression(node, state);
    }
  };

  _proto.visitList = function visitList(nodes, state) {
    return new ResultArray(nodes.map(function (e) {
      return VISIT_EXPRS.visit(e, state);
    })).toOptionalList();
  }
  /**
   * Normalize paths into `hir.Path` or a `hir.Expr` that corresponds to the ref.
   *
   * TODO since keywords don't support tails anyway, distinguish PathExpression from
   * VariableReference in ASTv2.
   */
  ;

  _proto.PathExpression = function PathExpression(path) {
    var ref = this.VariableReference(path.ref);
    var tail = path.tail;

    if (isPresent(tail)) {
      var tailLoc = tail[0].loc.extend(tail[tail.length - 1].loc);
      return Ok(new mir.PathExpression({
        loc: path.loc,
        head: ref,
        tail: new mir.Tail({
          loc: tailLoc,
          members: tail
        })
      }));
    } else {
      return Ok(ref);
    }
  };

  _proto.VariableReference = function VariableReference(ref) {
    return ref;
  };

  _proto.Literal = function Literal(literal) {
    return literal;
  };

  _proto.Interpolate = function Interpolate(expr, state) {
    var parts = expr.parts.map(convertPathToCallIfKeyword);
    return VISIT_EXPRS.visitList(parts, state).mapOk(function (parts) {
      return new mir.InterpolateExpression({
        loc: expr.loc,
        parts: parts
      });
    });
  };

  _proto.CallExpression = function CallExpression(expr, state) {
    if (!hasPath(expr)) {
      throw new Error("unimplemented subexpression at the head of a subexpression");
    } else {
      return Result.all(VISIT_EXPRS.visit(expr.callee, state), VISIT_EXPRS.Args(expr.args, state)).mapOk(function (_ref) {
        var callee = _ref[0],
            args = _ref[1];
        return new mir.CallExpression({
          loc: expr.loc,
          callee: callee,
          args: args
        });
      });
    }
  };

  _proto.DeprecaedCallExpression = function DeprecaedCallExpression(_ref2, _state) {
    var arg = _ref2.arg,
        callee = _ref2.callee,
        loc = _ref2.loc;
    return Ok(new mir.DeprecatedCallExpression({
      loc: loc,
      arg: arg,
      callee: callee
    }));
  };

  _proto.Args = function Args(_ref3, state) {
    var positional = _ref3.positional,
        named = _ref3.named,
        loc = _ref3.loc;
    return Result.all(this.Positional(positional, state), this.NamedArguments(named, state)).mapOk(function (_ref4) {
      var positional = _ref4[0],
          named = _ref4[1];
      return new mir.Args({
        loc: loc,
        positional: positional,
        named: named
      });
    });
  };

  _proto.Positional = function Positional(positional, state) {
    return VISIT_EXPRS.visitList(positional.exprs, state).mapOk(function (list) {
      return new mir.Positional({
        loc: positional.loc,
        list: list
      });
    });
  };

  _proto.NamedArguments = function NamedArguments(named, state) {
    var pairs = named.entries.map(function (arg) {
      var value = convertPathToCallIfKeyword(arg.value);
      return VISIT_EXPRS.visit(value, state).mapOk(function (value) {
        return new mir.NamedArgument({
          loc: arg.loc,
          key: arg.name,
          value: value
        });
      });
    });
    return new ResultArray(pairs).toOptionalList().mapOk(function (pairs) {
      return new mir.NamedArguments({
        loc: named.loc,
        entries: pairs
      });
    });
  };

  return NormalizeExpressions;
}();
export function convertPathToCallIfKeyword(path) {
  if (path.type === 'Path' && path.ref.type === 'Free' && path.ref.name in KEYWORDS_TYPES) {
    return new ASTv2.CallExpression({
      callee: path,
      args: ASTv2.Args.empty(path.loc),
      loc: path.loc
    });
  }

  return path;
}
export var VISIT_EXPRS = new NormalizeExpressions();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
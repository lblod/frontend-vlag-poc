function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import { exhausted, LOCAL_LOGGER } from '@glimmer/util';
import { deflateAttrName, deflateTagName } from '../../utils';
import { EXPR } from './expressions';

var WireStatements = /*#__PURE__*/function () {
  function WireStatements(statements) {
    this.statements = statements;
  }

  var _proto = WireStatements.prototype;

  _proto.toArray = function toArray() {
    return this.statements;
  };

  return WireStatements;
}();

export var ContentEncoder = /*#__PURE__*/function () {
  function ContentEncoder() {}

  var _proto2 = ContentEncoder.prototype;

  _proto2.list = function list(statements) {
    var out = [];

    for (var _iterator = _createForOfIteratorHelperLoose(statements), _step; !(_step = _iterator()).done;) {
      var statement = _step.value;
      var result = CONTENT.content(statement);

      if (result && result instanceof WireStatements) {
        out.push.apply(out, result.toArray());
      } else {
        out.push(result);
      }
    }

    return out;
  };

  _proto2.content = function content(stmt) {
    if (false
    /* LOCAL_SHOULD_LOG */
    ) {
        LOCAL_LOGGER.log("encoding", stmt);
      }

    return this.visitContent(stmt);
  };

  _proto2.visitContent = function visitContent(stmt) {
    switch (stmt.type) {
      case 'Debugger':
        return [26
        /* Debugger */
        , stmt.scope.getEvalInfo()];

      case 'AppendComment':
        return this.AppendComment(stmt);

      case 'AppendTextNode':
        return this.AppendTextNode(stmt);

      case 'AppendTrustedHTML':
        return this.AppendTrustedHTML(stmt);

      case 'Yield':
        return this.Yield(stmt);

      case 'Component':
        return this.Component(stmt);

      case 'SimpleElement':
        return this.SimpleElement(stmt);

      case 'InElement':
        return this.InElement(stmt);

      case 'InvokeBlock':
        return this.InvokeBlock(stmt);

      case 'If':
        return this.If(stmt);

      case 'Each':
        return this.Each(stmt);

      case 'With':
        return this.With(stmt);

      case 'Let':
        return this.Let(stmt);

      case 'WithDynamicVars':
        return this.WithDynamicVars(stmt);

      case 'InvokeComponent':
        return this.InvokeComponent(stmt);

      default:
        return exhausted(stmt);
    }
  };

  _proto2.Yield = function Yield(_ref) {
    var to = _ref.to,
        positional = _ref.positional;
    return [18
    /* Yield */
    , to, EXPR.Positional(positional)];
  };

  _proto2.InElement = function InElement(_ref2) {
    var guid = _ref2.guid,
        insertBefore = _ref2.insertBefore,
        destination = _ref2.destination,
        block = _ref2.block;
    var wireBlock = CONTENT.NamedBlock(block)[1]; // let guid = args.guid;

    var wireDestination = EXPR.expr(destination);
    var wireInsertBefore = EXPR.expr(insertBefore);

    if (wireInsertBefore === undefined) {
      return [40
      /* InElement */
      , wireBlock, guid, wireDestination];
    } else {
      return [40
      /* InElement */
      , wireBlock, guid, wireDestination, wireInsertBefore];
    }
  };

  _proto2.InvokeBlock = function InvokeBlock(_ref3) {
    var head = _ref3.head,
        args = _ref3.args,
        blocks = _ref3.blocks;
    return [6
    /* Block */
    , EXPR.expr(head)].concat(EXPR.Args(args), [CONTENT.NamedBlocks(blocks)]);
  };

  _proto2.AppendTrustedHTML = function AppendTrustedHTML(_ref4) {
    var html = _ref4.html;
    return [2
    /* TrustingAppend */
    , EXPR.expr(html)];
  };

  _proto2.AppendTextNode = function AppendTextNode(_ref5) {
    var text = _ref5.text;
    return [1
    /* Append */
    , EXPR.expr(text)];
  };

  _proto2.AppendComment = function AppendComment(_ref6) {
    var value = _ref6.value;
    return [3
    /* Comment */
    , value.chars];
  };

  _proto2.SimpleElement = function SimpleElement(_ref7) {
    var tag = _ref7.tag,
        params = _ref7.params,
        body = _ref7.body,
        dynamicFeatures = _ref7.dynamicFeatures;
    var op = dynamicFeatures ? 11
    /* OpenElementWithSplat */
    : 10
    /* OpenElement */
    ;
    return new WireStatements([[op, deflateTagName(tag.chars)]].concat(CONTENT.ElementParameters(params).toArray(), [[12
    /* FlushElement */
    ]], CONTENT.list(body), [[13
    /* CloseElement */
    ]]));
  };

  _proto2.Component = function Component(_ref8) {
    var tag = _ref8.tag,
        params = _ref8.params,
        args = _ref8.args,
        blocks = _ref8.blocks;
    var wireTag = EXPR.expr(tag);
    var wirePositional = CONTENT.ElementParameters(params);
    var wireNamed = EXPR.NamedArguments(args);
    var wireNamedBlocks = CONTENT.NamedBlocks(blocks);
    return [8
    /* Component */
    , wireTag, wirePositional.toPresentArray(), wireNamed, wireNamedBlocks];
  };

  _proto2.ElementParameters = function ElementParameters(_ref9) {
    var body = _ref9.body;
    return body.map(function (p) {
      return CONTENT.ElementParameter(p);
    });
  };

  _proto2.ElementParameter = function ElementParameter(param) {
    switch (param.type) {
      case 'SplatAttr':
        return [17
        /* AttrSplat */
        , param.symbol];

      case 'DynamicAttr':
        return [dynamicAttrOp(param.kind)].concat(dynamicAttr(param));

      case 'StaticAttr':
        return [staticAttrOp(param.kind)].concat(staticAttr(param));

      case 'Modifier':
        return [4
        /* Modifier */
        , EXPR.expr(param.callee)].concat(EXPR.Args(param.args));
    }
  };

  _proto2.NamedBlocks = function NamedBlocks(_ref10) {
    var blocks = _ref10.blocks;
    var names = [];
    var serializedBlocks = [];

    for (var _iterator2 = _createForOfIteratorHelperLoose(blocks.toArray()), _step2; !(_step2 = _iterator2()).done;) {
      var block = _step2.value;

      var _CONTENT$NamedBlock = CONTENT.NamedBlock(block),
          name = _CONTENT$NamedBlock[0],
          serializedBlock = _CONTENT$NamedBlock[1];

      names.push(name);
      serializedBlocks.push(serializedBlock);
    }

    return names.length > 0 ? [names, serializedBlocks] : null;
  };

  _proto2.NamedBlock = function NamedBlock(_ref11) {
    var name = _ref11.name,
        body = _ref11.body,
        scope = _ref11.scope;
    var nameChars = name.chars;

    if (nameChars === 'inverse') {
      nameChars = 'else';
    }

    return [nameChars, [CONTENT.list(body), scope.slots]];
  };

  _proto2.If = function If(_ref12) {
    var condition = _ref12.condition,
        block = _ref12.block,
        inverse = _ref12.inverse;
    return [41
    /* If */
    , EXPR.expr(condition), CONTENT.NamedBlock(block)[1], inverse ? CONTENT.NamedBlock(inverse)[1] : null];
  };

  _proto2.Each = function Each(_ref13) {
    var value = _ref13.value,
        key = _ref13.key,
        block = _ref13.block,
        inverse = _ref13.inverse;
    return [42
    /* Each */
    , EXPR.expr(value), key ? EXPR.expr(key) : null, CONTENT.NamedBlock(block)[1], inverse ? CONTENT.NamedBlock(inverse)[1] : null];
  };

  _proto2.With = function With(_ref14) {
    var value = _ref14.value,
        block = _ref14.block,
        inverse = _ref14.inverse;
    return [43
    /* With */
    , EXPR.expr(value), CONTENT.NamedBlock(block)[1], inverse ? CONTENT.NamedBlock(inverse)[1] : null];
  };

  _proto2.Let = function Let(_ref15) {
    var positional = _ref15.positional,
        block = _ref15.block;
    return [44
    /* Let */
    , EXPR.Positional(positional), CONTENT.NamedBlock(block)[1]];
  };

  _proto2.WithDynamicVars = function WithDynamicVars(_ref16) {
    var named = _ref16.named,
        block = _ref16.block;
    return [45
    /* WithDynamicVars */
    , EXPR.NamedArguments(named), CONTENT.NamedBlock(block)[1]];
  };

  _proto2.InvokeComponent = function InvokeComponent(_ref17) {
    var definition = _ref17.definition,
        args = _ref17.args,
        blocks = _ref17.blocks;
    return [46
    /* InvokeComponent */
    , EXPR.expr(definition), EXPR.Positional(args.positional), EXPR.NamedArguments(args.named), blocks ? CONTENT.NamedBlocks(blocks) : null];
  };

  return ContentEncoder;
}();
export var CONTENT = new ContentEncoder();

function staticAttr(_ref18) {
  var name = _ref18.name,
      value = _ref18.value,
      namespace = _ref18.namespace;
  var out = [deflateAttrName(name.chars), value.chars];

  if (namespace) {
    out.push(namespace);
  }

  return out;
}

function dynamicAttr(_ref19) {
  var name = _ref19.name,
      value = _ref19.value,
      namespace = _ref19.namespace;
  var out = [deflateAttrName(name.chars), EXPR.expr(value)];

  if (namespace) {
    out.push(namespace);
  }

  return out;
}

function staticAttrOp(kind) {
  if (kind.component) {
    return 24
    /* StaticComponentAttr */
    ;
  } else {
      return 14
      /* StaticAttr */
      ;
    }
}

function dynamicAttrOp(kind) {
  if (kind.component) {
    return kind.trusting ? 23
    /* TrustingComponentAttr */
    : 16
    /* ComponentAttr */
    ;
  } else {
    return kind.trusting ? 22
    /* TrustingDynamicAttr */
    : 15
    /* DynamicAttr */
    ;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
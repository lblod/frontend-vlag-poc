function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import { generateSyntaxError, isKeyword, KEYWORDS_TYPES } from '@glimmer/syntax';
import { exhausted } from '@glimmer/util';
import { Err } from '../../../shared/result';

var KeywordImpl = /*#__PURE__*/function () {
  function KeywordImpl(keyword, type, delegate) {
    this.keyword = keyword;
    this.delegate = delegate;
    var nodes = new Set();

    for (var _iterator = _createForOfIteratorHelperLoose(KEYWORD_NODES[type]), _step; !(_step = _iterator()).done;) {
      var nodeType = _step.value;
      nodes.add(nodeType);
    }

    this.types = nodes;
  }

  var _proto = KeywordImpl.prototype;

  _proto.match = function match(node) {
    if (!this.types.has(node.type)) {
      return false;
    }

    var path = getCalleeExpression(node);

    if (path !== null && path.type === 'Path' && path.ref.type === 'Free') {
      if (path.tail.length > 0) {
        if (path.ref.resolution.serialize() === 'Loose') {
          // cannot be a keyword reference, keywords do not allow paths (must be
          // relying on implicit this fallback)
          return false;
        }
      }

      return path.ref.name === this.keyword;
    } else {
      return false;
    }
  };

  _proto.translate = function translate(node, state) {
    var _this = this;

    if (this.match(node)) {
      var path = getCalleeExpression(node);

      if (path !== null && path.type === 'Path' && path.tail.length > 0) {
        return Err(generateSyntaxError("The `" + this.keyword + "` keyword was used incorrectly. It was used as `" + path.loc.asString() + "`, but it cannot be used with additional path segments. \n\nError caused by", node.loc));
      }

      var param = this.delegate.assert(node, state);
      return param.andThen(function (param) {
        return _this.delegate.translate({
          node: node,
          state: state
        }, param);
      });
    } else {
      return null;
    }
  };

  return KeywordImpl;
}();

export var KEYWORD_NODES = {
  Call: ['Call'],
  Block: ['InvokeBlock'],
  Append: ['AppendContent'],
  Modifier: ['ElementModifier']
};
export function keyword(keyword, type, delegate) {
  return new KeywordImpl(keyword, type, delegate);
}

function getCalleeExpression(node) {
  switch (node.type) {
    // This covers the inside of attributes and expressions, as well as the callee
    // of call nodes
    case 'Path':
      return node;

    case 'AppendContent':
      return getCalleeExpression(node.value);

    case 'Call':
    case 'InvokeBlock':
    case 'ElementModifier':
      return node.callee;

    default:
      return null;
  }
}

export var Keywords = /*#__PURE__*/function () {
  function Keywords(type) {
    this._keywords = [];
    this._type = type;
  }

  var _proto2 = Keywords.prototype;

  _proto2.kw = function kw(name, delegate) {
    this._keywords.push(keyword(name, this._type, delegate));

    return this;
  };

  _proto2.translate = function translate(node, state) {
    for (var _iterator2 = _createForOfIteratorHelperLoose(this._keywords), _step2; !(_step2 = _iterator2()).done;) {
      var _keyword = _step2.value;

      var result = _keyword.translate(node, state);

      if (result !== null) {
        return result;
      }
    }

    var path = getCalleeExpression(node);

    if (path && path.type === 'Path' && path.ref.type === 'Free' && isKeyword(path.ref.name)) {
      var name = path.ref.name;
      var usedType = this._type;
      var validTypes = KEYWORDS_TYPES[name];

      if (validTypes.indexOf(usedType) === -1) {
        return Err(generateSyntaxError("The `" + name + "` keyword was used incorrectly. It was used as " + typesToReadableName[usedType] + ", but its valid usages are:\n\n" + generateTypesMessage(name, validTypes) + "\n\nError caused by", node.loc));
      }
    }

    return null;
  };

  return Keywords;
}();
var typesToReadableName = {
  Append: 'an append statement',
  Block: 'a block statement',
  Call: 'a call expression',
  Modifier: 'a modifier'
};

function generateTypesMessage(name, types) {
  return types.map(function (type) {
    switch (type) {
      case 'Append':
        return "- As an append statement, as in: {{" + name + "}}";

      case 'Block':
        return "- As a block statement, as in: {{#" + name + "}}{{/" + name + "}}";

      case 'Call':
        return "- As an expression, as in: (" + name + ")";

      case 'Modifier':
        return "- As a modifier, as in: <div {{" + name + "}}></div>";

      default:
        return exhausted(type);
    }
  }).join('\n\n');
}
/**
 * This function builds keyword definitions for a particular type of AST node (`KeywordType`).
 *
 * You can build keyword definitions for:
 *
 * - `Expr`: A `SubExpression` or `PathExpression`
 * - `Block`: A `BlockStatement`
 *   - A `BlockStatement` is a keyword candidate if its head is a
 *     `PathExpression`
 * - `Append`: An `AppendStatement`
 *
 * A node is a keyword candidate if:
 *
 * - A `PathExpression` is a keyword candidate if it has no tail, and its
 *   head expression is a `LocalVarHead` or `FreeVarHead` whose name is
 *   the keyword's name.
 * - A `SubExpression`, `AppendStatement`, or `BlockStatement` is a keyword
 *   candidate if its head is a keyword candidate.
 *
 * The keyword infrastructure guarantees that:
 *
 * - If a node is not a keyword candidate, it is never passed to any keyword's
 *   `assert` method.
 * - If a node is not the `KeywordType` for a particular keyword, it will not
 *   be passed to the keyword's `assert` method.
 *
 * `Expr` keywords are used in expression positions and should return HIR
 * expressions. `Block` and `Append` keywords are used in statement
 * positions and should return HIR statements.
 *
 * A keyword definition has two parts:
 *
 * - `match`, which determines whether an AST node matches the keyword, and can
 *   optionally return some information extracted from the AST node.
 * - `translate`, which takes a matching AST node as well as the extracted
 *   information and returns an appropriate HIR instruction.
 *
 * # Example
 *
 * This keyword:
 *
 * - turns `(hello)` into `"hello"`
 *   - as long as `hello` is not in scope
 * - makes it an error to pass any arguments (such as `(hello world)`)
 *
 * ```ts
 * keywords('SubExpr').kw('hello', {
 *   assert(node: ExprKeywordNode): Result<void> | false {
 *     // we don't want to transform `hello` as a `PathExpression`
 *     if (node.type !== 'SubExpression') {
 *       return false;
 *     }
 *
 *     // node.head would be `LocalVarHead` if `hello` was in scope
 *     if (node.head.type !== 'FreeVarHead') {
 *       return false;
 *     }
 *
 *     if (node.params.length || node.hash) {
 *       return Err(generateSyntaxError(`(hello) does not take any arguments`), node.loc);
 *     } else {
 *       return Ok();
 *     }
 *   },
 *
 *   translate(node: ASTv2.SubExpression): hir.Expression {
 *     return ASTv2.builders.literal("hello", node.loc)
 *   }
 * })
 * ```
 *
 * The keyword infrastructure checks to make sure that the node is the right
 * type before calling `assert`, so you only need to consider `SubExpression`
 * and `PathExpression` here. It also checks to make sure that the node passed
 * to `assert` has the keyword name in the right place.
 *
 * Note the important difference between returning `false` from `assert`,
 * which just means that the node didn't match, and returning `Err`, which
 * means that the node matched, but there was a keyword-specific syntax
 * error.
 */


export function keywords(type) {
  return new Keywords(type);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
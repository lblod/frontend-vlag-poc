import { generateSyntaxError } from '@glimmer/syntax';
import { Err, Ok, Result } from '../../../../shared/result';
import * as mir from '../../../2-encoding/mir';
import { VISIT_EXPRS } from '../../visitors/expressions';

function assertIfUnlessInlineKeyword(type) {
  return function (originalNode) {
    var _a;

    var inverted = type === 'unless';
    var node = originalNode.type === 'AppendContent' ? originalNode.value : originalNode;
    var named = node.type === 'Call' ? node.args.named : null;
    var positional = node.type === 'Call' ? node.args.positional : null;

    if (named && !named.isEmpty()) {
      return Err(generateSyntaxError("(" + type + ") cannot receive named parameters, received " + named.entries.map(function (e) {
        return e.name.chars;
      }).join(', '), originalNode.loc));
    }

    var condition = positional === null || positional === void 0 ? void 0 : positional.nth(0);

    if (!positional || !condition) {
      return Err(generateSyntaxError("When used inline, (" + type + ") requires at least two parameters 1. the condition that determines the state of the (" + type + "), and 2. the value to return if the condition is " + (inverted ? 'false' : 'true') + ". Did not receive any parameters", originalNode.loc));
    }

    var truthy = positional.nth(1);
    var falsy = positional.nth(2);

    if (truthy === null) {
      return Err(generateSyntaxError("When used inline, (" + type + ") requires at least two parameters 1. the condition that determines the state of the (" + type + "), and 2. the value to return if the condition is " + (inverted ? 'false' : 'true') + ". Received only one parameter, the condition", originalNode.loc));
    }

    if (positional.size > 3) {
      return Err(generateSyntaxError("When used inline, (" + type + ") can receive a maximum of three positional parameters 1. the condition that determines the state of the (" + type + "), 2. the value to return if the condition is " + (inverted ? 'false' : 'true') + ", and 3. the value to return if the condition is " + (inverted ? 'true' : 'false') + ". Received " + ((_a = positional === null || positional === void 0 ? void 0 : positional.size) !== null && _a !== void 0 ? _a : 0) + " parameters", originalNode.loc));
    }

    return Ok({
      condition: condition,
      truthy: truthy,
      falsy: falsy
    });
  };
}

function translateIfUnlessInlineKeyword(type) {
  var inverted = type === 'unless';
  return function (_ref, _ref2) {
    var node = _ref.node,
        state = _ref.state;
    var condition = _ref2.condition,
        truthy = _ref2.truthy,
        falsy = _ref2.falsy;
    var conditionResult = VISIT_EXPRS.visit(condition, state);
    var truthyResult = VISIT_EXPRS.visit(truthy, state);
    var falsyResult = falsy ? VISIT_EXPRS.visit(falsy, state) : Ok(null);
    return Result.all(conditionResult, truthyResult, falsyResult).mapOk(function (_ref3) {
      var condition = _ref3[0],
          truthy = _ref3[1],
          falsy = _ref3[2];

      if (inverted) {
        condition = new mir.Not({
          value: condition,
          loc: node.loc
        });
      }

      return new mir.IfInline({
        loc: node.loc,
        condition: condition,
        truthy: truthy,
        falsy: falsy
      });
    });
  };
}

export function ifUnlessInlineKeyword(type) {
  return {
    assert: assertIfUnlessInlineKeyword(type),
    translate: translateIfUnlessInlineKeyword(type)
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
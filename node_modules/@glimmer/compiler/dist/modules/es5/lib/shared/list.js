function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import { isPresent, mapPresent } from '@glimmer/util';
export var PresentList = /*#__PURE__*/function () {
  function PresentList(list) {
    this.list = list;
  }

  var _proto = PresentList.prototype;

  _proto.toArray = function toArray() {
    return this.list;
  };

  _proto.map = function map(callback) {
    var result = mapPresent(this.list, callback);
    return new PresentList(result);
  };

  _proto.filter = function filter(predicate) {
    var out = [];

    for (var _iterator = _createForOfIteratorHelperLoose(this.list), _step; !(_step = _iterator()).done;) {
      var item = _step.value;

      if (predicate(item)) {
        out.push(item);
      }
    }

    return OptionalList(out);
  };

  _proto.toPresentArray = function toPresentArray() {
    return this.list;
  };

  _proto.into = function into(_ref) {
    var ifPresent = _ref.ifPresent;
    return ifPresent(this);
  };

  return PresentList;
}();
export var EmptyList = /*#__PURE__*/function () {
  function EmptyList() {
    this.list = [];
  }

  var _proto2 = EmptyList.prototype;

  _proto2.map = function map(_callback) {
    return new EmptyList();
  };

  _proto2.filter = function filter(_predicate) {
    return new EmptyList();
  };

  _proto2.toArray = function toArray() {
    return this.list;
  };

  _proto2.toPresentArray = function toPresentArray() {
    return null;
  };

  _proto2.into = function into(_ref2) {
    var ifEmpty = _ref2.ifEmpty;
    return ifEmpty();
  };

  return EmptyList;
}(); // export type OptionalList<T> = PresentList<T> | EmptyList<T>;

export function OptionalList(value) {
  if (isPresent(value)) {
    return new PresentList(value);
  } else {
    return new EmptyList();
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL2NvbXBpbGVyL2xpYi9zaGFyZWQvbGlzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxTQUFBLFNBQUEsRUFBQSxVQUFBLFFBQUEsZUFBQTtBQVlBLFdBQU0sV0FBTjtBQUNFLHVCQUFBLElBQUEsRUFBMEM7QUFBckIsU0FBQSxJQUFBLEdBQUEsSUFBQTtBQUF5Qjs7QUFEaEQ7O0FBQUEsU0FHRSxPQUhGLEdBR0UsbUJBQU87QUFDTCxXQUFPLEtBQVAsSUFBQTtBQUNELEdBTEg7O0FBQUEsU0FPRSxHQVBGLEdBT0UsYUFBRyxRQUFILEVBQWdDO0FBQzlCLFFBQUksTUFBTSxHQUFHLFVBQVUsQ0FBQyxLQUFELElBQUEsRUFBdkIsUUFBdUIsQ0FBdkI7QUFDQSxXQUFPLElBQUEsV0FBQSxDQUFQLE1BQU8sQ0FBUDtBQUNELEdBVkg7O0FBQUEsU0FZRSxNQVpGLEdBWUUsZ0JBQU0sU0FBTixFQUF1RDtBQUNyRCxRQUFJLEdBQUcsR0FBUCxFQUFBOztBQUVBLHlEQUFpQixLQUFqQixJQUFBLHdDQUE0QjtBQUFBLFVBQTVCLElBQTRCOztBQUMxQixVQUFJLFNBQVMsQ0FBYixJQUFhLENBQWIsRUFBcUI7QUFDbkIsUUFBQSxHQUFHLENBQUgsSUFBQSxDQUFBLElBQUE7QUFDRDtBQUNGOztBQUVELFdBQU8sWUFBWSxDQUFuQixHQUFtQixDQUFuQjtBQUNELEdBdEJIOztBQUFBLFNBd0JFLGNBeEJGLEdBd0JFLDBCQUFjO0FBQ1osV0FBTyxLQUFQLElBQUE7QUFDRCxHQTFCSDs7QUFBQSxTQTRCRSxJQTVCRixHQTRCRSxvQkFBdUY7QUFBQSxRQUExRSxTQUEwRSxRQUExRSxTQUEwRTtBQUNyRixXQUFPLFNBQVMsQ0FBaEIsSUFBZ0IsQ0FBaEI7QUFDRCxHQTlCSDs7QUFBQTtBQUFBO0FBaUNBLFdBQU0sU0FBTjtBQUFBLHVCQUFBO0FBQ1csU0FBQSxJQUFBLEdBQUEsRUFBQTtBQXFCVjs7QUF0QkQ7O0FBQUEsVUFHRSxHQUhGLEdBR0UsYUFBRyxTQUFILEVBQWlDO0FBQy9CLFdBQU8sSUFBUCxTQUFPLEVBQVA7QUFDRCxHQUxIOztBQUFBLFVBT0UsTUFQRixHQU9FLGdCQUFNLFVBQU4sRUFBd0Q7QUFDdEQsV0FBTyxJQUFQLFNBQU8sRUFBUDtBQUNELEdBVEg7O0FBQUEsVUFXRSxPQVhGLEdBV0UsbUJBQU87QUFDTCxXQUFPLEtBQVAsSUFBQTtBQUNELEdBYkg7O0FBQUEsVUFlRSxjQWZGLEdBZUUsMEJBQWM7QUFDWixXQUFBLElBQUE7QUFDRCxHQWpCSDs7QUFBQSxVQW1CRSxJQW5CRixHQW1CRSxxQkFBcUY7QUFBQSxRQUF4RSxPQUF3RSxTQUF4RSxPQUF3RTtBQUNuRixXQUFPLE9BQVAsRUFBQTtBQUNELEdBckJIOztBQUFBO0FBQUEsSSxDQXdCQTs7QUFFQSxPQUFNLFNBQUEsWUFBQSxDQUFBLEtBQUEsRUFBNkM7QUFDakQsTUFBSSxTQUFTLENBQWIsS0FBYSxDQUFiLEVBQXNCO0FBQ3BCLFdBQU8sSUFBQSxXQUFBLENBQVAsS0FBTyxDQUFQO0FBREYsR0FBQSxNQUVPO0FBQ0wsV0FBTyxJQUFQLFNBQU8sRUFBUDtBQUNEO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPcHRpb24sIFByZXNlbnRBcnJheSB9IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgaXNQcmVzZW50LCBtYXBQcmVzZW50IH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgT3B0aW9uYWxMaXN0PFQ+IHtcbiAgbWFwPFU+KGNhbGxiYWNrOiAoaW5wdXQ6IFQpID0+IFUpOiBNYXBMaXN0PFQsIFUsIEFueU9wdGlvbmFsTGlzdDxUPj47XG4gIGZpbHRlcjxTIGV4dGVuZHMgVD4oXG4gICAgcHJlZGljYXRlOiAodmFsdWU6IFQsIGluZGV4OiBudW1iZXIsIGFycmF5OiBUW10pID0+IHZhbHVlIGlzIFNcbiAgKTogQW55T3B0aW9uYWxMaXN0PFM+O1xuICB0b0FycmF5KCk6IFRbXTtcbiAgdG9QcmVzZW50QXJyYXkoKTogT3B0aW9uPFByZXNlbnRBcnJheTxUPj47XG4gIGludG88VSwgVj4ob3B0aW9uczogeyBpZlByZXNlbnQ6IChhcnJheTogUHJlc2VudExpc3Q8VD4pID0+IFU7IGlmRW1wdHk6ICgpID0+IFYgfSk6IFUgfCBWO1xufVxuXG5leHBvcnQgY2xhc3MgUHJlc2VudExpc3Q8VD4gaW1wbGVtZW50cyBPcHRpb25hbExpc3Q8VD4ge1xuICBjb25zdHJ1Y3RvcihyZWFkb25seSBsaXN0OiBQcmVzZW50QXJyYXk8VD4pIHt9XG5cbiAgdG9BcnJheSgpOiBQcmVzZW50QXJyYXk8VD4ge1xuICAgIHJldHVybiB0aGlzLmxpc3Q7XG4gIH1cblxuICBtYXA8VT4oY2FsbGJhY2s6IChpbnB1dDogVCkgPT4gVSk6IE1hcExpc3Q8VCwgVSwgUHJlc2VudExpc3Q8VD4+IHtcbiAgICBsZXQgcmVzdWx0ID0gbWFwUHJlc2VudCh0aGlzLmxpc3QsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gbmV3IFByZXNlbnRMaXN0KHJlc3VsdCkgYXMgTWFwTGlzdDxULCBVLCB0aGlzPjtcbiAgfVxuXG4gIGZpbHRlcjxTIGV4dGVuZHMgVD4ocHJlZGljYXRlOiAodmFsdWU6IFQpID0+IHZhbHVlIGlzIFMpOiBBbnlPcHRpb25hbExpc3Q8Uz4ge1xuICAgIGxldCBvdXQ6IFNbXSA9IFtdO1xuXG4gICAgZm9yIChsZXQgaXRlbSBvZiB0aGlzLmxpc3QpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoaXRlbSkpIHtcbiAgICAgICAgb3V0LnB1c2goaXRlbSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIE9wdGlvbmFsTGlzdChvdXQpO1xuICB9XG5cbiAgdG9QcmVzZW50QXJyYXkoKTogUHJlc2VudEFycmF5PFQ+IHtcbiAgICByZXR1cm4gdGhpcy5saXN0O1xuICB9XG5cbiAgaW50bzxVLCBWPih7IGlmUHJlc2VudCB9OiB7IGlmUHJlc2VudDogKGFycmF5OiBQcmVzZW50TGlzdDxUPikgPT4gVTsgaWZFbXB0eTogKCkgPT4gViB9KTogVSB8IFYge1xuICAgIHJldHVybiBpZlByZXNlbnQodGhpcyk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEVtcHR5TGlzdDxUPiBpbXBsZW1lbnRzIE9wdGlvbmFsTGlzdDxUPiB7XG4gIHJlYWRvbmx5IGxpc3Q6IFRbXSA9IFtdO1xuXG4gIG1hcDxVPihfY2FsbGJhY2s6IChpbnB1dDogVCkgPT4gVSk6IE1hcExpc3Q8VCwgVSwgRW1wdHlMaXN0PFQ+PiB7XG4gICAgcmV0dXJuIG5ldyBFbXB0eUxpc3QoKSBhcyBNYXBMaXN0PFQsIFUsIHRoaXM+O1xuICB9XG5cbiAgZmlsdGVyPFMgZXh0ZW5kcyBUPihfcHJlZGljYXRlOiAodmFsdWU6IFQpID0+IHZhbHVlIGlzIFMpOiBBbnlPcHRpb25hbExpc3Q8Uz4ge1xuICAgIHJldHVybiBuZXcgRW1wdHlMaXN0KCk7XG4gIH1cblxuICB0b0FycmF5KCk6IFRbXSB7XG4gICAgcmV0dXJuIHRoaXMubGlzdDtcbiAgfVxuXG4gIHRvUHJlc2VudEFycmF5KCk6IE9wdGlvbjxQcmVzZW50QXJyYXk8VD4+IHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGludG88VSwgVj4oeyBpZkVtcHR5IH06IHsgaWZQcmVzZW50OiAoYXJyYXk6IFByZXNlbnRMaXN0PFQ+KSA9PiBVOyBpZkVtcHR5OiAoKSA9PiBWIH0pOiBVIHwgViB7XG4gICAgcmV0dXJuIGlmRW1wdHkoKTtcbiAgfVxufVxuXG4vLyBleHBvcnQgdHlwZSBPcHRpb25hbExpc3Q8VD4gPSBQcmVzZW50TGlzdDxUPiB8IEVtcHR5TGlzdDxUPjtcblxuZXhwb3J0IGZ1bmN0aW9uIE9wdGlvbmFsTGlzdDxUPih2YWx1ZTogcmVhZG9ubHkgVFtdKTogQW55T3B0aW9uYWxMaXN0PFQ+IHtcbiAgaWYgKGlzUHJlc2VudCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gbmV3IFByZXNlbnRMaXN0KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEVtcHR5TGlzdDxUPigpO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIEFueU9wdGlvbmFsTGlzdDxUPiA9IChQcmVzZW50TGlzdDxUPiB8IEVtcHR5TGlzdDxUPikgJiBPcHRpb25hbExpc3Q8VD47XG5cbmV4cG9ydCB0eXBlIE1hcExpc3Q8VCwgVSwgTCBleHRlbmRzIE9wdGlvbmFsTGlzdDxUPj4gPSBMIGV4dGVuZHMgUHJlc2VudExpc3Q8VD5cbiAgPyBQcmVzZW50TGlzdDxVPlxuICA6IEwgZXh0ZW5kcyBFbXB0eUxpc3Q8VD5cbiAgPyBFbXB0eUxpc3Q8VT5cbiAgOiBuZXZlcjtcbiJdLCJzb3VyY2VSb290IjoiIn0=
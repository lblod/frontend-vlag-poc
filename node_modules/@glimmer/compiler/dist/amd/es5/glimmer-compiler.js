define('@glimmer/compiler', ['exports', '@glimmer/syntax', '@glimmer/util'], function (exports, syntax, util) { 'use strict';

  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }
  var Template = /*#__PURE__*/function (_node$fields) {
    _inheritsLoose(Template, _node$fields);

    function Template() {
      return _node$fields.apply(this, arguments) || this;
    }

    return Template;
  }(syntax.node('Template').fields());
  var InElement = /*#__PURE__*/function (_node$fields2) {
    _inheritsLoose(InElement, _node$fields2);

    function InElement() {
      return _node$fields2.apply(this, arguments) || this;
    }

    return InElement;
  }(syntax.node('InElement').fields());
  var Not = /*#__PURE__*/function (_node$fields3) {
    _inheritsLoose(Not, _node$fields3);

    function Not() {
      return _node$fields3.apply(this, arguments) || this;
    }

    return Not;
  }(syntax.node('Not').fields());
  var If = /*#__PURE__*/function (_node$fields4) {
    _inheritsLoose(If, _node$fields4);

    function If() {
      return _node$fields4.apply(this, arguments) || this;
    }

    return If;
  }(syntax.node('If').fields());
  var IfInline = /*#__PURE__*/function (_node$fields5) {
    _inheritsLoose(IfInline, _node$fields5);

    function IfInline() {
      return _node$fields5.apply(this, arguments) || this;
    }

    return IfInline;
  }(syntax.node('IfInline').fields());
  var Each = /*#__PURE__*/function (_node$fields6) {
    _inheritsLoose(Each, _node$fields6);

    function Each() {
      return _node$fields6.apply(this, arguments) || this;
    }

    return Each;
  }(syntax.node('Each').fields());
  var With = /*#__PURE__*/function (_node$fields7) {
    _inheritsLoose(With, _node$fields7);

    function With() {
      return _node$fields7.apply(this, arguments) || this;
    }

    return With;
  }(syntax.node('With').fields());
  var Let = /*#__PURE__*/function (_node$fields8) {
    _inheritsLoose(Let, _node$fields8);

    function Let() {
      return _node$fields8.apply(this, arguments) || this;
    }

    return Let;
  }(syntax.node('Let').fields());
  var WithDynamicVars = /*#__PURE__*/function (_node$fields9) {
    _inheritsLoose(WithDynamicVars, _node$fields9);

    function WithDynamicVars() {
      return _node$fields9.apply(this, arguments) || this;
    }

    return WithDynamicVars;
  }(syntax.node('WithDynamicVars').fields());
  var GetDynamicVar = /*#__PURE__*/function (_node$fields10) {
    _inheritsLoose(GetDynamicVar, _node$fields10);

    function GetDynamicVar() {
      return _node$fields10.apply(this, arguments) || this;
    }

    return GetDynamicVar;
  }(syntax.node('GetDynamicVar').fields());
  var Log = /*#__PURE__*/function (_node$fields11) {
    _inheritsLoose(Log, _node$fields11);

    function Log() {
      return _node$fields11.apply(this, arguments) || this;
    }

    return Log;
  }(syntax.node('Log').fields());
  var InvokeComponent = /*#__PURE__*/function (_node$fields12) {
    _inheritsLoose(InvokeComponent, _node$fields12);

    function InvokeComponent() {
      return _node$fields12.apply(this, arguments) || this;
    }

    return InvokeComponent;
  }(syntax.node('InvokeComponent').fields());
  var NamedBlocks = /*#__PURE__*/function (_node$fields13) {
    _inheritsLoose(NamedBlocks, _node$fields13);

    function NamedBlocks() {
      return _node$fields13.apply(this, arguments) || this;
    }

    return NamedBlocks;
  }(syntax.node('NamedBlocks').fields());
  var NamedBlock = /*#__PURE__*/function (_node$fields14) {
    _inheritsLoose(NamedBlock, _node$fields14);

    function NamedBlock() {
      return _node$fields14.apply(this, arguments) || this;
    }

    return NamedBlock;
  }(syntax.node('NamedBlock').fields());
  var EndBlock = /*#__PURE__*/function (_node$fields15) {
    _inheritsLoose(EndBlock, _node$fields15);

    function EndBlock() {
      return _node$fields15.apply(this, arguments) || this;
    }

    return EndBlock;
  }(syntax.node('EndBlock').fields());
  var AppendTrustedHTML = /*#__PURE__*/function (_node$fields16) {
    _inheritsLoose(AppendTrustedHTML, _node$fields16);

    function AppendTrustedHTML() {
      return _node$fields16.apply(this, arguments) || this;
    }

    return AppendTrustedHTML;
  }(syntax.node('AppendTrustedHTML').fields());
  var AppendTextNode = /*#__PURE__*/function (_node$fields17) {
    _inheritsLoose(AppendTextNode, _node$fields17);

    function AppendTextNode() {
      return _node$fields17.apply(this, arguments) || this;
    }

    return AppendTextNode;
  }(syntax.node('AppendTextNode').fields());
  var AppendComment = /*#__PURE__*/function (_node$fields18) {
    _inheritsLoose(AppendComment, _node$fields18);

    function AppendComment() {
      return _node$fields18.apply(this, arguments) || this;
    }

    return AppendComment;
  }(syntax.node('AppendComment').fields());
  var Component = /*#__PURE__*/function (_node$fields19) {
    _inheritsLoose(Component, _node$fields19);

    function Component() {
      return _node$fields19.apply(this, arguments) || this;
    }

    return Component;
  }(syntax.node('Component').fields());
  var StaticAttr = /*#__PURE__*/function (_node$fields20) {
    _inheritsLoose(StaticAttr, _node$fields20);

    function StaticAttr() {
      return _node$fields20.apply(this, arguments) || this;
    }

    return StaticAttr;
  }(syntax.node('StaticAttr').fields());
  var DynamicAttr = /*#__PURE__*/function (_node$fields21) {
    _inheritsLoose(DynamicAttr, _node$fields21);

    function DynamicAttr() {
      return _node$fields21.apply(this, arguments) || this;
    }

    return DynamicAttr;
  }(syntax.node('DynamicAttr').fields());
  var SimpleElement = /*#__PURE__*/function (_node$fields22) {
    _inheritsLoose(SimpleElement, _node$fields22);

    function SimpleElement() {
      return _node$fields22.apply(this, arguments) || this;
    }

    return SimpleElement;
  }(syntax.node('SimpleElement').fields());
  var ElementParameters = /*#__PURE__*/function (_node$fields23) {
    _inheritsLoose(ElementParameters, _node$fields23);

    function ElementParameters() {
      return _node$fields23.apply(this, arguments) || this;
    }

    return ElementParameters;
  }(syntax.node('ElementParameters').fields());
  var Yield = /*#__PURE__*/function (_node$fields24) {
    _inheritsLoose(Yield, _node$fields24);

    function Yield() {
      return _node$fields24.apply(this, arguments) || this;
    }

    return Yield;
  }(syntax.node('Yield').fields());
  var Debugger = /*#__PURE__*/function (_node$fields25) {
    _inheritsLoose(Debugger, _node$fields25);

    function Debugger() {
      return _node$fields25.apply(this, arguments) || this;
    }

    return Debugger;
  }(syntax.node('Debugger').fields());
  var CallExpression = /*#__PURE__*/function (_node$fields26) {
    _inheritsLoose(CallExpression, _node$fields26);

    function CallExpression() {
      return _node$fields26.apply(this, arguments) || this;
    }

    return CallExpression;
  }(syntax.node('CallExpression').fields());
  var DeprecatedCallExpression = /*#__PURE__*/function (_node$fields27) {
    _inheritsLoose(DeprecatedCallExpression, _node$fields27);

    function DeprecatedCallExpression() {
      return _node$fields27.apply(this, arguments) || this;
    }

    return DeprecatedCallExpression;
  }(syntax.node('DeprecatedCallExpression').fields());
  var Modifier = /*#__PURE__*/function (_node$fields28) {
    _inheritsLoose(Modifier, _node$fields28);

    function Modifier() {
      return _node$fields28.apply(this, arguments) || this;
    }

    return Modifier;
  }(syntax.node('Modifier').fields());
  var InvokeBlock = /*#__PURE__*/function (_node$fields29) {
    _inheritsLoose(InvokeBlock, _node$fields29);

    function InvokeBlock() {
      return _node$fields29.apply(this, arguments) || this;
    }

    return InvokeBlock;
  }(syntax.node('InvokeBlock').fields());
  var SplatAttr = /*#__PURE__*/function (_node$fields30) {
    _inheritsLoose(SplatAttr, _node$fields30);

    function SplatAttr() {
      return _node$fields30.apply(this, arguments) || this;
    }

    return SplatAttr;
  }(syntax.node('SplatAttr').fields());
  var PathExpression = /*#__PURE__*/function (_node$fields31) {
    _inheritsLoose(PathExpression, _node$fields31);

    function PathExpression() {
      return _node$fields31.apply(this, arguments) || this;
    }

    return PathExpression;
  }(syntax.node('PathExpression').fields());
  var GetWithResolver = /*#__PURE__*/function (_node$fields32) {
    _inheritsLoose(GetWithResolver, _node$fields32);

    function GetWithResolver() {
      return _node$fields32.apply(this, arguments) || this;
    }

    return GetWithResolver;
  }(syntax.node('GetWithResolver').fields());
  var GetSymbol = /*#__PURE__*/function (_node$fields33) {
    _inheritsLoose(GetSymbol, _node$fields33);

    function GetSymbol() {
      return _node$fields33.apply(this, arguments) || this;
    }

    return GetSymbol;
  }(syntax.node('GetSymbol').fields());
  var GetFreeWithContext = /*#__PURE__*/function (_node$fields34) {
    _inheritsLoose(GetFreeWithContext, _node$fields34);

    function GetFreeWithContext() {
      return _node$fields34.apply(this, arguments) || this;
    }

    return GetFreeWithContext;
  }(syntax.node('GetFreeWithContext').fields());
  /** strict mode */

  var GetFree = /*#__PURE__*/function (_node$fields35) {
    _inheritsLoose(GetFree, _node$fields35);

    function GetFree() {
      return _node$fields35.apply(this, arguments) || this;
    }

    return GetFree;
  }(syntax.node('GetFree').fields());
  var Missing = /*#__PURE__*/function (_node$fields36) {
    _inheritsLoose(Missing, _node$fields36);

    function Missing() {
      return _node$fields36.apply(this, arguments) || this;
    }

    return Missing;
  }(syntax.node('Missing').fields());
  var InterpolateExpression = /*#__PURE__*/function (_node$fields37) {
    _inheritsLoose(InterpolateExpression, _node$fields37);

    function InterpolateExpression() {
      return _node$fields37.apply(this, arguments) || this;
    }

    return InterpolateExpression;
  }(syntax.node('InterpolateExpression').fields());
  var HasBlock = /*#__PURE__*/function (_node$fields38) {
    _inheritsLoose(HasBlock, _node$fields38);

    function HasBlock() {
      return _node$fields38.apply(this, arguments) || this;
    }

    return HasBlock;
  }(syntax.node('HasBlock').fields());
  var HasBlockParams = /*#__PURE__*/function (_node$fields39) {
    _inheritsLoose(HasBlockParams, _node$fields39);

    function HasBlockParams() {
      return _node$fields39.apply(this, arguments) || this;
    }

    return HasBlockParams;
  }(syntax.node('HasBlockParams').fields());
  var Curry = /*#__PURE__*/function (_node$fields40) {
    _inheritsLoose(Curry, _node$fields40);

    function Curry() {
      return _node$fields40.apply(this, arguments) || this;
    }

    return Curry;
  }(syntax.node('Curry').fields());
  var Positional = /*#__PURE__*/function (_node$fields41) {
    _inheritsLoose(Positional, _node$fields41);

    function Positional() {
      return _node$fields41.apply(this, arguments) || this;
    }

    return Positional;
  }(syntax.node('Positional').fields());
  var NamedArguments = /*#__PURE__*/function (_node$fields42) {
    _inheritsLoose(NamedArguments, _node$fields42);

    function NamedArguments() {
      return _node$fields42.apply(this, arguments) || this;
    }

    return NamedArguments;
  }(syntax.node('NamedArguments').fields());
  var NamedArgument = /*#__PURE__*/function (_node$fields43) {
    _inheritsLoose(NamedArgument, _node$fields43);

    function NamedArgument() {
      return _node$fields43.apply(this, arguments) || this;
    }

    return NamedArgument;
  }(syntax.node('NamedArgument').fields());
  var Args = /*#__PURE__*/function (_node$fields44) {
    _inheritsLoose(Args, _node$fields44);

    function Args() {
      return _node$fields44.apply(this, arguments) || this;
    }

    return Args;
  }(syntax.node('Args').fields());
  var Tail = /*#__PURE__*/function (_node$fields45) {
    _inheritsLoose(Tail, _node$fields45);

    function Tail() {
      return _node$fields45.apply(this, arguments) || this;
    }

    return Tail;
  }(syntax.node('Tail').fields());

  function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  var PresentList = /*#__PURE__*/function () {
    function PresentList(list) {
      this.list = list;
    }

    var _proto = PresentList.prototype;

    _proto.toArray = function toArray() {
      return this.list;
    };

    _proto.map = function map(callback) {
      var result = util.mapPresent(this.list, callback);
      return new PresentList(result);
    };

    _proto.filter = function filter(predicate) {
      var out = [];

      for (var _iterator = _createForOfIteratorHelperLoose(this.list), _step; !(_step = _iterator()).done;) {
        var item = _step.value;

        if (predicate(item)) {
          out.push(item);
        }
      }

      return OptionalList(out);
    };

    _proto.toPresentArray = function toPresentArray() {
      return this.list;
    };

    _proto.into = function into(_ref) {
      var ifPresent = _ref.ifPresent;
      return ifPresent(this);
    };

    return PresentList;
  }();
  var EmptyList = /*#__PURE__*/function () {
    function EmptyList() {
      this.list = [];
    }

    var _proto2 = EmptyList.prototype;

    _proto2.map = function map(_callback) {
      return new EmptyList();
    };

    _proto2.filter = function filter(_predicate) {
      return new EmptyList();
    };

    _proto2.toArray = function toArray() {
      return this.list;
    };

    _proto2.toPresentArray = function toPresentArray() {
      return null;
    };

    _proto2.into = function into(_ref2) {
      var ifEmpty = _ref2.ifEmpty;
      return ifEmpty();
    };

    return EmptyList;
  }(); // export type OptionalList<T> = PresentList<T> | EmptyList<T>;

  function OptionalList(value) {
    if (util.isPresent(value)) {
      return new PresentList(value);
    } else {
      return new EmptyList();
    }
  }

  function _inheritsLoose$1(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

  var ResultImpl = /*#__PURE__*/function () {
    function ResultImpl() {}

    ResultImpl.all = function all() {
      var out = [];

      for (var _len = arguments.length, results = new Array(_len), _key = 0; _key < _len; _key++) {
        results[_key] = arguments[_key];
      }

      for (var _i = 0, _results = results; _i < _results.length; _i++) {
        var result = _results[_i];

        if (result.isErr) {
          return result.cast();
        } else {
          out.push(result.value);
        }
      }

      return Ok(out);
    };

    return ResultImpl;
  }();

  var Result = ResultImpl;

  var OkImpl = /*#__PURE__*/function (_ResultImpl) {
    _inheritsLoose$1(OkImpl, _ResultImpl);

    function OkImpl(value) {
      var _this;

      _this = _ResultImpl.call(this) || this;
      _this.value = value;
      _this.isOk = true;
      _this.isErr = false;
      return _this;
    }

    var _proto = OkImpl.prototype;

    _proto.expect = function expect(_message) {
      return this.value;
    };

    _proto.ifOk = function ifOk(callback) {
      callback(this.value);
      return this;
    };

    _proto.andThen = function andThen(callback) {
      return callback(this.value);
    };

    _proto.mapOk = function mapOk(callback) {
      return Ok(callback(this.value));
    };

    _proto.ifErr = function ifErr(_callback) {
      return this;
    };

    _proto.mapErr = function mapErr(_callback) {
      return this;
    };

    return OkImpl;
  }(ResultImpl);

  var ErrImpl = /*#__PURE__*/function (_ResultImpl2) {
    _inheritsLoose$1(ErrImpl, _ResultImpl2);

    function ErrImpl(reason) {
      var _this2;

      _this2 = _ResultImpl2.call(this) || this;
      _this2.reason = reason;
      _this2.isOk = false;
      _this2.isErr = true;
      return _this2;
    }

    var _proto2 = ErrImpl.prototype;

    _proto2.expect = function expect(message) {
      throw new Error(message || 'expected an Ok, got Err');
    };

    _proto2.andThen = function andThen(_callback) {
      return this.cast();
    };

    _proto2.mapOk = function mapOk(_callback) {
      return this.cast();
    };

    _proto2.ifOk = function ifOk(_callback) {
      return this;
    };

    _proto2.mapErr = function mapErr(callback) {
      return Err(callback(this.reason));
    };

    _proto2.ifErr = function ifErr(callback) {
      callback(this.reason);
      return this;
    };

    _proto2.cast = function cast() {
      return this;
    };

    return ErrImpl;
  }(ResultImpl);
  function Ok(value) {
    return new OkImpl(value);
  }
  function Err(reason) {
    return new ErrImpl(reason);
  }
  var ResultArray = /*#__PURE__*/function () {
    function ResultArray(items) {
      if (items === void 0) {
        items = [];
      }

      this.items = items;
    }

    var _proto4 = ResultArray.prototype;

    _proto4.add = function add(item) {
      this.items.push(item);
    };

    _proto4.toArray = function toArray() {
      var err = this.items.filter(function (item) {
        return item instanceof ErrImpl;
      })[0];

      if (err !== undefined) {
        return err.cast();
      } else {
        return Ok(this.items.map(function (item) {
          return item.value;
        }));
      }
    };

    _proto4.toOptionalList = function toOptionalList() {
      return this.toArray().mapOk(function (arr) {
        return OptionalList(arr);
      });
    };

    return ResultArray;
  }();

  function _createForOfIteratorHelperLoose$1(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

  function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }

  function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  var KeywordImpl = /*#__PURE__*/function () {
    function KeywordImpl(keyword, type, delegate) {
      this.keyword = keyword;
      this.delegate = delegate;
      var nodes = new Set();

      for (var _iterator = _createForOfIteratorHelperLoose$1(KEYWORD_NODES[type]), _step; !(_step = _iterator()).done;) {
        var nodeType = _step.value;
        nodes.add(nodeType);
      }

      this.types = nodes;
    }

    var _proto = KeywordImpl.prototype;

    _proto.match = function match(node) {
      if (!this.types.has(node.type)) {
        return false;
      }

      var path = getCalleeExpression(node);

      if (path !== null && path.type === 'Path' && path.ref.type === 'Free') {
        if (path.tail.length > 0) {
          if (path.ref.resolution.serialize() === 'Loose') {
            // cannot be a keyword reference, keywords do not allow paths (must be
            // relying on implicit this fallback)
            return false;
          }
        }

        return path.ref.name === this.keyword;
      } else {
        return false;
      }
    };

    _proto.translate = function translate(node, state) {
      var _this = this;

      if (this.match(node)) {
        var path = getCalleeExpression(node);

        if (path !== null && path.type === 'Path' && path.tail.length > 0) {
          return Err(syntax.generateSyntaxError("The `" + this.keyword + "` keyword was used incorrectly. It was used as `" + path.loc.asString() + "`, but it cannot be used with additional path segments. \n\nError caused by", node.loc));
        }

        var param = this.delegate.assert(node, state);
        return param.andThen(function (param) {
          return _this.delegate.translate({
            node: node,
            state: state
          }, param);
        });
      } else {
        return null;
      }
    };

    return KeywordImpl;
  }();

  var KEYWORD_NODES = {
    Call: ['Call'],
    Block: ['InvokeBlock'],
    Append: ['AppendContent'],
    Modifier: ['ElementModifier']
  };
  function keyword(keyword, type, delegate) {
    return new KeywordImpl(keyword, type, delegate);
  }

  function getCalleeExpression(node) {
    switch (node.type) {
      // This covers the inside of attributes and expressions, as well as the callee
      // of call nodes
      case 'Path':
        return node;

      case 'AppendContent':
        return getCalleeExpression(node.value);

      case 'Call':
      case 'InvokeBlock':
      case 'ElementModifier':
        return node.callee;

      default:
        return null;
    }
  }

  var Keywords = /*#__PURE__*/function () {
    function Keywords(type) {
      this._keywords = [];
      this._type = type;
    }

    var _proto2 = Keywords.prototype;

    _proto2.kw = function kw(name, delegate) {
      this._keywords.push(keyword(name, this._type, delegate));

      return this;
    };

    _proto2.translate = function translate(node, state) {
      for (var _iterator2 = _createForOfIteratorHelperLoose$1(this._keywords), _step2; !(_step2 = _iterator2()).done;) {
        var _keyword = _step2.value;

        var result = _keyword.translate(node, state);

        if (result !== null) {
          return result;
        }
      }

      var path = getCalleeExpression(node);

      if (path && path.type === 'Path' && path.ref.type === 'Free' && syntax.isKeyword(path.ref.name)) {
        var name = path.ref.name;
        var usedType = this._type;
        var validTypes = syntax.KEYWORDS_TYPES[name];

        if (validTypes.indexOf(usedType) === -1) {
          return Err(syntax.generateSyntaxError("The `" + name + "` keyword was used incorrectly. It was used as " + typesToReadableName[usedType] + ", but its valid usages are:\n\n" + generateTypesMessage(name, validTypes) + "\n\nError caused by", node.loc));
        }
      }

      return null;
    };

    return Keywords;
  }();
  var typesToReadableName = {
    Append: 'an append statement',
    Block: 'a block statement',
    Call: 'a call expression',
    Modifier: 'a modifier'
  };

  function generateTypesMessage(name, types) {
    return types.map(function (type) {
      switch (type) {
        case 'Append':
          return "- As an append statement, as in: {{" + name + "}}";

        case 'Block':
          return "- As a block statement, as in: {{#" + name + "}}{{/" + name + "}}";

        case 'Call':
          return "- As an expression, as in: (" + name + ")";

        case 'Modifier':
          return "- As a modifier, as in: <div {{" + name + "}}></div>";

        default:
          return util.exhausted(type);
      }
    }).join('\n\n');
  }
  /**
   * This function builds keyword definitions for a particular type of AST node (`KeywordType`).
   *
   * You can build keyword definitions for:
   *
   * - `Expr`: A `SubExpression` or `PathExpression`
   * - `Block`: A `BlockStatement`
   *   - A `BlockStatement` is a keyword candidate if its head is a
   *     `PathExpression`
   * - `Append`: An `AppendStatement`
   *
   * A node is a keyword candidate if:
   *
   * - A `PathExpression` is a keyword candidate if it has no tail, and its
   *   head expression is a `LocalVarHead` or `FreeVarHead` whose name is
   *   the keyword's name.
   * - A `SubExpression`, `AppendStatement`, or `BlockStatement` is a keyword
   *   candidate if its head is a keyword candidate.
   *
   * The keyword infrastructure guarantees that:
   *
   * - If a node is not a keyword candidate, it is never passed to any keyword's
   *   `assert` method.
   * - If a node is not the `KeywordType` for a particular keyword, it will not
   *   be passed to the keyword's `assert` method.
   *
   * `Expr` keywords are used in expression positions and should return HIR
   * expressions. `Block` and `Append` keywords are used in statement
   * positions and should return HIR statements.
   *
   * A keyword definition has two parts:
   *
   * - `match`, which determines whether an AST node matches the keyword, and can
   *   optionally return some information extracted from the AST node.
   * - `translate`, which takes a matching AST node as well as the extracted
   *   information and returns an appropriate HIR instruction.
   *
   * # Example
   *
   * This keyword:
   *
   * - turns `(hello)` into `"hello"`
   *   - as long as `hello` is not in scope
   * - makes it an error to pass any arguments (such as `(hello world)`)
   *
   * ```ts
   * keywords('SubExpr').kw('hello', {
   *   assert(node: ExprKeywordNode): Result<void> | false {
   *     // we don't want to transform `hello` as a `PathExpression`
   *     if (node.type !== 'SubExpression') {
   *       return false;
   *     }
   *
   *     // node.head would be `LocalVarHead` if `hello` was in scope
   *     if (node.head.type !== 'FreeVarHead') {
   *       return false;
   *     }
   *
   *     if (node.params.length || node.hash) {
   *       return Err(generateSyntaxError(`(hello) does not take any arguments`), node.loc);
   *     } else {
   *       return Ok();
   *     }
   *   },
   *
   *   translate(node: ASTv2.SubExpression): hir.Expression {
   *     return ASTv2.builders.literal("hello", node.loc)
   *   }
   * })
   * ```
   *
   * The keyword infrastructure checks to make sure that the node is the right
   * type before calling `assert`, so you only need to consider `SubExpression`
   * and `PathExpression` here. It also checks to make sure that the node passed
   * to `assert` has the keyword name in the right place.
   *
   * Note the important difference between returning `false` from `assert`,
   * which just means that the node didn't match, and returning `Err`, which
   * means that the node matched, but there was a keyword-specific syntax
   * error.
   */


  function keywords(type) {
    return new Keywords(type);
  }

  function hasPath(node) {
    return node.callee.type === 'Path';
  }
  function isHelperInvocation(node) {
    if (!hasPath(node)) {
      return false;
    }

    return !node.args.isEmpty();
  }
  function isSimplePath(path) {
    if (path.type === 'Path') {
      var head = path.ref,
          parts = path.tail;
      return head.type === 'Free' && head.resolution !== syntax.ASTv2.STRICT_RESOLUTION && parts.length === 0;
    } else {
      return false;
    }
  }
  function isStrictHelper(expr) {
    if (expr.callee.type !== 'Path') {
      return true;
    }

    if (expr.callee.ref.type !== 'Free') {
      return true;
    }

    return expr.callee.ref.resolution === syntax.ASTv2.STRICT_RESOLUTION;
  }
  function assertIsValidModifier(helper) {
    if (isStrictHelper(helper) || isSimplePath(helper.callee)) {
      return;
    }

    throw syntax.generateSyntaxError("`" + printPath(helper.callee) + "` is not a valid name for a modifier", helper.loc);
  }

  function printPath(path) {
    switch (path.type) {
      case 'Literal':
        return JSON.stringify(path.value);

      case 'Path':
        {
          var printedPath = [printPathHead(path.ref)];
          printedPath.push.apply(printedPath, path.tail.map(function (t) {
            return t.chars;
          }));
          return printedPath.join('.');
        }

      case 'Call':
        return "(" + printPath(path.callee) + " ...)";

      case 'DeprecatedCall':
        return "" + path.callee.name;

      case 'Interpolate':
        throw util.unreachable('a concat statement cannot appear as the head of an expression');
    }
  }

  function printPathHead(head) {
    switch (head.type) {
      case 'Arg':
        return head.name.chars;

      case 'Free':
      case 'Local':
        return head.name;

      case 'This':
        return 'this';
    }
  }

  var NormalizeExpressions = /*#__PURE__*/function () {
    function NormalizeExpressions() {}

    var _proto = NormalizeExpressions.prototype;

    _proto.visit = function visit(node, state) {
      switch (node.type) {
        case 'Literal':
          return Ok(this.Literal(node));

        case 'Interpolate':
          return this.Interpolate(node, state);

        case 'Path':
          return this.PathExpression(node);

        case 'Call':
          var translated = CALL_KEYWORDS.translate(node, state);

          if (translated !== null) {
            return translated;
          }

          return this.CallExpression(node, state);

        case 'DeprecatedCall':
          return this.DeprecaedCallExpression(node, state);
      }
    };

    _proto.visitList = function visitList(nodes, state) {
      return new ResultArray(nodes.map(function (e) {
        return VISIT_EXPRS.visit(e, state);
      })).toOptionalList();
    }
    /**
     * Normalize paths into `hir.Path` or a `hir.Expr` that corresponds to the ref.
     *
     * TODO since keywords don't support tails anyway, distinguish PathExpression from
     * VariableReference in ASTv2.
     */
    ;

    _proto.PathExpression = function PathExpression$1(path) {
      var ref = this.VariableReference(path.ref);
      var tail = path.tail;

      if (util.isPresent(tail)) {
        var tailLoc = tail[0].loc.extend(tail[tail.length - 1].loc);
        return Ok(new PathExpression({
          loc: path.loc,
          head: ref,
          tail: new Tail({
            loc: tailLoc,
            members: tail
          })
        }));
      } else {
        return Ok(ref);
      }
    };

    _proto.VariableReference = function VariableReference(ref) {
      return ref;
    };

    _proto.Literal = function Literal(literal) {
      return literal;
    };

    _proto.Interpolate = function Interpolate(expr, state) {
      var parts = expr.parts.map(convertPathToCallIfKeyword);
      return VISIT_EXPRS.visitList(parts, state).mapOk(function (parts) {
        return new InterpolateExpression({
          loc: expr.loc,
          parts: parts
        });
      });
    };

    _proto.CallExpression = function CallExpression$1(expr, state) {
      if (!hasPath(expr)) {
        throw new Error("unimplemented subexpression at the head of a subexpression");
      } else {
        return Result.all(VISIT_EXPRS.visit(expr.callee, state), VISIT_EXPRS.Args(expr.args, state)).mapOk(function (_ref) {
          var callee = _ref[0],
              args = _ref[1];
          return new CallExpression({
            loc: expr.loc,
            callee: callee,
            args: args
          });
        });
      }
    };

    _proto.DeprecaedCallExpression = function DeprecaedCallExpression(_ref2, _state) {
      var arg = _ref2.arg,
          callee = _ref2.callee,
          loc = _ref2.loc;
      return Ok(new DeprecatedCallExpression({
        loc: loc,
        arg: arg,
        callee: callee
      }));
    };

    _proto.Args = function Args$1(_ref3, state) {
      var positional = _ref3.positional,
          named = _ref3.named,
          loc = _ref3.loc;
      return Result.all(this.Positional(positional, state), this.NamedArguments(named, state)).mapOk(function (_ref4) {
        var positional = _ref4[0],
            named = _ref4[1];
        return new Args({
          loc: loc,
          positional: positional,
          named: named
        });
      });
    };

    _proto.Positional = function Positional$1(positional, state) {
      return VISIT_EXPRS.visitList(positional.exprs, state).mapOk(function (list) {
        return new Positional({
          loc: positional.loc,
          list: list
        });
      });
    };

    _proto.NamedArguments = function NamedArguments$1(named, state) {
      var pairs = named.entries.map(function (arg) {
        var value = convertPathToCallIfKeyword(arg.value);
        return VISIT_EXPRS.visit(value, state).mapOk(function (value) {
          return new NamedArgument({
            loc: arg.loc,
            key: arg.name,
            value: value
          });
        });
      });
      return new ResultArray(pairs).toOptionalList().mapOk(function (pairs) {
        return new NamedArguments({
          loc: named.loc,
          entries: pairs
        });
      });
    };

    return NormalizeExpressions;
  }();
  function convertPathToCallIfKeyword(path) {
    if (path.type === 'Path' && path.ref.type === 'Free' && path.ref.name in syntax.KEYWORDS_TYPES) {
      return new syntax.ASTv2.CallExpression({
        callee: path,
        args: syntax.ASTv2.Args.empty(path.loc),
        loc: path.loc
      });
    }

    return path;
  }
  var VISIT_EXPRS = new NormalizeExpressions();

  var _CurriedTypeToReadabl;
  var CurriedTypeToReadableType = (_CurriedTypeToReadabl = {}, _CurriedTypeToReadabl[0
  /* Component */
  ] = 'component', _CurriedTypeToReadabl[1
  /* Helper */
  ] = 'helper', _CurriedTypeToReadabl[2
  /* Modifier */
  ] = 'modifier', _CurriedTypeToReadabl);
  function assertCurryKeyword(curriedType) {
    return function (node, state) {
      var readableType = CurriedTypeToReadableType[curriedType];
      var stringsAllowed = curriedType === 0
      /* Component */
      ;
      var args = node.args;
      var definition = args.nth(0);

      if (definition === null) {
        return Err(syntax.generateSyntaxError("(" + readableType + ") requires a " + readableType + " definition or identifier as its first positional parameter, did not receive any parameters.", args.loc));
      }

      if (definition.type === 'Literal') {
        if (stringsAllowed && state.isStrict) {
          return Err(syntax.generateSyntaxError("(" + readableType + ") cannot resolve string values in strict mode templates", node.loc));
        } else if (!stringsAllowed) {
          return Err(syntax.generateSyntaxError("(" + readableType + ") cannot resolve string values, you must pass a " + readableType + " definition directly", node.loc));
        }
      }

      args = new syntax.ASTv2.Args({
        positional: new syntax.ASTv2.PositionalArguments({
          exprs: args.positional.exprs.slice(1),
          loc: args.positional.loc
        }),
        named: args.named,
        loc: args.loc
      });
      return Ok({
        definition: definition,
        args: args
      });
    };
  }

  function translateCurryKeyword(curriedType) {
    return function (_ref, _ref2) {
      var node = _ref.node,
          state = _ref.state;
      var definition = _ref2.definition,
          args = _ref2.args;
      var definitionResult = VISIT_EXPRS.visit(definition, state);
      var argsResult = VISIT_EXPRS.Args(args, state);
      return Result.all(definitionResult, argsResult).mapOk(function (_ref3) {
        var definition = _ref3[0],
            args = _ref3[1];
        return new Curry({
          loc: node.loc,
          curriedType: curriedType,
          definition: definition,
          args: args
        });
      });
    };
  }

  function curryKeyword(curriedType) {
    return {
      assert: assertCurryKeyword(curriedType),
      translate: translateCurryKeyword(curriedType)
    };
  }

  function assertGetDynamicVarKeyword(node) {
    var call = node.type === 'AppendContent' ? node.value : node;
    var named = call.type === 'Call' ? call.args.named : null;
    var positionals = call.type === 'Call' ? call.args.positional : null;

    if (named && !named.isEmpty()) {
      return Err(syntax.generateSyntaxError("(-get-dynamic-vars) does not take any named arguments", node.loc));
    }

    var varName = positionals === null || positionals === void 0 ? void 0 : positionals.nth(0);

    if (!varName) {
      return Err(syntax.generateSyntaxError("(-get-dynamic-vars) requires a var name to get", node.loc));
    }

    if (positionals && positionals.size > 1) {
      return Err(syntax.generateSyntaxError("(-get-dynamic-vars) only receives one positional arg", node.loc));
    }

    return Ok(varName);
  }

  function translateGetDynamicVarKeyword(_ref, name) {
    var node = _ref.node,
        state = _ref.state;
    return VISIT_EXPRS.visit(name, state).mapOk(function (name) {
      return new GetDynamicVar({
        name: name,
        loc: node.loc
      });
    });
  }

  var getDynamicVarKeyword = {
    assert: assertGetDynamicVarKeyword,
    translate: translateGetDynamicVarKeyword
  };

  function assertHasBlockKeyword(type) {
    return function (node) {
      var call = node.type === 'AppendContent' ? node.value : node;
      var named = call.type === 'Call' ? call.args.named : null;
      var positionals = call.type === 'Call' ? call.args.positional : null;

      if (named && !named.isEmpty()) {
        return Err(syntax.generateSyntaxError("(" + type + ") does not take any named arguments", call.loc));
      }

      if (!positionals || positionals.isEmpty()) {
        return Ok(syntax.SourceSlice.synthetic('default'));
      } else if (positionals.exprs.length === 1) {
        var positional = positionals.exprs[0];

        if (syntax.ASTv2.isLiteral(positional, 'string')) {
          return Ok(positional.toSlice());
        } else {
          return Err(syntax.generateSyntaxError("(" + type + ") can only receive a string literal as its first argument", call.loc));
        }
      } else {
        return Err(syntax.generateSyntaxError("(" + type + ") only takes a single positional argument", call.loc));
      }
    };
  }

  function translateHasBlockKeyword(type) {
    return function (_ref, target) {
      var node = _ref.node,
          scope = _ref.state.scope;
      var block = type === 'has-block' ? new HasBlock({
        loc: node.loc,
        target: target,
        symbol: scope.allocateBlock(target.chars)
      }) : new HasBlockParams({
        loc: node.loc,
        target: target,
        symbol: scope.allocateBlock(target.chars)
      });
      return Ok(block);
    };
  }

  function hasBlockKeyword(type) {
    return {
      assert: assertHasBlockKeyword(type),
      translate: translateHasBlockKeyword(type)
    };
  }

  function assertIfUnlessInlineKeyword(type) {
    return function (originalNode) {
      var _a;

      var inverted = type === 'unless';
      var node = originalNode.type === 'AppendContent' ? originalNode.value : originalNode;
      var named = node.type === 'Call' ? node.args.named : null;
      var positional = node.type === 'Call' ? node.args.positional : null;

      if (named && !named.isEmpty()) {
        return Err(syntax.generateSyntaxError("(" + type + ") cannot receive named parameters, received " + named.entries.map(function (e) {
          return e.name.chars;
        }).join(', '), originalNode.loc));
      }

      var condition = positional === null || positional === void 0 ? void 0 : positional.nth(0);

      if (!positional || !condition) {
        return Err(syntax.generateSyntaxError("When used inline, (" + type + ") requires at least two parameters 1. the condition that determines the state of the (" + type + "), and 2. the value to return if the condition is " + (inverted ? 'false' : 'true') + ". Did not receive any parameters", originalNode.loc));
      }

      var truthy = positional.nth(1);
      var falsy = positional.nth(2);

      if (truthy === null) {
        return Err(syntax.generateSyntaxError("When used inline, (" + type + ") requires at least two parameters 1. the condition that determines the state of the (" + type + "), and 2. the value to return if the condition is " + (inverted ? 'false' : 'true') + ". Received only one parameter, the condition", originalNode.loc));
      }

      if (positional.size > 3) {
        return Err(syntax.generateSyntaxError("When used inline, (" + type + ") can receive a maximum of three positional parameters 1. the condition that determines the state of the (" + type + "), 2. the value to return if the condition is " + (inverted ? 'false' : 'true') + ", and 3. the value to return if the condition is " + (inverted ? 'true' : 'false') + ". Received " + ((_a = positional === null || positional === void 0 ? void 0 : positional.size) !== null && _a !== void 0 ? _a : 0) + " parameters", originalNode.loc));
      }

      return Ok({
        condition: condition,
        truthy: truthy,
        falsy: falsy
      });
    };
  }

  function translateIfUnlessInlineKeyword(type) {
    var inverted = type === 'unless';
    return function (_ref, _ref2) {
      var node = _ref.node,
          state = _ref.state;
      var condition = _ref2.condition,
          truthy = _ref2.truthy,
          falsy = _ref2.falsy;
      var conditionResult = VISIT_EXPRS.visit(condition, state);
      var truthyResult = VISIT_EXPRS.visit(truthy, state);
      var falsyResult = falsy ? VISIT_EXPRS.visit(falsy, state) : Ok(null);
      return Result.all(conditionResult, truthyResult, falsyResult).mapOk(function (_ref3) {
        var condition = _ref3[0],
            truthy = _ref3[1],
            falsy = _ref3[2];

        if (inverted) {
          condition = new Not({
            value: condition,
            loc: node.loc
          });
        }

        return new IfInline({
          loc: node.loc,
          condition: condition,
          truthy: truthy,
          falsy: falsy
        });
      });
    };
  }

  function ifUnlessInlineKeyword(type) {
    return {
      assert: assertIfUnlessInlineKeyword(type),
      translate: translateIfUnlessInlineKeyword(type)
    };
  }

  function assertLogKeyword(node) {
    var _node$args = node.args,
        named = _node$args.named,
        positional = _node$args.positional;

    if (named && !named.isEmpty()) {
      return Err(syntax.generateSyntaxError("(log) does not take any named arguments", node.loc));
    }

    return Ok(positional);
  }

  function translateLogKeyword(_ref, positional) {
    var node = _ref.node,
        state = _ref.state;
    return VISIT_EXPRS.Positional(positional, state).mapOk(function (positional) {
      return new Log({
        positional: positional,
        loc: node.loc
      });
    });
  }

  var logKeyword = {
    assert: assertLogKeyword,
    translate: translateLogKeyword
  };

  var CALL_KEYWORDS = keywords('Call').kw('has-block', hasBlockKeyword('has-block')).kw('has-block-params', hasBlockKeyword('has-block-params')).kw('-get-dynamic-var', getDynamicVarKeyword).kw('log', logKeyword).kw('if', ifUnlessInlineKeyword('if')).kw('unless', ifUnlessInlineKeyword('unless')).kw('component', curryKeyword(0
  /* Component */
  )).kw('helper', curryKeyword(1
  /* Helper */
  )).kw('modifier', curryKeyword(2
  /* Modifier */
  ));

  function toAppend(_ref) {
    var assert = _ref.assert,
        _translate = _ref.translate;
    return {
      assert: assert,
      translate: function translate(_ref2, value) {
        var node = _ref2.node,
            state = _ref2.state;

        var result = _translate({
          node: node,
          state: state
        }, value);

        return result.mapOk(function (text) {
          return new AppendTextNode({
            text: text,
            loc: node.loc
          });
        });
      }
    };
  }

  var APPEND_KEYWORDS = keywords('Append').kw('has-block', toAppend(hasBlockKeyword('has-block'))).kw('has-block-params', toAppend(hasBlockKeyword('has-block-params'))).kw('-get-dynamic-var', toAppend(getDynamicVarKeyword)).kw('log', toAppend(logKeyword)).kw('if', toAppend(ifUnlessInlineKeyword('if'))).kw('unless', toAppend(ifUnlessInlineKeyword('unless'))).kw('yield', {
    assert: function assert(node) {
      var args = node.args;

      if (args.named.isEmpty()) {
        return Ok({
          target: syntax.SourceSpan.synthetic('default').toSlice(),
          positional: args.positional
        });
      } else {
        var target = args.named.get('to');

        if (args.named.size > 1 || target === null) {
          return Err(syntax.generateSyntaxError("yield only takes a single named argument: 'to'", args.named.loc));
        }

        if (syntax.ASTv2.isLiteral(target, 'string')) {
          return Ok({
            target: target.toSlice(),
            positional: args.positional
          });
        } else {
          return Err(syntax.generateSyntaxError("you can only yield to a literal string value", target.loc));
        }
      }
    },
    translate: function translate(_ref, _ref2) {
      var node = _ref.node,
          state = _ref.state;
      var target = _ref2.target,
          positional = _ref2.positional;
      return VISIT_EXPRS.Positional(positional, state).mapOk(function (positional) {
        return new Yield({
          loc: node.loc,
          target: target,
          to: state.scope.allocateBlock(target.chars),
          positional: positional
        });
      });
    }
  }).kw('debugger', {
    assert: function assert(node) {
      var args = node.args;
      var positional = args.positional;

      if (args.isEmpty()) {
        return Ok(undefined);
      } else {
        if (positional.isEmpty()) {
          return Err(syntax.generateSyntaxError("debugger does not take any named arguments", node.loc));
        } else {
          return Err(syntax.generateSyntaxError("debugger does not take any positional arguments", node.loc));
        }
      }
    },
    translate: function translate(_ref3) {
      var node = _ref3.node,
          scope = _ref3.state.scope;
      scope.setHasEval();
      return Ok(new Debugger({
        loc: node.loc,
        scope: scope
      }));
    }
  }).kw('component', {
    assert: assertCurryKeyword(0
    /* Component */
    ),
    translate: function translate(_ref4, _ref5) {
      var node = _ref4.node,
          state = _ref4.state;
      var definition = _ref5.definition,
          args = _ref5.args;
      var definitionResult = VISIT_EXPRS.visit(definition, state);
      var argsResult = VISIT_EXPRS.Args(args, state);
      return Result.all(definitionResult, argsResult).mapOk(function (_ref6) {
        var definition = _ref6[0],
            args = _ref6[1];
        return new InvokeComponent({
          loc: node.loc,
          definition: definition,
          args: args,
          blocks: null
        });
      });
    }
  }).kw('helper', {
    assert: assertCurryKeyword(1
    /* Helper */
    ),
    translate: function translate(_ref7, _ref8) {
      var node = _ref7.node,
          state = _ref7.state;
      var definition = _ref8.definition,
          args = _ref8.args;
      var definitionResult = VISIT_EXPRS.visit(definition, state);
      var argsResult = VISIT_EXPRS.Args(args, state);
      return Result.all(definitionResult, argsResult).mapOk(function (_ref9) {
        var definition = _ref9[0],
            args = _ref9[1];
        var text = new CallExpression({
          callee: definition,
          args: args,
          loc: node.loc
        });
        return new AppendTextNode({
          loc: node.loc,
          text: text
        });
      });
    }
  });

  var BLOCK_KEYWORDS = keywords('Block').kw('in-element', {
    assert: function assert(node) {
      var args = node.args;
      var guid = args.get('guid');

      if (guid) {
        return Err(syntax.generateSyntaxError("Cannot pass `guid` to `{{#in-element}}`", guid.loc));
      }

      var insertBefore = args.get('insertBefore');
      var destination = args.nth(0);

      if (destination === null) {
        return Err(syntax.generateSyntaxError("{{#in-element}} requires a target element as its first positional parameter", args.loc));
      } // TODO Better syntax checks


      return Ok({
        insertBefore: insertBefore,
        destination: destination
      });
    },
    translate: function translate(_ref, _ref2) {
      var node = _ref.node,
          state = _ref.state;
      var insertBefore = _ref2.insertBefore,
          destination = _ref2.destination;
      var named = node.blocks.get('default');
      var body = VISIT_STMTS.NamedBlock(named, state);
      var destinationResult = VISIT_EXPRS.visit(destination, state);
      return Result.all(body, destinationResult).andThen(function (_ref3) {
        var body = _ref3[0],
            destination = _ref3[1];

        if (insertBefore) {
          return VISIT_EXPRS.visit(insertBefore, state).mapOk(function (insertBefore) {
            return {
              body: body,
              destination: destination,
              insertBefore: insertBefore
            };
          });
        } else {
          return Ok({
            body: body,
            destination: destination,
            insertBefore: new Missing({
              loc: node.callee.loc.collapse('end')
            })
          });
        }
      }).mapOk(function (_ref4) {
        var body = _ref4.body,
            destination = _ref4.destination,
            insertBefore = _ref4.insertBefore;
        return new InElement({
          loc: node.loc,
          block: body,
          insertBefore: insertBefore,
          guid: state.generateUniqueCursor(),
          destination: destination
        });
      });
    }
  }).kw('if', {
    assert: function assert(node) {
      var args = node.args;

      if (!args.named.isEmpty()) {
        return Err(syntax.generateSyntaxError("{{#if}} cannot receive named parameters, received " + args.named.entries.map(function (e) {
          return e.name.chars;
        }).join(', '), node.loc));
      }

      if (args.positional.size > 1) {
        return Err(syntax.generateSyntaxError("{{#if}} can only receive one positional parameter in block form, the conditional value. Received " + args.positional.size + " parameters", node.loc));
      }

      var condition = args.nth(0);

      if (condition === null) {
        return Err(syntax.generateSyntaxError("{{#if}} requires a condition as its first positional parameter, did not receive any parameters", node.loc));
      }

      return Ok({
        condition: condition
      });
    },
    translate: function translate(_ref5, _ref6) {
      var node = _ref5.node,
          state = _ref5.state;
      var condition = _ref6.condition;
      var block = node.blocks.get('default');
      var inverse = node.blocks.get('else');
      var conditionResult = VISIT_EXPRS.visit(condition, state);
      var blockResult = VISIT_STMTS.NamedBlock(block, state);
      var inverseResult = inverse ? VISIT_STMTS.NamedBlock(inverse, state) : Ok(null);
      return Result.all(conditionResult, blockResult, inverseResult).mapOk(function (_ref7) {
        var condition = _ref7[0],
            block = _ref7[1],
            inverse = _ref7[2];
        return new If({
          loc: node.loc,
          condition: condition,
          block: block,
          inverse: inverse
        });
      });
    }
  }).kw('unless', {
    assert: function assert(node) {
      var args = node.args;

      if (!args.named.isEmpty()) {
        return Err(syntax.generateSyntaxError("{{#unless}} cannot receive named parameters, received " + args.named.entries.map(function (e) {
          return e.name.chars;
        }).join(', '), node.loc));
      }

      if (args.positional.size > 1) {
        return Err(syntax.generateSyntaxError("{{#unless}} can only receive one positional parameter in block form, the conditional value. Received " + args.positional.size + " parameters", node.loc));
      }

      var condition = args.nth(0);

      if (condition === null) {
        return Err(syntax.generateSyntaxError("{{#unless}} requires a condition as its first positional parameter, did not receive any parameters", node.loc));
      }

      return Ok({
        condition: condition
      });
    },
    translate: function translate(_ref8, _ref9) {
      var node = _ref8.node,
          state = _ref8.state;
      var condition = _ref9.condition;
      var block = node.blocks.get('default');
      var inverse = node.blocks.get('else');
      var conditionResult = VISIT_EXPRS.visit(condition, state);
      var blockResult = VISIT_STMTS.NamedBlock(block, state);
      var inverseResult = inverse ? VISIT_STMTS.NamedBlock(inverse, state) : Ok(null);
      return Result.all(conditionResult, blockResult, inverseResult).mapOk(function (_ref10) {
        var condition = _ref10[0],
            block = _ref10[1],
            inverse = _ref10[2];
        return new If({
          loc: node.loc,
          condition: new Not({
            value: condition,
            loc: node.loc
          }),
          block: block,
          inverse: inverse
        });
      });
    }
  }).kw('each', {
    assert: function assert(node) {
      var args = node.args;

      if (!args.named.entries.every(function (e) {
        return e.name.chars === 'key';
      })) {
        return Err(syntax.generateSyntaxError("{{#each}} can only receive the 'key' named parameter, received " + args.named.entries.filter(function (e) {
          return e.name.chars !== 'key';
        }).map(function (e) {
          return e.name.chars;
        }).join(', '), args.named.loc));
      }

      if (args.positional.size > 1) {
        return Err(syntax.generateSyntaxError("{{#each}} can only receive one positional parameter, the collection being iterated. Received " + args.positional.size + " parameters", args.positional.loc));
      }

      var value = args.nth(0);
      var key = args.get('key');

      if (value === null) {
        return Err(syntax.generateSyntaxError("{{#each}} requires an iterable value to be passed as its first positional parameter, did not receive any parameters", args.loc));
      }

      return Ok({
        value: value,
        key: key
      });
    },
    translate: function translate(_ref11, _ref12) {
      var node = _ref11.node,
          state = _ref11.state;
      var value = _ref12.value,
          key = _ref12.key;
      var block = node.blocks.get('default');
      var inverse = node.blocks.get('else');
      var valueResult = VISIT_EXPRS.visit(value, state);
      var keyResult = key ? VISIT_EXPRS.visit(key, state) : Ok(null);
      var blockResult = VISIT_STMTS.NamedBlock(block, state);
      var inverseResult = inverse ? VISIT_STMTS.NamedBlock(inverse, state) : Ok(null);
      return Result.all(valueResult, keyResult, blockResult, inverseResult).mapOk(function (_ref13) {
        var value = _ref13[0],
            key = _ref13[1],
            block = _ref13[2],
            inverse = _ref13[3];
        return new Each({
          loc: node.loc,
          value: value,
          key: key,
          block: block,
          inverse: inverse
        });
      });
    }
  }).kw('with', {
    assert: function assert(node) {
      var args = node.args;

      if (!args.named.isEmpty()) {
        return Err(syntax.generateSyntaxError("{{#with}} cannot receive named parameters, received " + args.named.entries.map(function (e) {
          return e.name.chars;
        }).join(', '), args.named.loc));
      }

      if (args.positional.size > 1) {
        return Err(syntax.generateSyntaxError("{{#with}} can only receive one positional parameter. Received " + args.positional.size + " parameters", args.positional.loc));
      }

      var value = args.nth(0);

      if (value === null) {
        return Err(syntax.generateSyntaxError("{{#with}} requires a value as its first positional parameter, did not receive any parameters", args.loc));
      }

      return Ok({
        value: value
      });
    },
    translate: function translate(_ref14, _ref15) {
      var node = _ref14.node,
          state = _ref14.state;
      var value = _ref15.value;
      var block = node.blocks.get('default');
      var inverse = node.blocks.get('else');
      var valueResult = VISIT_EXPRS.visit(value, state);
      var blockResult = VISIT_STMTS.NamedBlock(block, state);
      var inverseResult = inverse ? VISIT_STMTS.NamedBlock(inverse, state) : Ok(null);
      return Result.all(valueResult, blockResult, inverseResult).mapOk(function (_ref16) {
        var value = _ref16[0],
            block = _ref16[1],
            inverse = _ref16[2];
        return new With({
          loc: node.loc,
          value: value,
          block: block,
          inverse: inverse
        });
      });
    }
  }).kw('let', {
    assert: function assert(node) {
      var args = node.args;

      if (!args.named.isEmpty()) {
        return Err(syntax.generateSyntaxError("{{#let}} cannot receive named parameters, received " + args.named.entries.map(function (e) {
          return e.name.chars;
        }).join(', '), args.named.loc));
      }

      if (args.positional.size === 0) {
        return Err(syntax.generateSyntaxError("{{#let}} requires at least one value as its first positional parameter, did not receive any parameters", args.positional.loc));
      }

      if (node.blocks.get('else')) {
        return Err(syntax.generateSyntaxError("{{#let}} cannot receive an {{else}} block", args.positional.loc));
      }

      return Ok({
        positional: args.positional
      });
    },
    translate: function translate(_ref17, _ref18) {
      var node = _ref17.node,
          state = _ref17.state;
      var positional = _ref18.positional;
      var block = node.blocks.get('default');
      var positionalResult = VISIT_EXPRS.Positional(positional, state);
      var blockResult = VISIT_STMTS.NamedBlock(block, state);
      return Result.all(positionalResult, blockResult).mapOk(function (_ref19) {
        var positional = _ref19[0],
            block = _ref19[1];
        return new Let({
          loc: node.loc,
          positional: positional,
          block: block
        });
      });
    }
  }).kw('-with-dynamic-vars', {
    assert: function assert(node) {
      return Ok({
        named: node.args.named
      });
    },
    translate: function translate(_ref20, _ref21) {
      var node = _ref20.node,
          state = _ref20.state;
      var named = _ref21.named;
      var block = node.blocks.get('default');
      var namedResult = VISIT_EXPRS.NamedArguments(named, state);
      var blockResult = VISIT_STMTS.NamedBlock(block, state);
      return Result.all(namedResult, blockResult).mapOk(function (_ref22) {
        var named = _ref22[0],
            block = _ref22[1];
        return new WithDynamicVars({
          loc: node.loc,
          named: named,
          block: block
        });
      });
    }
  }).kw('component', {
    assert: assertCurryKeyword(0
    /* Component */
    ),
    translate: function translate(_ref23, _ref24) {
      var node = _ref23.node,
          state = _ref23.state;
      var definition = _ref24.definition,
          args = _ref24.args;
      var definitionResult = VISIT_EXPRS.visit(definition, state);
      var argsResult = VISIT_EXPRS.Args(args, state);
      var blocksResult = VISIT_STMTS.NamedBlocks(node.blocks, state);
      return Result.all(definitionResult, argsResult, blocksResult).mapOk(function (_ref25) {
        var definition = _ref25[0],
            args = _ref25[1],
            blocks = _ref25[2];
        return new InvokeComponent({
          loc: node.loc,
          definition: definition,
          args: args,
          blocks: blocks
        });
      });
    }
  });

  var MODIFIER_KEYWORDS = keywords('Modifier');

  // There is a small whitelist of namespaced attributes specially
  // enumerated in
  // https://www.w3.org/TR/html/syntax.html#attributes-0
  //
  // > When a foreign element has one of the namespaced attributes given by
  // > the local name and namespace of the first and second cells of a row
  // > from the following table, it must be written using the name given by
  // > the third cell from the same row.
  //
  // In all other cases, colons are interpreted as a regular character
  // with no special meaning:
  //
  // > No other namespaced attribute can be expressed in the HTML syntax.
  var XLINK = 'http://www.w3.org/1999/xlink';
  var XML = 'http://www.w3.org/XML/1998/namespace';
  var XMLNS = 'http://www.w3.org/2000/xmlns/';
  var WHITELIST = {
    'xlink:actuate': XLINK,
    'xlink:arcrole': XLINK,
    'xlink:href': XLINK,
    'xlink:role': XLINK,
    'xlink:show': XLINK,
    'xlink:title': XLINK,
    'xlink:type': XLINK,
    'xml:base': XML,
    'xml:lang': XML,
    'xml:space': XML,
    xmlns: XMLNS,
    'xmlns:xlink': XMLNS
  };
  function getAttrNamespace(attrName) {
    return WHITELIST[attrName];
  }
  var DEFLATE_TAG_TABLE = {
    div: 0
    /* div */
    ,
    span: 1
    /* span */
    ,
    p: 2
    /* p */
    ,
    a: 3
    /* a */

  };
  var INFLATE_TAG_TABLE = ['div', 'span', 'p', 'a'];
  function deflateTagName(tagName) {
    var _a;

    return (_a = DEFLATE_TAG_TABLE[tagName]) !== null && _a !== void 0 ? _a : tagName;
  }
  function inflateTagName(tagName) {
    return typeof tagName === 'string' ? tagName : INFLATE_TAG_TABLE[tagName];
  }
  var DEFLATE_ATTR_TABLE = {
    "class": 0
    /* class */
    ,
    id: 1
    /* id */
    ,
    value: 2
    /* value */
    ,
    name: 3
    /* name */
    ,
    type: 4
    /* type */
    ,
    style: 5
    /* style */
    ,
    href: 6
    /* href */

  };
  var INFLATE_ATTR_TABLE = ['class', 'id', 'value', 'name', 'type', 'style', 'href'];
  function deflateAttrName(attrName) {
    var _a;

    return (_a = DEFLATE_ATTR_TABLE[attrName]) !== null && _a !== void 0 ? _a : attrName;
  }
  function inflateAttrName(attrName) {
    return typeof attrName === 'string' ? attrName : INFLATE_ATTR_TABLE[attrName];
  }

  function _createForOfIteratorHelperLoose$2(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

  function _unsupportedIterableToArray$2(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen); }

  function _arrayLikeToArray$2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  var ClassifiedElement = /*#__PURE__*/function () {
    function ClassifiedElement(element, delegate, state) {
      this.element = element;
      this.state = state;
      this.delegate = delegate;
    }

    var _proto = ClassifiedElement.prototype;

    _proto.toStatement = function toStatement() {
      var _this = this;

      return this.prepare().andThen(function (prepared) {
        return _this.delegate.toStatement(_this, prepared);
      });
    };

    _proto.attr = function attr(_attr) {
      var _this2 = this;

      var name = _attr.name;
      var rawValue = _attr.value;
      var namespace = getAttrNamespace(name.chars) || undefined;

      if (syntax.ASTv2.isLiteral(rawValue, 'string')) {
        return Ok(new StaticAttr({
          loc: _attr.loc,
          name: name,
          value: rawValue.toSlice(),
          namespace: namespace,
          kind: {
            component: this.delegate.dynamicFeatures
          }
        }));
      }

      return VISIT_EXPRS.visit(convertPathToCallIfKeyword(rawValue), this.state).mapOk(function (value) {
        var isTrusting = _attr.trusting;
        return new DynamicAttr({
          loc: _attr.loc,
          name: name,
          value: value,
          namespace: namespace,
          kind: {
            trusting: isTrusting,
            component: _this2.delegate.dynamicFeatures
          }
        });
      });
    };

    _proto.modifier = function modifier(_modifier) {
      if (isHelperInvocation(_modifier)) {
        assertIsValidModifier(_modifier);
      }

      var translated = MODIFIER_KEYWORDS.translate(_modifier, this.state);

      if (translated !== null) {
        return translated;
      }

      var head = VISIT_EXPRS.visit(_modifier.callee, this.state);
      var args = VISIT_EXPRS.Args(_modifier.args, this.state);
      return Result.all(head, args).mapOk(function (_ref) {
        var head = _ref[0],
            args = _ref[1];
        return new Modifier({
          loc: _modifier.loc,
          callee: head,
          args: args
        });
      });
    };

    _proto.attrs = function attrs() {
      var attrs = new ResultArray();
      var args = new ResultArray(); // Unlike most attributes, the `type` attribute can change how
      // subsequent attributes are interpreted by the browser. To address
      // this, in simple cases, we special case the `type` attribute to be set
      // last. For elements with splattributes, where attribute order affects
      // precedence, this re-ordering happens at runtime instead.
      // See https://github.com/glimmerjs/glimmer-vm/pull/726

      var typeAttr = null;
      var simple = this.element.attrs.filter(function (attr) {
        return attr.type === 'SplatAttr';
      }).length === 0;

      for (var _iterator = _createForOfIteratorHelperLoose$2(this.element.attrs), _step; !(_step = _iterator()).done;) {
        var attr = _step.value;

        if (attr.type === 'SplatAttr') {
          attrs.add(Ok(new SplatAttr({
            loc: attr.loc,
            symbol: this.state.scope.allocateBlock('attrs')
          })));
        } else if (attr.name.chars === 'type' && simple) {
          typeAttr = attr;
        } else {
          attrs.add(this.attr(attr));
        }
      }

      for (var _iterator2 = _createForOfIteratorHelperLoose$2(this.element.componentArgs), _step2; !(_step2 = _iterator2()).done;) {
        var arg = _step2.value;
        args.add(this.delegate.arg(arg, this));
      }

      if (typeAttr) {
        attrs.add(this.attr(typeAttr));
      }

      return Result.all(args.toArray(), attrs.toArray()).mapOk(function (_ref2) {
        var args = _ref2[0],
            attrs = _ref2[1];
        return {
          attrs: attrs,
          args: new NamedArguments({
            loc: syntax.maybeLoc(args, syntax.SourceSpan.NON_EXISTENT),
            entries: OptionalList(args)
          })
        };
      });
    };

    _proto.prepare = function prepare() {
      var _this3 = this;

      var attrs = this.attrs();
      var modifiers = new ResultArray(this.element.modifiers.map(function (m) {
        return _this3.modifier(m);
      })).toArray();
      return Result.all(attrs, modifiers).mapOk(function (_ref3) {
        var result = _ref3[0],
            modifiers = _ref3[1];
        var attrs = result.attrs,
            args = result.args;
        var elementParams = [].concat(attrs, modifiers);
        var params = new ElementParameters({
          loc: syntax.maybeLoc(elementParams, syntax.SourceSpan.NON_EXISTENT),
          body: OptionalList(elementParams)
        });
        return {
          args: args,
          params: params
        };
      });
    };

    return ClassifiedElement;
  }();
  function hasDynamicFeatures(_ref4) {
    var attrs = _ref4.attrs,
        modifiers = _ref4.modifiers;

    // ElementModifier needs the special ComponentOperations
    if (modifiers.length > 0) {
      return true;
    } // Splattributes need the special ComponentOperations to merge into


    return !!attrs.filter(function (attr) {
      return attr.type === 'SplatAttr';
    })[0];
  }

  var ClassifiedComponent = /*#__PURE__*/function () {
    function ClassifiedComponent(tag, element) {
      this.tag = tag;
      this.element = element;
      this.dynamicFeatures = true;
    }

    var _proto = ClassifiedComponent.prototype;

    _proto.arg = function arg(attr, _ref) {
      var state = _ref.state;
      var name = attr.name;
      return VISIT_EXPRS.visit(convertPathToCallIfKeyword(attr.value), state).mapOk(function (value) {
        return new NamedArgument({
          loc: attr.loc,
          key: name,
          value: value
        });
      });
    };

    _proto.toStatement = function toStatement(component, _ref2) {
      var _this = this;

      var args = _ref2.args,
          params = _ref2.params;
      var element = component.element,
          state = component.state;
      return this.blocks(state).mapOk(function (blocks) {
        return new Component({
          loc: element.loc,
          tag: _this.tag,
          params: params,
          args: args,
          blocks: blocks
        });
      });
    };

    _proto.blocks = function blocks(state) {
      return VISIT_STMTS.NamedBlocks(this.element.blocks, state);
    };

    return ClassifiedComponent;
  }();

  var ClassifiedSimpleElement = /*#__PURE__*/function () {
    function ClassifiedSimpleElement(tag, element, dynamicFeatures) {
      this.tag = tag;
      this.element = element;
      this.dynamicFeatures = dynamicFeatures;
      this.isComponent = false;
    }

    var _proto = ClassifiedSimpleElement.prototype;

    _proto.arg = function arg(attr) {
      return Err(syntax.generateSyntaxError(attr.name.chars + " is not a valid attribute name. @arguments are only allowed on components, but the tag for this element (`" + this.tag.chars + "`) is a regular, non-component HTML element.", attr.loc));
    };

    _proto.toStatement = function toStatement(classified, _ref) {
      var _this = this;

      var params = _ref.params;
      var state = classified.state,
          element = classified.element;
      var body = VISIT_STMTS.visitList(this.element.body, state);
      return body.mapOk(function (body) {
        return new SimpleElement({
          loc: element.loc,
          tag: _this.tag,
          params: params,
          body: body.toArray(),
          dynamicFeatures: _this.dynamicFeatures
        });
      });
    };

    return ClassifiedSimpleElement;
  }();

  var NormalizationStatements = /*#__PURE__*/function () {
    function NormalizationStatements() {}

    var _proto = NormalizationStatements.prototype;

    _proto.visitList = function visitList(nodes, state) {
      return new ResultArray(nodes.map(function (e) {
        return VISIT_STMTS.visit(e, state);
      })).toOptionalList().mapOk(function (list) {
        return list.filter(function (s) {
          return s !== null;
        });
      });
    };

    _proto.visit = function visit(node, state) {
      switch (node.type) {
        case 'GlimmerComment':
          return Ok(null);

        case 'AppendContent':
          return this.AppendContent(node, state);

        case 'HtmlText':
          return Ok(this.TextNode(node));

        case 'HtmlComment':
          return Ok(this.HtmlComment(node));

        case 'InvokeBlock':
          return this.InvokeBlock(node, state);

        case 'InvokeComponent':
          return this.Component(node, state);

        case 'SimpleElement':
          return this.SimpleElement(node, state);
      }
    };

    _proto.InvokeBlock = function InvokeBlock$1(node, state) {
      var _this = this;

      var translated = BLOCK_KEYWORDS.translate(node, state);

      if (translated !== null) {
        return translated;
      }

      var head = VISIT_EXPRS.visit(node.callee, state);
      var args = VISIT_EXPRS.Args(node.args, state);
      return Result.all(head, args).andThen(function (_ref) {
        var head = _ref[0],
            args = _ref[1];
        return _this.NamedBlocks(node.blocks, state).mapOk(function (blocks) {
          return new InvokeBlock({
            loc: node.loc,
            head: head,
            args: args,
            blocks: blocks
          });
        });
      });
    };

    _proto.NamedBlocks = function NamedBlocks$1(blocks, state) {
      var _this2 = this;

      var list = new ResultArray(blocks.blocks.map(function (b) {
        return _this2.NamedBlock(b, state);
      }));
      return list.toArray().mapOk(function (list) {
        return new NamedBlocks({
          loc: blocks.loc,
          blocks: OptionalList(list)
        });
      });
    };

    _proto.NamedBlock = function NamedBlock$1(named, state) {
      var body = state.visitBlock(named.block);
      return body.mapOk(function (body) {
        return new NamedBlock({
          loc: named.loc,
          name: named.name,
          body: body.toArray(),
          scope: named.block.scope
        });
      });
    };

    _proto.SimpleElement = function SimpleElement(element, state) {
      return new ClassifiedElement(element, new ClassifiedSimpleElement(element.tag, element, hasDynamicFeatures(element)), state).toStatement();
    };

    _proto.Component = function Component(component, state) {
      return VISIT_EXPRS.visit(component.callee, state).andThen(function (callee) {
        return new ClassifiedElement(component, new ClassifiedComponent(callee, component), state).toStatement();
      });
    };

    _proto.AppendContent = function AppendContent(append, state) {
      var translated = APPEND_KEYWORDS.translate(append, state);

      if (translated !== null) {
        return translated;
      }

      var value = VISIT_EXPRS.visit(append.value, state);
      return value.mapOk(function (value) {
        if (append.trusting) {
          return new AppendTrustedHTML({
            loc: append.loc,
            html: value
          });
        } else {
          return new AppendTextNode({
            loc: append.loc,
            text: value
          });
        }
      });
    };

    _proto.TextNode = function TextNode(text) {
      return new AppendTextNode({
        loc: text.loc,
        text: new syntax.ASTv2.LiteralExpression({
          loc: text.loc,
          value: text.chars
        })
      });
    };

    _proto.HtmlComment = function HtmlComment(comment) {
      return new AppendComment({
        loc: comment.loc,
        value: comment.text
      });
    };

    return NormalizationStatements;
  }();

  var VISIT_STMTS = new NormalizationStatements();

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }
  /**
   * This is the mutable state for this compiler pass.
   */

  var NormalizationState = /*#__PURE__*/function () {
    function NormalizationState(block, isStrict) {
      this.isStrict = isStrict;
      this._cursorCount = 0;
      this._currentScope = block;
    }

    var _proto = NormalizationState.prototype;

    _proto.generateUniqueCursor = function generateUniqueCursor() {
      return "%cursor:" + this._cursorCount++ + "%";
    };

    _proto.visitBlock = function visitBlock(block) {
      var oldBlock = this._currentScope;
      this._currentScope = block.scope;

      try {
        return VISIT_STMTS.visitList(block.body, this);
      } finally {
        this._currentScope = oldBlock;
      }
    };

    _createClass(NormalizationState, [{
      key: "scope",
      get: function get() {
        return this._currentScope;
      }
    }]);

    return NormalizationState;
  }();

  /**
   * Normalize the AST from @glimmer/syntax into the HIR. The HIR has special
   * instructions for keywords like `{{yield}}`, `(has-block)` and
   * `{{#in-element}}`.
   *
   * Most importantly, it also classifies HTML element syntax into:
   *
   * 1. simple HTML element (with optional splattributes)
   * 2. component invocation
   *
   * Because the @glimmer/syntax AST gives us a string for an element's tag,
   * this pass also normalizes that string into an expression.
   *
   * ```
   * // normalized into a path expression whose head is `this` and tail is
   * // `["x"]`
   * <this.x />
   *
   * {{#let expr as |t|}}
   *   // `"t"` is normalized into a variable lookup.
   *   <t />
   *
   *   // normalized into a path expression whose head is the variable lookup
   *   // `t` and tail is `["input"]`.
   *   <t.input />
   * {{/let}}
   *
   * // normalized into a free variable lookup for `SomeComponent` (with the
   * // context `ComponentHead`).
   * <SomeComponent />
   *
   * // normalized into a path expression whose head is the free variable
   * // `notInScope` (with the context `Expression`), and whose tail is
   * // `["SomeComponent"]`. In resolver mode, this path will be rejected later,
   * // since it cannot serve as an input to the resolver.
   * <notInScope.SomeComponent />
   * ```
   */

  function normalize(source, root, isStrict) {
    // create a new context for the normalization pass
    var state = new NormalizationState(root.table, isStrict);

    var body = VISIT_STMTS.visitList(root.body, state);

    return body.mapOk(function (body) {
      return new Template({
        loc: root.loc,
        scope: root.table,
        body: body.toArray()
      });
    });
  }

  function _createForOfIteratorHelperLoose$3(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$3(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

  function _unsupportedIterableToArray$3(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$3(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen); }

  function _arrayLikeToArray$3(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  var WireFormatDebugger = /*#__PURE__*/function () {
    function WireFormatDebugger(_ref) {
      var _statements = _ref[0],
          symbols = _ref[1],
          _hasEval = _ref[2],
          upvars = _ref[3];
      this.upvars = upvars;
      this.symbols = symbols;
    }

    var _proto = WireFormatDebugger.prototype;

    _proto.format = function format(program) {
      var out = [];

      for (var _iterator = _createForOfIteratorHelperLoose$3(program[0]), _step; !(_step = _iterator()).done;) {
        var statement = _step.value;
        out.push(this.formatOpcode(statement));
      }

      return out;
    };

    _proto.formatOpcode = function formatOpcode(opcode) {
      if (Array.isArray(opcode)) {
        switch (opcode[0]) {
          case 1
          /* Append */
          :
            return ['append', this.formatOpcode(opcode[1])];

          case 2
          /* TrustingAppend */
          :
            return ['trusting-append', this.formatOpcode(opcode[1])];

          case 6
          /* Block */
          :
            return ['block', this.formatOpcode(opcode[1]), this.formatParams(opcode[2]), this.formatHash(opcode[3]), this.formatBlocks(opcode[4])];

          case 40
          /* InElement */
          :
            return ['in-element', opcode[1], this.formatOpcode(opcode[2]), opcode[3] ? this.formatOpcode(opcode[3]) : undefined];

          case 10
          /* OpenElement */
          :
            return ['open-element', inflateTagName(opcode[1])];

          case 11
          /* OpenElementWithSplat */
          :
            return ['open-element-with-splat', inflateTagName(opcode[1])];

          case 13
          /* CloseElement */
          :
            return ['close-element'];

          case 12
          /* FlushElement */
          :
            return ['flush-element'];

          case 14
          /* StaticAttr */
          :
            return ['static-attr', inflateAttrName(opcode[1]), opcode[2], opcode[3]];

          case 24
          /* StaticComponentAttr */
          :
            return ['static-component-attr', inflateAttrName(opcode[1]), opcode[2], opcode[3]];

          case 15
          /* DynamicAttr */
          :
            return ['dynamic-attr', inflateAttrName(opcode[1]), this.formatOpcode(opcode[2]), opcode[3]];

          case 16
          /* ComponentAttr */
          :
            return ['component-attr', inflateAttrName(opcode[1]), this.formatOpcode(opcode[2]), opcode[3]];

          case 17
          /* AttrSplat */
          :
            return ['attr-splat'];

          case 18
          /* Yield */
          :
            return ['yield', opcode[1], this.formatParams(opcode[2])];

          case 20
          /* DynamicArg */
          :
            return ['dynamic-arg', opcode[1], this.formatOpcode(opcode[2])];

          case 21
          /* StaticArg */
          :
            return ['static-arg', opcode[1], this.formatOpcode(opcode[2])];

          case 22
          /* TrustingDynamicAttr */
          :
            return ['trusting-dynamic-attr', inflateAttrName(opcode[1]), this.formatOpcode(opcode[2]), opcode[3]];

          case 23
          /* TrustingComponentAttr */
          :
            return ['trusting-component-attr', inflateAttrName(opcode[1]), this.formatOpcode(opcode[2]), opcode[3]];

          case 26
          /* Debugger */
          :
            return ['debugger', opcode[1]];

          case 3
          /* Comment */
          :
            return ['comment', opcode[1]];

          case 4
          /* Modifier */
          :
            return ['modifier', this.formatOpcode(opcode[1]), this.formatParams(opcode[2]), this.formatHash(opcode[3])];

          case 8
          /* Component */
          :
            return ['component', this.formatOpcode(opcode[1]), this.formatElementParams(opcode[2]), this.formatHash(opcode[3]), this.formatBlocks(opcode[4])];

          case 48
          /* HasBlock */
          :
            return ['has-block', this.formatOpcode(opcode[1])];

          case 49
          /* HasBlockParams */
          :
            return ['has-block-params', this.formatOpcode(opcode[1])];

          case 50
          /* Curry */
          :
            return ['curry', this.formatOpcode(opcode[1]), this.formatCurryType(opcode[2]), this.formatParams(opcode[3]), this.formatHash(opcode[4])];

          case 27
          /* Undefined */
          :
            return ['undefined'];

          case 28
          /* Call */
          :
            return ['call', this.formatOpcode(opcode[1]), this.formatParams(opcode[2]), this.formatHash(opcode[3])];

          case 29
          /* Concat */
          :
            return ['concat', this.formatParams(opcode[1])];

          case 31
          /* GetStrictFree */
          :
            return ['get-strict-free', this.upvars[opcode[1]], opcode[2]];

          case 34
          /* GetFreeAsComponentOrHelperHeadOrThisFallback */
          :
            return ['GetFreeAsComponentOrHelperHeadOrThisFallback', this.upvars[opcode[1]], opcode[2]];

          case 35
          /* GetFreeAsComponentOrHelperHead */
          :
            return ['GetFreeAsComponentOrHelperHead', this.upvars[opcode[1]], opcode[2]];

          case 36
          /* GetFreeAsHelperHeadOrThisFallback */
          :
            return ['GetFreeAsHelperHeadOrThisFallback', this.upvars[opcode[1]], opcode[2]];

          case 99
          /* GetFreeAsDeprecatedHelperHeadOrThisFallback */
          :
            return ['GetFreeAsDeprecatedHelperHeadOrThisFallback', this.upvars[opcode[1]]];

          case 37
          /* GetFreeAsHelperHead */
          :
            return ['GetFreeAsHelperHead', this.upvars[opcode[1]], opcode[2]];

          case 39
          /* GetFreeAsComponentHead */
          :
            return ['GetFreeAsComponentHead', this.upvars[opcode[1]], opcode[2]];

          case 38
          /* GetFreeAsModifierHead */
          :
            return ['GetFreeAsModifierHead', this.upvars[opcode[1]], opcode[2]];

          case 30
          /* GetSymbol */
          :
            {
              if (opcode[1] === 0) {
                return ['get-symbol', 'this', opcode[2]];
              } else {
                return ['get-symbol', this.symbols[opcode[1] - 1], opcode[2]];
              }
            }

          case 32
          /* GetTemplateSymbol */
          :
            {
              return ['get-template-symbol', opcode[1], opcode[2]];
            }

          case 41
          /* If */
          :
            return ['if', this.formatOpcode(opcode[1]), this.formatBlock(opcode[2]), opcode[3] ? this.formatBlock(opcode[3]) : null];

          case 52
          /* IfInline */
          :
            return ['if-inline'];

          case 51
          /* Not */
          :
            return ['not'];

          case 42
          /* Each */
          :
            return ['each', this.formatOpcode(opcode[1]), opcode[2] ? this.formatOpcode(opcode[2]) : null, this.formatBlock(opcode[3]), opcode[4] ? this.formatBlock(opcode[4]) : null];

          case 43
          /* With */
          :
            return ['with', this.formatOpcode(opcode[1]), this.formatBlock(opcode[2]), opcode[3] ? this.formatBlock(opcode[3]) : null];

          case 44
          /* Let */
          :
            return ['let', this.formatParams(opcode[1]), this.formatBlock(opcode[2])];

          case 54
          /* Log */
          :
            return ['log', this.formatParams(opcode[1])];

          case 45
          /* WithDynamicVars */
          :
            return ['-with-dynamic-vars', this.formatHash(opcode[1]), this.formatBlock(opcode[2])];

          case 53
          /* GetDynamicVar */
          :
            return ['-get-dynamic-vars', this.formatOpcode(opcode[1])];

          case 46
          /* InvokeComponent */
          :
            return ['component', this.formatOpcode(opcode[1]), this.formatParams(opcode[2]), this.formatHash(opcode[3]), this.formatBlocks(opcode[4])];
        }
      } else {
        return opcode;
      }
    };

    _proto.formatCurryType = function formatCurryType(value) {
      switch (value) {
        case 0
        /* Component */
        :
          return 'component';

        case 1
        /* Helper */
        :
          return 'helper';

        case 2
        /* Modifier */
        :
          return 'modifier';

        default:
          throw util.exhausted(value);
      }
    };

    _proto.formatElementParams = function formatElementParams(opcodes) {
      var _this = this;

      if (opcodes === null) return null;
      return opcodes.map(function (o) {
        return _this.formatOpcode(o);
      });
    };

    _proto.formatParams = function formatParams(opcodes) {
      var _this2 = this;

      if (opcodes === null) return null;
      return opcodes.map(function (o) {
        return _this2.formatOpcode(o);
      });
    };

    _proto.formatHash = function formatHash(hash) {
      var _this3 = this;

      if (hash === null) return null;
      return hash[0].reduce(function (accum, key, index) {
        accum[key] = _this3.formatOpcode(hash[1][index]);
        return accum;
      }, util.dict());
    };

    _proto.formatBlocks = function formatBlocks(blocks) {
      var _this4 = this;

      if (blocks === null) return null;
      return blocks[0].reduce(function (accum, key, index) {
        accum[key] = _this4.formatBlock(blocks[1][index]);
        return accum;
      }, util.dict());
    };

    _proto.formatBlock = function formatBlock(block) {
      var _this5 = this;

      return {
        statements: block[0].map(function (s) {
          return _this5.formatOpcode(s);
        }),
        parameters: block[1]
      };
    };

    return WireFormatDebugger;
  }();

  function _createForOfIteratorHelperLoose$4(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$4(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

  function _unsupportedIterableToArray$4(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$4(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$4(o, minLen); }

  function _arrayLikeToArray$4(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  var ExpressionEncoder = /*#__PURE__*/function () {
    function ExpressionEncoder() {}

    var _proto = ExpressionEncoder.prototype;

    _proto.expr = function expr(_expr) {
      switch (_expr.type) {
        case 'Missing':
          return undefined;

        case 'Literal':
          return this.Literal(_expr);

        case 'CallExpression':
          return this.CallExpression(_expr);

        case 'DeprecatedCallExpression':
          return this.DeprecatedCallExpression(_expr);

        case 'PathExpression':
          return this.PathExpression(_expr);

        case 'Arg':
          return [30
          /* GetSymbol */
          , _expr.symbol];

        case 'Local':
          return this.Local(_expr);

        case 'This':
          return [30
          /* GetSymbol */
          , 0];

        case 'Free':
          return [_expr.resolution.resolution(), _expr.symbol];

        case 'HasBlock':
          return this.HasBlock(_expr);

        case 'HasBlockParams':
          return this.HasBlockParams(_expr);

        case 'Curry':
          return this.Curry(_expr);

        case 'Not':
          return this.Not(_expr);

        case 'IfInline':
          return this.IfInline(_expr);

        case 'InterpolateExpression':
          return this.InterpolateExpression(_expr);

        case 'GetDynamicVar':
          return this.GetDynamicVar(_expr);

        case 'Log':
          return this.Log(_expr);
      }
    };

    _proto.Literal = function Literal(_ref) {
      var value = _ref.value;

      if (value === undefined) {
        return [27
        /* Undefined */
        ];
      } else {
        return value;
      }
    };

    _proto.Missing = function Missing() {
      return undefined;
    };

    _proto.HasBlock = function HasBlock(_ref2) {
      var symbol = _ref2.symbol;
      return [48
      /* HasBlock */
      , [30
      /* GetSymbol */
      , symbol]];
    };

    _proto.HasBlockParams = function HasBlockParams(_ref3) {
      var symbol = _ref3.symbol;
      return [49
      /* HasBlockParams */
      , [30
      /* GetSymbol */
      , symbol]];
    };

    _proto.Curry = function Curry(_ref4) {
      var definition = _ref4.definition,
          curriedType = _ref4.curriedType,
          args = _ref4.args;
      return [50
      /* Curry */
      , EXPR.expr(definition), curriedType, EXPR.Positional(args.positional), EXPR.NamedArguments(args.named)];
    };

    _proto.Local = function Local(_ref5) {
      var isTemplateLocal = _ref5.isTemplateLocal,
          symbol = _ref5.symbol;
      return [isTemplateLocal ? 32
      /* GetTemplateSymbol */
      : 30
      /* GetSymbol */
      , symbol];
    };

    _proto.GetWithResolver = function GetWithResolver(_ref6) {
      var symbol = _ref6.symbol;
      return [34
      /* GetFreeAsComponentOrHelperHeadOrThisFallback */
      , symbol];
    };

    _proto.PathExpression = function PathExpression(_ref7) {
      var head = _ref7.head,
          tail = _ref7.tail;
      var getOp = EXPR.expr(head);
      return [].concat(getOp, [EXPR.Tail(tail)]);
    };

    _proto.InterpolateExpression = function InterpolateExpression(_ref8) {
      var parts = _ref8.parts;
      return [29
      /* Concat */
      , parts.map(function (e) {
        return EXPR.expr(e);
      }).toArray()];
    };

    _proto.CallExpression = function CallExpression(_ref9) {
      var callee = _ref9.callee,
          args = _ref9.args;
      return [28
      /* Call */
      , EXPR.expr(callee)].concat(EXPR.Args(args));
    };

    _proto.DeprecatedCallExpression = function DeprecatedCallExpression(_ref10) {
      var arg = _ref10.arg,
          callee = _ref10.callee;
      return [99
      /* GetFreeAsDeprecatedHelperHeadOrThisFallback */
      , callee.symbol, [arg.chars]];
    };

    _proto.Tail = function Tail(_ref11) {
      var members = _ref11.members;
      return util.mapPresent(members, function (member) {
        return member.chars;
      });
    };

    _proto.Args = function Args(_ref12) {
      var positional = _ref12.positional,
          named = _ref12.named;
      return [this.Positional(positional), this.NamedArguments(named)];
    };

    _proto.Positional = function Positional(_ref13) {
      var list = _ref13.list;
      return list.map(function (l) {
        return EXPR.expr(l);
      }).toPresentArray();
    };

    _proto.NamedArgument = function NamedArgument(_ref14) {
      var key = _ref14.key,
          value = _ref14.value;
      return [key.chars, EXPR.expr(value)];
    };

    _proto.NamedArguments = function NamedArguments(_ref15) {
      var pairs = _ref15.entries;
      var list = pairs.toArray();

      if (util.isPresent(list)) {
        var names = [];
        var values = [];

        for (var _iterator = _createForOfIteratorHelperLoose$4(list), _step; !(_step = _iterator()).done;) {
          var pair = _step.value;

          var _EXPR$NamedArgument = EXPR.NamedArgument(pair),
              name = _EXPR$NamedArgument[0],
              value = _EXPR$NamedArgument[1];

          names.push(name);
          values.push(value);
        }

        util.assertPresent(names);
        util.assertPresent(values);
        return [names, values];
      } else {
        return null;
      }
    };

    _proto.Not = function Not(_ref16) {
      var value = _ref16.value;
      return [51
      /* Not */
      , EXPR.expr(value)];
    };

    _proto.IfInline = function IfInline(_ref17) {
      var condition = _ref17.condition,
          truthy = _ref17.truthy,
          falsy = _ref17.falsy;
      var expr = [52
      /* IfInline */
      , EXPR.expr(condition), EXPR.expr(truthy)];

      if (falsy) {
        expr.push(EXPR.expr(falsy));
      }

      return expr;
    };

    _proto.GetDynamicVar = function GetDynamicVar(_ref18) {
      var name = _ref18.name;
      return [53
      /* GetDynamicVar */
      , EXPR.expr(name)];
    };

    _proto.Log = function Log(_ref19) {
      var positional = _ref19.positional;
      return [54
      /* Log */
      , this.Positional(positional)];
    };

    return ExpressionEncoder;
  }();
  var EXPR = new ExpressionEncoder();

  function _createForOfIteratorHelperLoose$5(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$5(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

  function _unsupportedIterableToArray$5(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$5(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$5(o, minLen); }

  function _arrayLikeToArray$5(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  var WireStatements = /*#__PURE__*/function () {
    function WireStatements(statements) {
      this.statements = statements;
    }

    var _proto = WireStatements.prototype;

    _proto.toArray = function toArray() {
      return this.statements;
    };

    return WireStatements;
  }();

  var ContentEncoder = /*#__PURE__*/function () {
    function ContentEncoder() {}

    var _proto2 = ContentEncoder.prototype;

    _proto2.list = function list(statements) {
      var out = [];

      for (var _iterator = _createForOfIteratorHelperLoose$5(statements), _step; !(_step = _iterator()).done;) {
        var statement = _step.value;
        var result = CONTENT.content(statement);

        if (result && result instanceof WireStatements) {
          out.push.apply(out, result.toArray());
        } else {
          out.push(result);
        }
      }

      return out;
    };

    _proto2.content = function content(stmt) {

      return this.visitContent(stmt);
    };

    _proto2.visitContent = function visitContent(stmt) {
      switch (stmt.type) {
        case 'Debugger':
          return [26
          /* Debugger */
          , stmt.scope.getEvalInfo()];

        case 'AppendComment':
          return this.AppendComment(stmt);

        case 'AppendTextNode':
          return this.AppendTextNode(stmt);

        case 'AppendTrustedHTML':
          return this.AppendTrustedHTML(stmt);

        case 'Yield':
          return this.Yield(stmt);

        case 'Component':
          return this.Component(stmt);

        case 'SimpleElement':
          return this.SimpleElement(stmt);

        case 'InElement':
          return this.InElement(stmt);

        case 'InvokeBlock':
          return this.InvokeBlock(stmt);

        case 'If':
          return this.If(stmt);

        case 'Each':
          return this.Each(stmt);

        case 'With':
          return this.With(stmt);

        case 'Let':
          return this.Let(stmt);

        case 'WithDynamicVars':
          return this.WithDynamicVars(stmt);

        case 'InvokeComponent':
          return this.InvokeComponent(stmt);

        default:
          return util.exhausted(stmt);
      }
    };

    _proto2.Yield = function Yield(_ref) {
      var to = _ref.to,
          positional = _ref.positional;
      return [18
      /* Yield */
      , to, EXPR.Positional(positional)];
    };

    _proto2.InElement = function InElement(_ref2) {
      var guid = _ref2.guid,
          insertBefore = _ref2.insertBefore,
          destination = _ref2.destination,
          block = _ref2.block;
      var wireBlock = CONTENT.NamedBlock(block)[1]; // let guid = args.guid;

      var wireDestination = EXPR.expr(destination);
      var wireInsertBefore = EXPR.expr(insertBefore);

      if (wireInsertBefore === undefined) {
        return [40
        /* InElement */
        , wireBlock, guid, wireDestination];
      } else {
        return [40
        /* InElement */
        , wireBlock, guid, wireDestination, wireInsertBefore];
      }
    };

    _proto2.InvokeBlock = function InvokeBlock(_ref3) {
      var head = _ref3.head,
          args = _ref3.args,
          blocks = _ref3.blocks;
      return [6
      /* Block */
      , EXPR.expr(head)].concat(EXPR.Args(args), [CONTENT.NamedBlocks(blocks)]);
    };

    _proto2.AppendTrustedHTML = function AppendTrustedHTML(_ref4) {
      var html = _ref4.html;
      return [2
      /* TrustingAppend */
      , EXPR.expr(html)];
    };

    _proto2.AppendTextNode = function AppendTextNode(_ref5) {
      var text = _ref5.text;
      return [1
      /* Append */
      , EXPR.expr(text)];
    };

    _proto2.AppendComment = function AppendComment(_ref6) {
      var value = _ref6.value;
      return [3
      /* Comment */
      , value.chars];
    };

    _proto2.SimpleElement = function SimpleElement(_ref7) {
      var tag = _ref7.tag,
          params = _ref7.params,
          body = _ref7.body,
          dynamicFeatures = _ref7.dynamicFeatures;
      var op = dynamicFeatures ? 11
      /* OpenElementWithSplat */
      : 10
      /* OpenElement */
      ;
      return new WireStatements([[op, deflateTagName(tag.chars)]].concat(CONTENT.ElementParameters(params).toArray(), [[12
      /* FlushElement */
      ]], CONTENT.list(body), [[13
      /* CloseElement */
      ]]));
    };

    _proto2.Component = function Component(_ref8) {
      var tag = _ref8.tag,
          params = _ref8.params,
          args = _ref8.args,
          blocks = _ref8.blocks;
      var wireTag = EXPR.expr(tag);
      var wirePositional = CONTENT.ElementParameters(params);
      var wireNamed = EXPR.NamedArguments(args);
      var wireNamedBlocks = CONTENT.NamedBlocks(blocks);
      return [8
      /* Component */
      , wireTag, wirePositional.toPresentArray(), wireNamed, wireNamedBlocks];
    };

    _proto2.ElementParameters = function ElementParameters(_ref9) {
      var body = _ref9.body;
      return body.map(function (p) {
        return CONTENT.ElementParameter(p);
      });
    };

    _proto2.ElementParameter = function ElementParameter(param) {
      switch (param.type) {
        case 'SplatAttr':
          return [17
          /* AttrSplat */
          , param.symbol];

        case 'DynamicAttr':
          return [dynamicAttrOp(param.kind)].concat(dynamicAttr(param));

        case 'StaticAttr':
          return [staticAttrOp(param.kind)].concat(staticAttr(param));

        case 'Modifier':
          return [4
          /* Modifier */
          , EXPR.expr(param.callee)].concat(EXPR.Args(param.args));
      }
    };

    _proto2.NamedBlocks = function NamedBlocks(_ref10) {
      var blocks = _ref10.blocks;
      var names = [];
      var serializedBlocks = [];

      for (var _iterator2 = _createForOfIteratorHelperLoose$5(blocks.toArray()), _step2; !(_step2 = _iterator2()).done;) {
        var block = _step2.value;

        var _CONTENT$NamedBlock = CONTENT.NamedBlock(block),
            name = _CONTENT$NamedBlock[0],
            serializedBlock = _CONTENT$NamedBlock[1];

        names.push(name);
        serializedBlocks.push(serializedBlock);
      }

      return names.length > 0 ? [names, serializedBlocks] : null;
    };

    _proto2.NamedBlock = function NamedBlock(_ref11) {
      var name = _ref11.name,
          body = _ref11.body,
          scope = _ref11.scope;
      var nameChars = name.chars;

      if (nameChars === 'inverse') {
        nameChars = 'else';
      }

      return [nameChars, [CONTENT.list(body), scope.slots]];
    };

    _proto2.If = function If(_ref12) {
      var condition = _ref12.condition,
          block = _ref12.block,
          inverse = _ref12.inverse;
      return [41
      /* If */
      , EXPR.expr(condition), CONTENT.NamedBlock(block)[1], inverse ? CONTENT.NamedBlock(inverse)[1] : null];
    };

    _proto2.Each = function Each(_ref13) {
      var value = _ref13.value,
          key = _ref13.key,
          block = _ref13.block,
          inverse = _ref13.inverse;
      return [42
      /* Each */
      , EXPR.expr(value), key ? EXPR.expr(key) : null, CONTENT.NamedBlock(block)[1], inverse ? CONTENT.NamedBlock(inverse)[1] : null];
    };

    _proto2.With = function With(_ref14) {
      var value = _ref14.value,
          block = _ref14.block,
          inverse = _ref14.inverse;
      return [43
      /* With */
      , EXPR.expr(value), CONTENT.NamedBlock(block)[1], inverse ? CONTENT.NamedBlock(inverse)[1] : null];
    };

    _proto2.Let = function Let(_ref15) {
      var positional = _ref15.positional,
          block = _ref15.block;
      return [44
      /* Let */
      , EXPR.Positional(positional), CONTENT.NamedBlock(block)[1]];
    };

    _proto2.WithDynamicVars = function WithDynamicVars(_ref16) {
      var named = _ref16.named,
          block = _ref16.block;
      return [45
      /* WithDynamicVars */
      , EXPR.NamedArguments(named), CONTENT.NamedBlock(block)[1]];
    };

    _proto2.InvokeComponent = function InvokeComponent(_ref17) {
      var definition = _ref17.definition,
          args = _ref17.args,
          blocks = _ref17.blocks;
      return [46
      /* InvokeComponent */
      , EXPR.expr(definition), EXPR.Positional(args.positional), EXPR.NamedArguments(args.named), blocks ? CONTENT.NamedBlocks(blocks) : null];
    };

    return ContentEncoder;
  }();
  var CONTENT = new ContentEncoder();

  function staticAttr(_ref18) {
    var name = _ref18.name,
        value = _ref18.value,
        namespace = _ref18.namespace;
    var out = [deflateAttrName(name.chars), value.chars];

    if (namespace) {
      out.push(namespace);
    }

    return out;
  }

  function dynamicAttr(_ref19) {
    var name = _ref19.name,
        value = _ref19.value,
        namespace = _ref19.namespace;
    var out = [deflateAttrName(name.chars), EXPR.expr(value)];

    if (namespace) {
      out.push(namespace);
    }

    return out;
  }

  function staticAttrOp(kind) {
    if (kind.component) {
      return 24
      /* StaticComponentAttr */
      ;
    } else {
        return 14
        /* StaticAttr */
        ;
      }
  }

  function dynamicAttrOp(kind) {
    if (kind.component) {
      return kind.trusting ? 23
      /* TrustingComponentAttr */
      : 16
      /* ComponentAttr */
      ;
    } else {
      return kind.trusting ? 22
      /* TrustingDynamicAttr */
      : 15
      /* DynamicAttr */
      ;
    }
  }

  function visit(template) {
    var statements = CONTENT.list(template.body);
    var scope = template.scope;
    var block = [statements, scope.symbols, scope.hasEval, scope.upvars];

    return block;
  }

  var defaultId = function () {
    var req = typeof module === 'object' && typeof module.require === 'function' ? module.require : require;

    if (req) {
      try {
        var crypto = req('crypto');

        var idFn = function idFn(src) {
          var hash = crypto.createHash('sha1');
          hash.update(src, 'utf8'); // trim to 6 bytes of data (2^48 - 1)

          return hash.digest('base64').substring(0, 8);
        };

        idFn('test');
        return idFn;
      } catch (e) {}
    }

    return function idFn() {
      return null;
    };
  }();
  var defaultOptions = {
    id: defaultId
  };
  /*
   * Compile a string into a template javascript string.
   *
   * Example usage:
   *     import { precompile } from '@glimmer/compiler';
   *     import { templateFactory } from 'glimmer-runtime';
   *     let templateJs = precompile("Howdy {{name}}");
   *     let factory = templateFactory(new Function("return " + templateJs)());
   *     let template = factory.create(env);
   *
   * @method precompile
   * @param {string} string a Glimmer template string
   * @return {string} a template javascript string
   */

  function precompileJSON(string, options) {
    if (options === void 0) {
      options = defaultOptions;
    }

    var _a, _b;

    var source = new syntax.Source(string, (_a = options.meta) === null || _a === void 0 ? void 0 : _a.moduleName);

    var _normalize = syntax.normalize(source, options),
        ast = _normalize[0],
        locals = _normalize[1];

    var block = normalize(source, ast, (_b = options.strictMode) !== null && _b !== void 0 ? _b : false).mapOk(function (pass2In) {
      return visit(pass2In);
    });

    if (block.isOk) {
      return [block.value, locals];
    } else {
      throw block.reason;
    }
  } // UUID used as a unique placeholder for placing a snippet of JS code into
  // the otherwise JSON stringified value below.

  var SCOPE_PLACEHOLDER = '796d24e6-2450-4fb0-8cdf-b65638b5ef70';
  /*
   * Compile a string into a template javascript string.
   *
   * Example usage:
   *     import { precompile } from '@glimmer/compiler';
   *     import { templateFactory } from 'glimmer-runtime';
   *     let templateJs = precompile("Howdy {{name}}");
   *     let factory = templateFactory(new Function("return " + templateJs)());
   *     let template = factory.create(env);
   *
   * @method precompile
   * @param {string} string a Glimmer template string
   * @return {string} a template javascript string
   */

  function precompile(source, options) {
    if (options === void 0) {
      options = defaultOptions;
    }

    var _a, _b;

    var _precompileJSON = precompileJSON(source, options),
        block = _precompileJSON[0],
        usedLocals = _precompileJSON[1];

    var moduleName = (_a = options.meta) === null || _a === void 0 ? void 0 : _a.moduleName;
    var idFn = options.id || defaultId;
    var blockJSON = JSON.stringify(block);
    var templateJSONObject = {
      id: idFn(JSON.stringify(options.meta) + blockJSON),
      block: blockJSON,
      moduleName: moduleName !== null && moduleName !== void 0 ? moduleName : '(unknown template module)',
      // lying to the type checker here because we're going to
      // replace it just below, after stringification
      scope: SCOPE_PLACEHOLDER,
      isStrictMode: (_b = options.strictMode) !== null && _b !== void 0 ? _b : false
    };

    if (usedLocals.length === 0) {
      delete templateJSONObject.scope;
    } // JSON is javascript


    var stringified = JSON.stringify(templateJSONObject);

    if (usedLocals.length > 0) {
      var scopeFn = "()=>[" + usedLocals.join(',') + "]";
      stringified = stringified.replace("\"" + SCOPE_PLACEHOLDER + "\"", scopeFn);
    }

    return stringified;
  }

  var VariableKind;

  (function (VariableKind) {
    VariableKind["Local"] = "Local";
    VariableKind["Free"] = "Free";
    VariableKind["Arg"] = "Arg";
    VariableKind["Block"] = "Block";
    VariableKind["This"] = "This";
  })(VariableKind || (VariableKind = {}));

  function normalizeStatement(statement) {
    if (Array.isArray(statement)) {
      if (statementIsExpression(statement)) {
        return normalizeAppendExpression(statement);
      } else if (isSugaryArrayStatement(statement)) {
        return normalizeSugaryArrayStatement(statement);
      } else {
        return normalizeVerboseStatement(statement);
      }
    } else if (typeof statement === 'string') {
      return normalizeAppendHead(normalizeDottedPath(statement), false);
    } else {
      throw util.assertNever(statement);
    }
  }
  function normalizeAppendHead(head, trusted) {
    if (head.type === "GetPath"
    /* GetPath */
    ) {
        return {
          kind: "AppendPath"
          /* AppendPath */
          ,
          path: head,
          trusted: trusted
        };
      } else {
      return {
        kind: "AppendExpr"
        /* AppendExpr */
        ,
        expr: head,
        trusted: trusted
      };
    }
  }

  function isSugaryArrayStatement(statement) {
    if (Array.isArray(statement) && typeof statement[0] === 'string') {
      switch (statement[0][0]) {
        case '(':
        case '#':
        case '<':
        case '!':
          return true;

        default:
          return false;
      }
    }

    return false;
  }

  function normalizeSugaryArrayStatement(statement) {
    var name = statement[0];

    switch (name[0]) {
      case '(':
        {
          var params = null;
          var hash = null;

          if (statement.length === 3) {
            params = normalizeParams(statement[1]);
            hash = normalizeHash(statement[2]);
          } else if (statement.length === 2) {
            if (Array.isArray(statement[1])) {
              params = normalizeParams(statement[1]);
            } else {
              hash = normalizeHash(statement[1]);
            }
          }

          return {
            kind: "Call"
            /* Call */
            ,
            head: normalizeCallHead(name),
            params: params,
            hash: hash,
            trusted: false
          };
        }

      case '#':
        {
          var _normalizeBuilderBloc = normalizeBuilderBlockStatement(statement),
              path = _normalizeBuilderBloc.head,
              _params = _normalizeBuilderBloc.params,
              _hash = _normalizeBuilderBloc.hash,
              blocks = _normalizeBuilderBloc.blocks,
              blockParams = _normalizeBuilderBloc.blockParams;

          return {
            kind: "Block"
            /* Block */
            ,
            head: path,
            params: _params,
            hash: _hash,
            blocks: blocks,
            blockParams: blockParams
          };
        }

      case '!':
        {
          var _name = statement[0].slice(1);

          var _normalizeBuilderBloc2 = normalizeBuilderBlockStatement(statement),
              _params2 = _normalizeBuilderBloc2.params,
              _hash2 = _normalizeBuilderBloc2.hash,
              _blocks = _normalizeBuilderBloc2.blocks,
              _blockParams = _normalizeBuilderBloc2.blockParams;

          return {
            kind: "Keyword"
            /* Keyword */
            ,
            name: _name,
            params: _params2,
            hash: _hash2,
            blocks: _blocks,
            blockParams: _blockParams
          };
        }

      case '<':
        {
          var attrs = util.dict();
          var block = [];

          if (statement.length === 3) {
            attrs = normalizeAttrs(statement[1]);
            block = normalizeBlock(statement[2]);
          } else if (statement.length === 2) {
            if (Array.isArray(statement[1])) {
              block = normalizeBlock(statement[1]);
            } else {
              attrs = normalizeAttrs(statement[1]);
            }
          }

          return {
            kind: "Element"
            /* Element */
            ,
            name: extractElement(name),
            attrs: attrs,
            block: block
          };
        }

      default:
        throw new Error("Unreachable " + JSON.stringify(statement) + " in normalizeSugaryArrayStatement");
    }
  }

  function normalizeVerboseStatement(statement) {
    switch (statement[0]) {
      case 0
      /* Literal */
      :
        {
          return {
            kind: "Literal"
            /* Literal */
            ,
            value: statement[1]
          };
        }

      case 2
      /* Append */
      :
        {
          return normalizeAppendExpression(statement[1], statement[2]);
        }

      case 3
      /* Modifier */
      :
        {
          return {
            kind: "Modifier"
            /* Modifier */
            ,
            params: normalizeParams(statement[1]),
            hash: normalizeHash(statement[2])
          };
        }

      case 4
      /* DynamicComponent */
      :
        {
          return {
            kind: "DynamicComponent"
            /* DynamicComponent */
            ,
            expr: normalizeExpression(statement[1]),
            hash: normalizeHash(statement[2]),
            block: normalizeBlock(statement[3])
          };
        }

      case 1
      /* Comment */
      :
        {
          return {
            kind: "Comment"
            /* Comment */
            ,
            value: statement[1]
          };
        }
    }
  }

  function extractBlockHead(name) {
    var result = /^(#|!)(.*)$/.exec(name);

    if (result === null) {
      throw new Error("Unexpected missing # in block head");
    }

    return normalizeDottedPath(result[2]);
  }

  function normalizeCallHead(name) {
    var result = /^\((.*)\)$/.exec(name);

    if (result === null) {
      throw new Error("Unexpected missing () in call head");
    }

    return normalizeDottedPath(result[1]);
  }

  function normalizePath(head, tail) {
    if (tail === void 0) {
      tail = [];
    }

    var pathHead = normalizePathHead(head);

    if (util.isPresent(tail)) {
      return {
        type: "GetPath"
        /* GetPath */
        ,
        path: {
          head: pathHead,
          tail: tail
        }
      };
    } else {
      return {
        type: "GetVar"
        /* GetVar */
        ,
        variable: pathHead
      };
    }
  }

  function normalizeDottedPath(whole) {
    var _normalizePathHead = normalizePathHead(whole),
        kind = _normalizePathHead.kind,
        rest = _normalizePathHead.name;

    var _rest$split = rest.split('.'),
        name = _rest$split[0],
        tail = _rest$split.slice(1);

    var variable = {
      kind: kind,
      name: name,
      mode: 'loose'
    };

    if (util.isPresent(tail)) {
      return {
        type: "GetPath"
        /* GetPath */
        ,
        path: {
          head: variable,
          tail: tail
        }
      };
    } else {
      return {
        type: "GetVar"
        /* GetVar */
        ,
        variable: variable
      };
    }
  }

  function normalizePathHead(whole) {
    var kind;
    var name;

    if (/^this(\.|$)/.exec(whole)) {
      return {
        kind: VariableKind.This,
        name: whole,
        mode: 'loose'
      };
    }

    switch (whole[0]) {
      case '^':
        kind = VariableKind.Free;
        name = whole.slice(1);
        break;

      case '@':
        kind = VariableKind.Arg;
        name = whole.slice(1);
        break;

      case '&':
        kind = VariableKind.Block;
        name = whole.slice(1);
        break;

      default:
        kind = VariableKind.Local;
        name = whole;
    }

    return {
      kind: kind,
      name: name,
      mode: 'loose'
    };
  }
  function normalizeBuilderBlockStatement(statement) {
    var head = statement[0];
    var blocks = util.dict();
    var params = null;
    var hash = null;
    var blockParams = null;

    if (statement.length === 2) {
      blocks = normalizeBlocks(statement[1]);
    } else if (statement.length === 3) {
      if (Array.isArray(statement[1])) {
        params = normalizeParams(statement[1]);
      } else {
        var _normalizeBlockHash = normalizeBlockHash(statement[1]);

        hash = _normalizeBlockHash.hash;
        blockParams = _normalizeBlockHash.blockParams;
      }

      blocks = normalizeBlocks(statement[2]);
    } else if (statement.length === 4) {
      params = normalizeParams(statement[1]);

      var _normalizeBlockHash2 = normalizeBlockHash(statement[2]);

      hash = _normalizeBlockHash2.hash;
      blockParams = _normalizeBlockHash2.blockParams;
      blocks = normalizeBlocks(statement[3]);
    }

    return {
      head: extractBlockHead(head),
      params: params,
      hash: hash,
      blockParams: blockParams,
      blocks: blocks
    };
  }

  function normalizeBlockHash(hash) {
    if (hash === null) {
      return {
        hash: null,
        blockParams: null
      };
    }

    var out = null;
    var blockParams = null;
    entries(hash, function (key, value) {
      if (key === 'as') {
        blockParams = Array.isArray(value) ? value : [value];
      } else {
        out = out || util.dict();
        out[key] = normalizeExpression(value);
      }
    });
    return {
      hash: out,
      blockParams: blockParams
    };
  }

  function entries(dict, callback) {
    Object.keys(dict).forEach(function (key) {
      var value = dict[key];
      callback(key, value);
    });
  }

  function normalizeBlocks(value) {
    if (Array.isArray(value)) {
      return {
        "default": normalizeBlock(value)
      };
    } else {
      return mapObject(value, normalizeBlock);
    }
  }

  function normalizeBlock(block) {
    return block.map(function (s) {
      return normalizeStatement(s);
    });
  }

  function normalizeAttrs(attrs) {
    return mapObject(attrs, function (a) {
      return normalizeAttr(a).expr;
    });
  }

  function normalizeAttr(attr) {
    if (attr === 'splat') {
      return {
        expr: "Splat"
        /* Splat */
        ,
        trusted: false
      };
    } else {
      var expr = normalizeExpression(attr);
      return {
        expr: expr,
        trusted: false
      };
    }
  }

  function mapObject(object, callback) {
    var out = util.dict();
    Object.keys(object).forEach(function (k) {
      out[k] = callback(object[k], k);
    });
    return out;
  }
  function extractElement(input) {
    var match = /^<([a-z0-9\-][a-zA-Z0-9\-]*)>$/.exec(input);
    return match ? match[1] : null;
  }
  function normalizeAppendExpression(expression, forceTrusted) {
    if (forceTrusted === void 0) {
      forceTrusted = false;
    }

    if (expression === null || expression === undefined) {
      return {
        expr: {
          type: "Literal"
          /* Literal */
          ,
          value: expression
        },
        kind: "AppendExpr"
        /* AppendExpr */
        ,
        trusted: false
      };
    } else if (Array.isArray(expression)) {
      switch (expression[0]) {
        case 0
        /* Literal */
        :
          return {
            expr: {
              type: "Literal"
              /* Literal */
              ,
              value: expression[1]
            },
            kind: "AppendExpr"
            /* AppendExpr */
            ,
            trusted: false
          };

        case 5
        /* Get */
        :
          {
            return normalizeAppendHead(normalizePath(expression[1], expression[2]), forceTrusted);
          }

        case 6
        /* Concat */
        :
          {
            var expr = {
              type: "Concat"
              /* Concat */
              ,
              params: normalizeParams(expression.slice(1))
            };
            return {
              expr: expr,
              kind: "AppendExpr"
              /* AppendExpr */
              ,
              trusted: forceTrusted
            };
          }

        case 7
        /* HasBlock */
        :
          return {
            expr: {
              type: "HasBlock"
              /* HasBlock */
              ,
              name: expression[1]
            },
            kind: "AppendExpr"
            /* AppendExpr */
            ,
            trusted: forceTrusted
          };

        case 8
        /* HasBlockParams */
        :
          return {
            expr: {
              type: "HasBlockParams"
              /* HasBlockParams */
              ,
              name: expression[1]
            },
            kind: "AppendExpr"
            /* AppendExpr */
            ,
            trusted: forceTrusted
          };

        default:
          {
            if (isBuilderCallExpression(expression)) {
              return {
                expr: normalizeCallExpression(expression),
                kind: "AppendExpr"
                /* AppendExpr */
                ,
                trusted: forceTrusted
              };
            } else {
              throw new Error("Unexpected array in expression position (wasn't a tuple expression and " + expression[0] + " isn't wrapped in parens, so it isn't a call): " + JSON.stringify(expression));
            }
          }
        // BuilderCallExpression
      }
    } else if (typeof expression !== 'object') {
      switch (typeof expression) {
        case 'string':
          {
            return normalizeAppendHead(normalizeDottedPath(expression), forceTrusted);
          }

        case 'boolean':
        case 'number':
          return {
            expr: {
              type: "Literal"
              /* Literal */
              ,
              value: expression
            },
            kind: "AppendExpr"
            /* AppendExpr */
            ,
            trusted: true
          };

        default:
          throw util.assertNever(expression);
      }
    } else {
      throw util.assertNever(expression);
    }
  }
  function normalizeExpression(expression) {
    if (expression === null || expression === undefined) {
      return {
        type: "Literal"
        /* Literal */
        ,
        value: expression
      };
    } else if (Array.isArray(expression)) {
      switch (expression[0]) {
        case 0
        /* Literal */
        :
          return {
            type: "Literal"
            /* Literal */
            ,
            value: expression[1]
          };

        case 5
        /* Get */
        :
          {
            return normalizePath(expression[1], expression[2]);
          }

        case 6
        /* Concat */
        :
          {
            var expr = {
              type: "Concat"
              /* Concat */
              ,
              params: normalizeParams(expression.slice(1))
            };
            return expr;
          }

        case 7
        /* HasBlock */
        :
          return {
            type: "HasBlock"
            /* HasBlock */
            ,
            name: expression[1]
          };

        case 8
        /* HasBlockParams */
        :
          return {
            type: "HasBlockParams"
            /* HasBlockParams */
            ,
            name: expression[1]
          };

        default:
          {
            if (isBuilderCallExpression(expression)) {
              return normalizeCallExpression(expression);
            } else {
              throw new Error("Unexpected array in expression position (wasn't a tuple expression and " + expression[0] + " isn't wrapped in parens, so it isn't a call): " + JSON.stringify(expression));
            }
          }
        // BuilderCallExpression
      }
    } else if (typeof expression !== 'object') {
      switch (typeof expression) {
        case 'string':
          {
            return normalizeDottedPath(expression);
          }

        case 'boolean':
        case 'number':
          return {
            type: "Literal"
            /* Literal */
            ,
            value: expression
          };

        default:
          throw util.assertNever(expression);
      }
    } else {
      throw util.assertNever(expression);
    }
  }
  function statementIsExpression(statement) {
    if (!Array.isArray(statement)) {
      return false;
    }

    var name = statement[0];

    if (typeof name === 'number') {
      switch (name) {
        case 0
        /* Literal */
        :
        case 5
        /* Get */
        :
        case 6
        /* Concat */
        :
        case 7
        /* HasBlock */
        :
        case 8
        /* HasBlockParams */
        :
          return true;

        default:
          return false;
      }
    }

    if (name[0] === '(') {
      return true;
    }

    return false;
  }
  function isBuilderCallExpression(value) {
    return typeof value[0] === 'string' && value[0][0] === '(';
  }
  function normalizeParams(input) {
    return input.map(normalizeExpression);
  }
  function normalizeHash(input) {
    if (input === null) return null;
    return mapObject(input, normalizeExpression);
  }
  function normalizeCallExpression(expr) {
    switch (expr.length) {
      case 1:
        return {
          type: "Call"
          /* Call */
          ,
          head: normalizeCallHead(expr[0]),
          params: null,
          hash: null
        };

      case 2:
        {
          if (Array.isArray(expr[1])) {
            return {
              type: "Call"
              /* Call */
              ,
              head: normalizeCallHead(expr[0]),
              params: normalizeParams(expr[1]),
              hash: null
            };
          } else {
            return {
              type: "Call"
              /* Call */
              ,
              head: normalizeCallHead(expr[0]),
              params: null,
              hash: normalizeHash(expr[1])
            };
          }
        }

      case 3:
        return {
          type: "Call"
          /* Call */
          ,
          head: normalizeCallHead(expr[0]),
          params: normalizeParams(expr[1]),
          hash: normalizeHash(expr[2])
        };
    }
  }

  function _createForOfIteratorHelperLoose$6(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$6(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

  function _unsupportedIterableToArray$6(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$6(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$6(o, minLen); }

  function _arrayLikeToArray$6(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _defineProperties$1(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass$1(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$1(Constructor.prototype, protoProps); if (staticProps) _defineProperties$1(Constructor, staticProps); return Constructor; }
  var ProgramSymbols = /*#__PURE__*/function () {
    function ProgramSymbols() {
      this._freeVariables = [];
      this._symbols = ['this'];
      this.top = this;
    }

    var _proto = ProgramSymbols.prototype;

    _proto.toSymbols = function toSymbols() {
      return this._symbols.slice(1);
    };

    _proto.toUpvars = function toUpvars() {
      return this._freeVariables;
    };

    _proto.freeVar = function freeVar(name) {
      return addString(this._freeVariables, name);
    };

    _proto.block = function block(name) {
      return this.symbol(name);
    };

    _proto.arg = function arg(name) {
      return addString(this._symbols, name);
    };

    _proto.local = function local(name) {
      throw new Error("No local " + name + " was found. Maybe you meant ^" + name + " for upvar, or !" + name + " for keyword?");
    };

    _proto["this"] = function _this() {
      return 0;
    };

    _proto.hasLocal = function hasLocal(_name) {
      return false;
    } // any symbol
    ;

    _proto.symbol = function symbol(name) {
      return addString(this._symbols, name);
    };

    _proto.child = function child(locals) {
      return new LocalSymbols(this, locals);
    };

    return ProgramSymbols;
  }();

  var LocalSymbols = /*#__PURE__*/function () {
    function LocalSymbols(parent, locals) {
      this.parent = parent;
      this.locals = util.dict();

      for (var _iterator = _createForOfIteratorHelperLoose$6(locals), _step; !(_step = _iterator()).done;) {
        var local = _step.value;
        this.locals[local] = parent.top.symbol(local);
      }
    }

    var _proto2 = LocalSymbols.prototype;

    _proto2.freeVar = function freeVar(name) {
      return this.parent.freeVar(name);
    };

    _proto2.arg = function arg(name) {
      return this.parent.arg(name);
    };

    _proto2.block = function block(name) {
      return this.parent.block(name);
    };

    _proto2.local = function local(name) {
      if (name in this.locals) {
        return this.locals[name];
      } else {
        return this.parent.local(name);
      }
    };

    _proto2["this"] = function _this() {
      return this.parent["this"]();
    };

    _proto2.hasLocal = function hasLocal(name) {
      if (name in this.locals) {
        return true;
      } else {
        return this.parent.hasLocal(name);
      }
    };

    _proto2.child = function child(locals) {
      return new LocalSymbols(this, locals);
    };

    _createClass$1(LocalSymbols, [{
      key: "paramSymbols",
      get: function get() {
        return util.values(this.locals);
      }
    }, {
      key: "top",
      get: function get() {
        return this.parent.top;
      }
    }]);

    return LocalSymbols;
  }();

  function addString(array, item) {
    var index = array.indexOf(item);

    if (index === -1) {
      index = array.length;
      array.push(item);
      return index;
    } else {
      return index;
    }
  }

  function unimpl(message) {
    return new Error("unimplemented " + message);
  }

  function buildStatements(statements, symbols) {
    var out = [];
    statements.forEach(function (s) {
      return out.push.apply(out, buildStatement(normalizeStatement(s), symbols));
    });
    return out;
  }
  function buildNormalizedStatements(statements, symbols) {
    var out = [];
    statements.forEach(function (s) {
      return out.push.apply(out, buildStatement(s, symbols));
    });
    return out;
  }
  function buildStatement(normalized, symbols) {
    if (symbols === void 0) {
      symbols = new ProgramSymbols();
    }

    switch (normalized.kind) {
      case "AppendPath"
      /* AppendPath */
      :
        {
          return [[normalized.trusted ? 2
          /* TrustingAppend */
          : 1
          /* Append */
          , buildGetPath(normalized.path, symbols)]];
        }

      case "AppendExpr"
      /* AppendExpr */
      :
        {
          return [[normalized.trusted ? 2
          /* TrustingAppend */
          : 1
          /* Append */
          , buildExpression(normalized.expr, normalized.trusted ? 'TrustedAppend' : 'Append', symbols)]];
        }

      case "Call"
      /* Call */
      :
        {
          var path = normalized.head,
              params = normalized.params,
              hash = normalized.hash,
              trusted = normalized.trusted;
          var builtParams = params ? buildParams(params, symbols) : null;
          var builtHash = hash ? buildHash(hash, symbols) : null;
          var builtExpr = buildCallHead(path, trusted ? 3
          /* AmbiguousInvoke */
          : 2
          /* AmbiguousAppendInvoke */
          , symbols);
          return [[trusted ? 2
          /* TrustingAppend */
          : 1
          /* Append */
          , [28
          /* Call */
          , builtExpr, builtParams, builtHash]]];
        }

      case "Literal"
      /* Literal */
      :
        {
          return [[1
          /* Append */
          , normalized.value]];
        }

      case "Comment"
      /* Comment */
      :
        {
          return [[3
          /* Comment */
          , normalized.value]];
        }

      case "Block"
      /* Block */
      :
        {
          var blocks = buildBlocks(normalized.blocks, normalized.blockParams, symbols);

          var _hash = buildHash(normalized.hash, symbols);

          var _params = buildParams(normalized.params, symbols);

          var _path = buildCallHead(normalized.head, 7
          /* ResolveAsComponentHead */
          , symbols);

          return [[6
          /* Block */
          , _path, _params, _hash, blocks]];
        }

      case "Keyword"
      /* Keyword */
      :
        {
          return [buildKeyword(normalized, symbols)];
        }

      case "Element"
      /* Element */
      :
        return buildElement(normalized, symbols);

      case "Modifier"
      /* Modifier */
      :
        throw unimpl('modifier');

      case "DynamicComponent"
      /* DynamicComponent */
      :
        throw unimpl('dynamic component');

      default:
        throw util.assertNever(normalized);
    }
  }
  function s(arr) {
    for (var _len = arguments.length, interpolated = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      interpolated[_key - 1] = arguments[_key];
    }

    var result = arr.reduce(function (result, string, i) {
      return result + ("" + string + (interpolated[i] ? String(interpolated[i]) : ''));
    }, '');
    return [0
    /* Literal */
    , result];
  }
  function c(arr) {
    for (var _len2 = arguments.length, interpolated = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      interpolated[_key2 - 1] = arguments[_key2];
    }

    var result = arr.reduce(function (result, string, i) {
      return result + ("" + string + (interpolated[i] ? String(interpolated[i]) : ''));
    }, '');
    return [1
    /* Comment */
    , result];
  }
  function unicode(charCode) {
    return String.fromCharCode(parseInt(charCode, 16));
  }
  var NEWLINE = '\n';

  function buildKeyword(normalized, symbols) {
    var name = normalized.name;
    var params = buildParams(normalized.params, symbols);
    var childSymbols = symbols.child(normalized.blockParams || []);
    var block = buildBlock(normalized.blocks["default"], childSymbols, childSymbols.paramSymbols);
    var inverse = normalized.blocks["else"] ? buildBlock(normalized.blocks["else"], symbols, []) : null;

    switch (name) {
      case 'with':
        return [43
        /* With */
        , params[0], block, inverse];

      case 'if':
        return [41
        /* If */
        , params[0], block, inverse];

      case 'each':
        var keyExpr = normalized.hash ? normalized.hash['key'] : null;
        var key = keyExpr ? buildExpression(keyExpr, 'Strict', symbols) : null;
        return [42
        /* Each */
        , params[0], key, block, inverse];

      default:
        throw new Error('unimplemented keyword');
    }
  }

  function buildElement(_ref, symbols) {
    var name = _ref.name,
        attrs = _ref.attrs,
        block = _ref.block;
    var out = [hasSplat(attrs) ? [11
    /* OpenElementWithSplat */
    , name] : [10
    /* OpenElement */
    , name]];

    if (attrs) {
      var _buildElementParams = buildElementParams(attrs, symbols),
          params = _buildElementParams.params,
          args = _buildElementParams.args;

      out.push.apply(out, params);
    }

    out.push([12
    /* FlushElement */
    ]);

    if (Array.isArray(block)) {
      block.forEach(function (s) {
        return out.push.apply(out, buildStatement(s, symbols));
      });
    } else if (block === null) ; else {
      throw util.assertNever(block);
    }

    out.push([13
    /* CloseElement */
    ]);
    return out;
  }

  function hasSplat(attrs) {
    if (attrs === null) return false;
    return Object.keys(attrs).some(function (a) {
      return attrs[a] === "Splat";
    }
    /* Splat */
    );
  }
  function buildElementParams(attrs, symbols) {
    var params = [];
    var keys = [];
    var values = [];
    Object.keys(attrs).forEach(function (key) {
      var value = attrs[key];

      if (value === "Splat"
      /* Splat */
      ) {
          params.push([17
          /* AttrSplat */
          , symbols.block('&attrs')]);
        } else if (key[0] === '@') {
        keys.push(key);
        values.push(buildExpression(value, 'Strict', symbols));
      } else {
        params.push.apply(params, buildAttributeValue(key, value, // TODO: extract namespace from key
        extractNamespace(key), symbols));
      }
    });
    return {
      params: params,
      args: util.isPresent(keys) && util.isPresent(values) ? [keys, values] : null
    };
  }
  function extractNamespace(name) {
    if (name === 'xmlns') {
      return "http://www.w3.org/2000/xmlns/"
      /* XMLNS */
      ;
    }

    var match = /^([^:]*):([^:]*)$/.exec(name);

    if (match === null) {
      return null;
    }

    var namespace = match[1];

    switch (namespace) {
      case 'xlink':
        return "http://www.w3.org/1999/xlink"
        /* XLink */
        ;

      case 'xml':
        return "http://www.w3.org/XML/1998/namespace"
        /* XML */
        ;

      case 'xmlns':
        return "http://www.w3.org/2000/xmlns/"
        /* XMLNS */
        ;
    }

    return null;
  }
  function buildAttributeValue(name, value, namespace, symbols) {
    switch (value.type) {
      case "Literal"
      /* Literal */
      :
        {
          var val = value.value;

          if (val === false) {
            return [];
          } else if (val === true) {
            return [[14
            /* StaticAttr */
            , name, '', namespace !== null && namespace !== void 0 ? namespace : undefined]];
          } else if (typeof val === 'string') {
            return [[14
            /* StaticAttr */
            , name, val, namespace !== null && namespace !== void 0 ? namespace : undefined]];
          } else {
            throw new Error("Unexpected/unimplemented literal attribute " + JSON.stringify(val));
          }
        }

      default:
        return [[15
        /* DynamicAttr */
        , name, buildExpression(value, 'AttrValue', symbols), namespace !== null && namespace !== void 0 ? namespace : undefined]];
    }
  }

  function varContext(context, bare) {
    switch (context) {
      case 'Append':
        return bare ? 'AppendBare' : 'AppendInvoke';

      case 'TrustedAppend':
        return bare ? 'TrustedAppendBare' : 'TrustedAppendInvoke';

      case 'AttrValue':
        return bare ? 'AttrValueBare' : 'AttrValueInvoke';

      default:
        return context;
    }
  }

  function buildExpression(expr, context, symbols) {
    switch (expr.type) {
      case "GetPath"
      /* GetPath */
      :
        {
          return buildGetPath(expr, symbols);
        }

      case "GetVar"
      /* GetVar */
      :
        {
          return buildVar(expr.variable, varContext(context, true), symbols);
        }

      case "Concat"
      /* Concat */
      :
        {
          return [29
          /* Concat */
          , buildConcat(expr.params, symbols)];
        }

      case "Call"
      /* Call */
      :
        {
          var builtParams = buildParams(expr.params, symbols);
          var builtHash = buildHash(expr.hash, symbols);
          var builtExpr = buildCallHead(expr.head, context === 'Strict' ? 'SubExpression' : varContext(context, false), symbols);
          return [28
          /* Call */
          , builtExpr, builtParams, builtHash];
        }

      case "HasBlock"
      /* HasBlock */
      :
        {
          return [48
          /* HasBlock */
          , buildVar({
            kind: VariableKind.Block,
            name: expr.name,
            mode: 'loose'
          }, 0
          /* Strict */
          , symbols)];
        }

      case "HasBlockParams"
      /* HasBlockParams */
      :
        {
          return [49
          /* HasBlockParams */
          , buildVar({
            kind: VariableKind.Block,
            name: expr.name,
            mode: 'loose'
          }, 0
          /* Strict */
          , symbols)];
        }

      case "Literal"
      /* Literal */
      :
        {
          if (expr.value === undefined) {
            return [27
            /* Undefined */
            ];
          } else {
            return expr.value;
          }
        }

      default:
        util.assertNever(expr);
    }
  }
  function buildCallHead(callHead, context, symbols) {
    if (callHead.type === "GetVar"
    /* GetVar */
    ) {
        return buildVar(callHead.variable, context, symbols);
      } else {
      return buildGetPath(callHead, symbols);
    }
  }
  function buildGetPath(head, symbols) {
    return buildVar(head.path.head, 0
    /* Strict */
    , symbols, head.path.tail);
  }
  function buildVar(head, context, symbols, path) {
    var op = 30
    /* GetSymbol */
    ;
    var sym;

    switch (head.kind) {
      case VariableKind.Free:
        if (context === 'Strict') {
          op = 31
          /* GetStrictFree */
          ;
        } else if (context === 'AppendBare') {
          op = 34
          /* GetFreeAsComponentOrHelperHeadOrThisFallback */
          ;
        } else if (context === 'AppendInvoke') {
          op = 35
          /* GetFreeAsComponentOrHelperHead */
          ;
        } else if (context === 'TrustedAppendBare') {
          op = 36
          /* GetFreeAsHelperHeadOrThisFallback */
          ;
        } else if (context === 'TrustedAppendInvoke') {
          op = 37
          /* GetFreeAsHelperHead */
          ;
        } else if (context === 'AttrValueBare') {
          op = 36
          /* GetFreeAsHelperHeadOrThisFallback */
          ;
        } else if (context === 'AttrValueInvoke') {
          op = 37
          /* GetFreeAsHelperHead */
          ;
        } else if (context === 'SubExpression') {
          op = 37
          /* GetFreeAsHelperHead */
          ;
        } else {
          op = expressionContextOp(context);
        }

        sym = symbols.freeVar(head.name);
        break;

      default:
        op = 30
        /* GetSymbol */
        ;
        sym = getSymbolForVar(head.kind, symbols, head.name);
    }

    if (path === undefined || path.length === 0) {
      return [op, sym];
    } else {
      return [op, sym, path];
    }
  }

  function getSymbolForVar(kind, symbols, name) {
    switch (kind) {
      case VariableKind.Arg:
        return symbols.arg(name);

      case VariableKind.Block:
        return symbols.block(name);

      case VariableKind.Local:
        return symbols.local(name);

      case VariableKind.This:
        return symbols["this"]();

      default:
        return util.exhausted(kind);
    }
  }

  function expressionContextOp(context) {
    switch (context) {
      case 0
      /* Strict */
      :
        return 31
        /* GetStrictFree */
        ;

      case 1
      /* AmbiguousAppend */
      :
        return 34
        /* GetFreeAsComponentOrHelperHeadOrThisFallback */
        ;

      case 2
      /* AmbiguousAppendInvoke */
      :
        return 35
        /* GetFreeAsComponentOrHelperHead */
        ;

      case 3
      /* AmbiguousInvoke */
      :
        return 36
        /* GetFreeAsHelperHeadOrThisFallback */
        ;

      case 5
      /* ResolveAsCallHead */
      :
        return 37
        /* GetFreeAsHelperHead */
        ;

      case 6
      /* ResolveAsModifierHead */
      :
        return 38
        /* GetFreeAsModifierHead */
        ;

      case 7
      /* ResolveAsComponentHead */
      :
        return 39
        /* GetFreeAsComponentHead */
        ;

      default:
        return util.exhausted(context);
    }
  }
  function buildParams(exprs, symbols) {
    if (exprs === null || !util.isPresent(exprs)) return null;
    return exprs.map(function (e) {
      return buildExpression(e, 'Strict', symbols);
    });
  }
  function buildConcat(exprs, symbols) {
    return exprs.map(function (e) {
      return buildExpression(e, 'AttrValue', symbols);
    });
  }
  function buildHash(exprs, symbols) {
    if (exprs === null) return null;
    var out = [[], []];
    Object.keys(exprs).forEach(function (key) {
      out[0].push(key);
      out[1].push(buildExpression(exprs[key], 'Strict', symbols));
    });
    return out;
  }
  function buildBlocks(blocks, blockParams, parent) {
    var keys = [];
    var values = [];
    Object.keys(blocks).forEach(function (name) {
      keys.push(name);

      if (name === 'default') {
        var symbols = parent.child(blockParams || []);
        values.push(buildBlock(blocks[name], symbols, symbols.paramSymbols));
      } else {
        values.push(buildBlock(blocks[name], parent, []));
      }
    });
    return [keys, values];
  }

  function buildBlock(block, symbols, locals) {
    if (locals === void 0) {
      locals = [];
    }

    return [buildNormalizedStatements(block, symbols), locals];
  }

  exports.NEWLINE = NEWLINE;
  exports.ProgramSymbols = ProgramSymbols;
  exports.WireFormatDebugger = WireFormatDebugger;
  exports.buildStatement = buildStatement;
  exports.buildStatements = buildStatements;
  exports.c = c;
  exports.defaultId = defaultId;
  exports.precompile = precompile;
  exports.precompileJSON = precompileJSON;
  exports.s = s;
  exports.unicode = unicode;

  Object.defineProperty(exports, '__esModule', { value: true });

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

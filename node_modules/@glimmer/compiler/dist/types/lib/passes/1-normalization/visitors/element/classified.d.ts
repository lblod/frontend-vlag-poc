import { ASTv2 } from '@glimmer/syntax';
import { Result } from '../../../../shared/result';
import * as mir from '../../../2-encoding/mir';
import { NormalizationState } from '../../context';
export declare type ValidAttr = mir.StaticAttr | mir.DynamicAttr | mir.SplatAttr;
export interface Classified {
    readonly dynamicFeatures: boolean;
    arg(attr: ASTv2.AttrNode, classified: ClassifiedElement): Result<mir.NamedArgument>;
    toStatement(classified: ClassifiedElement, prepared: PreparedArgs): Result<mir.Statement>;
}
export declare class ClassifiedElement {
    readonly element: ASTv2.ElementNode;
    readonly state: NormalizationState;
    readonly delegate: Classified;
    constructor(element: ASTv2.ElementNode, delegate: Classified, state: NormalizationState);
    toStatement(): Result<mir.Statement>;
    private attr;
    private modifier;
    private attrs;
    private prepare;
}
export interface PreparedArgs {
    args: mir.NamedArguments;
    params: mir.ElementParameters;
}
export declare function hasDynamicFeatures({ attrs, modifiers, }: Pick<ASTv2.ElementNode, 'attrs' | 'modifiers'>): boolean;
//# sourceMappingURL=classified.d.ts.map
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EXPR = exports.ExpressionEncoder = void 0;

var _util = require("@glimmer/util");

class ExpressionEncoder {
  expr(expr) {
    switch (expr.type) {
      case 'Missing':
        return undefined;

      case 'Literal':
        return this.Literal(expr);

      case 'CallExpression':
        return this.CallExpression(expr);

      case 'DeprecatedCallExpression':
        return this.DeprecatedCallExpression(expr);

      case 'PathExpression':
        return this.PathExpression(expr);

      case 'Arg':
        return [30
        /* GetSymbol */
        , expr.symbol];

      case 'Local':
        return this.Local(expr);

      case 'This':
        return [30
        /* GetSymbol */
        , 0];

      case 'Free':
        return [expr.resolution.resolution(), expr.symbol];

      case 'HasBlock':
        return this.HasBlock(expr);

      case 'HasBlockParams':
        return this.HasBlockParams(expr);

      case 'Curry':
        return this.Curry(expr);

      case 'Not':
        return this.Not(expr);

      case 'IfInline':
        return this.IfInline(expr);

      case 'InterpolateExpression':
        return this.InterpolateExpression(expr);

      case 'GetDynamicVar':
        return this.GetDynamicVar(expr);

      case 'Log':
        return this.Log(expr);
    }
  }

  Literal({
    value
  }) {
    if (value === undefined) {
      return [27
      /* Undefined */
      ];
    } else {
      return value;
    }
  }

  Missing() {
    return undefined;
  }

  HasBlock({
    symbol
  }) {
    return [48
    /* HasBlock */
    , [30
    /* GetSymbol */
    , symbol]];
  }

  HasBlockParams({
    symbol
  }) {
    return [49
    /* HasBlockParams */
    , [30
    /* GetSymbol */
    , symbol]];
  }

  Curry({
    definition,
    curriedType,
    args
  }) {
    return [50
    /* Curry */
    , EXPR.expr(definition), curriedType, EXPR.Positional(args.positional), EXPR.NamedArguments(args.named)];
  }

  Local({
    isTemplateLocal,
    symbol
  }) {
    return [isTemplateLocal ? 32
    /* GetTemplateSymbol */
    : 30
    /* GetSymbol */
    , symbol];
  }

  GetWithResolver({
    symbol
  }) {
    return [34
    /* GetFreeAsComponentOrHelperHeadOrThisFallback */
    , symbol];
  }

  PathExpression({
    head,
    tail
  }) {
    let getOp = EXPR.expr(head);
    return [...getOp, EXPR.Tail(tail)];
  }

  InterpolateExpression({
    parts
  }) {
    return [29
    /* Concat */
    , parts.map(e => EXPR.expr(e)).toArray()];
  }

  CallExpression({
    callee,
    args
  }) {
    return [28
    /* Call */
    , EXPR.expr(callee), ...EXPR.Args(args)];
  }

  DeprecatedCallExpression({
    arg,
    callee
  }) {
    return [99
    /* GetFreeAsDeprecatedHelperHeadOrThisFallback */
    , callee.symbol, [arg.chars]];
  }

  Tail({
    members
  }) {
    return (0, _util.mapPresent)(members, member => member.chars);
  }

  Args({
    positional,
    named
  }) {
    return [this.Positional(positional), this.NamedArguments(named)];
  }

  Positional({
    list
  }) {
    return list.map(l => EXPR.expr(l)).toPresentArray();
  }

  NamedArgument({
    key,
    value
  }) {
    return [key.chars, EXPR.expr(value)];
  }

  NamedArguments({
    entries: pairs
  }) {
    let list = pairs.toArray();

    if ((0, _util.isPresent)(list)) {
      let names = [];
      let values = [];

      for (let pair of list) {
        let [name, value] = EXPR.NamedArgument(pair);
        names.push(name);
        values.push(value);
      }

      (0, _util.assertPresent)(names);
      (0, _util.assertPresent)(values);
      return [names, values];
    } else {
      return null;
    }
  }

  Not({
    value
  }) {
    return [51
    /* Not */
    , EXPR.expr(value)];
  }

  IfInline({
    condition,
    truthy,
    falsy
  }) {
    let expr = [52
    /* IfInline */
    , EXPR.expr(condition), EXPR.expr(truthy)];

    if (falsy) {
      expr.push(EXPR.expr(falsy));
    }

    return expr;
  }

  GetDynamicVar({
    name
  }) {
    return [53
    /* GetDynamicVar */
    , EXPR.expr(name)];
  }

  Log({
    positional
  }) {
    return [54
    /* Log */
    , this.Positional(positional)];
  }

}

exports.ExpressionEncoder = ExpressionEncoder;
const EXPR = new ExpressionEncoder();
exports.EXPR = EXPR;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
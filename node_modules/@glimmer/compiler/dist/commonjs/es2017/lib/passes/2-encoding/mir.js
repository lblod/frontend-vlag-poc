"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tail = exports.Args = exports.NamedArgument = exports.NamedArguments = exports.Positional = exports.Curry = exports.HasBlockParams = exports.HasBlock = exports.InterpolateExpression = exports.Missing = exports.GetFree = exports.GetFreeWithContext = exports.GetSymbol = exports.GetWithResolver = exports.PathExpression = exports.SplatAttr = exports.InvokeBlock = exports.Modifier = exports.DeprecatedCallExpression = exports.CallExpression = exports.Debugger = exports.Yield = exports.ElementParameters = exports.SimpleElement = exports.DynamicAttr = exports.StaticAttr = exports.Component = exports.AppendComment = exports.AppendTextNode = exports.AppendTrustedHTML = exports.EndBlock = exports.NamedBlock = exports.NamedBlocks = exports.InvokeComponent = exports.Log = exports.GetDynamicVar = exports.WithDynamicVars = exports.Let = exports.With = exports.Each = exports.IfInline = exports.If = exports.Not = exports.InElement = exports.Template = void 0;

var _syntax = require("@glimmer/syntax");

class Template extends (0, _syntax.node)('Template').fields() {}

exports.Template = Template;

class InElement extends (0, _syntax.node)('InElement').fields() {}

exports.InElement = InElement;

class Not extends (0, _syntax.node)('Not').fields() {}

exports.Not = Not;

class If extends (0, _syntax.node)('If').fields() {}

exports.If = If;

class IfInline extends (0, _syntax.node)('IfInline').fields() {}

exports.IfInline = IfInline;

class Each extends (0, _syntax.node)('Each').fields() {}

exports.Each = Each;

class With extends (0, _syntax.node)('With').fields() {}

exports.With = With;

class Let extends (0, _syntax.node)('Let').fields() {}

exports.Let = Let;

class WithDynamicVars extends (0, _syntax.node)('WithDynamicVars').fields() {}

exports.WithDynamicVars = WithDynamicVars;

class GetDynamicVar extends (0, _syntax.node)('GetDynamicVar').fields() {}

exports.GetDynamicVar = GetDynamicVar;

class Log extends (0, _syntax.node)('Log').fields() {}

exports.Log = Log;

class InvokeComponent extends (0, _syntax.node)('InvokeComponent').fields() {}

exports.InvokeComponent = InvokeComponent;

class NamedBlocks extends (0, _syntax.node)('NamedBlocks').fields() {}

exports.NamedBlocks = NamedBlocks;

class NamedBlock extends (0, _syntax.node)('NamedBlock').fields() {}

exports.NamedBlock = NamedBlock;

class EndBlock extends (0, _syntax.node)('EndBlock').fields() {}

exports.EndBlock = EndBlock;

class AppendTrustedHTML extends (0, _syntax.node)('AppendTrustedHTML').fields() {}

exports.AppendTrustedHTML = AppendTrustedHTML;

class AppendTextNode extends (0, _syntax.node)('AppendTextNode').fields() {}

exports.AppendTextNode = AppendTextNode;

class AppendComment extends (0, _syntax.node)('AppendComment').fields() {}

exports.AppendComment = AppendComment;

class Component extends (0, _syntax.node)('Component').fields() {}

exports.Component = Component;

class StaticAttr extends (0, _syntax.node)('StaticAttr').fields() {}

exports.StaticAttr = StaticAttr;

class DynamicAttr extends (0, _syntax.node)('DynamicAttr').fields() {}

exports.DynamicAttr = DynamicAttr;

class SimpleElement extends (0, _syntax.node)('SimpleElement').fields() {}

exports.SimpleElement = SimpleElement;

class ElementParameters extends (0, _syntax.node)('ElementParameters').fields() {}

exports.ElementParameters = ElementParameters;

class Yield extends (0, _syntax.node)('Yield').fields() {}

exports.Yield = Yield;

class Debugger extends (0, _syntax.node)('Debugger').fields() {}

exports.Debugger = Debugger;

class CallExpression extends (0, _syntax.node)('CallExpression').fields() {}

exports.CallExpression = CallExpression;

class DeprecatedCallExpression extends (0, _syntax.node)('DeprecatedCallExpression').fields() {}

exports.DeprecatedCallExpression = DeprecatedCallExpression;

class Modifier extends (0, _syntax.node)('Modifier').fields() {}

exports.Modifier = Modifier;

class InvokeBlock extends (0, _syntax.node)('InvokeBlock').fields() {}

exports.InvokeBlock = InvokeBlock;

class SplatAttr extends (0, _syntax.node)('SplatAttr').fields() {}

exports.SplatAttr = SplatAttr;

class PathExpression extends (0, _syntax.node)('PathExpression').fields() {}

exports.PathExpression = PathExpression;

class GetWithResolver extends (0, _syntax.node)('GetWithResolver').fields() {}

exports.GetWithResolver = GetWithResolver;

class GetSymbol extends (0, _syntax.node)('GetSymbol').fields() {}

exports.GetSymbol = GetSymbol;

class GetFreeWithContext extends (0, _syntax.node)('GetFreeWithContext').fields() {}
/** strict mode */


exports.GetFreeWithContext = GetFreeWithContext;

class GetFree extends (0, _syntax.node)('GetFree').fields() {}

exports.GetFree = GetFree;

class Missing extends (0, _syntax.node)('Missing').fields() {}

exports.Missing = Missing;

class InterpolateExpression extends (0, _syntax.node)('InterpolateExpression').fields() {}

exports.InterpolateExpression = InterpolateExpression;

class HasBlock extends (0, _syntax.node)('HasBlock').fields() {}

exports.HasBlock = HasBlock;

class HasBlockParams extends (0, _syntax.node)('HasBlockParams').fields() {}

exports.HasBlockParams = HasBlockParams;

class Curry extends (0, _syntax.node)('Curry').fields() {}

exports.Curry = Curry;

class Positional extends (0, _syntax.node)('Positional').fields() {}

exports.Positional = Positional;

class NamedArguments extends (0, _syntax.node)('NamedArguments').fields() {}

exports.NamedArguments = NamedArguments;

class NamedArgument extends (0, _syntax.node)('NamedArgument').fields() {}

exports.NamedArgument = NamedArgument;

class Args extends (0, _syntax.node)('Args').fields() {}

exports.Args = Args;

class Tail extends (0, _syntax.node)('Tail').fields() {}

exports.Tail = Tail;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CONTENT = exports.ContentEncoder = void 0;

var _util = require("@glimmer/util");

var _utils = require("../../utils");

var _expressions = require("./expressions");

class WireStatements {
  constructor(statements) {
    this.statements = statements;
  }

  toArray() {
    return this.statements;
  }

}

class ContentEncoder {
  list(statements) {
    let out = [];

    for (let statement of statements) {
      let result = CONTENT.content(statement);

      if (result && result instanceof WireStatements) {
        out.push(...result.toArray());
      } else {
        out.push(result);
      }
    }

    return out;
  }

  content(stmt) {
    if (false
    /* LOCAL_SHOULD_LOG */
    ) {
        _util.LOCAL_LOGGER.log(`encoding`, stmt);
      }

    return this.visitContent(stmt);
  }

  visitContent(stmt) {
    switch (stmt.type) {
      case 'Debugger':
        return [26
        /* Debugger */
        , stmt.scope.getEvalInfo()];

      case 'AppendComment':
        return this.AppendComment(stmt);

      case 'AppendTextNode':
        return this.AppendTextNode(stmt);

      case 'AppendTrustedHTML':
        return this.AppendTrustedHTML(stmt);

      case 'Yield':
        return this.Yield(stmt);

      case 'Component':
        return this.Component(stmt);

      case 'SimpleElement':
        return this.SimpleElement(stmt);

      case 'InElement':
        return this.InElement(stmt);

      case 'InvokeBlock':
        return this.InvokeBlock(stmt);

      case 'If':
        return this.If(stmt);

      case 'Each':
        return this.Each(stmt);

      case 'With':
        return this.With(stmt);

      case 'Let':
        return this.Let(stmt);

      case 'WithDynamicVars':
        return this.WithDynamicVars(stmt);

      case 'InvokeComponent':
        return this.InvokeComponent(stmt);

      default:
        return (0, _util.exhausted)(stmt);
    }
  }

  Yield({
    to,
    positional
  }) {
    return [18
    /* Yield */
    , to, _expressions.EXPR.Positional(positional)];
  }

  InElement({
    guid,
    insertBefore,
    destination,
    block
  }) {
    let wireBlock = CONTENT.NamedBlock(block)[1]; // let guid = args.guid;

    let wireDestination = _expressions.EXPR.expr(destination);

    let wireInsertBefore = _expressions.EXPR.expr(insertBefore);

    if (wireInsertBefore === undefined) {
      return [40
      /* InElement */
      , wireBlock, guid, wireDestination];
    } else {
      return [40
      /* InElement */
      , wireBlock, guid, wireDestination, wireInsertBefore];
    }
  }

  InvokeBlock({
    head,
    args,
    blocks
  }) {
    return [6
    /* Block */
    , _expressions.EXPR.expr(head), ..._expressions.EXPR.Args(args), CONTENT.NamedBlocks(blocks)];
  }

  AppendTrustedHTML({
    html
  }) {
    return [2
    /* TrustingAppend */
    , _expressions.EXPR.expr(html)];
  }

  AppendTextNode({
    text
  }) {
    return [1
    /* Append */
    , _expressions.EXPR.expr(text)];
  }

  AppendComment({
    value
  }) {
    return [3
    /* Comment */
    , value.chars];
  }

  SimpleElement({
    tag,
    params,
    body,
    dynamicFeatures
  }) {
    let op = dynamicFeatures ? 11
    /* OpenElementWithSplat */
    : 10
    /* OpenElement */
    ;
    return new WireStatements([[op, (0, _utils.deflateTagName)(tag.chars)], ...CONTENT.ElementParameters(params).toArray(), [12
    /* FlushElement */
    ], ...CONTENT.list(body), [13
    /* CloseElement */
    ]]);
  }

  Component({
    tag,
    params,
    args,
    blocks
  }) {
    let wireTag = _expressions.EXPR.expr(tag);

    let wirePositional = CONTENT.ElementParameters(params);

    let wireNamed = _expressions.EXPR.NamedArguments(args);

    let wireNamedBlocks = CONTENT.NamedBlocks(blocks);
    return [8
    /* Component */
    , wireTag, wirePositional.toPresentArray(), wireNamed, wireNamedBlocks];
  }

  ElementParameters({
    body
  }) {
    return body.map(p => CONTENT.ElementParameter(p));
  }

  ElementParameter(param) {
    switch (param.type) {
      case 'SplatAttr':
        return [17
        /* AttrSplat */
        , param.symbol];

      case 'DynamicAttr':
        return [dynamicAttrOp(param.kind), ...dynamicAttr(param)];

      case 'StaticAttr':
        return [staticAttrOp(param.kind), ...staticAttr(param)];

      case 'Modifier':
        return [4
        /* Modifier */
        , _expressions.EXPR.expr(param.callee), ..._expressions.EXPR.Args(param.args)];
    }
  }

  NamedBlocks({
    blocks
  }) {
    let names = [];
    let serializedBlocks = [];

    for (let block of blocks.toArray()) {
      let [name, serializedBlock] = CONTENT.NamedBlock(block);
      names.push(name);
      serializedBlocks.push(serializedBlock);
    }

    return names.length > 0 ? [names, serializedBlocks] : null;
  }

  NamedBlock({
    name,
    body,
    scope
  }) {
    let nameChars = name.chars;

    if (nameChars === 'inverse') {
      nameChars = 'else';
    }

    return [nameChars, [CONTENT.list(body), scope.slots]];
  }

  If({
    condition,
    block,
    inverse
  }) {
    return [41
    /* If */
    , _expressions.EXPR.expr(condition), CONTENT.NamedBlock(block)[1], inverse ? CONTENT.NamedBlock(inverse)[1] : null];
  }

  Each({
    value,
    key,
    block,
    inverse
  }) {
    return [42
    /* Each */
    , _expressions.EXPR.expr(value), key ? _expressions.EXPR.expr(key) : null, CONTENT.NamedBlock(block)[1], inverse ? CONTENT.NamedBlock(inverse)[1] : null];
  }

  With({
    value,
    block,
    inverse
  }) {
    return [43
    /* With */
    , _expressions.EXPR.expr(value), CONTENT.NamedBlock(block)[1], inverse ? CONTENT.NamedBlock(inverse)[1] : null];
  }

  Let({
    positional,
    block
  }) {
    return [44
    /* Let */
    , _expressions.EXPR.Positional(positional), CONTENT.NamedBlock(block)[1]];
  }

  WithDynamicVars({
    named,
    block
  }) {
    return [45
    /* WithDynamicVars */
    , _expressions.EXPR.NamedArguments(named), CONTENT.NamedBlock(block)[1]];
  }

  InvokeComponent({
    definition,
    args,
    blocks
  }) {
    return [46
    /* InvokeComponent */
    , _expressions.EXPR.expr(definition), _expressions.EXPR.Positional(args.positional), _expressions.EXPR.NamedArguments(args.named), blocks ? CONTENT.NamedBlocks(blocks) : null];
  }

}

exports.ContentEncoder = ContentEncoder;
const CONTENT = new ContentEncoder();
exports.CONTENT = CONTENT;

function staticAttr({
  name,
  value,
  namespace
}) {
  let out = [(0, _utils.deflateAttrName)(name.chars), value.chars];

  if (namespace) {
    out.push(namespace);
  }

  return out;
}

function dynamicAttr({
  name,
  value,
  namespace
}) {
  let out = [(0, _utils.deflateAttrName)(name.chars), _expressions.EXPR.expr(value)];

  if (namespace) {
    out.push(namespace);
  }

  return out;
}

function staticAttrOp(kind) {
  if (kind.component) {
    return 24
    /* StaticComponentAttr */
    ;
  } else {
      return 14
      /* StaticAttr */
      ;
    }
}

function dynamicAttrOp(kind) {
  if (kind.component) {
    return kind.trusting ? 23
    /* TrustingComponentAttr */
    : 16
    /* ComponentAttr */
    ;
  } else {
    return kind.trusting ? 22
    /* TrustingDynamicAttr */
    : 15
    /* DynamicAttr */
    ;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
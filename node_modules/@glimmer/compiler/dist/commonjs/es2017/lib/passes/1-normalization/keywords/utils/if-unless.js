"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ifUnlessInlineKeyword = ifUnlessInlineKeyword;

var _syntax = require("@glimmer/syntax");

var _result = require("../../../../shared/result");

var mir = _interopRequireWildcard(require("../../../2-encoding/mir"));

var _expressions = require("../../visitors/expressions");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function assertIfUnlessInlineKeyword(type) {
  return originalNode => {
    var _a;

    let inverted = type === 'unless';
    let node = originalNode.type === 'AppendContent' ? originalNode.value : originalNode;
    let named = node.type === 'Call' ? node.args.named : null;
    let positional = node.type === 'Call' ? node.args.positional : null;

    if (named && !named.isEmpty()) {
      return (0, _result.Err)((0, _syntax.generateSyntaxError)(`(${type}) cannot receive named parameters, received ${named.entries.map(e => e.name.chars).join(', ')}`, originalNode.loc));
    }

    let condition = positional === null || positional === void 0 ? void 0 : positional.nth(0);

    if (!positional || !condition) {
      return (0, _result.Err)((0, _syntax.generateSyntaxError)(`When used inline, (${type}) requires at least two parameters 1. the condition that determines the state of the (${type}), and 2. the value to return if the condition is ${inverted ? 'false' : 'true'}. Did not receive any parameters`, originalNode.loc));
    }

    let truthy = positional.nth(1);
    let falsy = positional.nth(2);

    if (truthy === null) {
      return (0, _result.Err)((0, _syntax.generateSyntaxError)(`When used inline, (${type}) requires at least two parameters 1. the condition that determines the state of the (${type}), and 2. the value to return if the condition is ${inverted ? 'false' : 'true'}. Received only one parameter, the condition`, originalNode.loc));
    }

    if (positional.size > 3) {
      return (0, _result.Err)((0, _syntax.generateSyntaxError)(`When used inline, (${type}) can receive a maximum of three positional parameters 1. the condition that determines the state of the (${type}), 2. the value to return if the condition is ${inverted ? 'false' : 'true'}, and 3. the value to return if the condition is ${inverted ? 'true' : 'false'}. Received ${(_a = positional === null || positional === void 0 ? void 0 : positional.size) !== null && _a !== void 0 ? _a : 0} parameters`, originalNode.loc));
    }

    return (0, _result.Ok)({
      condition,
      truthy,
      falsy
    });
  };
}

function translateIfUnlessInlineKeyword(type) {
  let inverted = type === 'unless';
  return ({
    node,
    state
  }, {
    condition,
    truthy,
    falsy
  }) => {
    let conditionResult = _expressions.VISIT_EXPRS.visit(condition, state);

    let truthyResult = _expressions.VISIT_EXPRS.visit(truthy, state);

    let falsyResult = falsy ? _expressions.VISIT_EXPRS.visit(falsy, state) : (0, _result.Ok)(null);
    return _result.Result.all(conditionResult, truthyResult, falsyResult).mapOk(([condition, truthy, falsy]) => {
      if (inverted) {
        condition = new mir.Not({
          value: condition,
          loc: node.loc
        });
      }

      return new mir.IfInline({
        loc: node.loc,
        condition,
        truthy,
        falsy
      });
    });
  };
}

function ifUnlessInlineKeyword(type) {
  return {
    assert: assertIfUnlessInlineKeyword(type),
    translate: translateIfUnlessInlineKeyword(type)
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
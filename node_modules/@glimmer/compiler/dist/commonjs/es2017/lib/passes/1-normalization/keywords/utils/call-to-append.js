"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toAppend = toAppend;

var mir = _interopRequireWildcard(require("../../../2-encoding/mir"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function toAppend({
  assert,
  translate
}) {
  return {
    assert,

    translate({
      node,
      state
    }, value) {
      let result = translate({
        node,
        state
      }, value);
      return result.mapOk(text => new mir.AppendTextNode({
        text,
        loc: node.loc
      }));
    }

  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL2NvbXBpbGVyL2xpYi9wYXNzZXMvMS1ub3JtYWxpemF0aW9uL2tleXdvcmRzL3V0aWxzL2NhbGwtdG8tYXBwZW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDQTs7Ozs7O0FBSU0sU0FBQSxRQUFBLENBQXNCO0FBQUEsRUFBQSxNQUFBO0FBRTFCLEVBQUE7QUFGMEIsQ0FBdEIsRUFHdUQ7QUFLM0QsU0FBTztBQUFBLElBQUEsTUFBQTs7QUFFTCxJQUFBLFNBQVMsQ0FDUDtBQUFBLE1BQUEsSUFBQTtBQUFRLE1BQUE7QUFBUixLQURPLEVBQUEsS0FBQSxFQUVDO0FBRVIsVUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0FBQUEsUUFBQSxJQUFBO0FBQVEsUUFBQTtBQUFSLE9BQUQsRUFBdEIsS0FBc0IsQ0FBdEI7QUFFQSxhQUFPLE1BQU0sQ0FBTixLQUFBLENBQWMsSUFBRCxJQUFVLElBQUksR0FBRyxDQUFQLGNBQUEsQ0FBdUI7QUFBQSxRQUFBLElBQUE7QUFBUSxRQUFBLEdBQUcsRUFBRSxJQUFJLENBQUM7QUFBbEIsT0FBdkIsQ0FBdkIsQ0FBUDtBQUNEOztBQVRJLEdBQVA7QUFXRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlc3VsdCB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9yZXN1bHQnO1xuaW1wb3J0ICogYXMgbWlyIGZyb20gJy4uLy4uLy4uLzItZW5jb2RpbmcvbWlyJztcbmltcG9ydCB7IE5vcm1hbGl6YXRpb25TdGF0ZSB9IGZyb20gJy4uLy4uL2NvbnRleHQnO1xuaW1wb3J0IHsgR2VuZXJpY0tleXdvcmROb2RlLCBLZXl3b3JkRGVsZWdhdGUgfSBmcm9tICcuLi9pbXBsJztcblxuZXhwb3J0IGZ1bmN0aW9uIHRvQXBwZW5kPFQ+KHtcbiAgYXNzZXJ0LFxuICB0cmFuc2xhdGUsXG59OiBLZXl3b3JkRGVsZWdhdGU8R2VuZXJpY0tleXdvcmROb2RlLCBULCBtaXIuRXhwcmVzc2lvbk5vZGU+KTogS2V5d29yZERlbGVnYXRlPFxuICBHZW5lcmljS2V5d29yZE5vZGUsXG4gIFQsXG4gIG1pci5BcHBlbmRUZXh0Tm9kZVxuPiB7XG4gIHJldHVybiB7XG4gICAgYXNzZXJ0LFxuICAgIHRyYW5zbGF0ZShcbiAgICAgIHsgbm9kZSwgc3RhdGUgfTogeyBub2RlOiBHZW5lcmljS2V5d29yZE5vZGU7IHN0YXRlOiBOb3JtYWxpemF0aW9uU3RhdGUgfSxcbiAgICAgIHZhbHVlOiBUXG4gICAgKTogUmVzdWx0PG1pci5BcHBlbmRUZXh0Tm9kZT4ge1xuICAgICAgbGV0IHJlc3VsdCA9IHRyYW5zbGF0ZSh7IG5vZGUsIHN0YXRlIH0sIHZhbHVlKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdC5tYXBPaygodGV4dCkgPT4gbmV3IG1pci5BcHBlbmRUZXh0Tm9kZSh7IHRleHQsIGxvYzogbm9kZS5sb2MgfSkpO1xuICAgIH0sXG4gIH07XG59XG4iXSwic291cmNlUm9vdCI6IiJ9
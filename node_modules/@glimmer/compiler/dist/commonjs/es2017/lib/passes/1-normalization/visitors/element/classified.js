"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasDynamicFeatures = hasDynamicFeatures;
exports.ClassifiedElement = void 0;

var _syntax = require("@glimmer/syntax");

var _list = require("../../../../shared/list");

var _result = require("../../../../shared/result");

var _utils = require("../../../../utils");

var mir = _interopRequireWildcard(require("../../../2-encoding/mir"));

var _keywords = require("../../keywords");

var _isNode = require("../../utils/is-node");

var _expressions = require("../expressions");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class ClassifiedElement {
  constructor(element, delegate, state) {
    this.element = element;
    this.state = state;
    this.delegate = delegate;
  }

  toStatement() {
    return this.prepare().andThen(prepared => this.delegate.toStatement(this, prepared));
  }

  attr(attr) {
    let name = attr.name;
    let rawValue = attr.value;
    let namespace = (0, _utils.getAttrNamespace)(name.chars) || undefined;

    if (_syntax.ASTv2.isLiteral(rawValue, 'string')) {
      return (0, _result.Ok)(new mir.StaticAttr({
        loc: attr.loc,
        name,
        value: rawValue.toSlice(),
        namespace,
        kind: {
          component: this.delegate.dynamicFeatures
        }
      }));
    }

    return _expressions.VISIT_EXPRS.visit((0, _expressions.convertPathToCallIfKeyword)(rawValue), this.state).mapOk(value => {
      let isTrusting = attr.trusting;
      return new mir.DynamicAttr({
        loc: attr.loc,
        name,
        value: value,
        namespace,
        kind: {
          trusting: isTrusting,
          component: this.delegate.dynamicFeatures
        }
      });
    });
  }

  modifier(modifier) {
    if ((0, _isNode.isHelperInvocation)(modifier)) {
      (0, _isNode.assertIsValidModifier)(modifier);
    }

    let translated = _keywords.MODIFIER_KEYWORDS.translate(modifier, this.state);

    if (translated !== null) {
      return translated;
    }

    let head = _expressions.VISIT_EXPRS.visit(modifier.callee, this.state);

    let args = _expressions.VISIT_EXPRS.Args(modifier.args, this.state);

    return _result.Result.all(head, args).mapOk(([head, args]) => new mir.Modifier({
      loc: modifier.loc,
      callee: head,
      args
    }));
  }

  attrs() {
    let attrs = new _result.ResultArray();
    let args = new _result.ResultArray(); // Unlike most attributes, the `type` attribute can change how
    // subsequent attributes are interpreted by the browser. To address
    // this, in simple cases, we special case the `type` attribute to be set
    // last. For elements with splattributes, where attribute order affects
    // precedence, this re-ordering happens at runtime instead.
    // See https://github.com/glimmerjs/glimmer-vm/pull/726

    let typeAttr = null;
    let simple = this.element.attrs.filter(attr => attr.type === 'SplatAttr').length === 0;

    for (let attr of this.element.attrs) {
      if (attr.type === 'SplatAttr') {
        attrs.add((0, _result.Ok)(new mir.SplatAttr({
          loc: attr.loc,
          symbol: this.state.scope.allocateBlock('attrs')
        })));
      } else if (attr.name.chars === 'type' && simple) {
        typeAttr = attr;
      } else {
        attrs.add(this.attr(attr));
      }
    }

    for (let arg of this.element.componentArgs) {
      args.add(this.delegate.arg(arg, this));
    }

    if (typeAttr) {
      attrs.add(this.attr(typeAttr));
    }

    return _result.Result.all(args.toArray(), attrs.toArray()).mapOk(([args, attrs]) => ({
      attrs,
      args: new mir.NamedArguments({
        loc: (0, _syntax.maybeLoc)(args, _syntax.SourceSpan.NON_EXISTENT),
        entries: (0, _list.OptionalList)(args)
      })
    }));
  }

  prepare() {
    let attrs = this.attrs();
    let modifiers = new _result.ResultArray(this.element.modifiers.map(m => this.modifier(m))).toArray();
    return _result.Result.all(attrs, modifiers).mapOk(([result, modifiers]) => {
      let {
        attrs,
        args
      } = result;
      let elementParams = [...attrs, ...modifiers];
      let params = new mir.ElementParameters({
        loc: (0, _syntax.maybeLoc)(elementParams, _syntax.SourceSpan.NON_EXISTENT),
        body: (0, _list.OptionalList)(elementParams)
      });
      return {
        args,
        params
      };
    });
  }

}

exports.ClassifiedElement = ClassifiedElement;

function hasDynamicFeatures({
  attrs,
  modifiers
}) {
  // ElementModifier needs the special ComponentOperations
  if (modifiers.length > 0) {
    return true;
  } // Splattributes need the special ComponentOperations to merge into


  return !!attrs.filter(attr => attr.type === 'SplatAttr')[0];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
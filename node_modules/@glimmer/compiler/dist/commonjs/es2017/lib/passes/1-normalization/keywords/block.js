"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BLOCK_KEYWORDS = void 0;

var _syntax = require("@glimmer/syntax");

var _result = require("../../../shared/result");

var mir = _interopRequireWildcard(require("../../2-encoding/mir"));

var _expressions = require("../visitors/expressions");

var _statements = require("../visitors/statements");

var _impl = require("./impl");

var _curry = require("./utils/curry");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const BLOCK_KEYWORDS = (0, _impl.keywords)('Block').kw('in-element', {
  assert(node) {
    let {
      args
    } = node;
    let guid = args.get('guid');

    if (guid) {
      return (0, _result.Err)((0, _syntax.generateSyntaxError)(`Cannot pass \`guid\` to \`{{#in-element}}\``, guid.loc));
    }

    let insertBefore = args.get('insertBefore');
    let destination = args.nth(0);

    if (destination === null) {
      return (0, _result.Err)((0, _syntax.generateSyntaxError)(`{{#in-element}} requires a target element as its first positional parameter`, args.loc));
    } // TODO Better syntax checks


    return (0, _result.Ok)({
      insertBefore,
      destination
    });
  },

  translate({
    node,
    state
  }, {
    insertBefore,
    destination
  }) {
    let named = node.blocks.get('default');

    let body = _statements.VISIT_STMTS.NamedBlock(named, state);

    let destinationResult = _expressions.VISIT_EXPRS.visit(destination, state);

    return _result.Result.all(body, destinationResult).andThen(([body, destination]) => {
      if (insertBefore) {
        return _expressions.VISIT_EXPRS.visit(insertBefore, state).mapOk(insertBefore => ({
          body,
          destination,
          insertBefore
        }));
      } else {
        return (0, _result.Ok)({
          body,
          destination,
          insertBefore: new mir.Missing({
            loc: node.callee.loc.collapse('end')
          })
        });
      }
    }).mapOk(({
      body,
      destination,
      insertBefore
    }) => new mir.InElement({
      loc: node.loc,
      block: body,
      insertBefore,
      guid: state.generateUniqueCursor(),
      destination
    }));
  }

}).kw('if', {
  assert(node) {
    let {
      args
    } = node;

    if (!args.named.isEmpty()) {
      return (0, _result.Err)((0, _syntax.generateSyntaxError)(`{{#if}} cannot receive named parameters, received ${args.named.entries.map(e => e.name.chars).join(', ')}`, node.loc));
    }

    if (args.positional.size > 1) {
      return (0, _result.Err)((0, _syntax.generateSyntaxError)(`{{#if}} can only receive one positional parameter in block form, the conditional value. Received ${args.positional.size} parameters`, node.loc));
    }

    let condition = args.nth(0);

    if (condition === null) {
      return (0, _result.Err)((0, _syntax.generateSyntaxError)(`{{#if}} requires a condition as its first positional parameter, did not receive any parameters`, node.loc));
    }

    return (0, _result.Ok)({
      condition
    });
  },

  translate({
    node,
    state
  }, {
    condition
  }) {
    let block = node.blocks.get('default');
    let inverse = node.blocks.get('else');

    let conditionResult = _expressions.VISIT_EXPRS.visit(condition, state);

    let blockResult = _statements.VISIT_STMTS.NamedBlock(block, state);

    let inverseResult = inverse ? _statements.VISIT_STMTS.NamedBlock(inverse, state) : (0, _result.Ok)(null);
    return _result.Result.all(conditionResult, blockResult, inverseResult).mapOk(([condition, block, inverse]) => new mir.If({
      loc: node.loc,
      condition,
      block,
      inverse
    }));
  }

}).kw('unless', {
  assert(node) {
    let {
      args
    } = node;

    if (!args.named.isEmpty()) {
      return (0, _result.Err)((0, _syntax.generateSyntaxError)(`{{#unless}} cannot receive named parameters, received ${args.named.entries.map(e => e.name.chars).join(', ')}`, node.loc));
    }

    if (args.positional.size > 1) {
      return (0, _result.Err)((0, _syntax.generateSyntaxError)(`{{#unless}} can only receive one positional parameter in block form, the conditional value. Received ${args.positional.size} parameters`, node.loc));
    }

    let condition = args.nth(0);

    if (condition === null) {
      return (0, _result.Err)((0, _syntax.generateSyntaxError)(`{{#unless}} requires a condition as its first positional parameter, did not receive any parameters`, node.loc));
    }

    return (0, _result.Ok)({
      condition
    });
  },

  translate({
    node,
    state
  }, {
    condition
  }) {
    let block = node.blocks.get('default');
    let inverse = node.blocks.get('else');

    let conditionResult = _expressions.VISIT_EXPRS.visit(condition, state);

    let blockResult = _statements.VISIT_STMTS.NamedBlock(block, state);

    let inverseResult = inverse ? _statements.VISIT_STMTS.NamedBlock(inverse, state) : (0, _result.Ok)(null);
    return _result.Result.all(conditionResult, blockResult, inverseResult).mapOk(([condition, block, inverse]) => new mir.If({
      loc: node.loc,
      condition: new mir.Not({
        value: condition,
        loc: node.loc
      }),
      block,
      inverse
    }));
  }

}).kw('each', {
  assert(node) {
    let {
      args
    } = node;

    if (!args.named.entries.every(e => e.name.chars === 'key')) {
      return (0, _result.Err)((0, _syntax.generateSyntaxError)(`{{#each}} can only receive the 'key' named parameter, received ${args.named.entries.filter(e => e.name.chars !== 'key').map(e => e.name.chars).join(', ')}`, args.named.loc));
    }

    if (args.positional.size > 1) {
      return (0, _result.Err)((0, _syntax.generateSyntaxError)(`{{#each}} can only receive one positional parameter, the collection being iterated. Received ${args.positional.size} parameters`, args.positional.loc));
    }

    let value = args.nth(0);
    let key = args.get('key');

    if (value === null) {
      return (0, _result.Err)((0, _syntax.generateSyntaxError)(`{{#each}} requires an iterable value to be passed as its first positional parameter, did not receive any parameters`, args.loc));
    }

    return (0, _result.Ok)({
      value,
      key
    });
  },

  translate({
    node,
    state
  }, {
    value,
    key
  }) {
    let block = node.blocks.get('default');
    let inverse = node.blocks.get('else');

    let valueResult = _expressions.VISIT_EXPRS.visit(value, state);

    let keyResult = key ? _expressions.VISIT_EXPRS.visit(key, state) : (0, _result.Ok)(null);

    let blockResult = _statements.VISIT_STMTS.NamedBlock(block, state);

    let inverseResult = inverse ? _statements.VISIT_STMTS.NamedBlock(inverse, state) : (0, _result.Ok)(null);
    return _result.Result.all(valueResult, keyResult, blockResult, inverseResult).mapOk(([value, key, block, inverse]) => new mir.Each({
      loc: node.loc,
      value,
      key,
      block,
      inverse
    }));
  }

}).kw('with', {
  assert(node) {
    let {
      args
    } = node;

    if (!args.named.isEmpty()) {
      return (0, _result.Err)((0, _syntax.generateSyntaxError)(`{{#with}} cannot receive named parameters, received ${args.named.entries.map(e => e.name.chars).join(', ')}`, args.named.loc));
    }

    if (args.positional.size > 1) {
      return (0, _result.Err)((0, _syntax.generateSyntaxError)(`{{#with}} can only receive one positional parameter. Received ${args.positional.size} parameters`, args.positional.loc));
    }

    let value = args.nth(0);

    if (value === null) {
      return (0, _result.Err)((0, _syntax.generateSyntaxError)(`{{#with}} requires a value as its first positional parameter, did not receive any parameters`, args.loc));
    }

    return (0, _result.Ok)({
      value
    });
  },

  translate({
    node,
    state
  }, {
    value
  }) {
    let block = node.blocks.get('default');
    let inverse = node.blocks.get('else');

    let valueResult = _expressions.VISIT_EXPRS.visit(value, state);

    let blockResult = _statements.VISIT_STMTS.NamedBlock(block, state);

    let inverseResult = inverse ? _statements.VISIT_STMTS.NamedBlock(inverse, state) : (0, _result.Ok)(null);
    return _result.Result.all(valueResult, blockResult, inverseResult).mapOk(([value, block, inverse]) => new mir.With({
      loc: node.loc,
      value,
      block,
      inverse
    }));
  }

}).kw('let', {
  assert(node) {
    let {
      args
    } = node;

    if (!args.named.isEmpty()) {
      return (0, _result.Err)((0, _syntax.generateSyntaxError)(`{{#let}} cannot receive named parameters, received ${args.named.entries.map(e => e.name.chars).join(', ')}`, args.named.loc));
    }

    if (args.positional.size === 0) {
      return (0, _result.Err)((0, _syntax.generateSyntaxError)(`{{#let}} requires at least one value as its first positional parameter, did not receive any parameters`, args.positional.loc));
    }

    if (node.blocks.get('else')) {
      return (0, _result.Err)((0, _syntax.generateSyntaxError)(`{{#let}} cannot receive an {{else}} block`, args.positional.loc));
    }

    return (0, _result.Ok)({
      positional: args.positional
    });
  },

  translate({
    node,
    state
  }, {
    positional
  }) {
    let block = node.blocks.get('default');

    let positionalResult = _expressions.VISIT_EXPRS.Positional(positional, state);

    let blockResult = _statements.VISIT_STMTS.NamedBlock(block, state);

    return _result.Result.all(positionalResult, blockResult).mapOk(([positional, block]) => new mir.Let({
      loc: node.loc,
      positional,
      block
    }));
  }

}).kw('-with-dynamic-vars', {
  assert(node) {
    return (0, _result.Ok)({
      named: node.args.named
    });
  },

  translate({
    node,
    state
  }, {
    named
  }) {
    let block = node.blocks.get('default');

    let namedResult = _expressions.VISIT_EXPRS.NamedArguments(named, state);

    let blockResult = _statements.VISIT_STMTS.NamedBlock(block, state);

    return _result.Result.all(namedResult, blockResult).mapOk(([named, block]) => new mir.WithDynamicVars({
      loc: node.loc,
      named,
      block
    }));
  }

}).kw('component', {
  assert: (0, _curry.assertCurryKeyword)(0
  /* Component */
  ),

  translate({
    node,
    state
  }, {
    definition,
    args
  }) {
    let definitionResult = _expressions.VISIT_EXPRS.visit(definition, state);

    let argsResult = _expressions.VISIT_EXPRS.Args(args, state);

    let blocksResult = _statements.VISIT_STMTS.NamedBlocks(node.blocks, state);

    return _result.Result.all(definitionResult, argsResult, blocksResult).mapOk(([definition, args, blocks]) => new mir.InvokeComponent({
      loc: node.loc,
      definition,
      args,
      blocks
    }));
  }

});
exports.BLOCK_KEYWORDS = BLOCK_KEYWORDS;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isResult = isResult;
exports.intoResult = intoResult;
exports.Ok = Ok;
exports.Err = Err;
exports.ResultArray = exports.MapIntoResultArray = exports.Result = void 0;

var _list = require("./list");

class ResultImpl {
  static all(...results) {
    let out = [];

    for (let result of results) {
      if (result.isErr) {
        return result.cast();
      } else {
        out.push(result.value);
      }
    }

    return Ok(out);
  }

}

const Result = ResultImpl;
exports.Result = Result;

class OkImpl extends ResultImpl {
  constructor(value) {
    super();
    this.value = value;
    this.isOk = true;
    this.isErr = false;
  }

  expect(_message) {
    return this.value;
  }

  ifOk(callback) {
    callback(this.value);
    return this;
  }

  andThen(callback) {
    return callback(this.value);
  }

  mapOk(callback) {
    return Ok(callback(this.value));
  }

  ifErr(_callback) {
    return this;
  }

  mapErr(_callback) {
    return this;
  }

}

class ErrImpl extends ResultImpl {
  constructor(reason) {
    super();
    this.reason = reason;
    this.isOk = false;
    this.isErr = true;
  }

  expect(message) {
    throw new Error(message || 'expected an Ok, got Err');
  }

  andThen(_callback) {
    return this.cast();
  }

  mapOk(_callback) {
    return this.cast();
  }

  ifOk(_callback) {
    return this;
  }

  mapErr(callback) {
    return Err(callback(this.reason));
  }

  ifErr(callback) {
    callback(this.reason);
    return this;
  }

  cast() {
    return this;
  }

}

function isResult(input) {
  return input instanceof ResultImpl;
}

function intoResult(input) {
  if (isResult(input)) {
    return input;
  } else {
    return Ok(input);
  }
}

function Ok(value) {
  return new OkImpl(value);
}

function Err(reason) {
  return new ErrImpl(reason);
}

class MapIntoResultArray {
  constructor(items) {
    this.items = items;
  }

  map(callback) {
    let out = new ResultArray();

    for (let item of this.items) {
      out.add(callback(item));
    }

    return out.toArray();
  }

}

exports.MapIntoResultArray = MapIntoResultArray;

class ResultArray {
  constructor(items = []) {
    this.items = items;
  }

  add(item) {
    this.items.push(item);
  }

  toArray() {
    let err = this.items.filter(item => item instanceof ErrImpl)[0];

    if (err !== undefined) {
      return err.cast();
    } else {
      return Ok(this.items.map(item => item.value));
    }
  }

  toOptionalList() {
    return this.toArray().mapOk(arr => (0, _list.OptionalList)(arr));
  }

}

exports.ResultArray = ResultArray;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
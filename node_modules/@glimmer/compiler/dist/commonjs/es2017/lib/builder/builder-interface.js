"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeStatement = normalizeStatement;
exports.normalizeAppendHead = normalizeAppendHead;
exports.normalizeSugaryArrayStatement = normalizeSugaryArrayStatement;
exports.normalizePathHead = normalizePathHead;
exports.normalizeBuilderBlockStatement = normalizeBuilderBlockStatement;
exports.entries = entries;
exports.isElement = isElement;
exports.extractElement = extractElement;
exports.extractAngleInvocation = extractAngleInvocation;
exports.isAngleInvocation = isAngleInvocation;
exports.isBlock = isBlock;
exports.normalizeAppendExpression = normalizeAppendExpression;
exports.normalizeExpression = normalizeExpression;
exports.isBuilderExpression = isBuilderExpression;
exports.isLiteral = isLiteral;
exports.statementIsExpression = statementIsExpression;
exports.isBuilderCallExpression = isBuilderCallExpression;
exports.normalizeParams = normalizeParams;
exports.normalizeHash = normalizeHash;
exports.normalizeCallExpression = normalizeCallExpression;
exports.VariableKind = void 0;

var _util = require("@glimmer/util");

var VariableKind;
exports.VariableKind = VariableKind;

(function (VariableKind) {
  VariableKind["Local"] = "Local";
  VariableKind["Free"] = "Free";
  VariableKind["Arg"] = "Arg";
  VariableKind["Block"] = "Block";
  VariableKind["This"] = "This";
})(VariableKind || (exports.VariableKind = VariableKind = {}));

function normalizeStatement(statement) {
  if (Array.isArray(statement)) {
    if (statementIsExpression(statement)) {
      return normalizeAppendExpression(statement);
    } else if (isSugaryArrayStatement(statement)) {
      return normalizeSugaryArrayStatement(statement);
    } else {
      return normalizeVerboseStatement(statement);
    }
  } else if (typeof statement === 'string') {
    return normalizeAppendHead(normalizeDottedPath(statement), false);
  } else {
    throw (0, _util.assertNever)(statement);
  }
}

function normalizeAppendHead(head, trusted) {
  if (head.type === "GetPath"
  /* GetPath */
  ) {
      return {
        kind: "AppendPath"
        /* AppendPath */
        ,
        path: head,
        trusted
      };
    } else {
    return {
      kind: "AppendExpr"
      /* AppendExpr */
      ,
      expr: head,
      trusted
    };
  }
}

function isSugaryArrayStatement(statement) {
  if (Array.isArray(statement) && typeof statement[0] === 'string') {
    switch (statement[0][0]) {
      case '(':
      case '#':
      case '<':
      case '!':
        return true;

      default:
        return false;
    }
  }

  return false;
}

function normalizeSugaryArrayStatement(statement) {
  let name = statement[0];

  switch (name[0]) {
    case '(':
      {
        let params = null;
        let hash = null;

        if (statement.length === 3) {
          params = normalizeParams(statement[1]);
          hash = normalizeHash(statement[2]);
        } else if (statement.length === 2) {
          if (Array.isArray(statement[1])) {
            params = normalizeParams(statement[1]);
          } else {
            hash = normalizeHash(statement[1]);
          }
        }

        return {
          kind: "Call"
          /* Call */
          ,
          head: normalizeCallHead(name),
          params,
          hash,
          trusted: false
        };
      }

    case '#':
      {
        let {
          head: path,
          params,
          hash,
          blocks,
          blockParams
        } = normalizeBuilderBlockStatement(statement);
        return {
          kind: "Block"
          /* Block */
          ,
          head: path,
          params,
          hash,
          blocks,
          blockParams
        };
      }

    case '!':
      {
        let name = statement[0].slice(1);
        let {
          params,
          hash,
          blocks,
          blockParams
        } = normalizeBuilderBlockStatement(statement);
        return {
          kind: "Keyword"
          /* Keyword */
          ,
          name,
          params,
          hash,
          blocks,
          blockParams
        };
      }

    case '<':
      {
        let attrs = (0, _util.dict)();
        let block = [];

        if (statement.length === 3) {
          attrs = normalizeAttrs(statement[1]);
          block = normalizeBlock(statement[2]);
        } else if (statement.length === 2) {
          if (Array.isArray(statement[1])) {
            block = normalizeBlock(statement[1]);
          } else {
            attrs = normalizeAttrs(statement[1]);
          }
        }

        return {
          kind: "Element"
          /* Element */
          ,
          name: extractElement(name),
          attrs,
          block
        };
      }

    default:
      throw new Error(`Unreachable ${JSON.stringify(statement)} in normalizeSugaryArrayStatement`);
  }
}

function normalizeVerboseStatement(statement) {
  switch (statement[0]) {
    case 0
    /* Literal */
    :
      {
        return {
          kind: "Literal"
          /* Literal */
          ,
          value: statement[1]
        };
      }

    case 2
    /* Append */
    :
      {
        return normalizeAppendExpression(statement[1], statement[2]);
      }

    case 3
    /* Modifier */
    :
      {
        return {
          kind: "Modifier"
          /* Modifier */
          ,
          params: normalizeParams(statement[1]),
          hash: normalizeHash(statement[2])
        };
      }

    case 4
    /* DynamicComponent */
    :
      {
        return {
          kind: "DynamicComponent"
          /* DynamicComponent */
          ,
          expr: normalizeExpression(statement[1]),
          hash: normalizeHash(statement[2]),
          block: normalizeBlock(statement[3])
        };
      }

    case 1
    /* Comment */
    :
      {
        return {
          kind: "Comment"
          /* Comment */
          ,
          value: statement[1]
        };
      }
  }
}

function extractBlockHead(name) {
  let result = /^(#|!)(.*)$/.exec(name);

  if (result === null) {
    throw new Error(`Unexpected missing # in block head`);
  }

  return normalizeDottedPath(result[2]);
}

function normalizeCallHead(name) {
  let result = /^\((.*)\)$/.exec(name);

  if (result === null) {
    throw new Error(`Unexpected missing () in call head`);
  }

  return normalizeDottedPath(result[1]);
}

function normalizePath(head, tail = []) {
  let pathHead = normalizePathHead(head);

  if ((0, _util.isPresent)(tail)) {
    return {
      type: "GetPath"
      /* GetPath */
      ,
      path: {
        head: pathHead,
        tail
      }
    };
  } else {
    return {
      type: "GetVar"
      /* GetVar */
      ,
      variable: pathHead
    };
  }
}

function normalizeDottedPath(whole) {
  let {
    kind,
    name: rest
  } = normalizePathHead(whole);
  let [name, ...tail] = rest.split('.');
  let variable = {
    kind,
    name,
    mode: 'loose'
  };

  if ((0, _util.isPresent)(tail)) {
    return {
      type: "GetPath"
      /* GetPath */
      ,
      path: {
        head: variable,
        tail
      }
    };
  } else {
    return {
      type: "GetVar"
      /* GetVar */
      ,
      variable
    };
  }
}

function normalizePathHead(whole) {
  let kind;
  let name;

  if (/^this(\.|$)/.exec(whole)) {
    return {
      kind: VariableKind.This,
      name: whole,
      mode: 'loose'
    };
  }

  switch (whole[0]) {
    case '^':
      kind = VariableKind.Free;
      name = whole.slice(1);
      break;

    case '@':
      kind = VariableKind.Arg;
      name = whole.slice(1);
      break;

    case '&':
      kind = VariableKind.Block;
      name = whole.slice(1);
      break;

    default:
      kind = VariableKind.Local;
      name = whole;
  }

  return {
    kind,
    name,
    mode: 'loose'
  };
}

function normalizeBuilderBlockStatement(statement) {
  let head = statement[0];
  let blocks = (0, _util.dict)();
  let params = null;
  let hash = null;
  let blockParams = null;

  if (statement.length === 2) {
    blocks = normalizeBlocks(statement[1]);
  } else if (statement.length === 3) {
    if (Array.isArray(statement[1])) {
      params = normalizeParams(statement[1]);
    } else {
      ({
        hash,
        blockParams
      } = normalizeBlockHash(statement[1]));
    }

    blocks = normalizeBlocks(statement[2]);
  } else if (statement.length === 4) {
    params = normalizeParams(statement[1]);
    ({
      hash,
      blockParams
    } = normalizeBlockHash(statement[2]));
    blocks = normalizeBlocks(statement[3]);
  }

  return {
    head: extractBlockHead(head),
    params,
    hash,
    blockParams,
    blocks
  };
}

function normalizeBlockHash(hash) {
  if (hash === null) {
    return {
      hash: null,
      blockParams: null
    };
  }

  let out = null;
  let blockParams = null;
  entries(hash, (key, value) => {
    if (key === 'as') {
      blockParams = Array.isArray(value) ? value : [value];
    } else {
      out = out || (0, _util.dict)();
      out[key] = normalizeExpression(value);
    }
  });
  return {
    hash: out,
    blockParams
  };
}

function entries(dict, callback) {
  Object.keys(dict).forEach(key => {
    let value = dict[key];
    callback(key, value);
  });
}

function normalizeBlocks(value) {
  if (Array.isArray(value)) {
    return {
      default: normalizeBlock(value)
    };
  } else {
    return mapObject(value, normalizeBlock);
  }
}

function normalizeBlock(block) {
  return block.map(s => normalizeStatement(s));
}

function normalizeAttrs(attrs) {
  return mapObject(attrs, a => normalizeAttr(a).expr);
}

function normalizeAttr(attr) {
  if (attr === 'splat') {
    return {
      expr: "Splat"
      /* Splat */
      ,
      trusted: false
    };
  } else {
    let expr = normalizeExpression(attr);
    return {
      expr,
      trusted: false
    };
  }
}

function mapObject(object, callback) {
  let out = (0, _util.dict)();
  Object.keys(object).forEach(k => {
    out[k] = callback(object[k], k);
  });
  return out;
}

function isElement(input) {
  let match = /^<([a-z0-9\-][a-zA-Z0-9\-]*)>$/.exec(input[0]);
  return !!match && !!match[1];
}

function extractElement(input) {
  let match = /^<([a-z0-9\-][a-zA-Z0-9\-]*)>$/.exec(input);
  return match ? match[1] : null;
}

function extractAngleInvocation(input) {
  let match = /^<(@[a-zA-Z0-9]*|[A-Z][a-zA-Z0-9\-]*)>$/.exec(input[0]);
  return match ? match[1] : null;
}

function isAngleInvocation(input) {
  // TODO Paths
  let match = /^<(@[a-zA-Z0-9]*|[A-Z][a-zA-Z0-9\-]*)>$/.exec(input[0]);
  return !!match && !!match[1];
}

function isBlock(input) {
  // TODO Paths
  let match = /^#[^]?([a-zA-Z0-9]*|[A-Z][a-zA-Z0-9\-]*)$/.exec(input[0]);
  return !!match && !!match[1];
}

function normalizeAppendExpression(expression, forceTrusted = false) {
  if (expression === null || expression === undefined) {
    return {
      expr: {
        type: "Literal"
        /* Literal */
        ,
        value: expression
      },
      kind: "AppendExpr"
      /* AppendExpr */
      ,
      trusted: false
    };
  } else if (Array.isArray(expression)) {
    switch (expression[0]) {
      case 0
      /* Literal */
      :
        return {
          expr: {
            type: "Literal"
            /* Literal */
            ,
            value: expression[1]
          },
          kind: "AppendExpr"
          /* AppendExpr */
          ,
          trusted: false
        };

      case 5
      /* Get */
      :
        {
          return normalizeAppendHead(normalizePath(expression[1], expression[2]), forceTrusted);
        }

      case 6
      /* Concat */
      :
        {
          let expr = {
            type: "Concat"
            /* Concat */
            ,
            params: normalizeParams(expression.slice(1))
          };
          return {
            expr,
            kind: "AppendExpr"
            /* AppendExpr */
            ,
            trusted: forceTrusted
          };
        }

      case 7
      /* HasBlock */
      :
        return {
          expr: {
            type: "HasBlock"
            /* HasBlock */
            ,
            name: expression[1]
          },
          kind: "AppendExpr"
          /* AppendExpr */
          ,
          trusted: forceTrusted
        };

      case 8
      /* HasBlockParams */
      :
        return {
          expr: {
            type: "HasBlockParams"
            /* HasBlockParams */
            ,
            name: expression[1]
          },
          kind: "AppendExpr"
          /* AppendExpr */
          ,
          trusted: forceTrusted
        };

      default:
        {
          if (isBuilderCallExpression(expression)) {
            return {
              expr: normalizeCallExpression(expression),
              kind: "AppendExpr"
              /* AppendExpr */
              ,
              trusted: forceTrusted
            };
          } else {
            throw new Error(`Unexpected array in expression position (wasn't a tuple expression and ${expression[0]} isn't wrapped in parens, so it isn't a call): ${JSON.stringify(expression)}`);
          }
        }
      // BuilderCallExpression
    }
  } else if (typeof expression !== 'object') {
    switch (typeof expression) {
      case 'string':
        {
          return normalizeAppendHead(normalizeDottedPath(expression), forceTrusted);
        }

      case 'boolean':
      case 'number':
        return {
          expr: {
            type: "Literal"
            /* Literal */
            ,
            value: expression
          },
          kind: "AppendExpr"
          /* AppendExpr */
          ,
          trusted: true
        };

      default:
        throw (0, _util.assertNever)(expression);
    }
  } else {
    throw (0, _util.assertNever)(expression);
  }
}

function normalizeExpression(expression) {
  if (expression === null || expression === undefined) {
    return {
      type: "Literal"
      /* Literal */
      ,
      value: expression
    };
  } else if (Array.isArray(expression)) {
    switch (expression[0]) {
      case 0
      /* Literal */
      :
        return {
          type: "Literal"
          /* Literal */
          ,
          value: expression[1]
        };

      case 5
      /* Get */
      :
        {
          return normalizePath(expression[1], expression[2]);
        }

      case 6
      /* Concat */
      :
        {
          let expr = {
            type: "Concat"
            /* Concat */
            ,
            params: normalizeParams(expression.slice(1))
          };
          return expr;
        }

      case 7
      /* HasBlock */
      :
        return {
          type: "HasBlock"
          /* HasBlock */
          ,
          name: expression[1]
        };

      case 8
      /* HasBlockParams */
      :
        return {
          type: "HasBlockParams"
          /* HasBlockParams */
          ,
          name: expression[1]
        };

      default:
        {
          if (isBuilderCallExpression(expression)) {
            return normalizeCallExpression(expression);
          } else {
            throw new Error(`Unexpected array in expression position (wasn't a tuple expression and ${expression[0]} isn't wrapped in parens, so it isn't a call): ${JSON.stringify(expression)}`);
          }
        }
      // BuilderCallExpression
    }
  } else if (typeof expression !== 'object') {
    switch (typeof expression) {
      case 'string':
        {
          return normalizeDottedPath(expression);
        }

      case 'boolean':
      case 'number':
        return {
          type: "Literal"
          /* Literal */
          ,
          value: expression
        };

      default:
        throw (0, _util.assertNever)(expression);
    }
  } else {
    throw (0, _util.assertNever)(expression);
  }
}

function isBuilderExpression(expr) {
  return Array.isArray(expr);
}

function isLiteral(expr) {
  return Array.isArray(expr) && expr[0] === 'literal';
}

function statementIsExpression(statement) {
  if (!Array.isArray(statement)) {
    return false;
  }

  let name = statement[0];

  if (typeof name === 'number') {
    switch (name) {
      case 0
      /* Literal */
      :
      case 5
      /* Get */
      :
      case 6
      /* Concat */
      :
      case 7
      /* HasBlock */
      :
      case 8
      /* HasBlockParams */
      :
        return true;

      default:
        return false;
    }
  }

  if (name[0] === '(') {
    return true;
  }

  return false;
}

function isBuilderCallExpression(value) {
  return typeof value[0] === 'string' && value[0][0] === '(';
}

function normalizeParams(input) {
  return input.map(normalizeExpression);
}

function normalizeHash(input) {
  if (input === null) return null;
  return mapObject(input, normalizeExpression);
}

function normalizeCallExpression(expr) {
  switch (expr.length) {
    case 1:
      return {
        type: "Call"
        /* Call */
        ,
        head: normalizeCallHead(expr[0]),
        params: null,
        hash: null
      };

    case 2:
      {
        if (Array.isArray(expr[1])) {
          return {
            type: "Call"
            /* Call */
            ,
            head: normalizeCallHead(expr[0]),
            params: normalizeParams(expr[1]),
            hash: null
          };
        } else {
          return {
            type: "Call"
            /* Call */
            ,
            head: normalizeCallHead(expr[0]),
            params: null,
            hash: normalizeHash(expr[1])
          };
        }
      }

    case 3:
      return {
        type: "Call"
        /* Call */
        ,
        head: normalizeCallHead(expr[0]),
        params: normalizeParams(expr[1]),
        hash: normalizeHash(expr[2])
      };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
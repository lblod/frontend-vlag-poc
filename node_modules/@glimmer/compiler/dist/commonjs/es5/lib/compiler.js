"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.precompileJSON = precompileJSON;
exports.precompile = precompile;
exports.defaultId = void 0;

var _syntax = require("@glimmer/syntax");

var _util = require("@glimmer/util");

var _index = _interopRequireDefault(require("./passes/1-normalization/index"));

var _index2 = require("./passes/2-encoding/index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultId = function () {
  var req = typeof module === 'object' && typeof module.require === 'function' ? module.require : require;

  if (req) {
    try {
      var crypto = req('crypto');

      var idFn = function idFn(src) {
        var hash = crypto.createHash('sha1');
        hash.update(src, 'utf8'); // trim to 6 bytes of data (2^48 - 1)

        return hash.digest('base64').substring(0, 8);
      };

      idFn('test');
      return idFn;
    } catch (e) {}
  }

  return function idFn() {
    return null;
  };
}();

exports.defaultId = defaultId;
var defaultOptions = {
  id: defaultId
};
/*
 * Compile a string into a template javascript string.
 *
 * Example usage:
 *     import { precompile } from '@glimmer/compiler';
 *     import { templateFactory } from 'glimmer-runtime';
 *     let templateJs = precompile("Howdy {{name}}");
 *     let factory = templateFactory(new Function("return " + templateJs)());
 *     let template = factory.create(env);
 *
 * @method precompile
 * @param {string} string a Glimmer template string
 * @return {string} a template javascript string
 */

function precompileJSON(string, options) {
  if (options === void 0) {
    options = defaultOptions;
  }

  var _a, _b;

  var source = new _syntax.Source(string, (_a = options.meta) === null || _a === void 0 ? void 0 : _a.moduleName);

  var _normalize = (0, _syntax.normalize)(source, options),
      ast = _normalize[0],
      locals = _normalize[1];

  var block = (0, _index.default)(source, ast, (_b = options.strictMode) !== null && _b !== void 0 ? _b : false).mapOk(function (pass2In) {
    return (0, _index2.visit)(pass2In);
  });

  if (false
  /* LOCAL_SHOULD_LOG */
  ) {
      _util.LOCAL_LOGGER.log("Template ->", block);
    }

  if (block.isOk) {
    return [block.value, locals];
  } else {
    throw block.reason;
  }
} // UUID used as a unique placeholder for placing a snippet of JS code into
// the otherwise JSON stringified value below.


var SCOPE_PLACEHOLDER = '796d24e6-2450-4fb0-8cdf-b65638b5ef70';
/*
 * Compile a string into a template javascript string.
 *
 * Example usage:
 *     import { precompile } from '@glimmer/compiler';
 *     import { templateFactory } from 'glimmer-runtime';
 *     let templateJs = precompile("Howdy {{name}}");
 *     let factory = templateFactory(new Function("return " + templateJs)());
 *     let template = factory.create(env);
 *
 * @method precompile
 * @param {string} string a Glimmer template string
 * @return {string} a template javascript string
 */

function precompile(source, options) {
  if (options === void 0) {
    options = defaultOptions;
  }

  var _a, _b;

  var _precompileJSON = precompileJSON(source, options),
      block = _precompileJSON[0],
      usedLocals = _precompileJSON[1];

  var moduleName = (_a = options.meta) === null || _a === void 0 ? void 0 : _a.moduleName;
  var idFn = options.id || defaultId;
  var blockJSON = JSON.stringify(block);
  var templateJSONObject = {
    id: idFn(JSON.stringify(options.meta) + blockJSON),
    block: blockJSON,
    moduleName: moduleName !== null && moduleName !== void 0 ? moduleName : '(unknown template module)',
    // lying to the type checker here because we're going to
    // replace it just below, after stringification
    scope: SCOPE_PLACEHOLDER,
    isStrictMode: (_b = options.strictMode) !== null && _b !== void 0 ? _b : false
  };

  if (usedLocals.length === 0) {
    delete templateJSONObject.scope;
  } // JSON is javascript


  var stringified = JSON.stringify(templateJSONObject);

  if (usedLocals.length > 0) {
    var scopeFn = "()=>[" + usedLocals.join(',') + "]";
    stringified = stringified.replace("\"" + SCOPE_PLACEHOLDER + "\"", scopeFn);
  }

  return stringified;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
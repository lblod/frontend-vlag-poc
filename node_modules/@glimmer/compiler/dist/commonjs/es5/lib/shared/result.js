"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isResult = isResult;
exports.intoResult = intoResult;
exports.Ok = Ok;
exports.Err = Err;
exports.ResultArray = exports.MapIntoResultArray = exports.Result = void 0;

var _list = require("./list");

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      return function () {
        if (i >= o.length) return {
          done: true
        };
        return {
          done: false,
          value: o[i++]
        };
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  it = o[Symbol.iterator]();
  return it.next.bind(it);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

var ResultImpl = /*#__PURE__*/function () {
  function ResultImpl() {}

  ResultImpl.all = function all() {
    var out = [];

    for (var _len = arguments.length, results = new Array(_len), _key = 0; _key < _len; _key++) {
      results[_key] = arguments[_key];
    }

    for (var _i = 0, _results = results; _i < _results.length; _i++) {
      var result = _results[_i];

      if (result.isErr) {
        return result.cast();
      } else {
        out.push(result.value);
      }
    }

    return Ok(out);
  };

  return ResultImpl;
}();

var Result = ResultImpl;
exports.Result = Result;

var OkImpl = /*#__PURE__*/function (_ResultImpl) {
  _inheritsLoose(OkImpl, _ResultImpl);

  function OkImpl(value) {
    var _this;

    _this = _ResultImpl.call(this) || this;
    _this.value = value;
    _this.isOk = true;
    _this.isErr = false;
    return _this;
  }

  var _proto = OkImpl.prototype;

  _proto.expect = function expect(_message) {
    return this.value;
  };

  _proto.ifOk = function ifOk(callback) {
    callback(this.value);
    return this;
  };

  _proto.andThen = function andThen(callback) {
    return callback(this.value);
  };

  _proto.mapOk = function mapOk(callback) {
    return Ok(callback(this.value));
  };

  _proto.ifErr = function ifErr(_callback) {
    return this;
  };

  _proto.mapErr = function mapErr(_callback) {
    return this;
  };

  return OkImpl;
}(ResultImpl);

var ErrImpl = /*#__PURE__*/function (_ResultImpl2) {
  _inheritsLoose(ErrImpl, _ResultImpl2);

  function ErrImpl(reason) {
    var _this2;

    _this2 = _ResultImpl2.call(this) || this;
    _this2.reason = reason;
    _this2.isOk = false;
    _this2.isErr = true;
    return _this2;
  }

  var _proto2 = ErrImpl.prototype;

  _proto2.expect = function expect(message) {
    throw new Error(message || 'expected an Ok, got Err');
  };

  _proto2.andThen = function andThen(_callback) {
    return this.cast();
  };

  _proto2.mapOk = function mapOk(_callback) {
    return this.cast();
  };

  _proto2.ifOk = function ifOk(_callback) {
    return this;
  };

  _proto2.mapErr = function mapErr(callback) {
    return Err(callback(this.reason));
  };

  _proto2.ifErr = function ifErr(callback) {
    callback(this.reason);
    return this;
  };

  _proto2.cast = function cast() {
    return this;
  };

  return ErrImpl;
}(ResultImpl);

function isResult(input) {
  return input instanceof ResultImpl;
}

function intoResult(input) {
  if (isResult(input)) {
    return input;
  } else {
    return Ok(input);
  }
}

function Ok(value) {
  return new OkImpl(value);
}

function Err(reason) {
  return new ErrImpl(reason);
}

var MapIntoResultArray = /*#__PURE__*/function () {
  function MapIntoResultArray(items) {
    this.items = items;
  }

  var _proto3 = MapIntoResultArray.prototype;

  _proto3.map = function map(callback) {
    var out = new ResultArray();

    for (var _iterator = _createForOfIteratorHelperLoose(this.items), _step; !(_step = _iterator()).done;) {
      var item = _step.value;
      out.add(callback(item));
    }

    return out.toArray();
  };

  return MapIntoResultArray;
}();

exports.MapIntoResultArray = MapIntoResultArray;

var ResultArray = /*#__PURE__*/function () {
  function ResultArray(items) {
    if (items === void 0) {
      items = [];
    }

    this.items = items;
  }

  var _proto4 = ResultArray.prototype;

  _proto4.add = function add(item) {
    this.items.push(item);
  };

  _proto4.toArray = function toArray() {
    var err = this.items.filter(function (item) {
      return item instanceof ErrImpl;
    })[0];

    if (err !== undefined) {
      return err.cast();
    } else {
      return Ok(this.items.map(function (item) {
        return item.value;
      }));
    }
  };

  _proto4.toOptionalList = function toOptionalList() {
    return this.toArray().mapOk(function (arr) {
      return (0, _list.OptionalList)(arr);
    });
  };

  return ResultArray;
}();

exports.ResultArray = ResultArray;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
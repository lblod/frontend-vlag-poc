"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeStatement = normalizeStatement;
exports.normalizeAppendHead = normalizeAppendHead;
exports.normalizeSugaryArrayStatement = normalizeSugaryArrayStatement;
exports.normalizePathHead = normalizePathHead;
exports.normalizeBuilderBlockStatement = normalizeBuilderBlockStatement;
exports.entries = entries;
exports.isElement = isElement;
exports.extractElement = extractElement;
exports.extractAngleInvocation = extractAngleInvocation;
exports.isAngleInvocation = isAngleInvocation;
exports.isBlock = isBlock;
exports.normalizeAppendExpression = normalizeAppendExpression;
exports.normalizeExpression = normalizeExpression;
exports.isBuilderExpression = isBuilderExpression;
exports.isLiteral = isLiteral;
exports.statementIsExpression = statementIsExpression;
exports.isBuilderCallExpression = isBuilderCallExpression;
exports.normalizeParams = normalizeParams;
exports.normalizeHash = normalizeHash;
exports.normalizeCallExpression = normalizeCallExpression;
exports.VariableKind = void 0;

var _util = require("@glimmer/util");

var VariableKind;
exports.VariableKind = VariableKind;

(function (VariableKind) {
  VariableKind["Local"] = "Local";
  VariableKind["Free"] = "Free";
  VariableKind["Arg"] = "Arg";
  VariableKind["Block"] = "Block";
  VariableKind["This"] = "This";
})(VariableKind || (exports.VariableKind = VariableKind = {}));

function normalizeStatement(statement) {
  if (Array.isArray(statement)) {
    if (statementIsExpression(statement)) {
      return normalizeAppendExpression(statement);
    } else if (isSugaryArrayStatement(statement)) {
      return normalizeSugaryArrayStatement(statement);
    } else {
      return normalizeVerboseStatement(statement);
    }
  } else if (typeof statement === 'string') {
    return normalizeAppendHead(normalizeDottedPath(statement), false);
  } else {
    throw (0, _util.assertNever)(statement);
  }
}

function normalizeAppendHead(head, trusted) {
  if (head.type === "GetPath"
  /* GetPath */
  ) {
      return {
        kind: "AppendPath"
        /* AppendPath */
        ,
        path: head,
        trusted: trusted
      };
    } else {
    return {
      kind: "AppendExpr"
      /* AppendExpr */
      ,
      expr: head,
      trusted: trusted
    };
  }
}

function isSugaryArrayStatement(statement) {
  if (Array.isArray(statement) && typeof statement[0] === 'string') {
    switch (statement[0][0]) {
      case '(':
      case '#':
      case '<':
      case '!':
        return true;

      default:
        return false;
    }
  }

  return false;
}

function normalizeSugaryArrayStatement(statement) {
  var name = statement[0];

  switch (name[0]) {
    case '(':
      {
        var params = null;
        var hash = null;

        if (statement.length === 3) {
          params = normalizeParams(statement[1]);
          hash = normalizeHash(statement[2]);
        } else if (statement.length === 2) {
          if (Array.isArray(statement[1])) {
            params = normalizeParams(statement[1]);
          } else {
            hash = normalizeHash(statement[1]);
          }
        }

        return {
          kind: "Call"
          /* Call */
          ,
          head: normalizeCallHead(name),
          params: params,
          hash: hash,
          trusted: false
        };
      }

    case '#':
      {
        var _normalizeBuilderBloc = normalizeBuilderBlockStatement(statement),
            path = _normalizeBuilderBloc.head,
            _params = _normalizeBuilderBloc.params,
            _hash = _normalizeBuilderBloc.hash,
            blocks = _normalizeBuilderBloc.blocks,
            blockParams = _normalizeBuilderBloc.blockParams;

        return {
          kind: "Block"
          /* Block */
          ,
          head: path,
          params: _params,
          hash: _hash,
          blocks: blocks,
          blockParams: blockParams
        };
      }

    case '!':
      {
        var _name = statement[0].slice(1);

        var _normalizeBuilderBloc2 = normalizeBuilderBlockStatement(statement),
            _params2 = _normalizeBuilderBloc2.params,
            _hash2 = _normalizeBuilderBloc2.hash,
            _blocks = _normalizeBuilderBloc2.blocks,
            _blockParams = _normalizeBuilderBloc2.blockParams;

        return {
          kind: "Keyword"
          /* Keyword */
          ,
          name: _name,
          params: _params2,
          hash: _hash2,
          blocks: _blocks,
          blockParams: _blockParams
        };
      }

    case '<':
      {
        var attrs = (0, _util.dict)();
        var block = [];

        if (statement.length === 3) {
          attrs = normalizeAttrs(statement[1]);
          block = normalizeBlock(statement[2]);
        } else if (statement.length === 2) {
          if (Array.isArray(statement[1])) {
            block = normalizeBlock(statement[1]);
          } else {
            attrs = normalizeAttrs(statement[1]);
          }
        }

        return {
          kind: "Element"
          /* Element */
          ,
          name: extractElement(name),
          attrs: attrs,
          block: block
        };
      }

    default:
      throw new Error("Unreachable " + JSON.stringify(statement) + " in normalizeSugaryArrayStatement");
  }
}

function normalizeVerboseStatement(statement) {
  switch (statement[0]) {
    case 0
    /* Literal */
    :
      {
        return {
          kind: "Literal"
          /* Literal */
          ,
          value: statement[1]
        };
      }

    case 2
    /* Append */
    :
      {
        return normalizeAppendExpression(statement[1], statement[2]);
      }

    case 3
    /* Modifier */
    :
      {
        return {
          kind: "Modifier"
          /* Modifier */
          ,
          params: normalizeParams(statement[1]),
          hash: normalizeHash(statement[2])
        };
      }

    case 4
    /* DynamicComponent */
    :
      {
        return {
          kind: "DynamicComponent"
          /* DynamicComponent */
          ,
          expr: normalizeExpression(statement[1]),
          hash: normalizeHash(statement[2]),
          block: normalizeBlock(statement[3])
        };
      }

    case 1
    /* Comment */
    :
      {
        return {
          kind: "Comment"
          /* Comment */
          ,
          value: statement[1]
        };
      }
  }
}

function extractBlockHead(name) {
  var result = /^(#|!)(.*)$/.exec(name);

  if (result === null) {
    throw new Error("Unexpected missing # in block head");
  }

  return normalizeDottedPath(result[2]);
}

function normalizeCallHead(name) {
  var result = /^\((.*)\)$/.exec(name);

  if (result === null) {
    throw new Error("Unexpected missing () in call head");
  }

  return normalizeDottedPath(result[1]);
}

function normalizePath(head, tail) {
  if (tail === void 0) {
    tail = [];
  }

  var pathHead = normalizePathHead(head);

  if ((0, _util.isPresent)(tail)) {
    return {
      type: "GetPath"
      /* GetPath */
      ,
      path: {
        head: pathHead,
        tail: tail
      }
    };
  } else {
    return {
      type: "GetVar"
      /* GetVar */
      ,
      variable: pathHead
    };
  }
}

function normalizeDottedPath(whole) {
  var _normalizePathHead = normalizePathHead(whole),
      kind = _normalizePathHead.kind,
      rest = _normalizePathHead.name;

  var _rest$split = rest.split('.'),
      name = _rest$split[0],
      tail = _rest$split.slice(1);

  var variable = {
    kind: kind,
    name: name,
    mode: 'loose'
  };

  if ((0, _util.isPresent)(tail)) {
    return {
      type: "GetPath"
      /* GetPath */
      ,
      path: {
        head: variable,
        tail: tail
      }
    };
  } else {
    return {
      type: "GetVar"
      /* GetVar */
      ,
      variable: variable
    };
  }
}

function normalizePathHead(whole) {
  var kind;
  var name;

  if (/^this(\.|$)/.exec(whole)) {
    return {
      kind: VariableKind.This,
      name: whole,
      mode: 'loose'
    };
  }

  switch (whole[0]) {
    case '^':
      kind = VariableKind.Free;
      name = whole.slice(1);
      break;

    case '@':
      kind = VariableKind.Arg;
      name = whole.slice(1);
      break;

    case '&':
      kind = VariableKind.Block;
      name = whole.slice(1);
      break;

    default:
      kind = VariableKind.Local;
      name = whole;
  }

  return {
    kind: kind,
    name: name,
    mode: 'loose'
  };
}

function normalizeBuilderBlockStatement(statement) {
  var head = statement[0];
  var blocks = (0, _util.dict)();
  var params = null;
  var hash = null;
  var blockParams = null;

  if (statement.length === 2) {
    blocks = normalizeBlocks(statement[1]);
  } else if (statement.length === 3) {
    if (Array.isArray(statement[1])) {
      params = normalizeParams(statement[1]);
    } else {
      var _normalizeBlockHash = normalizeBlockHash(statement[1]);

      hash = _normalizeBlockHash.hash;
      blockParams = _normalizeBlockHash.blockParams;
    }

    blocks = normalizeBlocks(statement[2]);
  } else if (statement.length === 4) {
    params = normalizeParams(statement[1]);

    var _normalizeBlockHash2 = normalizeBlockHash(statement[2]);

    hash = _normalizeBlockHash2.hash;
    blockParams = _normalizeBlockHash2.blockParams;
    blocks = normalizeBlocks(statement[3]);
  }

  return {
    head: extractBlockHead(head),
    params: params,
    hash: hash,
    blockParams: blockParams,
    blocks: blocks
  };
}

function normalizeBlockHash(hash) {
  if (hash === null) {
    return {
      hash: null,
      blockParams: null
    };
  }

  var out = null;
  var blockParams = null;
  entries(hash, function (key, value) {
    if (key === 'as') {
      blockParams = Array.isArray(value) ? value : [value];
    } else {
      out = out || (0, _util.dict)();
      out[key] = normalizeExpression(value);
    }
  });
  return {
    hash: out,
    blockParams: blockParams
  };
}

function entries(dict, callback) {
  Object.keys(dict).forEach(function (key) {
    var value = dict[key];
    callback(key, value);
  });
}

function normalizeBlocks(value) {
  if (Array.isArray(value)) {
    return {
      "default": normalizeBlock(value)
    };
  } else {
    return mapObject(value, normalizeBlock);
  }
}

function normalizeBlock(block) {
  return block.map(function (s) {
    return normalizeStatement(s);
  });
}

function normalizeAttrs(attrs) {
  return mapObject(attrs, function (a) {
    return normalizeAttr(a).expr;
  });
}

function normalizeAttr(attr) {
  if (attr === 'splat') {
    return {
      expr: "Splat"
      /* Splat */
      ,
      trusted: false
    };
  } else {
    var expr = normalizeExpression(attr);
    return {
      expr: expr,
      trusted: false
    };
  }
}

function mapObject(object, callback) {
  var out = (0, _util.dict)();
  Object.keys(object).forEach(function (k) {
    out[k] = callback(object[k], k);
  });
  return out;
}

function isElement(input) {
  var match = /^<([a-z0-9\-][a-zA-Z0-9\-]*)>$/.exec(input[0]);
  return !!match && !!match[1];
}

function extractElement(input) {
  var match = /^<([a-z0-9\-][a-zA-Z0-9\-]*)>$/.exec(input);
  return match ? match[1] : null;
}

function extractAngleInvocation(input) {
  var match = /^<(@[a-zA-Z0-9]*|[A-Z][a-zA-Z0-9\-]*)>$/.exec(input[0]);
  return match ? match[1] : null;
}

function isAngleInvocation(input) {
  // TODO Paths
  var match = /^<(@[a-zA-Z0-9]*|[A-Z][a-zA-Z0-9\-]*)>$/.exec(input[0]);
  return !!match && !!match[1];
}

function isBlock(input) {
  // TODO Paths
  var match = /^#[^]?([a-zA-Z0-9]*|[A-Z][a-zA-Z0-9\-]*)$/.exec(input[0]);
  return !!match && !!match[1];
}

function normalizeAppendExpression(expression, forceTrusted) {
  if (forceTrusted === void 0) {
    forceTrusted = false;
  }

  if (expression === null || expression === undefined) {
    return {
      expr: {
        type: "Literal"
        /* Literal */
        ,
        value: expression
      },
      kind: "AppendExpr"
      /* AppendExpr */
      ,
      trusted: false
    };
  } else if (Array.isArray(expression)) {
    switch (expression[0]) {
      case 0
      /* Literal */
      :
        return {
          expr: {
            type: "Literal"
            /* Literal */
            ,
            value: expression[1]
          },
          kind: "AppendExpr"
          /* AppendExpr */
          ,
          trusted: false
        };

      case 5
      /* Get */
      :
        {
          return normalizeAppendHead(normalizePath(expression[1], expression[2]), forceTrusted);
        }

      case 6
      /* Concat */
      :
        {
          var expr = {
            type: "Concat"
            /* Concat */
            ,
            params: normalizeParams(expression.slice(1))
          };
          return {
            expr: expr,
            kind: "AppendExpr"
            /* AppendExpr */
            ,
            trusted: forceTrusted
          };
        }

      case 7
      /* HasBlock */
      :
        return {
          expr: {
            type: "HasBlock"
            /* HasBlock */
            ,
            name: expression[1]
          },
          kind: "AppendExpr"
          /* AppendExpr */
          ,
          trusted: forceTrusted
        };

      case 8
      /* HasBlockParams */
      :
        return {
          expr: {
            type: "HasBlockParams"
            /* HasBlockParams */
            ,
            name: expression[1]
          },
          kind: "AppendExpr"
          /* AppendExpr */
          ,
          trusted: forceTrusted
        };

      default:
        {
          if (isBuilderCallExpression(expression)) {
            return {
              expr: normalizeCallExpression(expression),
              kind: "AppendExpr"
              /* AppendExpr */
              ,
              trusted: forceTrusted
            };
          } else {
            throw new Error("Unexpected array in expression position (wasn't a tuple expression and " + expression[0] + " isn't wrapped in parens, so it isn't a call): " + JSON.stringify(expression));
          }
        }
      // BuilderCallExpression
    }
  } else if (typeof expression !== 'object') {
    switch (typeof expression) {
      case 'string':
        {
          return normalizeAppendHead(normalizeDottedPath(expression), forceTrusted);
        }

      case 'boolean':
      case 'number':
        return {
          expr: {
            type: "Literal"
            /* Literal */
            ,
            value: expression
          },
          kind: "AppendExpr"
          /* AppendExpr */
          ,
          trusted: true
        };

      default:
        throw (0, _util.assertNever)(expression);
    }
  } else {
    throw (0, _util.assertNever)(expression);
  }
}

function normalizeExpression(expression) {
  if (expression === null || expression === undefined) {
    return {
      type: "Literal"
      /* Literal */
      ,
      value: expression
    };
  } else if (Array.isArray(expression)) {
    switch (expression[0]) {
      case 0
      /* Literal */
      :
        return {
          type: "Literal"
          /* Literal */
          ,
          value: expression[1]
        };

      case 5
      /* Get */
      :
        {
          return normalizePath(expression[1], expression[2]);
        }

      case 6
      /* Concat */
      :
        {
          var expr = {
            type: "Concat"
            /* Concat */
            ,
            params: normalizeParams(expression.slice(1))
          };
          return expr;
        }

      case 7
      /* HasBlock */
      :
        return {
          type: "HasBlock"
          /* HasBlock */
          ,
          name: expression[1]
        };

      case 8
      /* HasBlockParams */
      :
        return {
          type: "HasBlockParams"
          /* HasBlockParams */
          ,
          name: expression[1]
        };

      default:
        {
          if (isBuilderCallExpression(expression)) {
            return normalizeCallExpression(expression);
          } else {
            throw new Error("Unexpected array in expression position (wasn't a tuple expression and " + expression[0] + " isn't wrapped in parens, so it isn't a call): " + JSON.stringify(expression));
          }
        }
      // BuilderCallExpression
    }
  } else if (typeof expression !== 'object') {
    switch (typeof expression) {
      case 'string':
        {
          return normalizeDottedPath(expression);
        }

      case 'boolean':
      case 'number':
        return {
          type: "Literal"
          /* Literal */
          ,
          value: expression
        };

      default:
        throw (0, _util.assertNever)(expression);
    }
  } else {
    throw (0, _util.assertNever)(expression);
  }
}

function isBuilderExpression(expr) {
  return Array.isArray(expr);
}

function isLiteral(expr) {
  return Array.isArray(expr) && expr[0] === 'literal';
}

function statementIsExpression(statement) {
  if (!Array.isArray(statement)) {
    return false;
  }

  var name = statement[0];

  if (typeof name === 'number') {
    switch (name) {
      case 0
      /* Literal */
      :
      case 5
      /* Get */
      :
      case 6
      /* Concat */
      :
      case 7
      /* HasBlock */
      :
      case 8
      /* HasBlockParams */
      :
        return true;

      default:
        return false;
    }
  }

  if (name[0] === '(') {
    return true;
  }

  return false;
}

function isBuilderCallExpression(value) {
  return typeof value[0] === 'string' && value[0][0] === '(';
}

function normalizeParams(input) {
  return input.map(normalizeExpression);
}

function normalizeHash(input) {
  if (input === null) return null;
  return mapObject(input, normalizeExpression);
}

function normalizeCallExpression(expr) {
  switch (expr.length) {
    case 1:
      return {
        type: "Call"
        /* Call */
        ,
        head: normalizeCallHead(expr[0]),
        params: null,
        hash: null
      };

    case 2:
      {
        if (Array.isArray(expr[1])) {
          return {
            type: "Call"
            /* Call */
            ,
            head: normalizeCallHead(expr[0]),
            params: normalizeParams(expr[1]),
            hash: null
          };
        } else {
          return {
            type: "Call"
            /* Call */
            ,
            head: normalizeCallHead(expr[0]),
            params: null,
            hash: normalizeHash(expr[1])
          };
        }
      }

    case 3:
      return {
        type: "Call"
        /* Call */
        ,
        head: normalizeCallHead(expr[0]),
        params: normalizeParams(expr[1]),
        hash: normalizeHash(expr[2])
      };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
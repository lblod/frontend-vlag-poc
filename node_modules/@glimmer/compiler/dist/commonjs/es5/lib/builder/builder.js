"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildStatements = buildStatements;
exports.buildNormalizedStatements = buildNormalizedStatements;
exports.buildStatement = buildStatement;
exports.s = s;
exports.c = c;
exports.unicode = unicode;
exports.buildAngleInvocation = buildAngleInvocation;
exports.buildElementParams = buildElementParams;
exports.extractNamespace = extractNamespace;
exports.buildAttributeValue = buildAttributeValue;
exports.buildExpression = buildExpression;
exports.buildCallHead = buildCallHead;
exports.buildGetPath = buildGetPath;
exports.buildVar = buildVar;
exports.expressionContextOp = expressionContextOp;
exports.buildParams = buildParams;
exports.buildConcat = buildConcat;
exports.buildHash = buildHash;
exports.buildBlocks = buildBlocks;
exports.NEWLINE = exports.ProgramSymbols = void 0;

var _util = require("@glimmer/util");

var _builderInterface = require("./builder-interface");

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      return function () {
        if (i >= o.length) return {
          done: true
        };
        return {
          done: false,
          value: o[i++]
        };
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  it = o[Symbol.iterator]();
  return it.next.bind(it);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var ProgramSymbols = /*#__PURE__*/function () {
  function ProgramSymbols() {
    this._freeVariables = [];
    this._symbols = ['this'];
    this.top = this;
  }

  var _proto = ProgramSymbols.prototype;

  _proto.toSymbols = function toSymbols() {
    return this._symbols.slice(1);
  };

  _proto.toUpvars = function toUpvars() {
    return this._freeVariables;
  };

  _proto.freeVar = function freeVar(name) {
    return addString(this._freeVariables, name);
  };

  _proto.block = function block(name) {
    return this.symbol(name);
  };

  _proto.arg = function arg(name) {
    return addString(this._symbols, name);
  };

  _proto.local = function local(name) {
    throw new Error("No local " + name + " was found. Maybe you meant ^" + name + " for upvar, or !" + name + " for keyword?");
  };

  _proto["this"] = function _this() {
    return 0;
  };

  _proto.hasLocal = function hasLocal(_name) {
    return false;
  } // any symbol
  ;

  _proto.symbol = function symbol(name) {
    return addString(this._symbols, name);
  };

  _proto.child = function child(locals) {
    return new LocalSymbols(this, locals);
  };

  return ProgramSymbols;
}();

exports.ProgramSymbols = ProgramSymbols;

var LocalSymbols = /*#__PURE__*/function () {
  function LocalSymbols(parent, locals) {
    this.parent = parent;
    this.locals = (0, _util.dict)();

    for (var _iterator = _createForOfIteratorHelperLoose(locals), _step; !(_step = _iterator()).done;) {
      var local = _step.value;
      this.locals[local] = parent.top.symbol(local);
    }
  }

  var _proto2 = LocalSymbols.prototype;

  _proto2.freeVar = function freeVar(name) {
    return this.parent.freeVar(name);
  };

  _proto2.arg = function arg(name) {
    return this.parent.arg(name);
  };

  _proto2.block = function block(name) {
    return this.parent.block(name);
  };

  _proto2.local = function local(name) {
    if (name in this.locals) {
      return this.locals[name];
    } else {
      return this.parent.local(name);
    }
  };

  _proto2["this"] = function _this() {
    return this.parent["this"]();
  };

  _proto2.hasLocal = function hasLocal(name) {
    if (name in this.locals) {
      return true;
    } else {
      return this.parent.hasLocal(name);
    }
  };

  _proto2.child = function child(locals) {
    return new LocalSymbols(this, locals);
  };

  _createClass(LocalSymbols, [{
    key: "paramSymbols",
    get: function get() {
      return (0, _util.values)(this.locals);
    }
  }, {
    key: "top",
    get: function get() {
      return this.parent.top;
    }
  }]);

  return LocalSymbols;
}();

function addString(array, item) {
  var index = array.indexOf(item);

  if (index === -1) {
    index = array.length;
    array.push(item);
    return index;
  } else {
    return index;
  }
}

function unimpl(message) {
  return new Error("unimplemented " + message);
}

function buildStatements(statements, symbols) {
  var out = [];
  statements.forEach(function (s) {
    return out.push.apply(out, buildStatement((0, _builderInterface.normalizeStatement)(s), symbols));
  });
  return out;
}

function buildNormalizedStatements(statements, symbols) {
  var out = [];
  statements.forEach(function (s) {
    return out.push.apply(out, buildStatement(s, symbols));
  });
  return out;
}

function buildStatement(normalized, symbols) {
  if (symbols === void 0) {
    symbols = new ProgramSymbols();
  }

  switch (normalized.kind) {
    case "AppendPath"
    /* AppendPath */
    :
      {
        return [[normalized.trusted ? 2
        /* TrustingAppend */
        : 1
        /* Append */
        , buildGetPath(normalized.path, symbols)]];
      }

    case "AppendExpr"
    /* AppendExpr */
    :
      {
        return [[normalized.trusted ? 2
        /* TrustingAppend */
        : 1
        /* Append */
        , buildExpression(normalized.expr, normalized.trusted ? 'TrustedAppend' : 'Append', symbols)]];
      }

    case "Call"
    /* Call */
    :
      {
        var path = normalized.head,
            params = normalized.params,
            hash = normalized.hash,
            trusted = normalized.trusted;
        var builtParams = params ? buildParams(params, symbols) : null;
        var builtHash = hash ? buildHash(hash, symbols) : null;
        var builtExpr = buildCallHead(path, trusted ? 3
        /* AmbiguousInvoke */
        : 2
        /* AmbiguousAppendInvoke */
        , symbols);
        return [[trusted ? 2
        /* TrustingAppend */
        : 1
        /* Append */
        , [28
        /* Call */
        , builtExpr, builtParams, builtHash]]];
      }

    case "Literal"
    /* Literal */
    :
      {
        return [[1
        /* Append */
        , normalized.value]];
      }

    case "Comment"
    /* Comment */
    :
      {
        return [[3
        /* Comment */
        , normalized.value]];
      }

    case "Block"
    /* Block */
    :
      {
        var blocks = buildBlocks(normalized.blocks, normalized.blockParams, symbols);

        var _hash = buildHash(normalized.hash, symbols);

        var _params = buildParams(normalized.params, symbols);

        var _path = buildCallHead(normalized.head, 7
        /* ResolveAsComponentHead */
        , symbols);

        return [[6
        /* Block */
        , _path, _params, _hash, blocks]];
      }

    case "Keyword"
    /* Keyword */
    :
      {
        return [buildKeyword(normalized, symbols)];
      }

    case "Element"
    /* Element */
    :
      return buildElement(normalized, symbols);

    case "Modifier"
    /* Modifier */
    :
      throw unimpl('modifier');

    case "DynamicComponent"
    /* DynamicComponent */
    :
      throw unimpl('dynamic component');

    default:
      throw (0, _util.assertNever)(normalized);
  }
}

function s(arr) {
  for (var _len = arguments.length, interpolated = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    interpolated[_key - 1] = arguments[_key];
  }

  var result = arr.reduce(function (result, string, i) {
    return result + ("" + string + (interpolated[i] ? String(interpolated[i]) : ''));
  }, '');
  return [0
  /* Literal */
  , result];
}

function c(arr) {
  for (var _len2 = arguments.length, interpolated = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    interpolated[_key2 - 1] = arguments[_key2];
  }

  var result = arr.reduce(function (result, string, i) {
    return result + ("" + string + (interpolated[i] ? String(interpolated[i]) : ''));
  }, '');
  return [1
  /* Comment */
  , result];
}

function unicode(charCode) {
  return String.fromCharCode(parseInt(charCode, 16));
}

var NEWLINE = '\n';
exports.NEWLINE = NEWLINE;

function buildKeyword(normalized, symbols) {
  var name = normalized.name;
  var params = buildParams(normalized.params, symbols);
  var childSymbols = symbols.child(normalized.blockParams || []);
  var block = buildBlock(normalized.blocks["default"], childSymbols, childSymbols.paramSymbols);
  var inverse = normalized.blocks["else"] ? buildBlock(normalized.blocks["else"], symbols, []) : null;

  switch (name) {
    case 'with':
      return [43
      /* With */
      , params[0], block, inverse];

    case 'if':
      return [41
      /* If */
      , params[0], block, inverse];

    case 'each':
      var keyExpr = normalized.hash ? normalized.hash['key'] : null;
      var key = keyExpr ? buildExpression(keyExpr, 'Strict', symbols) : null;
      return [42
      /* Each */
      , params[0], key, block, inverse];

    default:
      throw new Error('unimplemented keyword');
  }
}

function buildElement(_ref, symbols) {
  var name = _ref.name,
      attrs = _ref.attrs,
      block = _ref.block;
  var out = [hasSplat(attrs) ? [11
  /* OpenElementWithSplat */
  , name] : [10
  /* OpenElement */
  , name]];

  if (attrs) {
    var _buildElementParams = buildElementParams(attrs, symbols),
        params = _buildElementParams.params,
        args = _buildElementParams.args;

    out.push.apply(out, params);
    false && (0, _util.assert)(args === null, "Can't pass args to a simple element");
  }

  out.push([12
  /* FlushElement */
  ]);

  if (Array.isArray(block)) {
    block.forEach(function (s) {
      return out.push.apply(out, buildStatement(s, symbols));
    });
  } else if (block === null) {// do nothing
  } else {
    throw (0, _util.assertNever)(block);
  }

  out.push([13
  /* CloseElement */
  ]);
  return out;
}

function hasSplat(attrs) {
  if (attrs === null) return false;
  return Object.keys(attrs).some(function (a) {
    return attrs[a] === "Splat";
  }
  /* Splat */
  );
}

function buildAngleInvocation(_ref2, symbols) {
  var attrs = _ref2.attrs,
      block = _ref2.block,
      head = _ref2.head;
  var paramList = [];
  var args = null;
  var blockList = [];

  if (attrs) {
    var built = buildElementParams(attrs, symbols);
    paramList = built.params;
    args = built.args;
  }

  if (block) blockList = buildNormalizedStatements(block, symbols);
  return [8
  /* Component */
  , buildExpression(head, 7
  /* ResolveAsComponentHead */
  , symbols), (0, _util.isPresent)(paramList) ? paramList : null, args, [['default'], [[blockList, []]]]];
}

function buildElementParams(attrs, symbols) {
  var params = [];
  var keys = [];
  var values = [];
  Object.keys(attrs).forEach(function (key) {
    var value = attrs[key];

    if (value === "Splat"
    /* Splat */
    ) {
        params.push([17
        /* AttrSplat */
        , symbols.block('&attrs')]);
      } else if (key[0] === '@') {
      keys.push(key);
      values.push(buildExpression(value, 'Strict', symbols));
    } else {
      params.push.apply(params, buildAttributeValue(key, value, // TODO: extract namespace from key
      extractNamespace(key), symbols));
    }
  });
  return {
    params: params,
    args: (0, _util.isPresent)(keys) && (0, _util.isPresent)(values) ? [keys, values] : null
  };
}

function extractNamespace(name) {
  if (name === 'xmlns') {
    return "http://www.w3.org/2000/xmlns/"
    /* XMLNS */
    ;
  }

  var match = /^([^:]*):([^:]*)$/.exec(name);

  if (match === null) {
    return null;
  }

  var namespace = match[1];

  switch (namespace) {
    case 'xlink':
      return "http://www.w3.org/1999/xlink"
      /* XLink */
      ;

    case 'xml':
      return "http://www.w3.org/XML/1998/namespace"
      /* XML */
      ;

    case 'xmlns':
      return "http://www.w3.org/2000/xmlns/"
      /* XMLNS */
      ;
  }

  return null;
}

function buildAttributeValue(name, value, namespace, symbols) {
  switch (value.type) {
    case "Literal"
    /* Literal */
    :
      {
        var val = value.value;

        if (val === false) {
          return [];
        } else if (val === true) {
          return [[14
          /* StaticAttr */
          , name, '', namespace !== null && namespace !== void 0 ? namespace : undefined]];
        } else if (typeof val === 'string') {
          return [[14
          /* StaticAttr */
          , name, val, namespace !== null && namespace !== void 0 ? namespace : undefined]];
        } else {
          throw new Error("Unexpected/unimplemented literal attribute " + JSON.stringify(val));
        }
      }

    default:
      return [[15
      /* DynamicAttr */
      , name, buildExpression(value, 'AttrValue', symbols), namespace !== null && namespace !== void 0 ? namespace : undefined]];
  }
}

function varContext(context, bare) {
  switch (context) {
    case 'Append':
      return bare ? 'AppendBare' : 'AppendInvoke';

    case 'TrustedAppend':
      return bare ? 'TrustedAppendBare' : 'TrustedAppendInvoke';

    case 'AttrValue':
      return bare ? 'AttrValueBare' : 'AttrValueInvoke';

    default:
      return context;
  }
}

function buildExpression(expr, context, symbols) {
  switch (expr.type) {
    case "GetPath"
    /* GetPath */
    :
      {
        return buildGetPath(expr, symbols);
      }

    case "GetVar"
    /* GetVar */
    :
      {
        return buildVar(expr.variable, varContext(context, true), symbols);
      }

    case "Concat"
    /* Concat */
    :
      {
        return [29
        /* Concat */
        , buildConcat(expr.params, symbols)];
      }

    case "Call"
    /* Call */
    :
      {
        var builtParams = buildParams(expr.params, symbols);
        var builtHash = buildHash(expr.hash, symbols);
        var builtExpr = buildCallHead(expr.head, context === 'Strict' ? 'SubExpression' : varContext(context, false), symbols);
        return [28
        /* Call */
        , builtExpr, builtParams, builtHash];
      }

    case "HasBlock"
    /* HasBlock */
    :
      {
        return [48
        /* HasBlock */
        , buildVar({
          kind: _builderInterface.VariableKind.Block,
          name: expr.name,
          mode: 'loose'
        }, 0
        /* Strict */
        , symbols)];
      }

    case "HasBlockParams"
    /* HasBlockParams */
    :
      {
        return [49
        /* HasBlockParams */
        , buildVar({
          kind: _builderInterface.VariableKind.Block,
          name: expr.name,
          mode: 'loose'
        }, 0
        /* Strict */
        , symbols)];
      }

    case "Literal"
    /* Literal */
    :
      {
        if (expr.value === undefined) {
          return [27
          /* Undefined */
          ];
        } else {
          return expr.value;
        }
      }

    default:
      (0, _util.assertNever)(expr);
  }
}

function buildCallHead(callHead, context, symbols) {
  if (callHead.type === "GetVar"
  /* GetVar */
  ) {
      return buildVar(callHead.variable, context, symbols);
    } else {
    return buildGetPath(callHead, symbols);
  }
}

function buildGetPath(head, symbols) {
  return buildVar(head.path.head, 0
  /* Strict */
  , symbols, head.path.tail);
}

function buildVar(head, context, symbols, path) {
  var op = 30
  /* GetSymbol */
  ;
  var sym;

  switch (head.kind) {
    case _builderInterface.VariableKind.Free:
      if (context === 'Strict') {
        op = 31
        /* GetStrictFree */
        ;
      } else if (context === 'AppendBare') {
        op = 34
        /* GetFreeAsComponentOrHelperHeadOrThisFallback */
        ;
      } else if (context === 'AppendInvoke') {
        op = 35
        /* GetFreeAsComponentOrHelperHead */
        ;
      } else if (context === 'TrustedAppendBare') {
        op = 36
        /* GetFreeAsHelperHeadOrThisFallback */
        ;
      } else if (context === 'TrustedAppendInvoke') {
        op = 37
        /* GetFreeAsHelperHead */
        ;
      } else if (context === 'AttrValueBare') {
        op = 36
        /* GetFreeAsHelperHeadOrThisFallback */
        ;
      } else if (context === 'AttrValueInvoke') {
        op = 37
        /* GetFreeAsHelperHead */
        ;
      } else if (context === 'SubExpression') {
        op = 37
        /* GetFreeAsHelperHead */
        ;
      } else {
        op = expressionContextOp(context);
      }

      sym = symbols.freeVar(head.name);
      break;

    default:
      op = 30
      /* GetSymbol */
      ;
      sym = getSymbolForVar(head.kind, symbols, head.name);
  }

  if (path === undefined || path.length === 0) {
    return [op, sym];
  } else {
    return [op, sym, path];
  }
}

function getSymbolForVar(kind, symbols, name) {
  switch (kind) {
    case _builderInterface.VariableKind.Arg:
      return symbols.arg(name);

    case _builderInterface.VariableKind.Block:
      return symbols.block(name);

    case _builderInterface.VariableKind.Local:
      return symbols.local(name);

    case _builderInterface.VariableKind.This:
      return symbols["this"]();

    default:
      return (0, _util.exhausted)(kind);
  }
}

function expressionContextOp(context) {
  switch (context) {
    case 0
    /* Strict */
    :
      return 31
      /* GetStrictFree */
      ;

    case 1
    /* AmbiguousAppend */
    :
      return 34
      /* GetFreeAsComponentOrHelperHeadOrThisFallback */
      ;

    case 2
    /* AmbiguousAppendInvoke */
    :
      return 35
      /* GetFreeAsComponentOrHelperHead */
      ;

    case 3
    /* AmbiguousInvoke */
    :
      return 36
      /* GetFreeAsHelperHeadOrThisFallback */
      ;

    case 5
    /* ResolveAsCallHead */
    :
      return 37
      /* GetFreeAsHelperHead */
      ;

    case 6
    /* ResolveAsModifierHead */
    :
      return 38
      /* GetFreeAsModifierHead */
      ;

    case 7
    /* ResolveAsComponentHead */
    :
      return 39
      /* GetFreeAsComponentHead */
      ;

    default:
      return (0, _util.exhausted)(context);
  }
}

function buildParams(exprs, symbols) {
  if (exprs === null || !(0, _util.isPresent)(exprs)) return null;
  return exprs.map(function (e) {
    return buildExpression(e, 'Strict', symbols);
  });
}

function buildConcat(exprs, symbols) {
  return exprs.map(function (e) {
    return buildExpression(e, 'AttrValue', symbols);
  });
}

function buildHash(exprs, symbols) {
  if (exprs === null) return null;
  var out = [[], []];
  Object.keys(exprs).forEach(function (key) {
    out[0].push(key);
    out[1].push(buildExpression(exprs[key], 'Strict', symbols));
  });
  return out;
}

function buildBlocks(blocks, blockParams, parent) {
  var keys = [];
  var values = [];
  Object.keys(blocks).forEach(function (name) {
    keys.push(name);

    if (name === 'default') {
      var symbols = parent.child(blockParams || []);
      values.push(buildBlock(blocks[name], symbols, symbols.paramSymbols));
    } else {
      values.push(buildBlock(blocks[name], parent, []));
    }
  });
  return [keys, values];
}

function buildBlock(block, symbols, locals) {
  if (locals === void 0) {
    locals = [];
  }

  return [buildNormalizedStatements(block, symbols), locals];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
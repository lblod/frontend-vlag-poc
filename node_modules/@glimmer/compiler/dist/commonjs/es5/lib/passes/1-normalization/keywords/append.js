"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.APPEND_KEYWORDS = void 0;

var _syntax = require("@glimmer/syntax");

var _result = require("../../../shared/result");

var mir = _interopRequireWildcard(require("../../2-encoding/mir"));

var _expressions = require("../visitors/expressions");

var _impl = require("./impl");

var _callToAppend = require("./utils/call-to-append");

var _curry = require("./utils/curry");

var _dynamicVars = require("./utils/dynamic-vars");

var _hasBlock = require("./utils/has-block");

var _ifUnless = require("./utils/if-unless");

var _log = require("./utils/log");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var APPEND_KEYWORDS = (0, _impl.keywords)('Append').kw('has-block', (0, _callToAppend.toAppend)((0, _hasBlock.hasBlockKeyword)('has-block'))).kw('has-block-params', (0, _callToAppend.toAppend)((0, _hasBlock.hasBlockKeyword)('has-block-params'))).kw('-get-dynamic-var', (0, _callToAppend.toAppend)(_dynamicVars.getDynamicVarKeyword)).kw('log', (0, _callToAppend.toAppend)(_log.logKeyword)).kw('if', (0, _callToAppend.toAppend)((0, _ifUnless.ifUnlessInlineKeyword)('if'))).kw('unless', (0, _callToAppend.toAppend)((0, _ifUnless.ifUnlessInlineKeyword)('unless'))).kw('yield', {
  assert: function assert(node) {
    var args = node.args;

    if (args.named.isEmpty()) {
      return (0, _result.Ok)({
        target: _syntax.SourceSpan.synthetic('default').toSlice(),
        positional: args.positional
      });
    } else {
      var target = args.named.get('to');

      if (args.named.size > 1 || target === null) {
        return (0, _result.Err)((0, _syntax.generateSyntaxError)("yield only takes a single named argument: 'to'", args.named.loc));
      }

      if (_syntax.ASTv2.isLiteral(target, 'string')) {
        return (0, _result.Ok)({
          target: target.toSlice(),
          positional: args.positional
        });
      } else {
        return (0, _result.Err)((0, _syntax.generateSyntaxError)("you can only yield to a literal string value", target.loc));
      }
    }
  },
  translate: function translate(_ref, _ref2) {
    var node = _ref.node,
        state = _ref.state;
    var target = _ref2.target,
        positional = _ref2.positional;
    return _expressions.VISIT_EXPRS.Positional(positional, state).mapOk(function (positional) {
      return new mir.Yield({
        loc: node.loc,
        target: target,
        to: state.scope.allocateBlock(target.chars),
        positional: positional
      });
    });
  }
}).kw('debugger', {
  assert: function assert(node) {
    var args = node.args;
    var positional = args.positional;

    if (args.isEmpty()) {
      return (0, _result.Ok)(undefined);
    } else {
      if (positional.isEmpty()) {
        return (0, _result.Err)((0, _syntax.generateSyntaxError)("debugger does not take any named arguments", node.loc));
      } else {
        return (0, _result.Err)((0, _syntax.generateSyntaxError)("debugger does not take any positional arguments", node.loc));
      }
    }
  },
  translate: function translate(_ref3) {
    var node = _ref3.node,
        scope = _ref3.state.scope;
    scope.setHasEval();
    return (0, _result.Ok)(new mir.Debugger({
      loc: node.loc,
      scope: scope
    }));
  }
}).kw('component', {
  assert: (0, _curry.assertCurryKeyword)(0
  /* Component */
  ),
  translate: function translate(_ref4, _ref5) {
    var node = _ref4.node,
        state = _ref4.state;
    var definition = _ref5.definition,
        args = _ref5.args;

    var definitionResult = _expressions.VISIT_EXPRS.visit(definition, state);

    var argsResult = _expressions.VISIT_EXPRS.Args(args, state);

    return _result.Result.all(definitionResult, argsResult).mapOk(function (_ref6) {
      var definition = _ref6[0],
          args = _ref6[1];
      return new mir.InvokeComponent({
        loc: node.loc,
        definition: definition,
        args: args,
        blocks: null
      });
    });
  }
}).kw('helper', {
  assert: (0, _curry.assertCurryKeyword)(1
  /* Helper */
  ),
  translate: function translate(_ref7, _ref8) {
    var node = _ref7.node,
        state = _ref7.state;
    var definition = _ref8.definition,
        args = _ref8.args;

    var definitionResult = _expressions.VISIT_EXPRS.visit(definition, state);

    var argsResult = _expressions.VISIT_EXPRS.Args(args, state);

    return _result.Result.all(definitionResult, argsResult).mapOk(function (_ref9) {
      var definition = _ref9[0],
          args = _ref9[1];
      var text = new mir.CallExpression({
        callee: definition,
        args: args,
        loc: node.loc
      });
      return new mir.AppendTextNode({
        loc: node.loc,
        text: text
      });
    });
  }
});
exports.APPEND_KEYWORDS = APPEND_KEYWORDS;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
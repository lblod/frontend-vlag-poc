"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasDynamicFeatures = hasDynamicFeatures;
exports.ClassifiedElement = void 0;

var _syntax = require("@glimmer/syntax");

var _list = require("../../../../shared/list");

var _result = require("../../../../shared/result");

var _utils = require("../../../../utils");

var mir = _interopRequireWildcard(require("../../../2-encoding/mir"));

var _keywords = require("../../keywords");

var _isNode = require("../../utils/is-node");

var _expressions = require("../expressions");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      return function () {
        if (i >= o.length) return {
          done: true
        };
        return {
          done: false,
          value: o[i++]
        };
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  it = o[Symbol.iterator]();
  return it.next.bind(it);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

var ClassifiedElement = /*#__PURE__*/function () {
  function ClassifiedElement(element, delegate, state) {
    this.element = element;
    this.state = state;
    this.delegate = delegate;
  }

  var _proto = ClassifiedElement.prototype;

  _proto.toStatement = function toStatement() {
    var _this = this;

    return this.prepare().andThen(function (prepared) {
      return _this.delegate.toStatement(_this, prepared);
    });
  };

  _proto.attr = function attr(_attr) {
    var _this2 = this;

    var name = _attr.name;
    var rawValue = _attr.value;
    var namespace = (0, _utils.getAttrNamespace)(name.chars) || undefined;

    if (_syntax.ASTv2.isLiteral(rawValue, 'string')) {
      return (0, _result.Ok)(new mir.StaticAttr({
        loc: _attr.loc,
        name: name,
        value: rawValue.toSlice(),
        namespace: namespace,
        kind: {
          component: this.delegate.dynamicFeatures
        }
      }));
    }

    return _expressions.VISIT_EXPRS.visit((0, _expressions.convertPathToCallIfKeyword)(rawValue), this.state).mapOk(function (value) {
      var isTrusting = _attr.trusting;
      return new mir.DynamicAttr({
        loc: _attr.loc,
        name: name,
        value: value,
        namespace: namespace,
        kind: {
          trusting: isTrusting,
          component: _this2.delegate.dynamicFeatures
        }
      });
    });
  };

  _proto.modifier = function modifier(_modifier) {
    if ((0, _isNode.isHelperInvocation)(_modifier)) {
      (0, _isNode.assertIsValidModifier)(_modifier);
    }

    var translated = _keywords.MODIFIER_KEYWORDS.translate(_modifier, this.state);

    if (translated !== null) {
      return translated;
    }

    var head = _expressions.VISIT_EXPRS.visit(_modifier.callee, this.state);

    var args = _expressions.VISIT_EXPRS.Args(_modifier.args, this.state);

    return _result.Result.all(head, args).mapOk(function (_ref) {
      var head = _ref[0],
          args = _ref[1];
      return new mir.Modifier({
        loc: _modifier.loc,
        callee: head,
        args: args
      });
    });
  };

  _proto.attrs = function attrs() {
    var attrs = new _result.ResultArray();
    var args = new _result.ResultArray(); // Unlike most attributes, the `type` attribute can change how
    // subsequent attributes are interpreted by the browser. To address
    // this, in simple cases, we special case the `type` attribute to be set
    // last. For elements with splattributes, where attribute order affects
    // precedence, this re-ordering happens at runtime instead.
    // See https://github.com/glimmerjs/glimmer-vm/pull/726

    var typeAttr = null;
    var simple = this.element.attrs.filter(function (attr) {
      return attr.type === 'SplatAttr';
    }).length === 0;

    for (var _iterator = _createForOfIteratorHelperLoose(this.element.attrs), _step; !(_step = _iterator()).done;) {
      var attr = _step.value;

      if (attr.type === 'SplatAttr') {
        attrs.add((0, _result.Ok)(new mir.SplatAttr({
          loc: attr.loc,
          symbol: this.state.scope.allocateBlock('attrs')
        })));
      } else if (attr.name.chars === 'type' && simple) {
        typeAttr = attr;
      } else {
        attrs.add(this.attr(attr));
      }
    }

    for (var _iterator2 = _createForOfIteratorHelperLoose(this.element.componentArgs), _step2; !(_step2 = _iterator2()).done;) {
      var arg = _step2.value;
      args.add(this.delegate.arg(arg, this));
    }

    if (typeAttr) {
      attrs.add(this.attr(typeAttr));
    }

    return _result.Result.all(args.toArray(), attrs.toArray()).mapOk(function (_ref2) {
      var args = _ref2[0],
          attrs = _ref2[1];
      return {
        attrs: attrs,
        args: new mir.NamedArguments({
          loc: (0, _syntax.maybeLoc)(args, _syntax.SourceSpan.NON_EXISTENT),
          entries: (0, _list.OptionalList)(args)
        })
      };
    });
  };

  _proto.prepare = function prepare() {
    var _this3 = this;

    var attrs = this.attrs();
    var modifiers = new _result.ResultArray(this.element.modifiers.map(function (m) {
      return _this3.modifier(m);
    })).toArray();
    return _result.Result.all(attrs, modifiers).mapOk(function (_ref3) {
      var result = _ref3[0],
          modifiers = _ref3[1];
      var attrs = result.attrs,
          args = result.args;
      var elementParams = [].concat(attrs, modifiers);
      var params = new mir.ElementParameters({
        loc: (0, _syntax.maybeLoc)(elementParams, _syntax.SourceSpan.NON_EXISTENT),
        body: (0, _list.OptionalList)(elementParams)
      });
      return {
        args: args,
        params: params
      };
    });
  };

  return ClassifiedElement;
}();

exports.ClassifiedElement = ClassifiedElement;

function hasDynamicFeatures(_ref4) {
  var attrs = _ref4.attrs,
      modifiers = _ref4.modifiers; // ElementModifier needs the special ComponentOperations

  if (modifiers.length > 0) {
    return true;
  } // Splattributes need the special ComponentOperations to merge into


  return !!attrs.filter(function (attr) {
    return attr.type === 'SplatAttr';
  })[0];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
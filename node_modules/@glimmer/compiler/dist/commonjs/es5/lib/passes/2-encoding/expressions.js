"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EXPR = exports.ExpressionEncoder = void 0;

var _util = require("@glimmer/util");

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      return function () {
        if (i >= o.length) return {
          done: true
        };
        return {
          done: false,
          value: o[i++]
        };
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  it = o[Symbol.iterator]();
  return it.next.bind(it);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

var ExpressionEncoder = /*#__PURE__*/function () {
  function ExpressionEncoder() {}

  var _proto = ExpressionEncoder.prototype;

  _proto.expr = function expr(_expr) {
    switch (_expr.type) {
      case 'Missing':
        return undefined;

      case 'Literal':
        return this.Literal(_expr);

      case 'CallExpression':
        return this.CallExpression(_expr);

      case 'DeprecatedCallExpression':
        return this.DeprecatedCallExpression(_expr);

      case 'PathExpression':
        return this.PathExpression(_expr);

      case 'Arg':
        return [30
        /* GetSymbol */
        , _expr.symbol];

      case 'Local':
        return this.Local(_expr);

      case 'This':
        return [30
        /* GetSymbol */
        , 0];

      case 'Free':
        return [_expr.resolution.resolution(), _expr.symbol];

      case 'HasBlock':
        return this.HasBlock(_expr);

      case 'HasBlockParams':
        return this.HasBlockParams(_expr);

      case 'Curry':
        return this.Curry(_expr);

      case 'Not':
        return this.Not(_expr);

      case 'IfInline':
        return this.IfInline(_expr);

      case 'InterpolateExpression':
        return this.InterpolateExpression(_expr);

      case 'GetDynamicVar':
        return this.GetDynamicVar(_expr);

      case 'Log':
        return this.Log(_expr);
    }
  };

  _proto.Literal = function Literal(_ref) {
    var value = _ref.value;

    if (value === undefined) {
      return [27
      /* Undefined */
      ];
    } else {
      return value;
    }
  };

  _proto.Missing = function Missing() {
    return undefined;
  };

  _proto.HasBlock = function HasBlock(_ref2) {
    var symbol = _ref2.symbol;
    return [48
    /* HasBlock */
    , [30
    /* GetSymbol */
    , symbol]];
  };

  _proto.HasBlockParams = function HasBlockParams(_ref3) {
    var symbol = _ref3.symbol;
    return [49
    /* HasBlockParams */
    , [30
    /* GetSymbol */
    , symbol]];
  };

  _proto.Curry = function Curry(_ref4) {
    var definition = _ref4.definition,
        curriedType = _ref4.curriedType,
        args = _ref4.args;
    return [50
    /* Curry */
    , EXPR.expr(definition), curriedType, EXPR.Positional(args.positional), EXPR.NamedArguments(args.named)];
  };

  _proto.Local = function Local(_ref5) {
    var isTemplateLocal = _ref5.isTemplateLocal,
        symbol = _ref5.symbol;
    return [isTemplateLocal ? 32
    /* GetTemplateSymbol */
    : 30
    /* GetSymbol */
    , symbol];
  };

  _proto.GetWithResolver = function GetWithResolver(_ref6) {
    var symbol = _ref6.symbol;
    return [34
    /* GetFreeAsComponentOrHelperHeadOrThisFallback */
    , symbol];
  };

  _proto.PathExpression = function PathExpression(_ref7) {
    var head = _ref7.head,
        tail = _ref7.tail;
    var getOp = EXPR.expr(head);
    return [].concat(getOp, [EXPR.Tail(tail)]);
  };

  _proto.InterpolateExpression = function InterpolateExpression(_ref8) {
    var parts = _ref8.parts;
    return [29
    /* Concat */
    , parts.map(function (e) {
      return EXPR.expr(e);
    }).toArray()];
  };

  _proto.CallExpression = function CallExpression(_ref9) {
    var callee = _ref9.callee,
        args = _ref9.args;
    return [28
    /* Call */
    , EXPR.expr(callee)].concat(EXPR.Args(args));
  };

  _proto.DeprecatedCallExpression = function DeprecatedCallExpression(_ref10) {
    var arg = _ref10.arg,
        callee = _ref10.callee;
    return [99
    /* GetFreeAsDeprecatedHelperHeadOrThisFallback */
    , callee.symbol, [arg.chars]];
  };

  _proto.Tail = function Tail(_ref11) {
    var members = _ref11.members;
    return (0, _util.mapPresent)(members, function (member) {
      return member.chars;
    });
  };

  _proto.Args = function Args(_ref12) {
    var positional = _ref12.positional,
        named = _ref12.named;
    return [this.Positional(positional), this.NamedArguments(named)];
  };

  _proto.Positional = function Positional(_ref13) {
    var list = _ref13.list;
    return list.map(function (l) {
      return EXPR.expr(l);
    }).toPresentArray();
  };

  _proto.NamedArgument = function NamedArgument(_ref14) {
    var key = _ref14.key,
        value = _ref14.value;
    return [key.chars, EXPR.expr(value)];
  };

  _proto.NamedArguments = function NamedArguments(_ref15) {
    var pairs = _ref15.entries;
    var list = pairs.toArray();

    if ((0, _util.isPresent)(list)) {
      var names = [];
      var values = [];

      for (var _iterator = _createForOfIteratorHelperLoose(list), _step; !(_step = _iterator()).done;) {
        var pair = _step.value;

        var _EXPR$NamedArgument = EXPR.NamedArgument(pair),
            name = _EXPR$NamedArgument[0],
            value = _EXPR$NamedArgument[1];

        names.push(name);
        values.push(value);
      }

      (0, _util.assertPresent)(names);
      (0, _util.assertPresent)(values);
      return [names, values];
    } else {
      return null;
    }
  };

  _proto.Not = function Not(_ref16) {
    var value = _ref16.value;
    return [51
    /* Not */
    , EXPR.expr(value)];
  };

  _proto.IfInline = function IfInline(_ref17) {
    var condition = _ref17.condition,
        truthy = _ref17.truthy,
        falsy = _ref17.falsy;
    var expr = [52
    /* IfInline */
    , EXPR.expr(condition), EXPR.expr(truthy)];

    if (falsy) {
      expr.push(EXPR.expr(falsy));
    }

    return expr;
  };

  _proto.GetDynamicVar = function GetDynamicVar(_ref18) {
    var name = _ref18.name;
    return [53
    /* GetDynamicVar */
    , EXPR.expr(name)];
  };

  _proto.Log = function Log(_ref19) {
    var positional = _ref19.positional;
    return [54
    /* Log */
    , this.Positional(positional)];
  };

  return ExpressionEncoder;
}();

exports.ExpressionEncoder = ExpressionEncoder;
var EXPR = new ExpressionEncoder();
exports.EXPR = EXPR;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
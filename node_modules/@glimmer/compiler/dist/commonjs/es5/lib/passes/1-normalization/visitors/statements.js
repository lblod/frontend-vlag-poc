"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VISIT_STMTS = void 0;

var _syntax = require("@glimmer/syntax");

var _list = require("../../../shared/list");

var _result = require("../../../shared/result");

var mir = _interopRequireWildcard(require("../../2-encoding/mir"));

var _keywords = require("../keywords");

var _append = require("../keywords/append");

var _classified = require("./element/classified");

var _component = require("./element/component");

var _simpleElement = require("./element/simple-element");

var _expressions = require("./expressions");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var NormalizationStatements = /*#__PURE__*/function () {
  function NormalizationStatements() {}

  var _proto = NormalizationStatements.prototype;

  _proto.visitList = function visitList(nodes, state) {
    return new _result.ResultArray(nodes.map(function (e) {
      return VISIT_STMTS.visit(e, state);
    })).toOptionalList().mapOk(function (list) {
      return list.filter(function (s) {
        return s !== null;
      });
    });
  };

  _proto.visit = function visit(node, state) {
    switch (node.type) {
      case 'GlimmerComment':
        return (0, _result.Ok)(null);

      case 'AppendContent':
        return this.AppendContent(node, state);

      case 'HtmlText':
        return (0, _result.Ok)(this.TextNode(node));

      case 'HtmlComment':
        return (0, _result.Ok)(this.HtmlComment(node));

      case 'InvokeBlock':
        return this.InvokeBlock(node, state);

      case 'InvokeComponent':
        return this.Component(node, state);

      case 'SimpleElement':
        return this.SimpleElement(node, state);
    }
  };

  _proto.InvokeBlock = function InvokeBlock(node, state) {
    var _this = this;

    var translated = _keywords.BLOCK_KEYWORDS.translate(node, state);

    if (translated !== null) {
      return translated;
    }

    var head = _expressions.VISIT_EXPRS.visit(node.callee, state);

    var args = _expressions.VISIT_EXPRS.Args(node.args, state);

    return _result.Result.all(head, args).andThen(function (_ref) {
      var head = _ref[0],
          args = _ref[1];
      return _this.NamedBlocks(node.blocks, state).mapOk(function (blocks) {
        return new mir.InvokeBlock({
          loc: node.loc,
          head: head,
          args: args,
          blocks: blocks
        });
      });
    });
  };

  _proto.NamedBlocks = function NamedBlocks(blocks, state) {
    var _this2 = this;

    var list = new _result.ResultArray(blocks.blocks.map(function (b) {
      return _this2.NamedBlock(b, state);
    }));
    return list.toArray().mapOk(function (list) {
      return new mir.NamedBlocks({
        loc: blocks.loc,
        blocks: (0, _list.OptionalList)(list)
      });
    });
  };

  _proto.NamedBlock = function NamedBlock(named, state) {
    var body = state.visitBlock(named.block);
    return body.mapOk(function (body) {
      return new mir.NamedBlock({
        loc: named.loc,
        name: named.name,
        body: body.toArray(),
        scope: named.block.scope
      });
    });
  };

  _proto.SimpleElement = function SimpleElement(element, state) {
    return new _classified.ClassifiedElement(element, new _simpleElement.ClassifiedSimpleElement(element.tag, element, (0, _classified.hasDynamicFeatures)(element)), state).toStatement();
  };

  _proto.Component = function Component(component, state) {
    return _expressions.VISIT_EXPRS.visit(component.callee, state).andThen(function (callee) {
      return new _classified.ClassifiedElement(component, new _component.ClassifiedComponent(callee, component), state).toStatement();
    });
  };

  _proto.AppendContent = function AppendContent(append, state) {
    var translated = _append.APPEND_KEYWORDS.translate(append, state);

    if (translated !== null) {
      return translated;
    }

    var value = _expressions.VISIT_EXPRS.visit(append.value, state);

    return value.mapOk(function (value) {
      if (append.trusting) {
        return new mir.AppendTrustedHTML({
          loc: append.loc,
          html: value
        });
      } else {
        return new mir.AppendTextNode({
          loc: append.loc,
          text: value
        });
      }
    });
  };

  _proto.TextNode = function TextNode(text) {
    return new mir.AppendTextNode({
      loc: text.loc,
      text: new _syntax.ASTv2.LiteralExpression({
        loc: text.loc,
        value: text.chars
      })
    });
  };

  _proto.HtmlComment = function HtmlComment(comment) {
    return new mir.AppendComment({
      loc: comment.loc,
      value: comment.text
    });
  };

  return NormalizationStatements;
}();

var VISIT_STMTS = new NormalizationStatements();
exports.VISIT_STMTS = VISIT_STMTS;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
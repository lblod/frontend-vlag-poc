/**
 * Registers
 *
 * For the most part, these follows MIPS naming conventions, however the
 * register numbers are different.
 */
// $0 or $pc (program counter): pointer into `program` for the next insturction; -1 means exit
export const $pc = 0; // $1 or $ra (return address): pointer into `program` for the return

export const $ra = 1; // $2 or $fp (frame pointer): pointer into the `evalStack` for the base of the stack

export const $fp = 2; // $3 or $sp (stack pointer): pointer into the `evalStack` for the top of the stack

export const $sp = 3; // $4-$5 or $s0-$s1 (saved): callee saved general-purpose registers

export const $s0 = 4;
export const $s1 = 5; // $6-$7 or $t0-$t1 (temporaries): caller saved general-purpose registers

export const $t0 = 6;
export const $t1 = 7; // $8 or $v0 (return value)

export const $v0 = 8;
export function isLowLevelRegister(register) {
  return register <= $sp;
}
export var SavedRegister;

(function (SavedRegister) {
  SavedRegister[SavedRegister["s0"] = 4] = "s0";
  SavedRegister[SavedRegister["s1"] = 5] = "s1";
})(SavedRegister || (SavedRegister = {}));

export var TemporaryRegister;

(function (TemporaryRegister) {
  TemporaryRegister[TemporaryRegister["t0"] = 6] = "t0";
  TemporaryRegister[TemporaryRegister["t1"] = 7] = "t1";
})(TemporaryRegister || (TemporaryRegister = {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3ZtL2xpYi9yZWdpc3RlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQU9BO0FBQ0EsT0FBTyxNQUFNLEdBQUcsR0FBdUIsQ0FBaEMsQyxDQUNQOztBQUNBLE9BQU8sTUFBTSxHQUFHLEdBQXVCLENBQWhDLEMsQ0FDUDs7QUFDQSxPQUFPLE1BQU0sR0FBRyxHQUF1QixDQUFoQyxDLENBQ1A7O0FBQ0EsT0FBTyxNQUFNLEdBQUcsR0FBdUIsQ0FBaEMsQyxDQUNQOztBQUNBLE9BQU8sTUFBTSxHQUFHLEdBQXFCLENBQTlCO0FBQ1AsT0FBTyxNQUFNLEdBQUcsR0FBcUIsQ0FBOUIsQyxDQUNQOztBQUNBLE9BQU8sTUFBTSxHQUFHLEdBQXlCLENBQWxDO0FBQ1AsT0FBTyxNQUFNLEdBQUcsR0FBeUIsQ0FBbEMsQyxDQUNQOztBQUNBLE9BQU8sTUFBTSxHQUFHLEdBQUcsQ0FBWjtBQVlQLE9BQU0sU0FBVSxrQkFBVixDQUNKLFFBREksRUFDZ0M7QUFFcEMsU0FBUSxRQUFtQixJQUFJLEdBQS9CO0FBQ0Q7QUFFRCxPQUFBLElBQVksYUFBWjs7QUFBQSxDQUFBLFVBQVksYUFBWixFQUF5QjtBQUN2QixFQUFBLGFBQUEsQ0FBQSxhQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUEsSUFBQTtBQUNBLEVBQUEsYUFBQSxDQUFBLGFBQUEsQ0FBQSxJQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxJQUFBO0FBQ0QsQ0FIRCxFQUFZLGFBQWEsS0FBYixhQUFhLEdBQUEsRUFBQSxDQUF6Qjs7QUFLQSxPQUFBLElBQVksaUJBQVo7O0FBQUEsQ0FBQSxVQUFZLGlCQUFaLEVBQTZCO0FBQzNCLEVBQUEsaUJBQUEsQ0FBQSxpQkFBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLElBQUE7QUFDQSxFQUFBLGlCQUFBLENBQUEsaUJBQUEsQ0FBQSxJQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxJQUFBO0FBQ0QsQ0FIRCxFQUFZLGlCQUFpQixLQUFqQixpQkFBaUIsR0FBQSxFQUFBLENBQTdCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZWdpc3RlcnNcbiAqXG4gKiBGb3IgdGhlIG1vc3QgcGFydCwgdGhlc2UgZm9sbG93cyBNSVBTIG5hbWluZyBjb252ZW50aW9ucywgaG93ZXZlciB0aGVcbiAqIHJlZ2lzdGVyIG51bWJlcnMgYXJlIGRpZmZlcmVudC5cbiAqL1xuXG4vLyAkMCBvciAkcGMgKHByb2dyYW0gY291bnRlcik6IHBvaW50ZXIgaW50byBgcHJvZ3JhbWAgZm9yIHRoZSBuZXh0IGluc3R1cmN0aW9uOyAtMSBtZWFucyBleGl0XG5leHBvcnQgY29uc3QgJHBjOiBNYWNoaW5lUmVnaXN0ZXIucGMgPSAwO1xuLy8gJDEgb3IgJHJhIChyZXR1cm4gYWRkcmVzcyk6IHBvaW50ZXIgaW50byBgcHJvZ3JhbWAgZm9yIHRoZSByZXR1cm5cbmV4cG9ydCBjb25zdCAkcmE6IE1hY2hpbmVSZWdpc3Rlci5yYSA9IDE7XG4vLyAkMiBvciAkZnAgKGZyYW1lIHBvaW50ZXIpOiBwb2ludGVyIGludG8gdGhlIGBldmFsU3RhY2tgIGZvciB0aGUgYmFzZSBvZiB0aGUgc3RhY2tcbmV4cG9ydCBjb25zdCAkZnA6IE1hY2hpbmVSZWdpc3Rlci5mcCA9IDI7XG4vLyAkMyBvciAkc3AgKHN0YWNrIHBvaW50ZXIpOiBwb2ludGVyIGludG8gdGhlIGBldmFsU3RhY2tgIGZvciB0aGUgdG9wIG9mIHRoZSBzdGFja1xuZXhwb3J0IGNvbnN0ICRzcDogTWFjaGluZVJlZ2lzdGVyLnNwID0gMztcbi8vICQ0LSQ1IG9yICRzMC0kczEgKHNhdmVkKTogY2FsbGVlIHNhdmVkIGdlbmVyYWwtcHVycG9zZSByZWdpc3RlcnNcbmV4cG9ydCBjb25zdCAkczA6IFNhdmVkUmVnaXN0ZXIuczAgPSA0O1xuZXhwb3J0IGNvbnN0ICRzMTogU2F2ZWRSZWdpc3Rlci5zMSA9IDU7XG4vLyAkNi0kNyBvciAkdDAtJHQxICh0ZW1wb3Jhcmllcyk6IGNhbGxlciBzYXZlZCBnZW5lcmFsLXB1cnBvc2UgcmVnaXN0ZXJzXG5leHBvcnQgY29uc3QgJHQwOiBUZW1wb3JhcnlSZWdpc3Rlci50MCA9IDY7XG5leHBvcnQgY29uc3QgJHQxOiBUZW1wb3JhcnlSZWdpc3Rlci50MSA9IDc7XG4vLyAkOCBvciAkdjAgKHJldHVybiB2YWx1ZSlcbmV4cG9ydCBjb25zdCAkdjAgPSA4O1xuXG5leHBvcnQgY29uc3QgZW51bSBNYWNoaW5lUmVnaXN0ZXIge1xuICAvLyBUaGVzZSBtdXN0IGJlIGluIHN5bmMgd2l0aCB0aGUgY29tcHV0ZWQgdmFsdWVzXG4gIC8vIGFib3ZlLCBidXQgVHlwZVNjcmlwdCBkb2Vzbid0IGxpa2UgaXRcblxuICAncGMnID0gMCxcbiAgJ3JhJyA9IDEsXG4gICdmcCcgPSAyLFxuICAnc3AnID0gMyxcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTG93TGV2ZWxSZWdpc3RlcihcbiAgcmVnaXN0ZXI6IFJlZ2lzdGVyIHwgTWFjaGluZVJlZ2lzdGVyXG4pOiByZWdpc3RlciBpcyBSZWdpc3RlciAmIE1hY2hpbmVSZWdpc3RlciB7XG4gIHJldHVybiAocmVnaXN0ZXIgYXMgbnVtYmVyKSA8PSAkc3A7XG59XG5cbmV4cG9ydCBlbnVtIFNhdmVkUmVnaXN0ZXIge1xuICAnczAnID0gNCxcbiAgJ3MxJyA9IDUsXG59XG5cbmV4cG9ydCBlbnVtIFRlbXBvcmFyeVJlZ2lzdGVyIHtcbiAgJ3QwJyA9IDYsXG4gICd0MScgPSA3LFxufVxuXG5leHBvcnQgdHlwZSBSZWdpc3RlciA9IE1hY2hpbmVSZWdpc3RlciB8IFNhdmVkUmVnaXN0ZXIgfCBUZW1wb3JhcnlSZWdpc3RlciB8IHR5cGVvZiAkdjA7XG5leHBvcnQgdHlwZSBTeXNjYWxsUmVnaXN0ZXIgPSBTYXZlZFJlZ2lzdGVyIHwgVGVtcG9yYXJ5UmVnaXN0ZXIgfCB0eXBlb2YgJHYwO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==